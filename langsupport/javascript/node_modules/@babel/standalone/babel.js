(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === "object" && typeof module === "object")
    module.exports = factory();
  else if (typeof define === "function" && define.amd) define([], factory);
  else if (typeof exports === "object") exports["Babel"] = factory();
  else root["Babel"] = factory();
})(typeof self !== "undefined" ? self : this, function() {
  return /******/ (function(modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/ var installedModules = {}; // The require function
    /******/
    /******/ /******/ function __webpack_require__(moduleId) {
      /******/
      /******/ // Check if module is in cache
      /******/ if (installedModules[moduleId]) {
        /******/ return installedModules[moduleId].exports;
        /******/
      } // Create a new module (and put it into the cache)
      /******/ /******/ var module = (installedModules[moduleId] = {
        /******/ i: moduleId,
        /******/ l: false,
        /******/ exports: {}
        /******/
      }); // Execute the module function
      /******/
      /******/ /******/ modules[moduleId].call(
        module.exports,
        module,
        module.exports,
        __webpack_require__
      ); // Flag the module as loaded
      /******/
      /******/ /******/ module.l = true; // Return the exports of the module
      /******/
      /******/ /******/ return module.exports;
      /******/
    } // expose the modules object (__webpack_modules__)
    /******/
    /******/
    /******/ /******/ __webpack_require__.m = modules; // expose the module cache
    /******/
    /******/ /******/ __webpack_require__.c = installedModules; // define getter function for harmony exports
    /******/
    /******/ /******/ __webpack_require__.d = function(exports, name, getter) {
      /******/ if (!__webpack_require__.o(exports, name)) {
        /******/ Object.defineProperty(exports, name, {
          /******/ configurable: false,
          /******/ enumerable: true,
          /******/ get: getter
          /******/
        });
        /******/
      }
      /******/
    }; // getDefaultExport function for compatibility with non-harmony modules
    /******/
    /******/ /******/ __webpack_require__.n = function(module) {
      /******/ var getter =
        module && module.__esModule
          ? /******/ function getDefault() {
              return module["default"];
            }
          : /******/ function getModuleExports() {
              return module;
            };
      /******/ __webpack_require__.d(getter, "a", getter);
      /******/ return getter;
      /******/
    }; // Object.prototype.hasOwnProperty.call
    /******/
    /******/ /******/ __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    }; // __webpack_public_path__
    /******/
    /******/ /******/ __webpack_require__.p = ""; // Load entry module and return exports
    /******/
    /******/ /******/ return __webpack_require__((__webpack_require__.s = 248));
    /******/
  })(
    /************************************************************************/
    /******/ [
      /* 0 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(module, global) {
          var __WEBPACK_AMD_DEFINE_RESULT__;

          (function(root) {
            var freeExports = typeof exports == "object" && exports;
            var freeModule =
              typeof module == "object" &&
              module &&
              module.exports == freeExports &&
              module;
            var freeGlobal = typeof global == "object" && global;

            if (
              freeGlobal.global === freeGlobal ||
              freeGlobal.window === freeGlobal
            ) {
              root = freeGlobal;
            }

            var ERRORS = {
              rangeOrder:
                "A range\u2019s `stop` value must be greater than or equal " +
                "to the `start` value.",
              codePointRange:
                "Invalid code point value. Code points range from " +
                "U+000000 to U+10FFFF."
            };
            var HIGH_SURROGATE_MIN = 0xd800;
            var HIGH_SURROGATE_MAX = 0xdbff;
            var LOW_SURROGATE_MIN = 0xdc00;
            var LOW_SURROGATE_MAX = 0xdfff;
            var regexNull = /\\x00([^0123456789]|$)/g;
            var object = {};
            var hasOwnProperty = object.hasOwnProperty;

            var extend = function extend(destination, source) {
              var key;

              for (key in source) {
                if (hasOwnProperty.call(source, key)) {
                  destination[key] = source[key];
                }
              }

              return destination;
            };

            var forEach = function forEach(array, callback) {
              var index = -1;
              var length = array.length;

              while (++index < length) {
                callback(array[index], index);
              }
            };

            var toString = object.toString;

            var isArray = function isArray(value) {
              return toString.call(value) == "[object Array]";
            };

            var isNumber = function isNumber(value) {
              return (
                typeof value == "number" ||
                toString.call(value) == "[object Number]"
              );
            };

            var zeroes = "0000";

            var pad = function pad(number, totalCharacters) {
              var string = String(number);
              return string.length < totalCharacters
                ? (zeroes + string).slice(-totalCharacters)
                : string;
            };

            var hex = function hex(number) {
              return Number(number)
                .toString(16)
                .toUpperCase();
            };

            var slice = [].slice;

            var dataFromCodePoints = function dataFromCodePoints(codePoints) {
              var index = -1;
              var length = codePoints.length;
              var max = length - 1;
              var result = [];
              var isStart = true;
              var tmp;
              var previous = 0;

              while (++index < length) {
                tmp = codePoints[index];

                if (isStart) {
                  result.push(tmp);
                  previous = tmp;
                  isStart = false;
                } else {
                  if (tmp == previous + 1) {
                    if (index != max) {
                      previous = tmp;
                      continue;
                    } else {
                      isStart = true;
                      result.push(tmp + 1);
                    }
                  } else {
                    result.push(previous + 1, tmp);
                    previous = tmp;
                  }
                }
              }

              if (!isStart) {
                result.push(tmp + 1);
              }

              return result;
            };

            var dataRemove = function dataRemove(data, codePoint) {
              var index = 0;
              var start;
              var end;
              var length = data.length;

              while (index < length) {
                start = data[index];
                end = data[index + 1];

                if (codePoint >= start && codePoint < end) {
                  if (codePoint == start) {
                    if (end == start + 1) {
                      data.splice(index, 2);
                      return data;
                    } else {
                      data[index] = codePoint + 1;
                      return data;
                    }
                  } else if (codePoint == end - 1) {
                    data[index + 1] = codePoint;
                    return data;
                  } else {
                    data.splice(index, 2, start, codePoint, codePoint + 1, end);
                    return data;
                  }
                }

                index += 2;
              }

              return data;
            };

            var dataRemoveRange = function dataRemoveRange(
              data,
              rangeStart,
              rangeEnd
            ) {
              if (rangeEnd < rangeStart) {
                throw Error(ERRORS.rangeOrder);
              }

              var index = 0;
              var start;
              var end;

              while (index < data.length) {
                start = data[index];
                end = data[index + 1] - 1;

                if (start > rangeEnd) {
                  return data;
                }

                if (rangeStart <= start && rangeEnd >= end) {
                  data.splice(index, 2);
                  continue;
                }

                if (rangeStart >= start && rangeEnd < end) {
                  if (rangeStart == start) {
                    data[index] = rangeEnd + 1;
                    data[index + 1] = end + 1;
                    return data;
                  }

                  data.splice(
                    index,
                    2,
                    start,
                    rangeStart,
                    rangeEnd + 1,
                    end + 1
                  );
                  return data;
                }

                if (rangeStart >= start && rangeStart <= end) {
                  data[index + 1] = rangeStart;
                } else if (rangeEnd >= start && rangeEnd <= end) {
                  data[index] = rangeEnd + 1;
                  return data;
                }

                index += 2;
              }

              return data;
            };

            var dataAdd = function dataAdd(data, codePoint) {
              var index = 0;
              var start;
              var end;
              var lastIndex = null;
              var length = data.length;

              if (codePoint < 0x0 || codePoint > 0x10ffff) {
                throw RangeError(ERRORS.codePointRange);
              }

              while (index < length) {
                start = data[index];
                end = data[index + 1];

                if (codePoint >= start && codePoint < end) {
                  return data;
                }

                if (codePoint == start - 1) {
                  data[index] = codePoint;
                  return data;
                }

                if (start > codePoint) {
                  data.splice(
                    lastIndex != null ? lastIndex + 2 : 0,
                    0,
                    codePoint,
                    codePoint + 1
                  );
                  return data;
                }

                if (codePoint == end) {
                  if (codePoint + 1 == data[index + 2]) {
                    data.splice(index, 4, start, data[index + 3]);
                    return data;
                  }

                  data[index + 1] = codePoint + 1;
                  return data;
                }

                lastIndex = index;
                index += 2;
              }

              data.push(codePoint, codePoint + 1);
              return data;
            };

            var dataAddData = function dataAddData(dataA, dataB) {
              var index = 0;
              var start;
              var end;
              var data = dataA.slice();
              var length = dataB.length;

              while (index < length) {
                start = dataB[index];
                end = dataB[index + 1] - 1;

                if (start == end) {
                  data = dataAdd(data, start);
                } else {
                  data = dataAddRange(data, start, end);
                }

                index += 2;
              }

              return data;
            };

            var dataRemoveData = function dataRemoveData(dataA, dataB) {
              var index = 0;
              var start;
              var end;
              var data = dataA.slice();
              var length = dataB.length;

              while (index < length) {
                start = dataB[index];
                end = dataB[index + 1] - 1;

                if (start == end) {
                  data = dataRemove(data, start);
                } else {
                  data = dataRemoveRange(data, start, end);
                }

                index += 2;
              }

              return data;
            };

            var dataAddRange = function dataAddRange(
              data,
              rangeStart,
              rangeEnd
            ) {
              if (rangeEnd < rangeStart) {
                throw Error(ERRORS.rangeOrder);
              }

              if (
                rangeStart < 0x0 ||
                rangeStart > 0x10ffff ||
                rangeEnd < 0x0 ||
                rangeEnd > 0x10ffff
              ) {
                throw RangeError(ERRORS.codePointRange);
              }

              var index = 0;
              var start;
              var end;
              var added = false;
              var length = data.length;

              while (index < length) {
                start = data[index];
                end = data[index + 1];

                if (added) {
                  if (start == rangeEnd + 1) {
                    data.splice(index - 1, 2);
                    return data;
                  }

                  if (start > rangeEnd) {
                    return data;
                  }

                  if (start >= rangeStart && start <= rangeEnd) {
                    if (end > rangeStart && end - 1 <= rangeEnd) {
                      data.splice(index, 2);
                      index -= 2;
                    } else {
                      data.splice(index - 1, 2);
                      index -= 2;
                    }
                  }
                } else if (start == rangeEnd + 1) {
                  data[index] = rangeStart;
                  return data;
                } else if (start > rangeEnd) {
                  data.splice(index, 0, rangeStart, rangeEnd + 1);
                  return data;
                } else if (
                  rangeStart >= start &&
                  rangeStart < end &&
                  rangeEnd + 1 <= end
                ) {
                  return data;
                } else if (
                  (rangeStart >= start && rangeStart < end) ||
                  end == rangeStart
                ) {
                  data[index + 1] = rangeEnd + 1;
                  added = true;
                } else if (rangeStart <= start && rangeEnd + 1 >= end) {
                  data[index] = rangeStart;
                  data[index + 1] = rangeEnd + 1;
                  added = true;
                }

                index += 2;
              }

              if (!added) {
                data.push(rangeStart, rangeEnd + 1);
              }

              return data;
            };

            var dataContains = function dataContains(data, codePoint) {
              var index = 0;
              var length = data.length;
              var start = data[index];
              var end = data[length - 1];

              if (length >= 2) {
                if (codePoint < start || codePoint > end) {
                  return false;
                }
              }

              while (index < length) {
                start = data[index];
                end = data[index + 1];

                if (codePoint >= start && codePoint < end) {
                  return true;
                }

                index += 2;
              }

              return false;
            };

            var dataIntersection = function dataIntersection(data, codePoints) {
              var index = 0;
              var length = codePoints.length;
              var codePoint;
              var result = [];

              while (index < length) {
                codePoint = codePoints[index];

                if (dataContains(data, codePoint)) {
                  result.push(codePoint);
                }

                ++index;
              }

              return dataFromCodePoints(result);
            };

            var dataIsEmpty = function dataIsEmpty(data) {
              return !data.length;
            };

            var dataIsSingleton = function dataIsSingleton(data) {
              return data.length == 2 && data[0] + 1 == data[1];
            };

            var dataToArray = function dataToArray(data) {
              var index = 0;
              var start;
              var end;
              var result = [];
              var length = data.length;

              while (index < length) {
                start = data[index];
                end = data[index + 1];

                while (start < end) {
                  result.push(start);
                  ++start;
                }

                index += 2;
              }

              return result;
            };

            var floor = Math.floor;

            var highSurrogate = function highSurrogate(codePoint) {
              return parseInt(
                floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN,
                10
              );
            };

            var lowSurrogate = function lowSurrogate(codePoint) {
              return parseInt(
                (codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN,
                10
              );
            };

            var stringFromCharCode = String.fromCharCode;

            var codePointToString = function codePointToString(codePoint) {
              var string;

              if (codePoint == 0x09) {
                string = "\\t";
              } else if (codePoint == 0x0a) {
                string = "\\n";
              } else if (codePoint == 0x0c) {
                string = "\\f";
              } else if (codePoint == 0x0d) {
                string = "\\r";
              } else if (codePoint == 0x5c) {
                string = "\\\\";
              } else if (
                codePoint == 0x24 ||
                (codePoint >= 0x28 && codePoint <= 0x2b) ||
                (codePoint >= 0x2d && codePoint <= 0x2f) ||
                codePoint == 0x3f ||
                (codePoint >= 0x5b && codePoint <= 0x5e) ||
                (codePoint >= 0x7b && codePoint <= 0x7d)
              ) {
                string = "\\" + stringFromCharCode(codePoint);
              } else if (codePoint >= 0x20 && codePoint <= 0x7e) {
                string = stringFromCharCode(codePoint);
              } else if (codePoint <= 0xff) {
                string = "\\x" + pad(hex(codePoint), 2);
              } else {
                string = "\\u" + pad(hex(codePoint), 4);
              }

              return string;
            };

            var codePointToStringUnicode = function codePointToStringUnicode(
              codePoint
            ) {
              if (codePoint <= 0xffff) {
                return codePointToString(codePoint);
              }

              return "\\u{" + codePoint.toString(16).toUpperCase() + "}";
            };

            var symbolToCodePoint = function symbolToCodePoint(symbol) {
              var length = symbol.length;
              var first = symbol.charCodeAt(0);
              var second;

              if (
                first >= HIGH_SURROGATE_MIN &&
                first <= HIGH_SURROGATE_MAX &&
                length > 1
              ) {
                second = symbol.charCodeAt(1);
                return (
                  (first - HIGH_SURROGATE_MIN) * 0x400 +
                  second -
                  LOW_SURROGATE_MIN +
                  0x10000
                );
              }

              return first;
            };

            var createBMPCharacterClasses = function createBMPCharacterClasses(
              data
            ) {
              var result = "";
              var index = 0;
              var start;
              var end;
              var length = data.length;

              if (dataIsSingleton(data)) {
                return codePointToString(data[0]);
              }

              while (index < length) {
                start = data[index];
                end = data[index + 1] - 1;

                if (start == end) {
                  result += codePointToString(start);
                } else if (start + 1 == end) {
                  result += codePointToString(start) + codePointToString(end);
                } else {
                  result +=
                    codePointToString(start) + "-" + codePointToString(end);
                }

                index += 2;
              }

              return "[" + result + "]";
            };

            var createUnicodeCharacterClasses = function createUnicodeCharacterClasses(
              data
            ) {
              var result = "";
              var index = 0;
              var start;
              var end;
              var length = data.length;

              if (dataIsSingleton(data)) {
                return codePointToStringUnicode(data[0]);
              }

              while (index < length) {
                start = data[index];
                end = data[index + 1] - 1;

                if (start == end) {
                  result += codePointToStringUnicode(start);
                } else if (start + 1 == end) {
                  result +=
                    codePointToStringUnicode(start) +
                    codePointToStringUnicode(end);
                } else {
                  result +=
                    codePointToStringUnicode(start) +
                    "-" +
                    codePointToStringUnicode(end);
                }

                index += 2;
              }

              return "[" + result + "]";
            };

            var splitAtBMP = function splitAtBMP(data) {
              var loneHighSurrogates = [];
              var loneLowSurrogates = [];
              var bmp = [];
              var astral = [];
              var index = 0;
              var start;
              var end;
              var length = data.length;

              while (index < length) {
                start = data[index];
                end = data[index + 1] - 1;

                if (start < HIGH_SURROGATE_MIN) {
                  if (end < HIGH_SURROGATE_MIN) {
                    bmp.push(start, end + 1);
                  }

                  if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
                    bmp.push(start, HIGH_SURROGATE_MIN);
                    loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
                  }

                  if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
                    bmp.push(start, HIGH_SURROGATE_MIN);
                    loneHighSurrogates.push(
                      HIGH_SURROGATE_MIN,
                      HIGH_SURROGATE_MAX + 1
                    );
                    loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
                  }

                  if (end > LOW_SURROGATE_MAX) {
                    bmp.push(start, HIGH_SURROGATE_MIN);
                    loneHighSurrogates.push(
                      HIGH_SURROGATE_MIN,
                      HIGH_SURROGATE_MAX + 1
                    );
                    loneLowSurrogates.push(
                      LOW_SURROGATE_MIN,
                      LOW_SURROGATE_MAX + 1
                    );

                    if (end <= 0xffff) {
                      bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
                    } else {
                      bmp.push(LOW_SURROGATE_MAX + 1, 0xffff + 1);
                      astral.push(0xffff + 1, end + 1);
                    }
                  }
                } else if (
                  start >= HIGH_SURROGATE_MIN &&
                  start <= HIGH_SURROGATE_MAX
                ) {
                  if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
                    loneHighSurrogates.push(start, end + 1);
                  }

                  if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
                    loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
                    loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
                  }

                  if (end > LOW_SURROGATE_MAX) {
                    loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
                    loneLowSurrogates.push(
                      LOW_SURROGATE_MIN,
                      LOW_SURROGATE_MAX + 1
                    );

                    if (end <= 0xffff) {
                      bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
                    } else {
                      bmp.push(LOW_SURROGATE_MAX + 1, 0xffff + 1);
                      astral.push(0xffff + 1, end + 1);
                    }
                  }
                } else if (
                  start >= LOW_SURROGATE_MIN &&
                  start <= LOW_SURROGATE_MAX
                ) {
                  if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
                    loneLowSurrogates.push(start, end + 1);
                  }

                  if (end > LOW_SURROGATE_MAX) {
                    loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);

                    if (end <= 0xffff) {
                      bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
                    } else {
                      bmp.push(LOW_SURROGATE_MAX + 1, 0xffff + 1);
                      astral.push(0xffff + 1, end + 1);
                    }
                  }
                } else if (start > LOW_SURROGATE_MAX && start <= 0xffff) {
                  if (end <= 0xffff) {
                    bmp.push(start, end + 1);
                  } else {
                    bmp.push(start, 0xffff + 1);
                    astral.push(0xffff + 1, end + 1);
                  }
                } else {
                  astral.push(start, end + 1);
                }

                index += 2;
              }

              return {
                loneHighSurrogates: loneHighSurrogates,
                loneLowSurrogates: loneLowSurrogates,
                bmp: bmp,
                astral: astral
              };
            };

            var optimizeSurrogateMappings = function optimizeSurrogateMappings(
              surrogateMappings
            ) {
              var result = [];
              var tmpLow = [];
              var addLow = false;
              var mapping;
              var nextMapping;
              var highSurrogates;
              var lowSurrogates;
              var nextHighSurrogates;
              var nextLowSurrogates;
              var index = -1;
              var length = surrogateMappings.length;

              while (++index < length) {
                mapping = surrogateMappings[index];
                nextMapping = surrogateMappings[index + 1];

                if (!nextMapping) {
                  result.push(mapping);
                  continue;
                }

                highSurrogates = mapping[0];
                lowSurrogates = mapping[1];
                nextHighSurrogates = nextMapping[0];
                nextLowSurrogates = nextMapping[1];
                tmpLow = lowSurrogates;

                while (
                  nextHighSurrogates &&
                  highSurrogates[0] == nextHighSurrogates[0] &&
                  highSurrogates[1] == nextHighSurrogates[1]
                ) {
                  if (dataIsSingleton(nextLowSurrogates)) {
                    tmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);
                  } else {
                    tmpLow = dataAddRange(
                      tmpLow,
                      nextLowSurrogates[0],
                      nextLowSurrogates[1] - 1
                    );
                  }

                  ++index;
                  mapping = surrogateMappings[index];
                  highSurrogates = mapping[0];
                  lowSurrogates = mapping[1];
                  nextMapping = surrogateMappings[index + 1];
                  nextHighSurrogates = nextMapping && nextMapping[0];
                  nextLowSurrogates = nextMapping && nextMapping[1];
                  addLow = true;
                }

                result.push([highSurrogates, addLow ? tmpLow : lowSurrogates]);
                addLow = false;
              }

              return optimizeByLowSurrogates(result);
            };

            var optimizeByLowSurrogates = function optimizeByLowSurrogates(
              surrogateMappings
            ) {
              if (surrogateMappings.length == 1) {
                return surrogateMappings;
              }

              var index = -1;
              var innerIndex = -1;

              while (++index < surrogateMappings.length) {
                var mapping = surrogateMappings[index];
                var lowSurrogates = mapping[1];
                var lowSurrogateStart = lowSurrogates[0];
                var lowSurrogateEnd = lowSurrogates[1];
                innerIndex = index;

                while (++innerIndex < surrogateMappings.length) {
                  var otherMapping = surrogateMappings[innerIndex];
                  var otherLowSurrogates = otherMapping[1];
                  var otherLowSurrogateStart = otherLowSurrogates[0];
                  var otherLowSurrogateEnd = otherLowSurrogates[1];

                  if (
                    lowSurrogateStart == otherLowSurrogateStart &&
                    lowSurrogateEnd == otherLowSurrogateEnd
                  ) {
                    if (dataIsSingleton(otherMapping[0])) {
                      mapping[0] = dataAdd(mapping[0], otherMapping[0][0]);
                    } else {
                      mapping[0] = dataAddRange(
                        mapping[0],
                        otherMapping[0][0],
                        otherMapping[0][1] - 1
                      );
                    }

                    surrogateMappings.splice(innerIndex, 1);
                    --innerIndex;
                  }
                }
              }

              return surrogateMappings;
            };

            var surrogateSet = function surrogateSet(data) {
              if (!data.length) {
                return [];
              }

              var index = 0;
              var start;
              var end;
              var startHigh;
              var startLow;
              var endHigh;
              var endLow;
              var surrogateMappings = [];
              var length = data.length;

              while (index < length) {
                start = data[index];
                end = data[index + 1] - 1;
                startHigh = highSurrogate(start);
                startLow = lowSurrogate(start);
                endHigh = highSurrogate(end);
                endLow = lowSurrogate(end);
                var startsWithLowestLowSurrogate =
                  startLow == LOW_SURROGATE_MIN;
                var endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;
                var complete = false;

                if (
                  startHigh == endHigh ||
                  (startsWithLowestLowSurrogate && endsWithHighestLowSurrogate)
                ) {
                  surrogateMappings.push([
                    [startHigh, endHigh + 1],
                    [startLow, endLow + 1]
                  ]);
                  complete = true;
                } else {
                  surrogateMappings.push([
                    [startHigh, startHigh + 1],
                    [startLow, LOW_SURROGATE_MAX + 1]
                  ]);
                }

                if (!complete && startHigh + 1 < endHigh) {
                  if (endsWithHighestLowSurrogate) {
                    surrogateMappings.push([
                      [startHigh + 1, endHigh + 1],
                      [LOW_SURROGATE_MIN, endLow + 1]
                    ]);
                    complete = true;
                  } else {
                    surrogateMappings.push([
                      [startHigh + 1, endHigh],
                      [LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]
                    ]);
                  }
                }

                if (!complete) {
                  surrogateMappings.push([
                    [endHigh, endHigh + 1],
                    [LOW_SURROGATE_MIN, endLow + 1]
                  ]);
                }

                index += 2;
              }

              return optimizeSurrogateMappings(surrogateMappings);
            };

            var createSurrogateCharacterClasses = function createSurrogateCharacterClasses(
              surrogateMappings
            ) {
              var result = [];
              forEach(surrogateMappings, function(surrogateMapping) {
                var highSurrogates = surrogateMapping[0];
                var lowSurrogates = surrogateMapping[1];
                result.push(
                  createBMPCharacterClasses(highSurrogates) +
                    createBMPCharacterClasses(lowSurrogates)
                );
              });
              return result.join("|");
            };

            var createCharacterClassesFromData = function createCharacterClassesFromData(
              data,
              bmpOnly,
              hasUnicodeFlag
            ) {
              if (hasUnicodeFlag) {
                return createUnicodeCharacterClasses(data);
              }

              var result = [];
              var parts = splitAtBMP(data);
              var loneHighSurrogates = parts.loneHighSurrogates;
              var loneLowSurrogates = parts.loneLowSurrogates;
              var bmp = parts.bmp;
              var astral = parts.astral;
              var hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);
              var hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);
              var surrogateMappings = surrogateSet(astral);

              if (bmpOnly) {
                bmp = dataAddData(bmp, loneHighSurrogates);
                hasLoneHighSurrogates = false;
                bmp = dataAddData(bmp, loneLowSurrogates);
                hasLoneLowSurrogates = false;
              }

              if (!dataIsEmpty(bmp)) {
                result.push(createBMPCharacterClasses(bmp));
              }

              if (surrogateMappings.length) {
                result.push(createSurrogateCharacterClasses(surrogateMappings));
              }

              if (hasLoneHighSurrogates) {
                result.push(
                  createBMPCharacterClasses(loneHighSurrogates) +
                    "(?![\\uDC00-\\uDFFF])"
                );
              }

              if (hasLoneLowSurrogates) {
                result.push(
                  "(?:[^\\uD800-\\uDBFF]|^)" +
                    createBMPCharacterClasses(loneLowSurrogates)
                );
              }

              return result.join("|");
            };

            var regenerate = function regenerate(value) {
              if (arguments.length > 1) {
                value = slice.call(arguments);
              }

              if (this instanceof regenerate) {
                this.data = [];
                return value ? this.add(value) : this;
              }

              return new regenerate().add(value);
            };

            regenerate.version = "1.3.3";
            var proto = regenerate.prototype;
            extend(proto, {
              add: function add(value) {
                var $this = this;

                if (value == null) {
                  return $this;
                }

                if (value instanceof regenerate) {
                  $this.data = dataAddData($this.data, value.data);
                  return $this;
                }

                if (arguments.length > 1) {
                  value = slice.call(arguments);
                }

                if (isArray(value)) {
                  forEach(value, function(item) {
                    $this.add(item);
                  });
                  return $this;
                }

                $this.data = dataAdd(
                  $this.data,
                  isNumber(value) ? value : symbolToCodePoint(value)
                );
                return $this;
              },
              remove: function remove(value) {
                var $this = this;

                if (value == null) {
                  return $this;
                }

                if (value instanceof regenerate) {
                  $this.data = dataRemoveData($this.data, value.data);
                  return $this;
                }

                if (arguments.length > 1) {
                  value = slice.call(arguments);
                }

                if (isArray(value)) {
                  forEach(value, function(item) {
                    $this.remove(item);
                  });
                  return $this;
                }

                $this.data = dataRemove(
                  $this.data,
                  isNumber(value) ? value : symbolToCodePoint(value)
                );
                return $this;
              },
              addRange: function addRange(start, end) {
                var $this = this;
                $this.data = dataAddRange(
                  $this.data,
                  isNumber(start) ? start : symbolToCodePoint(start),
                  isNumber(end) ? end : symbolToCodePoint(end)
                );
                return $this;
              },
              removeRange: function removeRange(start, end) {
                var $this = this;
                var startCodePoint = isNumber(start)
                  ? start
                  : symbolToCodePoint(start);
                var endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
                $this.data = dataRemoveRange(
                  $this.data,
                  startCodePoint,
                  endCodePoint
                );
                return $this;
              },
              intersection: function intersection(argument) {
                var $this = this;
                var array =
                  argument instanceof regenerate
                    ? dataToArray(argument.data)
                    : argument;
                $this.data = dataIntersection($this.data, array);
                return $this;
              },
              contains: function contains(codePoint) {
                return dataContains(
                  this.data,
                  isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint)
                );
              },
              clone: function clone() {
                var set = new regenerate();
                set.data = this.data.slice(0);
                return set;
              },
              toString: function toString(options) {
                var result = createCharacterClassesFromData(
                  this.data,
                  options ? options.bmpOnly : false,
                  options ? options.hasUnicodeFlag : false
                );

                if (!result) {
                  return "[]";
                }

                return result.replace(regexNull, "\\0$1");
              },
              toRegExp: function toRegExp(flags) {
                var pattern = this.toString(
                  flags && flags.indexOf("u") != -1
                    ? {
                        hasUnicodeFlag: true
                      }
                    : null
                );
                return RegExp(pattern, flags || "");
              },
              valueOf: function valueOf() {
                return dataToArray(this.data);
              }
            });
            proto.toArray = proto.valueOf;

            if (true) {
              !((__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                return regenerate;
              }.call(exports, __webpack_require__, exports, module)),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else if (freeExports && !freeExports.nodeType) {
              if (freeModule) {
                freeModule.exports = regenerate;
              } else {
                freeExports.regenerate = regenerate;
              }
            } else {
              root.regenerate = regenerate;
            }
          })(this);
          /* WEBPACK VAR INJECTION */
        }.call(
          exports,
          __webpack_require__(26)(module),
          __webpack_require__(18)
        ));

        /***/
      },
      /* 1 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.declare = declare;

        function declare(builder) {
          return function(api, options, dirname) {
            if (!api.assertVersion) {
              api = Object.assign(copyApiObject(api), {
                assertVersion: function assertVersion(range) {
                  throwVersionError(range, api.version);
                }
              });
            }

            return builder(api, options || {}, dirname);
          };
        }

        function copyApiObject(api) {
          var proto = null;

          if (typeof api.version === "string" && /^7\./.test(api.version)) {
            proto = Object.getPrototypeOf(api);

            if (
              proto &&
              (!has(proto, "version") ||
                !has(proto, "transform") ||
                !has(proto, "template") ||
                !has(proto, "types"))
            ) {
              proto = null;
            }
          }

          return Object.assign({}, proto, api);
        }

        function has(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }

        function throwVersionError(range, version) {
          if (typeof range === "number") {
            if (!Number.isInteger(range)) {
              throw new Error("Expected string or integer value.");
            }

            range = "^" + range + ".0.0-0";
          }

          if (typeof range !== "string") {
            throw new Error("Expected string or integer value.");
          }

          var limit = Error.stackTraceLimit;

          if (typeof limit === "number" && limit < 25) {
            Error.stackTraceLimit = 25;
          }

          var err;

          if (version.slice(0, 2) === "7.") {
            err = new Error(
              'Requires Babel "^7.0.0-beta.41", but was loaded with "' +
                version +
                '". ' +
                "You'll need to update your @babel/core version."
            );
          } else {
            err = new Error(
              'Requires Babel "' +
                range +
                '", but was loaded with "' +
                version +
                '". ' +
                "If you are sure you have a compatible version of @babel/core, " +
                "it is likely that something in your build process is loading the " +
                "wrong version. Inspect the stack trace of this error to look for " +
                'the first entry that doesn\'t mention "@babel/core" or "babel-core" ' +
                "to see what is calling Babel."
            );
          }

          if (typeof limit === "number") {
            Error.stackTraceLimit = limit;
          }

          throw Object.assign(err, {
            code: "BABEL_VERSION_UNSUPPORTED",
            version: version,
            range: range
          });
        }

        /***/
      },
      /* 2 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Plugin = Plugin;
        Object.defineProperty(exports, "File", {
          enumerable: true,
          get: function get() {
            return _file.default;
          }
        });
        Object.defineProperty(exports, "buildExternalHelpers", {
          enumerable: true,
          get: function get() {
            return _buildExternalHelpers.default;
          }
        });
        Object.defineProperty(exports, "resolvePlugin", {
          enumerable: true,
          get: function get() {
            return _files.resolvePlugin;
          }
        });
        Object.defineProperty(exports, "resolvePreset", {
          enumerable: true,
          get: function get() {
            return _files.resolvePreset;
          }
        });
        Object.defineProperty(exports, "version", {
          enumerable: true,
          get: function get() {
            return _package.version;
          }
        });
        Object.defineProperty(exports, "getEnv", {
          enumerable: true,
          get: function get() {
            return _environment.getEnv;
          }
        });
        Object.defineProperty(exports, "traverse", {
          enumerable: true,
          get: function get() {
            return _traverse().default;
          }
        });
        Object.defineProperty(exports, "template", {
          enumerable: true,
          get: function get() {
            return _template().default;
          }
        });
        Object.defineProperty(exports, "loadPartialConfig", {
          enumerable: true,
          get: function get() {
            return _config.loadPartialConfig;
          }
        });
        Object.defineProperty(exports, "loadOptions", {
          enumerable: true,
          get: function get() {
            return _config.loadOptions;
          }
        });
        Object.defineProperty(exports, "OptionManager", {
          enumerable: true,
          get: function get() {
            return _config.OptionManager;
          }
        });
        Object.defineProperty(exports, "createConfigItem", {
          enumerable: true,
          get: function get() {
            return _item.createConfigItem;
          }
        });
        Object.defineProperty(exports, "transform", {
          enumerable: true,
          get: function get() {
            return _transform.default;
          }
        });
        Object.defineProperty(exports, "transformSync", {
          enumerable: true,
          get: function get() {
            return _transformSync.default;
          }
        });
        Object.defineProperty(exports, "transformFile", {
          enumerable: true,
          get: function get() {
            return _transformFile.default;
          }
        });
        Object.defineProperty(exports, "transformFileSync", {
          enumerable: true,
          get: function get() {
            return _transformFileSync.default;
          }
        });
        Object.defineProperty(exports, "transformFromAst", {
          enumerable: true,
          get: function get() {
            return _transformAst.default;
          }
        });
        Object.defineProperty(exports, "transformFromAstSync", {
          enumerable: true,
          get: function get() {
            return _transformAstSync.default;
          }
        });
        Object.defineProperty(exports, "parse", {
          enumerable: true,
          get: function get() {
            return _parse.default;
          }
        });
        exports.types = exports.DEFAULT_EXTENSIONS = void 0;

        var _file = _interopRequireDefault(__webpack_require__(100));

        var _buildExternalHelpers = _interopRequireDefault(
          __webpack_require__(447)
        );

        var _files = __webpack_require__(85);

        var _package = __webpack_require__(448);

        var _environment = __webpack_require__(157);

        function _types() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          _types = function _types() {
            return data;
          };

          return data;
        }

        Object.defineProperty(exports, "types", {
          enumerable: true,
          get: function get() {
            return _types();
          }
        });

        function _traverse() {
          var data = _interopRequireDefault(__webpack_require__(8));

          _traverse = function _traverse() {
            return data;
          };

          return data;
        }

        function _template() {
          var data = _interopRequireDefault(__webpack_require__(21));

          _template = function _template() {
            return data;
          };

          return data;
        }

        var _config = __webpack_require__(22);

        var _item = __webpack_require__(51);

        var _transform = _interopRequireDefault(__webpack_require__(489));

        var _transformSync = _interopRequireDefault(__webpack_require__(175));

        var _transformFile = _interopRequireDefault(__webpack_require__(527));

        var _transformFileSync = _interopRequireDefault(
          __webpack_require__(528)
        );

        var _transformAst = _interopRequireDefault(__webpack_require__(529));

        var _transformAstSync = _interopRequireDefault(
          __webpack_require__(176)
        );

        var _parse = _interopRequireDefault(__webpack_require__(530));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function Plugin(alias) {
          throw new Error(
            "The (" +
              alias +
              ") Babel 5 plugin is being run with an unsupported Babel version."
          );
        }

        var DEFAULT_EXTENSIONS = Object.freeze([
          ".js",
          ".jsx",
          ".es6",
          ".es",
          ".mjs"
        ]);
        exports.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS;

        /***/
      },
      /* 3 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var _exportNames = {
          react: true,
          assertNode: true,
          createTypeAnnotationBasedOnTypeof: true,
          createUnionTypeAnnotation: true,
          cloneNode: true,
          clone: true,
          cloneDeep: true,
          cloneWithoutLoc: true,
          addComment: true,
          addComments: true,
          inheritInnerComments: true,
          inheritLeadingComments: true,
          inheritsComments: true,
          inheritTrailingComments: true,
          removeComments: true,
          ensureBlock: true,
          toBindingIdentifierName: true,
          toBlock: true,
          toComputedKey: true,
          toExpression: true,
          toIdentifier: true,
          toKeyAlias: true,
          toSequenceExpression: true,
          toStatement: true,
          valueToNode: true,
          appendToMemberExpression: true,
          inherits: true,
          prependToMemberExpression: true,
          removeProperties: true,
          removePropertiesDeep: true,
          removeTypeDuplicates: true,
          getBindingIdentifiers: true,
          getOuterBindingIdentifiers: true,
          traverse: true,
          traverseFast: true,
          shallowEqual: true,
          is: true,
          isBinding: true,
          isBlockScoped: true,
          isImmutable: true,
          isLet: true,
          isNode: true,
          isNodesEquivalent: true,
          isReferenced: true,
          isScope: true,
          isSpecifierDefault: true,
          isType: true,
          isValidES3Identifier: true,
          isValidIdentifier: true,
          isVar: true,
          matchesPattern: true,
          validate: true,
          buildMatchMemberExpression: true
        };
        Object.defineProperty(exports, "assertNode", {
          enumerable: true,
          get: function get() {
            return _assertNode.default;
          }
        });
        Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
          enumerable: true,
          get: function get() {
            return _createTypeAnnotationBasedOnTypeof.default;
          }
        });
        Object.defineProperty(exports, "createUnionTypeAnnotation", {
          enumerable: true,
          get: function get() {
            return _createUnionTypeAnnotation.default;
          }
        });
        Object.defineProperty(exports, "cloneNode", {
          enumerable: true,
          get: function get() {
            return _cloneNode.default;
          }
        });
        Object.defineProperty(exports, "clone", {
          enumerable: true,
          get: function get() {
            return _clone.default;
          }
        });
        Object.defineProperty(exports, "cloneDeep", {
          enumerable: true,
          get: function get() {
            return _cloneDeep.default;
          }
        });
        Object.defineProperty(exports, "cloneWithoutLoc", {
          enumerable: true,
          get: function get() {
            return _cloneWithoutLoc.default;
          }
        });
        Object.defineProperty(exports, "addComment", {
          enumerable: true,
          get: function get() {
            return _addComment.default;
          }
        });
        Object.defineProperty(exports, "addComments", {
          enumerable: true,
          get: function get() {
            return _addComments.default;
          }
        });
        Object.defineProperty(exports, "inheritInnerComments", {
          enumerable: true,
          get: function get() {
            return _inheritInnerComments.default;
          }
        });
        Object.defineProperty(exports, "inheritLeadingComments", {
          enumerable: true,
          get: function get() {
            return _inheritLeadingComments.default;
          }
        });
        Object.defineProperty(exports, "inheritsComments", {
          enumerable: true,
          get: function get() {
            return _inheritsComments.default;
          }
        });
        Object.defineProperty(exports, "inheritTrailingComments", {
          enumerable: true,
          get: function get() {
            return _inheritTrailingComments.default;
          }
        });
        Object.defineProperty(exports, "removeComments", {
          enumerable: true,
          get: function get() {
            return _removeComments.default;
          }
        });
        Object.defineProperty(exports, "ensureBlock", {
          enumerable: true,
          get: function get() {
            return _ensureBlock.default;
          }
        });
        Object.defineProperty(exports, "toBindingIdentifierName", {
          enumerable: true,
          get: function get() {
            return _toBindingIdentifierName.default;
          }
        });
        Object.defineProperty(exports, "toBlock", {
          enumerable: true,
          get: function get() {
            return _toBlock.default;
          }
        });
        Object.defineProperty(exports, "toComputedKey", {
          enumerable: true,
          get: function get() {
            return _toComputedKey.default;
          }
        });
        Object.defineProperty(exports, "toExpression", {
          enumerable: true,
          get: function get() {
            return _toExpression.default;
          }
        });
        Object.defineProperty(exports, "toIdentifier", {
          enumerable: true,
          get: function get() {
            return _toIdentifier.default;
          }
        });
        Object.defineProperty(exports, "toKeyAlias", {
          enumerable: true,
          get: function get() {
            return _toKeyAlias.default;
          }
        });
        Object.defineProperty(exports, "toSequenceExpression", {
          enumerable: true,
          get: function get() {
            return _toSequenceExpression.default;
          }
        });
        Object.defineProperty(exports, "toStatement", {
          enumerable: true,
          get: function get() {
            return _toStatement.default;
          }
        });
        Object.defineProperty(exports, "valueToNode", {
          enumerable: true,
          get: function get() {
            return _valueToNode.default;
          }
        });
        Object.defineProperty(exports, "appendToMemberExpression", {
          enumerable: true,
          get: function get() {
            return _appendToMemberExpression.default;
          }
        });
        Object.defineProperty(exports, "inherits", {
          enumerable: true,
          get: function get() {
            return _inherits.default;
          }
        });
        Object.defineProperty(exports, "prependToMemberExpression", {
          enumerable: true,
          get: function get() {
            return _prependToMemberExpression.default;
          }
        });
        Object.defineProperty(exports, "removeProperties", {
          enumerable: true,
          get: function get() {
            return _removeProperties.default;
          }
        });
        Object.defineProperty(exports, "removePropertiesDeep", {
          enumerable: true,
          get: function get() {
            return _removePropertiesDeep.default;
          }
        });
        Object.defineProperty(exports, "removeTypeDuplicates", {
          enumerable: true,
          get: function get() {
            return _removeTypeDuplicates.default;
          }
        });
        Object.defineProperty(exports, "getBindingIdentifiers", {
          enumerable: true,
          get: function get() {
            return _getBindingIdentifiers.default;
          }
        });
        Object.defineProperty(exports, "getOuterBindingIdentifiers", {
          enumerable: true,
          get: function get() {
            return _getOuterBindingIdentifiers.default;
          }
        });
        Object.defineProperty(exports, "traverse", {
          enumerable: true,
          get: function get() {
            return _traverse.default;
          }
        });
        Object.defineProperty(exports, "traverseFast", {
          enumerable: true,
          get: function get() {
            return _traverseFast.default;
          }
        });
        Object.defineProperty(exports, "shallowEqual", {
          enumerable: true,
          get: function get() {
            return _shallowEqual.default;
          }
        });
        Object.defineProperty(exports, "is", {
          enumerable: true,
          get: function get() {
            return _is.default;
          }
        });
        Object.defineProperty(exports, "isBinding", {
          enumerable: true,
          get: function get() {
            return _isBinding.default;
          }
        });
        Object.defineProperty(exports, "isBlockScoped", {
          enumerable: true,
          get: function get() {
            return _isBlockScoped.default;
          }
        });
        Object.defineProperty(exports, "isImmutable", {
          enumerable: true,
          get: function get() {
            return _isImmutable.default;
          }
        });
        Object.defineProperty(exports, "isLet", {
          enumerable: true,
          get: function get() {
            return _isLet.default;
          }
        });
        Object.defineProperty(exports, "isNode", {
          enumerable: true,
          get: function get() {
            return _isNode.default;
          }
        });
        Object.defineProperty(exports, "isNodesEquivalent", {
          enumerable: true,
          get: function get() {
            return _isNodesEquivalent.default;
          }
        });
        Object.defineProperty(exports, "isReferenced", {
          enumerable: true,
          get: function get() {
            return _isReferenced.default;
          }
        });
        Object.defineProperty(exports, "isScope", {
          enumerable: true,
          get: function get() {
            return _isScope.default;
          }
        });
        Object.defineProperty(exports, "isSpecifierDefault", {
          enumerable: true,
          get: function get() {
            return _isSpecifierDefault.default;
          }
        });
        Object.defineProperty(exports, "isType", {
          enumerable: true,
          get: function get() {
            return _isType.default;
          }
        });
        Object.defineProperty(exports, "isValidES3Identifier", {
          enumerable: true,
          get: function get() {
            return _isValidES3Identifier.default;
          }
        });
        Object.defineProperty(exports, "isValidIdentifier", {
          enumerable: true,
          get: function get() {
            return _isValidIdentifier.default;
          }
        });
        Object.defineProperty(exports, "isVar", {
          enumerable: true,
          get: function get() {
            return _isVar.default;
          }
        });
        Object.defineProperty(exports, "matchesPattern", {
          enumerable: true,
          get: function get() {
            return _matchesPattern.default;
          }
        });
        Object.defineProperty(exports, "validate", {
          enumerable: true,
          get: function get() {
            return _validate.default;
          }
        });
        Object.defineProperty(exports, "buildMatchMemberExpression", {
          enumerable: true,
          get: function get() {
            return _buildMatchMemberExpression.default;
          }
        });
        exports.react = void 0;

        var _isReactComponent = _interopRequireDefault(
          __webpack_require__(250)
        );

        var _isCompatTag = _interopRequireDefault(__webpack_require__(251));

        var _buildChildren = _interopRequireDefault(__webpack_require__(252));

        var _assertNode = _interopRequireDefault(__webpack_require__(323));

        var _generated = __webpack_require__(324);

        Object.keys(_generated).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _generated[key];
            }
          });
        });

        var _createTypeAnnotationBasedOnTypeof = _interopRequireDefault(
          __webpack_require__(325)
        );

        var _createUnionTypeAnnotation = _interopRequireDefault(
          __webpack_require__(326)
        );

        var _generated2 = __webpack_require__(5);

        Object.keys(_generated2).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _generated2[key];
            }
          });
        });

        var _cloneNode = _interopRequireDefault(__webpack_require__(33));

        var _clone = _interopRequireDefault(__webpack_require__(126));

        var _cloneDeep = _interopRequireDefault(__webpack_require__(327));

        var _cloneWithoutLoc = _interopRequireDefault(__webpack_require__(328));

        var _addComment = _interopRequireDefault(__webpack_require__(329));

        var _addComments = _interopRequireDefault(__webpack_require__(127));

        var _inheritInnerComments = _interopRequireDefault(
          __webpack_require__(128)
        );

        var _inheritLeadingComments = _interopRequireDefault(
          __webpack_require__(131)
        );

        var _inheritsComments = _interopRequireDefault(
          __webpack_require__(132)
        );

        var _inheritTrailingComments = _interopRequireDefault(
          __webpack_require__(133)
        );

        var _removeComments = _interopRequireDefault(__webpack_require__(341));

        var _generated3 = __webpack_require__(342);

        Object.keys(_generated3).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _generated3[key];
            }
          });
        });

        var _constants = __webpack_require__(19);

        Object.keys(_constants).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _constants[key];
            }
          });
        });

        var _ensureBlock = _interopRequireDefault(__webpack_require__(343));

        var _toBindingIdentifierName = _interopRequireDefault(
          __webpack_require__(344)
        );

        var _toBlock = _interopRequireDefault(__webpack_require__(134));

        var _toComputedKey = _interopRequireDefault(__webpack_require__(345));

        var _toExpression = _interopRequireDefault(__webpack_require__(346));

        var _toIdentifier = _interopRequireDefault(__webpack_require__(135));

        var _toKeyAlias = _interopRequireDefault(__webpack_require__(347));

        var _toSequenceExpression = _interopRequireDefault(
          __webpack_require__(348)
        );

        var _toStatement = _interopRequireDefault(__webpack_require__(350));

        var _valueToNode = _interopRequireDefault(__webpack_require__(351));

        var _definitions = __webpack_require__(11);

        Object.keys(_definitions).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _definitions[key];
            }
          });
        });

        var _appendToMemberExpression = _interopRequireDefault(
          __webpack_require__(355)
        );

        var _inherits = _interopRequireDefault(__webpack_require__(356));

        var _prependToMemberExpression = _interopRequireDefault(
          __webpack_require__(357)
        );

        var _removeProperties = _interopRequireDefault(
          __webpack_require__(138)
        );

        var _removePropertiesDeep = _interopRequireDefault(
          __webpack_require__(136)
        );

        var _removeTypeDuplicates = _interopRequireDefault(
          __webpack_require__(125)
        );

        var _getBindingIdentifiers = _interopRequireDefault(
          __webpack_require__(44)
        );

        var _getOuterBindingIdentifiers = _interopRequireDefault(
          __webpack_require__(358)
        );

        var _traverse = _interopRequireDefault(__webpack_require__(359));

        var _traverseFast = _interopRequireDefault(__webpack_require__(137));

        var _shallowEqual = _interopRequireDefault(__webpack_require__(58));

        var _is = _interopRequireDefault(__webpack_require__(73));

        var _isBinding = _interopRequireDefault(__webpack_require__(360));

        var _isBlockScoped = _interopRequireDefault(__webpack_require__(361));

        var _isImmutable = _interopRequireDefault(__webpack_require__(362));

        var _isLet = _interopRequireDefault(__webpack_require__(139));

        var _isNode = _interopRequireDefault(__webpack_require__(124));

        var _isNodesEquivalent = _interopRequireDefault(
          __webpack_require__(363)
        );

        var _isReferenced = _interopRequireDefault(__webpack_require__(364));

        var _isScope = _interopRequireDefault(__webpack_require__(365));

        var _isSpecifierDefault = _interopRequireDefault(
          __webpack_require__(366)
        );

        var _isType = _interopRequireDefault(__webpack_require__(74));

        var _isValidES3Identifier = _interopRequireDefault(
          __webpack_require__(367)
        );

        var _isValidIdentifier = _interopRequireDefault(
          __webpack_require__(32)
        );

        var _isVar = _interopRequireDefault(__webpack_require__(368));

        var _matchesPattern = _interopRequireDefault(__webpack_require__(104));

        var _validate = _interopRequireDefault(__webpack_require__(123));

        var _buildMatchMemberExpression = _interopRequireDefault(
          __webpack_require__(103)
        );

        var _generated4 = __webpack_require__(4);

        Object.keys(_generated4).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _generated4[key];
            }
          });
        });

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var react = {
          isReactComponent: _isReactComponent.default,
          isCompatTag: _isCompatTag.default,
          buildChildren: _buildChildren.default
        };
        exports.react = react;

        /***/
      },
      /* 4 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isArrayExpression = isArrayExpression;
        exports.isAssignmentExpression = isAssignmentExpression;
        exports.isBinaryExpression = isBinaryExpression;
        exports.isDirective = isDirective;
        exports.isDirectiveLiteral = isDirectiveLiteral;
        exports.isBlockStatement = isBlockStatement;
        exports.isBreakStatement = isBreakStatement;
        exports.isCallExpression = isCallExpression;
        exports.isCatchClause = isCatchClause;
        exports.isConditionalExpression = isConditionalExpression;
        exports.isContinueStatement = isContinueStatement;
        exports.isDebuggerStatement = isDebuggerStatement;
        exports.isDoWhileStatement = isDoWhileStatement;
        exports.isEmptyStatement = isEmptyStatement;
        exports.isExpressionStatement = isExpressionStatement;
        exports.isFile = isFile;
        exports.isForInStatement = isForInStatement;
        exports.isForStatement = isForStatement;
        exports.isFunctionDeclaration = isFunctionDeclaration;
        exports.isFunctionExpression = isFunctionExpression;
        exports.isIdentifier = isIdentifier;
        exports.isIfStatement = isIfStatement;
        exports.isLabeledStatement = isLabeledStatement;
        exports.isStringLiteral = isStringLiteral;
        exports.isNumericLiteral = isNumericLiteral;
        exports.isNullLiteral = isNullLiteral;
        exports.isBooleanLiteral = isBooleanLiteral;
        exports.isRegExpLiteral = isRegExpLiteral;
        exports.isLogicalExpression = isLogicalExpression;
        exports.isMemberExpression = isMemberExpression;
        exports.isNewExpression = isNewExpression;
        exports.isProgram = isProgram;
        exports.isObjectExpression = isObjectExpression;
        exports.isObjectMethod = isObjectMethod;
        exports.isObjectProperty = isObjectProperty;
        exports.isRestElement = isRestElement;
        exports.isReturnStatement = isReturnStatement;
        exports.isSequenceExpression = isSequenceExpression;
        exports.isSwitchCase = isSwitchCase;
        exports.isSwitchStatement = isSwitchStatement;
        exports.isThisExpression = isThisExpression;
        exports.isThrowStatement = isThrowStatement;
        exports.isTryStatement = isTryStatement;
        exports.isUnaryExpression = isUnaryExpression;
        exports.isUpdateExpression = isUpdateExpression;
        exports.isVariableDeclaration = isVariableDeclaration;
        exports.isVariableDeclarator = isVariableDeclarator;
        exports.isWhileStatement = isWhileStatement;
        exports.isWithStatement = isWithStatement;
        exports.isAssignmentPattern = isAssignmentPattern;
        exports.isArrayPattern = isArrayPattern;
        exports.isArrowFunctionExpression = isArrowFunctionExpression;
        exports.isClassBody = isClassBody;
        exports.isClassDeclaration = isClassDeclaration;
        exports.isClassExpression = isClassExpression;
        exports.isExportAllDeclaration = isExportAllDeclaration;
        exports.isExportDefaultDeclaration = isExportDefaultDeclaration;
        exports.isExportNamedDeclaration = isExportNamedDeclaration;
        exports.isExportSpecifier = isExportSpecifier;
        exports.isForOfStatement = isForOfStatement;
        exports.isImportDeclaration = isImportDeclaration;
        exports.isImportDefaultSpecifier = isImportDefaultSpecifier;
        exports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
        exports.isImportSpecifier = isImportSpecifier;
        exports.isMetaProperty = isMetaProperty;
        exports.isClassMethod = isClassMethod;
        exports.isObjectPattern = isObjectPattern;
        exports.isSpreadElement = isSpreadElement;
        exports.isSuper = isSuper;
        exports.isTaggedTemplateExpression = isTaggedTemplateExpression;
        exports.isTemplateElement = isTemplateElement;
        exports.isTemplateLiteral = isTemplateLiteral;
        exports.isYieldExpression = isYieldExpression;
        exports.isAnyTypeAnnotation = isAnyTypeAnnotation;
        exports.isArrayTypeAnnotation = isArrayTypeAnnotation;
        exports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
        exports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
        exports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
        exports.isClassImplements = isClassImplements;
        exports.isDeclareClass = isDeclareClass;
        exports.isDeclareFunction = isDeclareFunction;
        exports.isDeclareInterface = isDeclareInterface;
        exports.isDeclareModule = isDeclareModule;
        exports.isDeclareModuleExports = isDeclareModuleExports;
        exports.isDeclareTypeAlias = isDeclareTypeAlias;
        exports.isDeclareOpaqueType = isDeclareOpaqueType;
        exports.isDeclareVariable = isDeclareVariable;
        exports.isDeclareExportDeclaration = isDeclareExportDeclaration;
        exports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
        exports.isDeclaredPredicate = isDeclaredPredicate;
        exports.isExistsTypeAnnotation = isExistsTypeAnnotation;
        exports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
        exports.isFunctionTypeParam = isFunctionTypeParam;
        exports.isGenericTypeAnnotation = isGenericTypeAnnotation;
        exports.isInferredPredicate = isInferredPredicate;
        exports.isInterfaceExtends = isInterfaceExtends;
        exports.isInterfaceDeclaration = isInterfaceDeclaration;
        exports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
        exports.isMixedTypeAnnotation = isMixedTypeAnnotation;
        exports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
        exports.isNullableTypeAnnotation = isNullableTypeAnnotation;
        exports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
        exports.isNumberTypeAnnotation = isNumberTypeAnnotation;
        exports.isObjectTypeAnnotation = isObjectTypeAnnotation;
        exports.isObjectTypeCallProperty = isObjectTypeCallProperty;
        exports.isObjectTypeIndexer = isObjectTypeIndexer;
        exports.isObjectTypeProperty = isObjectTypeProperty;
        exports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
        exports.isOpaqueType = isOpaqueType;
        exports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
        exports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
        exports.isStringTypeAnnotation = isStringTypeAnnotation;
        exports.isThisTypeAnnotation = isThisTypeAnnotation;
        exports.isTupleTypeAnnotation = isTupleTypeAnnotation;
        exports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
        exports.isTypeAlias = isTypeAlias;
        exports.isTypeAnnotation = isTypeAnnotation;
        exports.isTypeCastExpression = isTypeCastExpression;
        exports.isTypeParameter = isTypeParameter;
        exports.isTypeParameterDeclaration = isTypeParameterDeclaration;
        exports.isTypeParameterInstantiation = isTypeParameterInstantiation;
        exports.isUnionTypeAnnotation = isUnionTypeAnnotation;
        exports.isVariance = isVariance;
        exports.isVoidTypeAnnotation = isVoidTypeAnnotation;
        exports.isJSXAttribute = isJSXAttribute;
        exports.isJSXClosingElement = isJSXClosingElement;
        exports.isJSXElement = isJSXElement;
        exports.isJSXEmptyExpression = isJSXEmptyExpression;
        exports.isJSXExpressionContainer = isJSXExpressionContainer;
        exports.isJSXSpreadChild = isJSXSpreadChild;
        exports.isJSXIdentifier = isJSXIdentifier;
        exports.isJSXMemberExpression = isJSXMemberExpression;
        exports.isJSXNamespacedName = isJSXNamespacedName;
        exports.isJSXOpeningElement = isJSXOpeningElement;
        exports.isJSXSpreadAttribute = isJSXSpreadAttribute;
        exports.isJSXText = isJSXText;
        exports.isJSXFragment = isJSXFragment;
        exports.isJSXOpeningFragment = isJSXOpeningFragment;
        exports.isJSXClosingFragment = isJSXClosingFragment;
        exports.isNoop = isNoop;
        exports.isParenthesizedExpression = isParenthesizedExpression;
        exports.isAwaitExpression = isAwaitExpression;
        exports.isBindExpression = isBindExpression;
        exports.isClassProperty = isClassProperty;
        exports.isOptionalMemberExpression = isOptionalMemberExpression;
        exports.isOptionalCallExpression = isOptionalCallExpression;
        exports.isClassPrivateProperty = isClassPrivateProperty;
        exports.isImport = isImport;
        exports.isDecorator = isDecorator;
        exports.isDoExpression = isDoExpression;
        exports.isExportDefaultSpecifier = isExportDefaultSpecifier;
        exports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
        exports.isPrivateName = isPrivateName;
        exports.isTSParameterProperty = isTSParameterProperty;
        exports.isTSDeclareFunction = isTSDeclareFunction;
        exports.isTSDeclareMethod = isTSDeclareMethod;
        exports.isTSQualifiedName = isTSQualifiedName;
        exports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
        exports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
        exports.isTSPropertySignature = isTSPropertySignature;
        exports.isTSMethodSignature = isTSMethodSignature;
        exports.isTSIndexSignature = isTSIndexSignature;
        exports.isTSAnyKeyword = isTSAnyKeyword;
        exports.isTSNumberKeyword = isTSNumberKeyword;
        exports.isTSObjectKeyword = isTSObjectKeyword;
        exports.isTSBooleanKeyword = isTSBooleanKeyword;
        exports.isTSStringKeyword = isTSStringKeyword;
        exports.isTSSymbolKeyword = isTSSymbolKeyword;
        exports.isTSVoidKeyword = isTSVoidKeyword;
        exports.isTSUndefinedKeyword = isTSUndefinedKeyword;
        exports.isTSNullKeyword = isTSNullKeyword;
        exports.isTSNeverKeyword = isTSNeverKeyword;
        exports.isTSThisType = isTSThisType;
        exports.isTSFunctionType = isTSFunctionType;
        exports.isTSConstructorType = isTSConstructorType;
        exports.isTSTypeReference = isTSTypeReference;
        exports.isTSTypePredicate = isTSTypePredicate;
        exports.isTSTypeQuery = isTSTypeQuery;
        exports.isTSTypeLiteral = isTSTypeLiteral;
        exports.isTSArrayType = isTSArrayType;
        exports.isTSTupleType = isTSTupleType;
        exports.isTSUnionType = isTSUnionType;
        exports.isTSIntersectionType = isTSIntersectionType;
        exports.isTSConditionalType = isTSConditionalType;
        exports.isTSInferType = isTSInferType;
        exports.isTSParenthesizedType = isTSParenthesizedType;
        exports.isTSTypeOperator = isTSTypeOperator;
        exports.isTSIndexedAccessType = isTSIndexedAccessType;
        exports.isTSMappedType = isTSMappedType;
        exports.isTSLiteralType = isTSLiteralType;
        exports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
        exports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
        exports.isTSInterfaceBody = isTSInterfaceBody;
        exports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
        exports.isTSAsExpression = isTSAsExpression;
        exports.isTSTypeAssertion = isTSTypeAssertion;
        exports.isTSEnumDeclaration = isTSEnumDeclaration;
        exports.isTSEnumMember = isTSEnumMember;
        exports.isTSModuleDeclaration = isTSModuleDeclaration;
        exports.isTSModuleBlock = isTSModuleBlock;
        exports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
        exports.isTSExternalModuleReference = isTSExternalModuleReference;
        exports.isTSNonNullExpression = isTSNonNullExpression;
        exports.isTSExportAssignment = isTSExportAssignment;
        exports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
        exports.isTSTypeAnnotation = isTSTypeAnnotation;
        exports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
        exports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
        exports.isTSTypeParameter = isTSTypeParameter;
        exports.isExpression = isExpression;
        exports.isBinary = isBinary;
        exports.isScopable = isScopable;
        exports.isBlockParent = isBlockParent;
        exports.isBlock = isBlock;
        exports.isStatement = isStatement;
        exports.isTerminatorless = isTerminatorless;
        exports.isCompletionStatement = isCompletionStatement;
        exports.isConditional = isConditional;
        exports.isLoop = isLoop;
        exports.isWhile = isWhile;
        exports.isExpressionWrapper = isExpressionWrapper;
        exports.isFor = isFor;
        exports.isForXStatement = isForXStatement;
        exports.isFunction = isFunction;
        exports.isFunctionParent = isFunctionParent;
        exports.isPureish = isPureish;
        exports.isDeclaration = isDeclaration;
        exports.isPatternLike = isPatternLike;
        exports.isLVal = isLVal;
        exports.isTSEntityName = isTSEntityName;
        exports.isLiteral = isLiteral;
        exports.isImmutable = isImmutable;
        exports.isUserWhitespacable = isUserWhitespacable;
        exports.isMethod = isMethod;
        exports.isObjectMember = isObjectMember;
        exports.isProperty = isProperty;
        exports.isUnaryLike = isUnaryLike;
        exports.isPattern = isPattern;
        exports.isClass = isClass;
        exports.isModuleDeclaration = isModuleDeclaration;
        exports.isExportDeclaration = isExportDeclaration;
        exports.isModuleSpecifier = isModuleSpecifier;
        exports.isFlow = isFlow;
        exports.isFlowType = isFlowType;
        exports.isFlowBaseAnnotation = isFlowBaseAnnotation;
        exports.isFlowDeclaration = isFlowDeclaration;
        exports.isFlowPredicate = isFlowPredicate;
        exports.isJSX = isJSX;
        exports.isPrivate = isPrivate;
        exports.isTSTypeElement = isTSTypeElement;
        exports.isTSType = isTSType;
        exports.isNumberLiteral = isNumberLiteral;
        exports.isRegexLiteral = isRegexLiteral;
        exports.isRestProperty = isRestProperty;
        exports.isSpreadProperty = isSpreadProperty;

        var _shallowEqual = _interopRequireDefault(__webpack_require__(58));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function isArrayExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ArrayExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isAssignmentExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "AssignmentExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBinaryExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "BinaryExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDirective(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "Directive") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDirectiveLiteral(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DirectiveLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBlockStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "BlockStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBreakStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "BreakStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isCallExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "CallExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isCatchClause(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "CatchClause") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isConditionalExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ConditionalExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isContinueStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ContinueStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDebuggerStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DebuggerStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDoWhileStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DoWhileStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEmptyStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "EmptyStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExpressionStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ExpressionStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFile(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "File") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isForInStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ForInStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isForStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ForStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunctionDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "FunctionDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunctionExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "FunctionExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isIdentifier(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "Identifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isIfStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "IfStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isLabeledStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "LabeledStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isStringLiteral(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "StringLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNumericLiteral(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "NumericLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNullLiteral(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "NullLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBooleanLiteral(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "BooleanLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isRegExpLiteral(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "RegExpLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isLogicalExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "LogicalExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isMemberExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "MemberExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNewExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "NewExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isProgram(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "Program") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ObjectExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectMethod(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ObjectMethod") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectProperty(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ObjectProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isRestElement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "RestElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isReturnStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ReturnStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSequenceExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "SequenceExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSwitchCase(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "SwitchCase") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSwitchStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "SwitchStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isThisExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ThisExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isThrowStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ThrowStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTryStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TryStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isUnaryExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "UnaryExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isUpdateExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "UpdateExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isVariableDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "VariableDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isVariableDeclarator(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "VariableDeclarator") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isWhileStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "WhileStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isWithStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "WithStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isAssignmentPattern(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "AssignmentPattern") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isArrayPattern(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ArrayPattern") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isArrowFunctionExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ArrowFunctionExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassBody(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ClassBody") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ClassDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ClassExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportAllDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ExportAllDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportDefaultDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ExportDefaultDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportNamedDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ExportNamedDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportSpecifier(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ExportSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isForOfStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ForOfStatement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImportDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ImportDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImportDefaultSpecifier(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ImportDefaultSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImportNamespaceSpecifier(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ImportNamespaceSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImportSpecifier(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ImportSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isMetaProperty(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "MetaProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassMethod(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ClassMethod") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectPattern(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ObjectPattern") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSpreadElement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "SpreadElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSuper(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "Super") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTaggedTemplateExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TaggedTemplateExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTemplateElement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TemplateElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTemplateLiteral(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TemplateLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isYieldExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "YieldExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isAnyTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "AnyTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isArrayTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ArrayTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBooleanTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "BooleanTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBooleanLiteralTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "BooleanLiteralTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNullLiteralTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "NullLiteralTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassImplements(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ClassImplements") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareClass(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclareClass") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareFunction(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclareFunction") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareInterface(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclareInterface") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareModule(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclareModule") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareModuleExports(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclareModuleExports") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareTypeAlias(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclareTypeAlias") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareOpaqueType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclareOpaqueType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareVariable(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclareVariable") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareExportDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclareExportDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclareExportAllDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclareExportAllDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclaredPredicate(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DeclaredPredicate") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExistsTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ExistsTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunctionTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "FunctionTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunctionTypeParam(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "FunctionTypeParam") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isGenericTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "GenericTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isInferredPredicate(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "InferredPredicate") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isInterfaceExtends(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "InterfaceExtends") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isInterfaceDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "InterfaceDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isIntersectionTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "IntersectionTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isMixedTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "MixedTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isEmptyTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "EmptyTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNullableTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "NullableTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNumberLiteralTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "NumberLiteralTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNumberTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "NumberTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ObjectTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeCallProperty(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ObjectTypeCallProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeIndexer(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ObjectTypeIndexer") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeProperty(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ObjectTypeProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectTypeSpreadProperty(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ObjectTypeSpreadProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isOpaqueType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "OpaqueType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isQualifiedTypeIdentifier(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "QualifiedTypeIdentifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isStringLiteralTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "StringLiteralTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isStringTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "StringTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isThisTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ThisTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTupleTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TupleTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeofTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TypeofTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeAlias(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TypeAlias") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeCastExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TypeCastExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeParameter(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TypeParameter") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeParameterDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TypeParameterDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTypeParameterInstantiation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TypeParameterInstantiation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isUnionTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "UnionTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isVariance(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "Variance") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isVoidTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "VoidTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXAttribute(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXAttribute") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXClosingElement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXClosingElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXElement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXEmptyExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXEmptyExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXExpressionContainer(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXExpressionContainer") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXSpreadChild(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXSpreadChild") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXIdentifier(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXIdentifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXMemberExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXMemberExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXNamespacedName(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXNamespacedName") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXOpeningElement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXOpeningElement") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXSpreadAttribute(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXSpreadAttribute") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXText(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXText") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXFragment(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXFragment") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXOpeningFragment(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXOpeningFragment") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSXClosingFragment(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "JSXClosingFragment") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNoop(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "Noop") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isParenthesizedExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ParenthesizedExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isAwaitExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "AwaitExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBindExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "BindExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassProperty(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ClassProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isOptionalMemberExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "OptionalMemberExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isOptionalCallExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "OptionalCallExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClassPrivateProperty(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ClassPrivateProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImport(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "Import") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDecorator(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "Decorator") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDoExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "DoExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportDefaultSpecifier(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ExportDefaultSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportNamespaceSpecifier(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "ExportNamespaceSpecifier") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPrivateName(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "PrivateName") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSParameterProperty(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSParameterProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSDeclareFunction(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSDeclareFunction") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSDeclareMethod(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSDeclareMethod") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSQualifiedName(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSQualifiedName") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSCallSignatureDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSCallSignatureDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSConstructSignatureDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSConstructSignatureDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSPropertySignature(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSPropertySignature") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSMethodSignature(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSMethodSignature") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSIndexSignature(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSIndexSignature") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSAnyKeyword(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSAnyKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNumberKeyword(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSNumberKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSObjectKeyword(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSObjectKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSBooleanKeyword(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSBooleanKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSStringKeyword(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSStringKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSSymbolKeyword(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSSymbolKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSVoidKeyword(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSVoidKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSUndefinedKeyword(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSUndefinedKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNullKeyword(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSNullKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNeverKeyword(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSNeverKeyword") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSThisType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSThisType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSFunctionType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSFunctionType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSConstructorType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSConstructorType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeReference(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypeReference") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypePredicate(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypePredicate") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeQuery(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypeQuery") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeLiteral(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypeLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSArrayType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSArrayType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTupleType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTupleType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSUnionType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSUnionType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSIntersectionType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSIntersectionType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSConditionalType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSConditionalType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSInferType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSInferType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSParenthesizedType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSParenthesizedType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeOperator(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypeOperator") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSIndexedAccessType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSIndexedAccessType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSMappedType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSMappedType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSLiteralType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSLiteralType") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSExpressionWithTypeArguments(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSExpressionWithTypeArguments") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSInterfaceDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSInterfaceDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSInterfaceBody(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSInterfaceBody") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeAliasDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypeAliasDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSAsExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSAsExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeAssertion(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypeAssertion") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSEnumDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSEnumDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSEnumMember(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSEnumMember") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSModuleDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSModuleDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSModuleBlock(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSModuleBlock") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSImportEqualsDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSImportEqualsDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSExternalModuleReference(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSExternalModuleReference") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNonNullExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSNonNullExpression") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSExportAssignment(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSExportAssignment") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSNamespaceExportDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSNamespaceExportDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypeAnnotation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeParameterInstantiation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypeParameterInstantiation") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeParameterDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypeParameterDeclaration") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeParameter(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "TSTypeParameter") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExpression(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Expression" ||
            "ArrayExpression" === nodeType ||
            "AssignmentExpression" === nodeType ||
            "BinaryExpression" === nodeType ||
            "CallExpression" === nodeType ||
            "ConditionalExpression" === nodeType ||
            "FunctionExpression" === nodeType ||
            "Identifier" === nodeType ||
            "StringLiteral" === nodeType ||
            "NumericLiteral" === nodeType ||
            "NullLiteral" === nodeType ||
            "BooleanLiteral" === nodeType ||
            "RegExpLiteral" === nodeType ||
            "LogicalExpression" === nodeType ||
            "MemberExpression" === nodeType ||
            "NewExpression" === nodeType ||
            "ObjectExpression" === nodeType ||
            "SequenceExpression" === nodeType ||
            "ThisExpression" === nodeType ||
            "UnaryExpression" === nodeType ||
            "UpdateExpression" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ClassExpression" === nodeType ||
            "MetaProperty" === nodeType ||
            "Super" === nodeType ||
            "TaggedTemplateExpression" === nodeType ||
            "TemplateLiteral" === nodeType ||
            "YieldExpression" === nodeType ||
            "TypeCastExpression" === nodeType ||
            "JSXElement" === nodeType ||
            "JSXFragment" === nodeType ||
            "ParenthesizedExpression" === nodeType ||
            "AwaitExpression" === nodeType ||
            "BindExpression" === nodeType ||
            "OptionalMemberExpression" === nodeType ||
            "OptionalCallExpression" === nodeType ||
            "Import" === nodeType ||
            "DoExpression" === nodeType ||
            "TSAsExpression" === nodeType ||
            "TSTypeAssertion" === nodeType ||
            "TSNonNullExpression" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBinary(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Binary" ||
            "BinaryExpression" === nodeType ||
            "LogicalExpression" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isScopable(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Scopable" ||
            "BlockStatement" === nodeType ||
            "CatchClause" === nodeType ||
            "DoWhileStatement" === nodeType ||
            "ForInStatement" === nodeType ||
            "ForStatement" === nodeType ||
            "FunctionDeclaration" === nodeType ||
            "FunctionExpression" === nodeType ||
            "Program" === nodeType ||
            "ObjectMethod" === nodeType ||
            "SwitchStatement" === nodeType ||
            "WhileStatement" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ClassDeclaration" === nodeType ||
            "ClassExpression" === nodeType ||
            "ForOfStatement" === nodeType ||
            "ClassMethod" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBlockParent(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "BlockParent" ||
            "BlockStatement" === nodeType ||
            "CatchClause" === nodeType ||
            "DoWhileStatement" === nodeType ||
            "ForInStatement" === nodeType ||
            "ForStatement" === nodeType ||
            "FunctionDeclaration" === nodeType ||
            "FunctionExpression" === nodeType ||
            "Program" === nodeType ||
            "ObjectMethod" === nodeType ||
            "SwitchStatement" === nodeType ||
            "WhileStatement" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ForOfStatement" === nodeType ||
            "ClassMethod" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isBlock(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Block" ||
            "BlockStatement" === nodeType ||
            "Program" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Statement" ||
            "BlockStatement" === nodeType ||
            "BreakStatement" === nodeType ||
            "ContinueStatement" === nodeType ||
            "DebuggerStatement" === nodeType ||
            "DoWhileStatement" === nodeType ||
            "EmptyStatement" === nodeType ||
            "ExpressionStatement" === nodeType ||
            "ForInStatement" === nodeType ||
            "ForStatement" === nodeType ||
            "FunctionDeclaration" === nodeType ||
            "IfStatement" === nodeType ||
            "LabeledStatement" === nodeType ||
            "ReturnStatement" === nodeType ||
            "SwitchStatement" === nodeType ||
            "ThrowStatement" === nodeType ||
            "TryStatement" === nodeType ||
            "VariableDeclaration" === nodeType ||
            "WhileStatement" === nodeType ||
            "WithStatement" === nodeType ||
            "ClassDeclaration" === nodeType ||
            "ExportAllDeclaration" === nodeType ||
            "ExportDefaultDeclaration" === nodeType ||
            "ExportNamedDeclaration" === nodeType ||
            "ForOfStatement" === nodeType ||
            "ImportDeclaration" === nodeType ||
            "DeclareClass" === nodeType ||
            "DeclareFunction" === nodeType ||
            "DeclareInterface" === nodeType ||
            "DeclareModule" === nodeType ||
            "DeclareModuleExports" === nodeType ||
            "DeclareTypeAlias" === nodeType ||
            "DeclareOpaqueType" === nodeType ||
            "DeclareVariable" === nodeType ||
            "DeclareExportDeclaration" === nodeType ||
            "DeclareExportAllDeclaration" === nodeType ||
            "InterfaceDeclaration" === nodeType ||
            "OpaqueType" === nodeType ||
            "TypeAlias" === nodeType ||
            "TSDeclareFunction" === nodeType ||
            "TSInterfaceDeclaration" === nodeType ||
            "TSTypeAliasDeclaration" === nodeType ||
            "TSEnumDeclaration" === nodeType ||
            "TSModuleDeclaration" === nodeType ||
            "TSImportEqualsDeclaration" === nodeType ||
            "TSExportAssignment" === nodeType ||
            "TSNamespaceExportDeclaration" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTerminatorless(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Terminatorless" ||
            "BreakStatement" === nodeType ||
            "ContinueStatement" === nodeType ||
            "ReturnStatement" === nodeType ||
            "ThrowStatement" === nodeType ||
            "YieldExpression" === nodeType ||
            "AwaitExpression" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isCompletionStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "CompletionStatement" ||
            "BreakStatement" === nodeType ||
            "ContinueStatement" === nodeType ||
            "ReturnStatement" === nodeType ||
            "ThrowStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isConditional(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Conditional" ||
            "ConditionalExpression" === nodeType ||
            "IfStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isLoop(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Loop" ||
            "DoWhileStatement" === nodeType ||
            "ForInStatement" === nodeType ||
            "ForStatement" === nodeType ||
            "WhileStatement" === nodeType ||
            "ForOfStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isWhile(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "While" ||
            "DoWhileStatement" === nodeType ||
            "WhileStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExpressionWrapper(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "ExpressionWrapper" ||
            "ExpressionStatement" === nodeType ||
            "TypeCastExpression" === nodeType ||
            "ParenthesizedExpression" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFor(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "For" ||
            "ForInStatement" === nodeType ||
            "ForStatement" === nodeType ||
            "ForOfStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isForXStatement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "ForXStatement" ||
            "ForInStatement" === nodeType ||
            "ForOfStatement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunction(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Function" ||
            "FunctionDeclaration" === nodeType ||
            "FunctionExpression" === nodeType ||
            "ObjectMethod" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ClassMethod" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFunctionParent(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "FunctionParent" ||
            "FunctionDeclaration" === nodeType ||
            "FunctionExpression" === nodeType ||
            "ObjectMethod" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ClassMethod" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPureish(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Pureish" ||
            "FunctionDeclaration" === nodeType ||
            "FunctionExpression" === nodeType ||
            "StringLiteral" === nodeType ||
            "NumericLiteral" === nodeType ||
            "NullLiteral" === nodeType ||
            "BooleanLiteral" === nodeType ||
            "ArrowFunctionExpression" === nodeType ||
            "ClassDeclaration" === nodeType ||
            "ClassExpression" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Declaration" ||
            "FunctionDeclaration" === nodeType ||
            "VariableDeclaration" === nodeType ||
            "ClassDeclaration" === nodeType ||
            "ExportAllDeclaration" === nodeType ||
            "ExportDefaultDeclaration" === nodeType ||
            "ExportNamedDeclaration" === nodeType ||
            "ImportDeclaration" === nodeType ||
            "DeclareClass" === nodeType ||
            "DeclareFunction" === nodeType ||
            "DeclareInterface" === nodeType ||
            "DeclareModule" === nodeType ||
            "DeclareModuleExports" === nodeType ||
            "DeclareTypeAlias" === nodeType ||
            "DeclareOpaqueType" === nodeType ||
            "DeclareVariable" === nodeType ||
            "DeclareExportDeclaration" === nodeType ||
            "DeclareExportAllDeclaration" === nodeType ||
            "InterfaceDeclaration" === nodeType ||
            "OpaqueType" === nodeType ||
            "TypeAlias" === nodeType ||
            "TSDeclareFunction" === nodeType ||
            "TSInterfaceDeclaration" === nodeType ||
            "TSTypeAliasDeclaration" === nodeType ||
            "TSEnumDeclaration" === nodeType ||
            "TSModuleDeclaration" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPatternLike(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "PatternLike" ||
            "Identifier" === nodeType ||
            "RestElement" === nodeType ||
            "AssignmentPattern" === nodeType ||
            "ArrayPattern" === nodeType ||
            "ObjectPattern" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isLVal(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "LVal" ||
            "Identifier" === nodeType ||
            "MemberExpression" === nodeType ||
            "RestElement" === nodeType ||
            "AssignmentPattern" === nodeType ||
            "ArrayPattern" === nodeType ||
            "ObjectPattern" === nodeType ||
            "TSParameterProperty" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSEntityName(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "TSEntityName" ||
            "Identifier" === nodeType ||
            "TSQualifiedName" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isLiteral(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Literal" ||
            "StringLiteral" === nodeType ||
            "NumericLiteral" === nodeType ||
            "NullLiteral" === nodeType ||
            "BooleanLiteral" === nodeType ||
            "RegExpLiteral" === nodeType ||
            "TemplateLiteral" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isImmutable(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Immutable" ||
            "StringLiteral" === nodeType ||
            "NumericLiteral" === nodeType ||
            "NullLiteral" === nodeType ||
            "BooleanLiteral" === nodeType ||
            "JSXAttribute" === nodeType ||
            "JSXClosingElement" === nodeType ||
            "JSXElement" === nodeType ||
            "JSXExpressionContainer" === nodeType ||
            "JSXSpreadChild" === nodeType ||
            "JSXOpeningElement" === nodeType ||
            "JSXText" === nodeType ||
            "JSXFragment" === nodeType ||
            "JSXOpeningFragment" === nodeType ||
            "JSXClosingFragment" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isUserWhitespacable(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "UserWhitespacable" ||
            "ObjectMethod" === nodeType ||
            "ObjectProperty" === nodeType ||
            "ObjectTypeCallProperty" === nodeType ||
            "ObjectTypeIndexer" === nodeType ||
            "ObjectTypeProperty" === nodeType ||
            "ObjectTypeSpreadProperty" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isMethod(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Method" ||
            "ObjectMethod" === nodeType ||
            "ClassMethod" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isObjectMember(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "ObjectMember" ||
            "ObjectMethod" === nodeType ||
            "ObjectProperty" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isProperty(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Property" ||
            "ObjectProperty" === nodeType ||
            "ClassProperty" === nodeType ||
            "ClassPrivateProperty" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isUnaryLike(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "UnaryLike" ||
            "UnaryExpression" === nodeType ||
            "SpreadElement" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPattern(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Pattern" ||
            "AssignmentPattern" === nodeType ||
            "ArrayPattern" === nodeType ||
            "ObjectPattern" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isClass(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Class" ||
            "ClassDeclaration" === nodeType ||
            "ClassExpression" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isModuleDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "ModuleDeclaration" ||
            "ExportAllDeclaration" === nodeType ||
            "ExportDefaultDeclaration" === nodeType ||
            "ExportNamedDeclaration" === nodeType ||
            "ImportDeclaration" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isExportDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "ExportDeclaration" ||
            "ExportAllDeclaration" === nodeType ||
            "ExportDefaultDeclaration" === nodeType ||
            "ExportNamedDeclaration" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isModuleSpecifier(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "ModuleSpecifier" ||
            "ExportSpecifier" === nodeType ||
            "ImportDefaultSpecifier" === nodeType ||
            "ImportNamespaceSpecifier" === nodeType ||
            "ImportSpecifier" === nodeType ||
            "ExportDefaultSpecifier" === nodeType ||
            "ExportNamespaceSpecifier" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFlow(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Flow" ||
            "AnyTypeAnnotation" === nodeType ||
            "ArrayTypeAnnotation" === nodeType ||
            "BooleanTypeAnnotation" === nodeType ||
            "BooleanLiteralTypeAnnotation" === nodeType ||
            "NullLiteralTypeAnnotation" === nodeType ||
            "ClassImplements" === nodeType ||
            "DeclareClass" === nodeType ||
            "DeclareFunction" === nodeType ||
            "DeclareInterface" === nodeType ||
            "DeclareModule" === nodeType ||
            "DeclareModuleExports" === nodeType ||
            "DeclareTypeAlias" === nodeType ||
            "DeclareOpaqueType" === nodeType ||
            "DeclareVariable" === nodeType ||
            "DeclareExportDeclaration" === nodeType ||
            "DeclareExportAllDeclaration" === nodeType ||
            "DeclaredPredicate" === nodeType ||
            "ExistsTypeAnnotation" === nodeType ||
            "FunctionTypeAnnotation" === nodeType ||
            "FunctionTypeParam" === nodeType ||
            "GenericTypeAnnotation" === nodeType ||
            "InferredPredicate" === nodeType ||
            "InterfaceExtends" === nodeType ||
            "InterfaceDeclaration" === nodeType ||
            "IntersectionTypeAnnotation" === nodeType ||
            "MixedTypeAnnotation" === nodeType ||
            "EmptyTypeAnnotation" === nodeType ||
            "NullableTypeAnnotation" === nodeType ||
            "NumberLiteralTypeAnnotation" === nodeType ||
            "NumberTypeAnnotation" === nodeType ||
            "ObjectTypeAnnotation" === nodeType ||
            "ObjectTypeCallProperty" === nodeType ||
            "ObjectTypeIndexer" === nodeType ||
            "ObjectTypeProperty" === nodeType ||
            "ObjectTypeSpreadProperty" === nodeType ||
            "OpaqueType" === nodeType ||
            "QualifiedTypeIdentifier" === nodeType ||
            "StringLiteralTypeAnnotation" === nodeType ||
            "StringTypeAnnotation" === nodeType ||
            "ThisTypeAnnotation" === nodeType ||
            "TupleTypeAnnotation" === nodeType ||
            "TypeofTypeAnnotation" === nodeType ||
            "TypeAlias" === nodeType ||
            "TypeAnnotation" === nodeType ||
            "TypeCastExpression" === nodeType ||
            "TypeParameter" === nodeType ||
            "TypeParameterDeclaration" === nodeType ||
            "TypeParameterInstantiation" === nodeType ||
            "UnionTypeAnnotation" === nodeType ||
            "Variance" === nodeType ||
            "VoidTypeAnnotation" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFlowType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "FlowType" ||
            "AnyTypeAnnotation" === nodeType ||
            "ArrayTypeAnnotation" === nodeType ||
            "BooleanTypeAnnotation" === nodeType ||
            "BooleanLiteralTypeAnnotation" === nodeType ||
            "NullLiteralTypeAnnotation" === nodeType ||
            "ExistsTypeAnnotation" === nodeType ||
            "FunctionTypeAnnotation" === nodeType ||
            "GenericTypeAnnotation" === nodeType ||
            "IntersectionTypeAnnotation" === nodeType ||
            "MixedTypeAnnotation" === nodeType ||
            "EmptyTypeAnnotation" === nodeType ||
            "NullableTypeAnnotation" === nodeType ||
            "NumberLiteralTypeAnnotation" === nodeType ||
            "NumberTypeAnnotation" === nodeType ||
            "ObjectTypeAnnotation" === nodeType ||
            "StringLiteralTypeAnnotation" === nodeType ||
            "StringTypeAnnotation" === nodeType ||
            "ThisTypeAnnotation" === nodeType ||
            "TupleTypeAnnotation" === nodeType ||
            "TypeofTypeAnnotation" === nodeType ||
            "UnionTypeAnnotation" === nodeType ||
            "VoidTypeAnnotation" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFlowBaseAnnotation(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "FlowBaseAnnotation" ||
            "AnyTypeAnnotation" === nodeType ||
            "BooleanTypeAnnotation" === nodeType ||
            "NullLiteralTypeAnnotation" === nodeType ||
            "MixedTypeAnnotation" === nodeType ||
            "EmptyTypeAnnotation" === nodeType ||
            "NumberTypeAnnotation" === nodeType ||
            "StringTypeAnnotation" === nodeType ||
            "ThisTypeAnnotation" === nodeType ||
            "VoidTypeAnnotation" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFlowDeclaration(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "FlowDeclaration" ||
            "DeclareClass" === nodeType ||
            "DeclareFunction" === nodeType ||
            "DeclareInterface" === nodeType ||
            "DeclareModule" === nodeType ||
            "DeclareModuleExports" === nodeType ||
            "DeclareTypeAlias" === nodeType ||
            "DeclareOpaqueType" === nodeType ||
            "DeclareVariable" === nodeType ||
            "DeclareExportDeclaration" === nodeType ||
            "DeclareExportAllDeclaration" === nodeType ||
            "InterfaceDeclaration" === nodeType ||
            "OpaqueType" === nodeType ||
            "TypeAlias" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isFlowPredicate(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "FlowPredicate" ||
            "DeclaredPredicate" === nodeType ||
            "InferredPredicate" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isJSX(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "JSX" ||
            "JSXAttribute" === nodeType ||
            "JSXClosingElement" === nodeType ||
            "JSXElement" === nodeType ||
            "JSXEmptyExpression" === nodeType ||
            "JSXExpressionContainer" === nodeType ||
            "JSXSpreadChild" === nodeType ||
            "JSXIdentifier" === nodeType ||
            "JSXMemberExpression" === nodeType ||
            "JSXNamespacedName" === nodeType ||
            "JSXOpeningElement" === nodeType ||
            "JSXSpreadAttribute" === nodeType ||
            "JSXText" === nodeType ||
            "JSXFragment" === nodeType ||
            "JSXOpeningFragment" === nodeType ||
            "JSXClosingFragment" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isPrivate(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "Private" ||
            "ClassPrivateProperty" === nodeType ||
            "PrivateName" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSTypeElement(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "TSTypeElement" ||
            "TSCallSignatureDeclaration" === nodeType ||
            "TSConstructSignatureDeclaration" === nodeType ||
            "TSPropertySignature" === nodeType ||
            "TSMethodSignature" === nodeType ||
            "TSIndexSignature" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isTSType(node, opts) {
          if (!node) return false;
          var nodeType = node.type;

          if (
            nodeType === "TSType" ||
            "TSAnyKeyword" === nodeType ||
            "TSNumberKeyword" === nodeType ||
            "TSObjectKeyword" === nodeType ||
            "TSBooleanKeyword" === nodeType ||
            "TSStringKeyword" === nodeType ||
            "TSSymbolKeyword" === nodeType ||
            "TSVoidKeyword" === nodeType ||
            "TSUndefinedKeyword" === nodeType ||
            "TSNullKeyword" === nodeType ||
            "TSNeverKeyword" === nodeType ||
            "TSThisType" === nodeType ||
            "TSFunctionType" === nodeType ||
            "TSConstructorType" === nodeType ||
            "TSTypeReference" === nodeType ||
            "TSTypePredicate" === nodeType ||
            "TSTypeQuery" === nodeType ||
            "TSTypeLiteral" === nodeType ||
            "TSArrayType" === nodeType ||
            "TSTupleType" === nodeType ||
            "TSUnionType" === nodeType ||
            "TSIntersectionType" === nodeType ||
            "TSConditionalType" === nodeType ||
            "TSInferType" === nodeType ||
            "TSParenthesizedType" === nodeType ||
            "TSTypeOperator" === nodeType ||
            "TSIndexedAccessType" === nodeType ||
            "TSMappedType" === nodeType ||
            "TSLiteralType" === nodeType ||
            "TSExpressionWithTypeArguments" === nodeType
          ) {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isNumberLiteral(node, opts) {
          console.trace(
            "The node type NumberLiteral has been renamed to NumericLiteral"
          );
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "NumberLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isRegexLiteral(node, opts) {
          console.trace(
            "The node type RegexLiteral has been renamed to RegExpLiteral"
          );
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "RegexLiteral") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isRestProperty(node, opts) {
          console.trace(
            "The node type RestProperty has been renamed to RestElement"
          );
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "RestProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        function isSpreadProperty(node, opts) {
          console.trace(
            "The node type SpreadProperty has been renamed to SpreadElement"
          );
          if (!node) return false;
          var nodeType = node.type;

          if (nodeType === "SpreadProperty") {
            if (typeof opts === "undefined") {
              return true;
            } else {
              return (0, _shallowEqual.default)(node, opts);
            }
          }

          return false;
        }

        /***/
      },
      /* 5 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.arrayExpression = exports.ArrayExpression = ArrayExpression;
        exports.assignmentExpression = exports.AssignmentExpression = AssignmentExpression;
        exports.binaryExpression = exports.BinaryExpression = BinaryExpression;
        exports.directive = exports.Directive = Directive;
        exports.directiveLiteral = exports.DirectiveLiteral = DirectiveLiteral;
        exports.blockStatement = exports.BlockStatement = BlockStatement;
        exports.breakStatement = exports.BreakStatement = BreakStatement;
        exports.callExpression = exports.CallExpression = CallExpression;
        exports.catchClause = exports.CatchClause = CatchClause;
        exports.conditionalExpression = exports.ConditionalExpression = ConditionalExpression;
        exports.continueStatement = exports.ContinueStatement = ContinueStatement;
        exports.debuggerStatement = exports.DebuggerStatement = DebuggerStatement;
        exports.doWhileStatement = exports.DoWhileStatement = DoWhileStatement;
        exports.emptyStatement = exports.EmptyStatement = EmptyStatement;
        exports.expressionStatement = exports.ExpressionStatement = ExpressionStatement;
        exports.file = exports.File = File;
        exports.forInStatement = exports.ForInStatement = ForInStatement;
        exports.forStatement = exports.ForStatement = ForStatement;
        exports.functionDeclaration = exports.FunctionDeclaration = FunctionDeclaration;
        exports.functionExpression = exports.FunctionExpression = FunctionExpression;
        exports.identifier = exports.Identifier = Identifier;
        exports.ifStatement = exports.IfStatement = IfStatement;
        exports.labeledStatement = exports.LabeledStatement = LabeledStatement;
        exports.stringLiteral = exports.StringLiteral = StringLiteral;
        exports.numericLiteral = exports.NumericLiteral = NumericLiteral;
        exports.nullLiteral = exports.NullLiteral = NullLiteral;
        exports.booleanLiteral = exports.BooleanLiteral = BooleanLiteral;
        exports.regExpLiteral = exports.RegExpLiteral = RegExpLiteral;
        exports.logicalExpression = exports.LogicalExpression = LogicalExpression;
        exports.memberExpression = exports.MemberExpression = MemberExpression;
        exports.newExpression = exports.NewExpression = NewExpression;
        exports.program = exports.Program = Program;
        exports.objectExpression = exports.ObjectExpression = ObjectExpression;
        exports.objectMethod = exports.ObjectMethod = ObjectMethod;
        exports.objectProperty = exports.ObjectProperty = ObjectProperty;
        exports.restElement = exports.RestElement = RestElement;
        exports.returnStatement = exports.ReturnStatement = ReturnStatement;
        exports.sequenceExpression = exports.SequenceExpression = SequenceExpression;
        exports.switchCase = exports.SwitchCase = SwitchCase;
        exports.switchStatement = exports.SwitchStatement = SwitchStatement;
        exports.thisExpression = exports.ThisExpression = ThisExpression;
        exports.throwStatement = exports.ThrowStatement = ThrowStatement;
        exports.tryStatement = exports.TryStatement = TryStatement;
        exports.unaryExpression = exports.UnaryExpression = UnaryExpression;
        exports.updateExpression = exports.UpdateExpression = UpdateExpression;
        exports.variableDeclaration = exports.VariableDeclaration = VariableDeclaration;
        exports.variableDeclarator = exports.VariableDeclarator = VariableDeclarator;
        exports.whileStatement = exports.WhileStatement = WhileStatement;
        exports.withStatement = exports.WithStatement = WithStatement;
        exports.assignmentPattern = exports.AssignmentPattern = AssignmentPattern;
        exports.arrayPattern = exports.ArrayPattern = ArrayPattern;
        exports.arrowFunctionExpression = exports.ArrowFunctionExpression = ArrowFunctionExpression;
        exports.classBody = exports.ClassBody = ClassBody;
        exports.classDeclaration = exports.ClassDeclaration = ClassDeclaration;
        exports.classExpression = exports.ClassExpression = ClassExpression;
        exports.exportAllDeclaration = exports.ExportAllDeclaration = ExportAllDeclaration;
        exports.exportDefaultDeclaration = exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
        exports.exportNamedDeclaration = exports.ExportNamedDeclaration = ExportNamedDeclaration;
        exports.exportSpecifier = exports.ExportSpecifier = ExportSpecifier;
        exports.forOfStatement = exports.ForOfStatement = ForOfStatement;
        exports.importDeclaration = exports.ImportDeclaration = ImportDeclaration;
        exports.importDefaultSpecifier = exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
        exports.importNamespaceSpecifier = exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
        exports.importSpecifier = exports.ImportSpecifier = ImportSpecifier;
        exports.metaProperty = exports.MetaProperty = MetaProperty;
        exports.classMethod = exports.ClassMethod = ClassMethod;
        exports.objectPattern = exports.ObjectPattern = ObjectPattern;
        exports.spreadElement = exports.SpreadElement = SpreadElement;
        exports.super = exports.Super = Super;
        exports.taggedTemplateExpression = exports.TaggedTemplateExpression = TaggedTemplateExpression;
        exports.templateElement = exports.TemplateElement = TemplateElement;
        exports.templateLiteral = exports.TemplateLiteral = TemplateLiteral;
        exports.yieldExpression = exports.YieldExpression = YieldExpression;
        exports.anyTypeAnnotation = exports.AnyTypeAnnotation = AnyTypeAnnotation;
        exports.arrayTypeAnnotation = exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
        exports.booleanTypeAnnotation = exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
        exports.booleanLiteralTypeAnnotation = exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
        exports.nullLiteralTypeAnnotation = exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
        exports.classImplements = exports.ClassImplements = ClassImplements;
        exports.declareClass = exports.DeclareClass = DeclareClass;
        exports.declareFunction = exports.DeclareFunction = DeclareFunction;
        exports.declareInterface = exports.DeclareInterface = DeclareInterface;
        exports.declareModule = exports.DeclareModule = DeclareModule;
        exports.declareModuleExports = exports.DeclareModuleExports = DeclareModuleExports;
        exports.declareTypeAlias = exports.DeclareTypeAlias = DeclareTypeAlias;
        exports.declareOpaqueType = exports.DeclareOpaqueType = DeclareOpaqueType;
        exports.declareVariable = exports.DeclareVariable = DeclareVariable;
        exports.declareExportDeclaration = exports.DeclareExportDeclaration = DeclareExportDeclaration;
        exports.declareExportAllDeclaration = exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
        exports.declaredPredicate = exports.DeclaredPredicate = DeclaredPredicate;
        exports.existsTypeAnnotation = exports.ExistsTypeAnnotation = ExistsTypeAnnotation;
        exports.functionTypeAnnotation = exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
        exports.functionTypeParam = exports.FunctionTypeParam = FunctionTypeParam;
        exports.genericTypeAnnotation = exports.GenericTypeAnnotation = GenericTypeAnnotation;
        exports.inferredPredicate = exports.InferredPredicate = InferredPredicate;
        exports.interfaceExtends = exports.InterfaceExtends = InterfaceExtends;
        exports.interfaceDeclaration = exports.InterfaceDeclaration = InterfaceDeclaration;
        exports.intersectionTypeAnnotation = exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
        exports.mixedTypeAnnotation = exports.MixedTypeAnnotation = MixedTypeAnnotation;
        exports.emptyTypeAnnotation = exports.EmptyTypeAnnotation = EmptyTypeAnnotation;
        exports.nullableTypeAnnotation = exports.NullableTypeAnnotation = NullableTypeAnnotation;
        exports.numberLiteralTypeAnnotation = exports.NumberLiteralTypeAnnotation = NumberLiteralTypeAnnotation;
        exports.numberTypeAnnotation = exports.NumberTypeAnnotation = NumberTypeAnnotation;
        exports.objectTypeAnnotation = exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
        exports.objectTypeCallProperty = exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
        exports.objectTypeIndexer = exports.ObjectTypeIndexer = ObjectTypeIndexer;
        exports.objectTypeProperty = exports.ObjectTypeProperty = ObjectTypeProperty;
        exports.objectTypeSpreadProperty = exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
        exports.opaqueType = exports.OpaqueType = OpaqueType;
        exports.qualifiedTypeIdentifier = exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
        exports.stringLiteralTypeAnnotation = exports.StringLiteralTypeAnnotation = StringLiteralTypeAnnotation;
        exports.stringTypeAnnotation = exports.StringTypeAnnotation = StringTypeAnnotation;
        exports.thisTypeAnnotation = exports.ThisTypeAnnotation = ThisTypeAnnotation;
        exports.tupleTypeAnnotation = exports.TupleTypeAnnotation = TupleTypeAnnotation;
        exports.typeofTypeAnnotation = exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
        exports.typeAlias = exports.TypeAlias = TypeAlias;
        exports.typeAnnotation = exports.TypeAnnotation = TypeAnnotation;
        exports.typeCastExpression = exports.TypeCastExpression = TypeCastExpression;
        exports.typeParameter = exports.TypeParameter = TypeParameter;
        exports.typeParameterDeclaration = exports.TypeParameterDeclaration = TypeParameterDeclaration;
        exports.typeParameterInstantiation = exports.TypeParameterInstantiation = TypeParameterInstantiation;
        exports.unionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;
        exports.variance = exports.Variance = Variance;
        exports.voidTypeAnnotation = exports.VoidTypeAnnotation = VoidTypeAnnotation;
        exports.jSXAttribute = exports.jsxAttribute = exports.JSXAttribute = JSXAttribute;
        exports.jSXClosingElement = exports.jsxClosingElement = exports.JSXClosingElement = JSXClosingElement;
        exports.jSXElement = exports.jsxElement = exports.JSXElement = JSXElement;
        exports.jSXEmptyExpression = exports.jsxEmptyExpression = exports.JSXEmptyExpression = JSXEmptyExpression;
        exports.jSXExpressionContainer = exports.jsxExpressionContainer = exports.JSXExpressionContainer = JSXExpressionContainer;
        exports.jSXSpreadChild = exports.jsxSpreadChild = exports.JSXSpreadChild = JSXSpreadChild;
        exports.jSXIdentifier = exports.jsxIdentifier = exports.JSXIdentifier = JSXIdentifier;
        exports.jSXMemberExpression = exports.jsxMemberExpression = exports.JSXMemberExpression = JSXMemberExpression;
        exports.jSXNamespacedName = exports.jsxNamespacedName = exports.JSXNamespacedName = JSXNamespacedName;
        exports.jSXOpeningElement = exports.jsxOpeningElement = exports.JSXOpeningElement = JSXOpeningElement;
        exports.jSXSpreadAttribute = exports.jsxSpreadAttribute = exports.JSXSpreadAttribute = JSXSpreadAttribute;
        exports.jSXText = exports.jsxText = exports.JSXText = JSXText;
        exports.jSXFragment = exports.jsxFragment = exports.JSXFragment = JSXFragment;
        exports.jSXOpeningFragment = exports.jsxOpeningFragment = exports.JSXOpeningFragment = JSXOpeningFragment;
        exports.jSXClosingFragment = exports.jsxClosingFragment = exports.JSXClosingFragment = JSXClosingFragment;
        exports.noop = exports.Noop = Noop;
        exports.parenthesizedExpression = exports.ParenthesizedExpression = ParenthesizedExpression;
        exports.awaitExpression = exports.AwaitExpression = AwaitExpression;
        exports.bindExpression = exports.BindExpression = BindExpression;
        exports.classProperty = exports.ClassProperty = ClassProperty;
        exports.optionalMemberExpression = exports.OptionalMemberExpression = OptionalMemberExpression;
        exports.optionalCallExpression = exports.OptionalCallExpression = OptionalCallExpression;
        exports.classPrivateProperty = exports.ClassPrivateProperty = ClassPrivateProperty;
        exports.import = exports.Import = Import;
        exports.decorator = exports.Decorator = Decorator;
        exports.doExpression = exports.DoExpression = DoExpression;
        exports.exportDefaultSpecifier = exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
        exports.exportNamespaceSpecifier = exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
        exports.privateName = exports.PrivateName = PrivateName;
        exports.tSParameterProperty = exports.tsParameterProperty = exports.TSParameterProperty = TSParameterProperty;
        exports.tSDeclareFunction = exports.tsDeclareFunction = exports.TSDeclareFunction = TSDeclareFunction;
        exports.tSDeclareMethod = exports.tsDeclareMethod = exports.TSDeclareMethod = TSDeclareMethod;
        exports.tSQualifiedName = exports.tsQualifiedName = exports.TSQualifiedName = TSQualifiedName;
        exports.tSCallSignatureDeclaration = exports.tsCallSignatureDeclaration = exports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
        exports.tSConstructSignatureDeclaration = exports.tsConstructSignatureDeclaration = exports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
        exports.tSPropertySignature = exports.tsPropertySignature = exports.TSPropertySignature = TSPropertySignature;
        exports.tSMethodSignature = exports.tsMethodSignature = exports.TSMethodSignature = TSMethodSignature;
        exports.tSIndexSignature = exports.tsIndexSignature = exports.TSIndexSignature = TSIndexSignature;
        exports.tSAnyKeyword = exports.tsAnyKeyword = exports.TSAnyKeyword = TSAnyKeyword;
        exports.tSNumberKeyword = exports.tsNumberKeyword = exports.TSNumberKeyword = TSNumberKeyword;
        exports.tSObjectKeyword = exports.tsObjectKeyword = exports.TSObjectKeyword = TSObjectKeyword;
        exports.tSBooleanKeyword = exports.tsBooleanKeyword = exports.TSBooleanKeyword = TSBooleanKeyword;
        exports.tSStringKeyword = exports.tsStringKeyword = exports.TSStringKeyword = TSStringKeyword;
        exports.tSSymbolKeyword = exports.tsSymbolKeyword = exports.TSSymbolKeyword = TSSymbolKeyword;
        exports.tSVoidKeyword = exports.tsVoidKeyword = exports.TSVoidKeyword = TSVoidKeyword;
        exports.tSUndefinedKeyword = exports.tsUndefinedKeyword = exports.TSUndefinedKeyword = TSUndefinedKeyword;
        exports.tSNullKeyword = exports.tsNullKeyword = exports.TSNullKeyword = TSNullKeyword;
        exports.tSNeverKeyword = exports.tsNeverKeyword = exports.TSNeverKeyword = TSNeverKeyword;
        exports.tSThisType = exports.tsThisType = exports.TSThisType = TSThisType;
        exports.tSFunctionType = exports.tsFunctionType = exports.TSFunctionType = TSFunctionType;
        exports.tSConstructorType = exports.tsConstructorType = exports.TSConstructorType = TSConstructorType;
        exports.tSTypeReference = exports.tsTypeReference = exports.TSTypeReference = TSTypeReference;
        exports.tSTypePredicate = exports.tsTypePredicate = exports.TSTypePredicate = TSTypePredicate;
        exports.tSTypeQuery = exports.tsTypeQuery = exports.TSTypeQuery = TSTypeQuery;
        exports.tSTypeLiteral = exports.tsTypeLiteral = exports.TSTypeLiteral = TSTypeLiteral;
        exports.tSArrayType = exports.tsArrayType = exports.TSArrayType = TSArrayType;
        exports.tSTupleType = exports.tsTupleType = exports.TSTupleType = TSTupleType;
        exports.tSUnionType = exports.tsUnionType = exports.TSUnionType = TSUnionType;
        exports.tSIntersectionType = exports.tsIntersectionType = exports.TSIntersectionType = TSIntersectionType;
        exports.tSConditionalType = exports.tsConditionalType = exports.TSConditionalType = TSConditionalType;
        exports.tSInferType = exports.tsInferType = exports.TSInferType = TSInferType;
        exports.tSParenthesizedType = exports.tsParenthesizedType = exports.TSParenthesizedType = TSParenthesizedType;
        exports.tSTypeOperator = exports.tsTypeOperator = exports.TSTypeOperator = TSTypeOperator;
        exports.tSIndexedAccessType = exports.tsIndexedAccessType = exports.TSIndexedAccessType = TSIndexedAccessType;
        exports.tSMappedType = exports.tsMappedType = exports.TSMappedType = TSMappedType;
        exports.tSLiteralType = exports.tsLiteralType = exports.TSLiteralType = TSLiteralType;
        exports.tSExpressionWithTypeArguments = exports.tsExpressionWithTypeArguments = exports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
        exports.tSInterfaceDeclaration = exports.tsInterfaceDeclaration = exports.TSInterfaceDeclaration = TSInterfaceDeclaration;
        exports.tSInterfaceBody = exports.tsInterfaceBody = exports.TSInterfaceBody = TSInterfaceBody;
        exports.tSTypeAliasDeclaration = exports.tsTypeAliasDeclaration = exports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
        exports.tSAsExpression = exports.tsAsExpression = exports.TSAsExpression = TSAsExpression;
        exports.tSTypeAssertion = exports.tsTypeAssertion = exports.TSTypeAssertion = TSTypeAssertion;
        exports.tSEnumDeclaration = exports.tsEnumDeclaration = exports.TSEnumDeclaration = TSEnumDeclaration;
        exports.tSEnumMember = exports.tsEnumMember = exports.TSEnumMember = TSEnumMember;
        exports.tSModuleDeclaration = exports.tsModuleDeclaration = exports.TSModuleDeclaration = TSModuleDeclaration;
        exports.tSModuleBlock = exports.tsModuleBlock = exports.TSModuleBlock = TSModuleBlock;
        exports.tSImportEqualsDeclaration = exports.tsImportEqualsDeclaration = exports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
        exports.tSExternalModuleReference = exports.tsExternalModuleReference = exports.TSExternalModuleReference = TSExternalModuleReference;
        exports.tSNonNullExpression = exports.tsNonNullExpression = exports.TSNonNullExpression = TSNonNullExpression;
        exports.tSExportAssignment = exports.tsExportAssignment = exports.TSExportAssignment = TSExportAssignment;
        exports.tSNamespaceExportDeclaration = exports.tsNamespaceExportDeclaration = exports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
        exports.tSTypeAnnotation = exports.tsTypeAnnotation = exports.TSTypeAnnotation = TSTypeAnnotation;
        exports.tSTypeParameterInstantiation = exports.tsTypeParameterInstantiation = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
        exports.tSTypeParameterDeclaration = exports.tsTypeParameterDeclaration = exports.TSTypeParameterDeclaration = TSTypeParameterDeclaration;
        exports.tSTypeParameter = exports.tsTypeParameter = exports.TSTypeParameter = TSTypeParameter;
        exports.numberLiteral = exports.NumberLiteral = NumberLiteral;
        exports.regexLiteral = exports.RegexLiteral = RegexLiteral;
        exports.restProperty = exports.RestProperty = RestProperty;
        exports.spreadProperty = exports.SpreadProperty = SpreadProperty;

        var _builder = _interopRequireDefault(__webpack_require__(254));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function ArrayExpression() {
          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key];
          }

          return _builder.default.apply(
            void 0,
            ["ArrayExpression"].concat(args)
          );
        }

        function AssignmentExpression() {
          for (
            var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
            _key2 < _len2;
            _key2++
          ) {
            args[_key2] = arguments[_key2];
          }

          return _builder.default.apply(
            void 0,
            ["AssignmentExpression"].concat(args)
          );
        }

        function BinaryExpression() {
          for (
            var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
            _key3 < _len3;
            _key3++
          ) {
            args[_key3] = arguments[_key3];
          }

          return _builder.default.apply(
            void 0,
            ["BinaryExpression"].concat(args)
          );
        }

        function Directive() {
          for (
            var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
            _key4 < _len4;
            _key4++
          ) {
            args[_key4] = arguments[_key4];
          }

          return _builder.default.apply(void 0, ["Directive"].concat(args));
        }

        function DirectiveLiteral() {
          for (
            var _len5 = arguments.length, args = new Array(_len5), _key5 = 0;
            _key5 < _len5;
            _key5++
          ) {
            args[_key5] = arguments[_key5];
          }

          return _builder.default.apply(
            void 0,
            ["DirectiveLiteral"].concat(args)
          );
        }

        function BlockStatement() {
          for (
            var _len6 = arguments.length, args = new Array(_len6), _key6 = 0;
            _key6 < _len6;
            _key6++
          ) {
            args[_key6] = arguments[_key6];
          }

          return _builder.default.apply(
            void 0,
            ["BlockStatement"].concat(args)
          );
        }

        function BreakStatement() {
          for (
            var _len7 = arguments.length, args = new Array(_len7), _key7 = 0;
            _key7 < _len7;
            _key7++
          ) {
            args[_key7] = arguments[_key7];
          }

          return _builder.default.apply(
            void 0,
            ["BreakStatement"].concat(args)
          );
        }

        function CallExpression() {
          for (
            var _len8 = arguments.length, args = new Array(_len8), _key8 = 0;
            _key8 < _len8;
            _key8++
          ) {
            args[_key8] = arguments[_key8];
          }

          return _builder.default.apply(
            void 0,
            ["CallExpression"].concat(args)
          );
        }

        function CatchClause() {
          for (
            var _len9 = arguments.length, args = new Array(_len9), _key9 = 0;
            _key9 < _len9;
            _key9++
          ) {
            args[_key9] = arguments[_key9];
          }

          return _builder.default.apply(void 0, ["CatchClause"].concat(args));
        }

        function ConditionalExpression() {
          for (
            var _len10 = arguments.length, args = new Array(_len10), _key10 = 0;
            _key10 < _len10;
            _key10++
          ) {
            args[_key10] = arguments[_key10];
          }

          return _builder.default.apply(
            void 0,
            ["ConditionalExpression"].concat(args)
          );
        }

        function ContinueStatement() {
          for (
            var _len11 = arguments.length, args = new Array(_len11), _key11 = 0;
            _key11 < _len11;
            _key11++
          ) {
            args[_key11] = arguments[_key11];
          }

          return _builder.default.apply(
            void 0,
            ["ContinueStatement"].concat(args)
          );
        }

        function DebuggerStatement() {
          for (
            var _len12 = arguments.length, args = new Array(_len12), _key12 = 0;
            _key12 < _len12;
            _key12++
          ) {
            args[_key12] = arguments[_key12];
          }

          return _builder.default.apply(
            void 0,
            ["DebuggerStatement"].concat(args)
          );
        }

        function DoWhileStatement() {
          for (
            var _len13 = arguments.length, args = new Array(_len13), _key13 = 0;
            _key13 < _len13;
            _key13++
          ) {
            args[_key13] = arguments[_key13];
          }

          return _builder.default.apply(
            void 0,
            ["DoWhileStatement"].concat(args)
          );
        }

        function EmptyStatement() {
          for (
            var _len14 = arguments.length, args = new Array(_len14), _key14 = 0;
            _key14 < _len14;
            _key14++
          ) {
            args[_key14] = arguments[_key14];
          }

          return _builder.default.apply(
            void 0,
            ["EmptyStatement"].concat(args)
          );
        }

        function ExpressionStatement() {
          for (
            var _len15 = arguments.length, args = new Array(_len15), _key15 = 0;
            _key15 < _len15;
            _key15++
          ) {
            args[_key15] = arguments[_key15];
          }

          return _builder.default.apply(
            void 0,
            ["ExpressionStatement"].concat(args)
          );
        }

        function File() {
          for (
            var _len16 = arguments.length, args = new Array(_len16), _key16 = 0;
            _key16 < _len16;
            _key16++
          ) {
            args[_key16] = arguments[_key16];
          }

          return _builder.default.apply(void 0, ["File"].concat(args));
        }

        function ForInStatement() {
          for (
            var _len17 = arguments.length, args = new Array(_len17), _key17 = 0;
            _key17 < _len17;
            _key17++
          ) {
            args[_key17] = arguments[_key17];
          }

          return _builder.default.apply(
            void 0,
            ["ForInStatement"].concat(args)
          );
        }

        function ForStatement() {
          for (
            var _len18 = arguments.length, args = new Array(_len18), _key18 = 0;
            _key18 < _len18;
            _key18++
          ) {
            args[_key18] = arguments[_key18];
          }

          return _builder.default.apply(void 0, ["ForStatement"].concat(args));
        }

        function FunctionDeclaration() {
          for (
            var _len19 = arguments.length, args = new Array(_len19), _key19 = 0;
            _key19 < _len19;
            _key19++
          ) {
            args[_key19] = arguments[_key19];
          }

          return _builder.default.apply(
            void 0,
            ["FunctionDeclaration"].concat(args)
          );
        }

        function FunctionExpression() {
          for (
            var _len20 = arguments.length, args = new Array(_len20), _key20 = 0;
            _key20 < _len20;
            _key20++
          ) {
            args[_key20] = arguments[_key20];
          }

          return _builder.default.apply(
            void 0,
            ["FunctionExpression"].concat(args)
          );
        }

        function Identifier() {
          for (
            var _len21 = arguments.length, args = new Array(_len21), _key21 = 0;
            _key21 < _len21;
            _key21++
          ) {
            args[_key21] = arguments[_key21];
          }

          return _builder.default.apply(void 0, ["Identifier"].concat(args));
        }

        function IfStatement() {
          for (
            var _len22 = arguments.length, args = new Array(_len22), _key22 = 0;
            _key22 < _len22;
            _key22++
          ) {
            args[_key22] = arguments[_key22];
          }

          return _builder.default.apply(void 0, ["IfStatement"].concat(args));
        }

        function LabeledStatement() {
          for (
            var _len23 = arguments.length, args = new Array(_len23), _key23 = 0;
            _key23 < _len23;
            _key23++
          ) {
            args[_key23] = arguments[_key23];
          }

          return _builder.default.apply(
            void 0,
            ["LabeledStatement"].concat(args)
          );
        }

        function StringLiteral() {
          for (
            var _len24 = arguments.length, args = new Array(_len24), _key24 = 0;
            _key24 < _len24;
            _key24++
          ) {
            args[_key24] = arguments[_key24];
          }

          return _builder.default.apply(void 0, ["StringLiteral"].concat(args));
        }

        function NumericLiteral() {
          for (
            var _len25 = arguments.length, args = new Array(_len25), _key25 = 0;
            _key25 < _len25;
            _key25++
          ) {
            args[_key25] = arguments[_key25];
          }

          return _builder.default.apply(
            void 0,
            ["NumericLiteral"].concat(args)
          );
        }

        function NullLiteral() {
          for (
            var _len26 = arguments.length, args = new Array(_len26), _key26 = 0;
            _key26 < _len26;
            _key26++
          ) {
            args[_key26] = arguments[_key26];
          }

          return _builder.default.apply(void 0, ["NullLiteral"].concat(args));
        }

        function BooleanLiteral() {
          for (
            var _len27 = arguments.length, args = new Array(_len27), _key27 = 0;
            _key27 < _len27;
            _key27++
          ) {
            args[_key27] = arguments[_key27];
          }

          return _builder.default.apply(
            void 0,
            ["BooleanLiteral"].concat(args)
          );
        }

        function RegExpLiteral() {
          for (
            var _len28 = arguments.length, args = new Array(_len28), _key28 = 0;
            _key28 < _len28;
            _key28++
          ) {
            args[_key28] = arguments[_key28];
          }

          return _builder.default.apply(void 0, ["RegExpLiteral"].concat(args));
        }

        function LogicalExpression() {
          for (
            var _len29 = arguments.length, args = new Array(_len29), _key29 = 0;
            _key29 < _len29;
            _key29++
          ) {
            args[_key29] = arguments[_key29];
          }

          return _builder.default.apply(
            void 0,
            ["LogicalExpression"].concat(args)
          );
        }

        function MemberExpression() {
          for (
            var _len30 = arguments.length, args = new Array(_len30), _key30 = 0;
            _key30 < _len30;
            _key30++
          ) {
            args[_key30] = arguments[_key30];
          }

          return _builder.default.apply(
            void 0,
            ["MemberExpression"].concat(args)
          );
        }

        function NewExpression() {
          for (
            var _len31 = arguments.length, args = new Array(_len31), _key31 = 0;
            _key31 < _len31;
            _key31++
          ) {
            args[_key31] = arguments[_key31];
          }

          return _builder.default.apply(void 0, ["NewExpression"].concat(args));
        }

        function Program() {
          for (
            var _len32 = arguments.length, args = new Array(_len32), _key32 = 0;
            _key32 < _len32;
            _key32++
          ) {
            args[_key32] = arguments[_key32];
          }

          return _builder.default.apply(void 0, ["Program"].concat(args));
        }

        function ObjectExpression() {
          for (
            var _len33 = arguments.length, args = new Array(_len33), _key33 = 0;
            _key33 < _len33;
            _key33++
          ) {
            args[_key33] = arguments[_key33];
          }

          return _builder.default.apply(
            void 0,
            ["ObjectExpression"].concat(args)
          );
        }

        function ObjectMethod() {
          for (
            var _len34 = arguments.length, args = new Array(_len34), _key34 = 0;
            _key34 < _len34;
            _key34++
          ) {
            args[_key34] = arguments[_key34];
          }

          return _builder.default.apply(void 0, ["ObjectMethod"].concat(args));
        }

        function ObjectProperty() {
          for (
            var _len35 = arguments.length, args = new Array(_len35), _key35 = 0;
            _key35 < _len35;
            _key35++
          ) {
            args[_key35] = arguments[_key35];
          }

          return _builder.default.apply(
            void 0,
            ["ObjectProperty"].concat(args)
          );
        }

        function RestElement() {
          for (
            var _len36 = arguments.length, args = new Array(_len36), _key36 = 0;
            _key36 < _len36;
            _key36++
          ) {
            args[_key36] = arguments[_key36];
          }

          return _builder.default.apply(void 0, ["RestElement"].concat(args));
        }

        function ReturnStatement() {
          for (
            var _len37 = arguments.length, args = new Array(_len37), _key37 = 0;
            _key37 < _len37;
            _key37++
          ) {
            args[_key37] = arguments[_key37];
          }

          return _builder.default.apply(
            void 0,
            ["ReturnStatement"].concat(args)
          );
        }

        function SequenceExpression() {
          for (
            var _len38 = arguments.length, args = new Array(_len38), _key38 = 0;
            _key38 < _len38;
            _key38++
          ) {
            args[_key38] = arguments[_key38];
          }

          return _builder.default.apply(
            void 0,
            ["SequenceExpression"].concat(args)
          );
        }

        function SwitchCase() {
          for (
            var _len39 = arguments.length, args = new Array(_len39), _key39 = 0;
            _key39 < _len39;
            _key39++
          ) {
            args[_key39] = arguments[_key39];
          }

          return _builder.default.apply(void 0, ["SwitchCase"].concat(args));
        }

        function SwitchStatement() {
          for (
            var _len40 = arguments.length, args = new Array(_len40), _key40 = 0;
            _key40 < _len40;
            _key40++
          ) {
            args[_key40] = arguments[_key40];
          }

          return _builder.default.apply(
            void 0,
            ["SwitchStatement"].concat(args)
          );
        }

        function ThisExpression() {
          for (
            var _len41 = arguments.length, args = new Array(_len41), _key41 = 0;
            _key41 < _len41;
            _key41++
          ) {
            args[_key41] = arguments[_key41];
          }

          return _builder.default.apply(
            void 0,
            ["ThisExpression"].concat(args)
          );
        }

        function ThrowStatement() {
          for (
            var _len42 = arguments.length, args = new Array(_len42), _key42 = 0;
            _key42 < _len42;
            _key42++
          ) {
            args[_key42] = arguments[_key42];
          }

          return _builder.default.apply(
            void 0,
            ["ThrowStatement"].concat(args)
          );
        }

        function TryStatement() {
          for (
            var _len43 = arguments.length, args = new Array(_len43), _key43 = 0;
            _key43 < _len43;
            _key43++
          ) {
            args[_key43] = arguments[_key43];
          }

          return _builder.default.apply(void 0, ["TryStatement"].concat(args));
        }

        function UnaryExpression() {
          for (
            var _len44 = arguments.length, args = new Array(_len44), _key44 = 0;
            _key44 < _len44;
            _key44++
          ) {
            args[_key44] = arguments[_key44];
          }

          return _builder.default.apply(
            void 0,
            ["UnaryExpression"].concat(args)
          );
        }

        function UpdateExpression() {
          for (
            var _len45 = arguments.length, args = new Array(_len45), _key45 = 0;
            _key45 < _len45;
            _key45++
          ) {
            args[_key45] = arguments[_key45];
          }

          return _builder.default.apply(
            void 0,
            ["UpdateExpression"].concat(args)
          );
        }

        function VariableDeclaration() {
          for (
            var _len46 = arguments.length, args = new Array(_len46), _key46 = 0;
            _key46 < _len46;
            _key46++
          ) {
            args[_key46] = arguments[_key46];
          }

          return _builder.default.apply(
            void 0,
            ["VariableDeclaration"].concat(args)
          );
        }

        function VariableDeclarator() {
          for (
            var _len47 = arguments.length, args = new Array(_len47), _key47 = 0;
            _key47 < _len47;
            _key47++
          ) {
            args[_key47] = arguments[_key47];
          }

          return _builder.default.apply(
            void 0,
            ["VariableDeclarator"].concat(args)
          );
        }

        function WhileStatement() {
          for (
            var _len48 = arguments.length, args = new Array(_len48), _key48 = 0;
            _key48 < _len48;
            _key48++
          ) {
            args[_key48] = arguments[_key48];
          }

          return _builder.default.apply(
            void 0,
            ["WhileStatement"].concat(args)
          );
        }

        function WithStatement() {
          for (
            var _len49 = arguments.length, args = new Array(_len49), _key49 = 0;
            _key49 < _len49;
            _key49++
          ) {
            args[_key49] = arguments[_key49];
          }

          return _builder.default.apply(void 0, ["WithStatement"].concat(args));
        }

        function AssignmentPattern() {
          for (
            var _len50 = arguments.length, args = new Array(_len50), _key50 = 0;
            _key50 < _len50;
            _key50++
          ) {
            args[_key50] = arguments[_key50];
          }

          return _builder.default.apply(
            void 0,
            ["AssignmentPattern"].concat(args)
          );
        }

        function ArrayPattern() {
          for (
            var _len51 = arguments.length, args = new Array(_len51), _key51 = 0;
            _key51 < _len51;
            _key51++
          ) {
            args[_key51] = arguments[_key51];
          }

          return _builder.default.apply(void 0, ["ArrayPattern"].concat(args));
        }

        function ArrowFunctionExpression() {
          for (
            var _len52 = arguments.length, args = new Array(_len52), _key52 = 0;
            _key52 < _len52;
            _key52++
          ) {
            args[_key52] = arguments[_key52];
          }

          return _builder.default.apply(
            void 0,
            ["ArrowFunctionExpression"].concat(args)
          );
        }

        function ClassBody() {
          for (
            var _len53 = arguments.length, args = new Array(_len53), _key53 = 0;
            _key53 < _len53;
            _key53++
          ) {
            args[_key53] = arguments[_key53];
          }

          return _builder.default.apply(void 0, ["ClassBody"].concat(args));
        }

        function ClassDeclaration() {
          for (
            var _len54 = arguments.length, args = new Array(_len54), _key54 = 0;
            _key54 < _len54;
            _key54++
          ) {
            args[_key54] = arguments[_key54];
          }

          return _builder.default.apply(
            void 0,
            ["ClassDeclaration"].concat(args)
          );
        }

        function ClassExpression() {
          for (
            var _len55 = arguments.length, args = new Array(_len55), _key55 = 0;
            _key55 < _len55;
            _key55++
          ) {
            args[_key55] = arguments[_key55];
          }

          return _builder.default.apply(
            void 0,
            ["ClassExpression"].concat(args)
          );
        }

        function ExportAllDeclaration() {
          for (
            var _len56 = arguments.length, args = new Array(_len56), _key56 = 0;
            _key56 < _len56;
            _key56++
          ) {
            args[_key56] = arguments[_key56];
          }

          return _builder.default.apply(
            void 0,
            ["ExportAllDeclaration"].concat(args)
          );
        }

        function ExportDefaultDeclaration() {
          for (
            var _len57 = arguments.length, args = new Array(_len57), _key57 = 0;
            _key57 < _len57;
            _key57++
          ) {
            args[_key57] = arguments[_key57];
          }

          return _builder.default.apply(
            void 0,
            ["ExportDefaultDeclaration"].concat(args)
          );
        }

        function ExportNamedDeclaration() {
          for (
            var _len58 = arguments.length, args = new Array(_len58), _key58 = 0;
            _key58 < _len58;
            _key58++
          ) {
            args[_key58] = arguments[_key58];
          }

          return _builder.default.apply(
            void 0,
            ["ExportNamedDeclaration"].concat(args)
          );
        }

        function ExportSpecifier() {
          for (
            var _len59 = arguments.length, args = new Array(_len59), _key59 = 0;
            _key59 < _len59;
            _key59++
          ) {
            args[_key59] = arguments[_key59];
          }

          return _builder.default.apply(
            void 0,
            ["ExportSpecifier"].concat(args)
          );
        }

        function ForOfStatement() {
          for (
            var _len60 = arguments.length, args = new Array(_len60), _key60 = 0;
            _key60 < _len60;
            _key60++
          ) {
            args[_key60] = arguments[_key60];
          }

          return _builder.default.apply(
            void 0,
            ["ForOfStatement"].concat(args)
          );
        }

        function ImportDeclaration() {
          for (
            var _len61 = arguments.length, args = new Array(_len61), _key61 = 0;
            _key61 < _len61;
            _key61++
          ) {
            args[_key61] = arguments[_key61];
          }

          return _builder.default.apply(
            void 0,
            ["ImportDeclaration"].concat(args)
          );
        }

        function ImportDefaultSpecifier() {
          for (
            var _len62 = arguments.length, args = new Array(_len62), _key62 = 0;
            _key62 < _len62;
            _key62++
          ) {
            args[_key62] = arguments[_key62];
          }

          return _builder.default.apply(
            void 0,
            ["ImportDefaultSpecifier"].concat(args)
          );
        }

        function ImportNamespaceSpecifier() {
          for (
            var _len63 = arguments.length, args = new Array(_len63), _key63 = 0;
            _key63 < _len63;
            _key63++
          ) {
            args[_key63] = arguments[_key63];
          }

          return _builder.default.apply(
            void 0,
            ["ImportNamespaceSpecifier"].concat(args)
          );
        }

        function ImportSpecifier() {
          for (
            var _len64 = arguments.length, args = new Array(_len64), _key64 = 0;
            _key64 < _len64;
            _key64++
          ) {
            args[_key64] = arguments[_key64];
          }

          return _builder.default.apply(
            void 0,
            ["ImportSpecifier"].concat(args)
          );
        }

        function MetaProperty() {
          for (
            var _len65 = arguments.length, args = new Array(_len65), _key65 = 0;
            _key65 < _len65;
            _key65++
          ) {
            args[_key65] = arguments[_key65];
          }

          return _builder.default.apply(void 0, ["MetaProperty"].concat(args));
        }

        function ClassMethod() {
          for (
            var _len66 = arguments.length, args = new Array(_len66), _key66 = 0;
            _key66 < _len66;
            _key66++
          ) {
            args[_key66] = arguments[_key66];
          }

          return _builder.default.apply(void 0, ["ClassMethod"].concat(args));
        }

        function ObjectPattern() {
          for (
            var _len67 = arguments.length, args = new Array(_len67), _key67 = 0;
            _key67 < _len67;
            _key67++
          ) {
            args[_key67] = arguments[_key67];
          }

          return _builder.default.apply(void 0, ["ObjectPattern"].concat(args));
        }

        function SpreadElement() {
          for (
            var _len68 = arguments.length, args = new Array(_len68), _key68 = 0;
            _key68 < _len68;
            _key68++
          ) {
            args[_key68] = arguments[_key68];
          }

          return _builder.default.apply(void 0, ["SpreadElement"].concat(args));
        }

        function Super() {
          for (
            var _len69 = arguments.length, args = new Array(_len69), _key69 = 0;
            _key69 < _len69;
            _key69++
          ) {
            args[_key69] = arguments[_key69];
          }

          return _builder.default.apply(void 0, ["Super"].concat(args));
        }

        function TaggedTemplateExpression() {
          for (
            var _len70 = arguments.length, args = new Array(_len70), _key70 = 0;
            _key70 < _len70;
            _key70++
          ) {
            args[_key70] = arguments[_key70];
          }

          return _builder.default.apply(
            void 0,
            ["TaggedTemplateExpression"].concat(args)
          );
        }

        function TemplateElement() {
          for (
            var _len71 = arguments.length, args = new Array(_len71), _key71 = 0;
            _key71 < _len71;
            _key71++
          ) {
            args[_key71] = arguments[_key71];
          }

          return _builder.default.apply(
            void 0,
            ["TemplateElement"].concat(args)
          );
        }

        function TemplateLiteral() {
          for (
            var _len72 = arguments.length, args = new Array(_len72), _key72 = 0;
            _key72 < _len72;
            _key72++
          ) {
            args[_key72] = arguments[_key72];
          }

          return _builder.default.apply(
            void 0,
            ["TemplateLiteral"].concat(args)
          );
        }

        function YieldExpression() {
          for (
            var _len73 = arguments.length, args = new Array(_len73), _key73 = 0;
            _key73 < _len73;
            _key73++
          ) {
            args[_key73] = arguments[_key73];
          }

          return _builder.default.apply(
            void 0,
            ["YieldExpression"].concat(args)
          );
        }

        function AnyTypeAnnotation() {
          for (
            var _len74 = arguments.length, args = new Array(_len74), _key74 = 0;
            _key74 < _len74;
            _key74++
          ) {
            args[_key74] = arguments[_key74];
          }

          return _builder.default.apply(
            void 0,
            ["AnyTypeAnnotation"].concat(args)
          );
        }

        function ArrayTypeAnnotation() {
          for (
            var _len75 = arguments.length, args = new Array(_len75), _key75 = 0;
            _key75 < _len75;
            _key75++
          ) {
            args[_key75] = arguments[_key75];
          }

          return _builder.default.apply(
            void 0,
            ["ArrayTypeAnnotation"].concat(args)
          );
        }

        function BooleanTypeAnnotation() {
          for (
            var _len76 = arguments.length, args = new Array(_len76), _key76 = 0;
            _key76 < _len76;
            _key76++
          ) {
            args[_key76] = arguments[_key76];
          }

          return _builder.default.apply(
            void 0,
            ["BooleanTypeAnnotation"].concat(args)
          );
        }

        function BooleanLiteralTypeAnnotation() {
          for (
            var _len77 = arguments.length, args = new Array(_len77), _key77 = 0;
            _key77 < _len77;
            _key77++
          ) {
            args[_key77] = arguments[_key77];
          }

          return _builder.default.apply(
            void 0,
            ["BooleanLiteralTypeAnnotation"].concat(args)
          );
        }

        function NullLiteralTypeAnnotation() {
          for (
            var _len78 = arguments.length, args = new Array(_len78), _key78 = 0;
            _key78 < _len78;
            _key78++
          ) {
            args[_key78] = arguments[_key78];
          }

          return _builder.default.apply(
            void 0,
            ["NullLiteralTypeAnnotation"].concat(args)
          );
        }

        function ClassImplements() {
          for (
            var _len79 = arguments.length, args = new Array(_len79), _key79 = 0;
            _key79 < _len79;
            _key79++
          ) {
            args[_key79] = arguments[_key79];
          }

          return _builder.default.apply(
            void 0,
            ["ClassImplements"].concat(args)
          );
        }

        function DeclareClass() {
          for (
            var _len80 = arguments.length, args = new Array(_len80), _key80 = 0;
            _key80 < _len80;
            _key80++
          ) {
            args[_key80] = arguments[_key80];
          }

          return _builder.default.apply(void 0, ["DeclareClass"].concat(args));
        }

        function DeclareFunction() {
          for (
            var _len81 = arguments.length, args = new Array(_len81), _key81 = 0;
            _key81 < _len81;
            _key81++
          ) {
            args[_key81] = arguments[_key81];
          }

          return _builder.default.apply(
            void 0,
            ["DeclareFunction"].concat(args)
          );
        }

        function DeclareInterface() {
          for (
            var _len82 = arguments.length, args = new Array(_len82), _key82 = 0;
            _key82 < _len82;
            _key82++
          ) {
            args[_key82] = arguments[_key82];
          }

          return _builder.default.apply(
            void 0,
            ["DeclareInterface"].concat(args)
          );
        }

        function DeclareModule() {
          for (
            var _len83 = arguments.length, args = new Array(_len83), _key83 = 0;
            _key83 < _len83;
            _key83++
          ) {
            args[_key83] = arguments[_key83];
          }

          return _builder.default.apply(void 0, ["DeclareModule"].concat(args));
        }

        function DeclareModuleExports() {
          for (
            var _len84 = arguments.length, args = new Array(_len84), _key84 = 0;
            _key84 < _len84;
            _key84++
          ) {
            args[_key84] = arguments[_key84];
          }

          return _builder.default.apply(
            void 0,
            ["DeclareModuleExports"].concat(args)
          );
        }

        function DeclareTypeAlias() {
          for (
            var _len85 = arguments.length, args = new Array(_len85), _key85 = 0;
            _key85 < _len85;
            _key85++
          ) {
            args[_key85] = arguments[_key85];
          }

          return _builder.default.apply(
            void 0,
            ["DeclareTypeAlias"].concat(args)
          );
        }

        function DeclareOpaqueType() {
          for (
            var _len86 = arguments.length, args = new Array(_len86), _key86 = 0;
            _key86 < _len86;
            _key86++
          ) {
            args[_key86] = arguments[_key86];
          }

          return _builder.default.apply(
            void 0,
            ["DeclareOpaqueType"].concat(args)
          );
        }

        function DeclareVariable() {
          for (
            var _len87 = arguments.length, args = new Array(_len87), _key87 = 0;
            _key87 < _len87;
            _key87++
          ) {
            args[_key87] = arguments[_key87];
          }

          return _builder.default.apply(
            void 0,
            ["DeclareVariable"].concat(args)
          );
        }

        function DeclareExportDeclaration() {
          for (
            var _len88 = arguments.length, args = new Array(_len88), _key88 = 0;
            _key88 < _len88;
            _key88++
          ) {
            args[_key88] = arguments[_key88];
          }

          return _builder.default.apply(
            void 0,
            ["DeclareExportDeclaration"].concat(args)
          );
        }

        function DeclareExportAllDeclaration() {
          for (
            var _len89 = arguments.length, args = new Array(_len89), _key89 = 0;
            _key89 < _len89;
            _key89++
          ) {
            args[_key89] = arguments[_key89];
          }

          return _builder.default.apply(
            void 0,
            ["DeclareExportAllDeclaration"].concat(args)
          );
        }

        function DeclaredPredicate() {
          for (
            var _len90 = arguments.length, args = new Array(_len90), _key90 = 0;
            _key90 < _len90;
            _key90++
          ) {
            args[_key90] = arguments[_key90];
          }

          return _builder.default.apply(
            void 0,
            ["DeclaredPredicate"].concat(args)
          );
        }

        function ExistsTypeAnnotation() {
          for (
            var _len91 = arguments.length, args = new Array(_len91), _key91 = 0;
            _key91 < _len91;
            _key91++
          ) {
            args[_key91] = arguments[_key91];
          }

          return _builder.default.apply(
            void 0,
            ["ExistsTypeAnnotation"].concat(args)
          );
        }

        function FunctionTypeAnnotation() {
          for (
            var _len92 = arguments.length, args = new Array(_len92), _key92 = 0;
            _key92 < _len92;
            _key92++
          ) {
            args[_key92] = arguments[_key92];
          }

          return _builder.default.apply(
            void 0,
            ["FunctionTypeAnnotation"].concat(args)
          );
        }

        function FunctionTypeParam() {
          for (
            var _len93 = arguments.length, args = new Array(_len93), _key93 = 0;
            _key93 < _len93;
            _key93++
          ) {
            args[_key93] = arguments[_key93];
          }

          return _builder.default.apply(
            void 0,
            ["FunctionTypeParam"].concat(args)
          );
        }

        function GenericTypeAnnotation() {
          for (
            var _len94 = arguments.length, args = new Array(_len94), _key94 = 0;
            _key94 < _len94;
            _key94++
          ) {
            args[_key94] = arguments[_key94];
          }

          return _builder.default.apply(
            void 0,
            ["GenericTypeAnnotation"].concat(args)
          );
        }

        function InferredPredicate() {
          for (
            var _len95 = arguments.length, args = new Array(_len95), _key95 = 0;
            _key95 < _len95;
            _key95++
          ) {
            args[_key95] = arguments[_key95];
          }

          return _builder.default.apply(
            void 0,
            ["InferredPredicate"].concat(args)
          );
        }

        function InterfaceExtends() {
          for (
            var _len96 = arguments.length, args = new Array(_len96), _key96 = 0;
            _key96 < _len96;
            _key96++
          ) {
            args[_key96] = arguments[_key96];
          }

          return _builder.default.apply(
            void 0,
            ["InterfaceExtends"].concat(args)
          );
        }

        function InterfaceDeclaration() {
          for (
            var _len97 = arguments.length, args = new Array(_len97), _key97 = 0;
            _key97 < _len97;
            _key97++
          ) {
            args[_key97] = arguments[_key97];
          }

          return _builder.default.apply(
            void 0,
            ["InterfaceDeclaration"].concat(args)
          );
        }

        function IntersectionTypeAnnotation() {
          for (
            var _len98 = arguments.length, args = new Array(_len98), _key98 = 0;
            _key98 < _len98;
            _key98++
          ) {
            args[_key98] = arguments[_key98];
          }

          return _builder.default.apply(
            void 0,
            ["IntersectionTypeAnnotation"].concat(args)
          );
        }

        function MixedTypeAnnotation() {
          for (
            var _len99 = arguments.length, args = new Array(_len99), _key99 = 0;
            _key99 < _len99;
            _key99++
          ) {
            args[_key99] = arguments[_key99];
          }

          return _builder.default.apply(
            void 0,
            ["MixedTypeAnnotation"].concat(args)
          );
        }

        function EmptyTypeAnnotation() {
          for (
            var _len100 = arguments.length,
              args = new Array(_len100),
              _key100 = 0;
            _key100 < _len100;
            _key100++
          ) {
            args[_key100] = arguments[_key100];
          }

          return _builder.default.apply(
            void 0,
            ["EmptyTypeAnnotation"].concat(args)
          );
        }

        function NullableTypeAnnotation() {
          for (
            var _len101 = arguments.length,
              args = new Array(_len101),
              _key101 = 0;
            _key101 < _len101;
            _key101++
          ) {
            args[_key101] = arguments[_key101];
          }

          return _builder.default.apply(
            void 0,
            ["NullableTypeAnnotation"].concat(args)
          );
        }

        function NumberLiteralTypeAnnotation() {
          for (
            var _len102 = arguments.length,
              args = new Array(_len102),
              _key102 = 0;
            _key102 < _len102;
            _key102++
          ) {
            args[_key102] = arguments[_key102];
          }

          return _builder.default.apply(
            void 0,
            ["NumberLiteralTypeAnnotation"].concat(args)
          );
        }

        function NumberTypeAnnotation() {
          for (
            var _len103 = arguments.length,
              args = new Array(_len103),
              _key103 = 0;
            _key103 < _len103;
            _key103++
          ) {
            args[_key103] = arguments[_key103];
          }

          return _builder.default.apply(
            void 0,
            ["NumberTypeAnnotation"].concat(args)
          );
        }

        function ObjectTypeAnnotation() {
          for (
            var _len104 = arguments.length,
              args = new Array(_len104),
              _key104 = 0;
            _key104 < _len104;
            _key104++
          ) {
            args[_key104] = arguments[_key104];
          }

          return _builder.default.apply(
            void 0,
            ["ObjectTypeAnnotation"].concat(args)
          );
        }

        function ObjectTypeCallProperty() {
          for (
            var _len105 = arguments.length,
              args = new Array(_len105),
              _key105 = 0;
            _key105 < _len105;
            _key105++
          ) {
            args[_key105] = arguments[_key105];
          }

          return _builder.default.apply(
            void 0,
            ["ObjectTypeCallProperty"].concat(args)
          );
        }

        function ObjectTypeIndexer() {
          for (
            var _len106 = arguments.length,
              args = new Array(_len106),
              _key106 = 0;
            _key106 < _len106;
            _key106++
          ) {
            args[_key106] = arguments[_key106];
          }

          return _builder.default.apply(
            void 0,
            ["ObjectTypeIndexer"].concat(args)
          );
        }

        function ObjectTypeProperty() {
          for (
            var _len107 = arguments.length,
              args = new Array(_len107),
              _key107 = 0;
            _key107 < _len107;
            _key107++
          ) {
            args[_key107] = arguments[_key107];
          }

          return _builder.default.apply(
            void 0,
            ["ObjectTypeProperty"].concat(args)
          );
        }

        function ObjectTypeSpreadProperty() {
          for (
            var _len108 = arguments.length,
              args = new Array(_len108),
              _key108 = 0;
            _key108 < _len108;
            _key108++
          ) {
            args[_key108] = arguments[_key108];
          }

          return _builder.default.apply(
            void 0,
            ["ObjectTypeSpreadProperty"].concat(args)
          );
        }

        function OpaqueType() {
          for (
            var _len109 = arguments.length,
              args = new Array(_len109),
              _key109 = 0;
            _key109 < _len109;
            _key109++
          ) {
            args[_key109] = arguments[_key109];
          }

          return _builder.default.apply(void 0, ["OpaqueType"].concat(args));
        }

        function QualifiedTypeIdentifier() {
          for (
            var _len110 = arguments.length,
              args = new Array(_len110),
              _key110 = 0;
            _key110 < _len110;
            _key110++
          ) {
            args[_key110] = arguments[_key110];
          }

          return _builder.default.apply(
            void 0,
            ["QualifiedTypeIdentifier"].concat(args)
          );
        }

        function StringLiteralTypeAnnotation() {
          for (
            var _len111 = arguments.length,
              args = new Array(_len111),
              _key111 = 0;
            _key111 < _len111;
            _key111++
          ) {
            args[_key111] = arguments[_key111];
          }

          return _builder.default.apply(
            void 0,
            ["StringLiteralTypeAnnotation"].concat(args)
          );
        }

        function StringTypeAnnotation() {
          for (
            var _len112 = arguments.length,
              args = new Array(_len112),
              _key112 = 0;
            _key112 < _len112;
            _key112++
          ) {
            args[_key112] = arguments[_key112];
          }

          return _builder.default.apply(
            void 0,
            ["StringTypeAnnotation"].concat(args)
          );
        }

        function ThisTypeAnnotation() {
          for (
            var _len113 = arguments.length,
              args = new Array(_len113),
              _key113 = 0;
            _key113 < _len113;
            _key113++
          ) {
            args[_key113] = arguments[_key113];
          }

          return _builder.default.apply(
            void 0,
            ["ThisTypeAnnotation"].concat(args)
          );
        }

        function TupleTypeAnnotation() {
          for (
            var _len114 = arguments.length,
              args = new Array(_len114),
              _key114 = 0;
            _key114 < _len114;
            _key114++
          ) {
            args[_key114] = arguments[_key114];
          }

          return _builder.default.apply(
            void 0,
            ["TupleTypeAnnotation"].concat(args)
          );
        }

        function TypeofTypeAnnotation() {
          for (
            var _len115 = arguments.length,
              args = new Array(_len115),
              _key115 = 0;
            _key115 < _len115;
            _key115++
          ) {
            args[_key115] = arguments[_key115];
          }

          return _builder.default.apply(
            void 0,
            ["TypeofTypeAnnotation"].concat(args)
          );
        }

        function TypeAlias() {
          for (
            var _len116 = arguments.length,
              args = new Array(_len116),
              _key116 = 0;
            _key116 < _len116;
            _key116++
          ) {
            args[_key116] = arguments[_key116];
          }

          return _builder.default.apply(void 0, ["TypeAlias"].concat(args));
        }

        function TypeAnnotation() {
          for (
            var _len117 = arguments.length,
              args = new Array(_len117),
              _key117 = 0;
            _key117 < _len117;
            _key117++
          ) {
            args[_key117] = arguments[_key117];
          }

          return _builder.default.apply(
            void 0,
            ["TypeAnnotation"].concat(args)
          );
        }

        function TypeCastExpression() {
          for (
            var _len118 = arguments.length,
              args = new Array(_len118),
              _key118 = 0;
            _key118 < _len118;
            _key118++
          ) {
            args[_key118] = arguments[_key118];
          }

          return _builder.default.apply(
            void 0,
            ["TypeCastExpression"].concat(args)
          );
        }

        function TypeParameter() {
          for (
            var _len119 = arguments.length,
              args = new Array(_len119),
              _key119 = 0;
            _key119 < _len119;
            _key119++
          ) {
            args[_key119] = arguments[_key119];
          }

          return _builder.default.apply(void 0, ["TypeParameter"].concat(args));
        }

        function TypeParameterDeclaration() {
          for (
            var _len120 = arguments.length,
              args = new Array(_len120),
              _key120 = 0;
            _key120 < _len120;
            _key120++
          ) {
            args[_key120] = arguments[_key120];
          }

          return _builder.default.apply(
            void 0,
            ["TypeParameterDeclaration"].concat(args)
          );
        }

        function TypeParameterInstantiation() {
          for (
            var _len121 = arguments.length,
              args = new Array(_len121),
              _key121 = 0;
            _key121 < _len121;
            _key121++
          ) {
            args[_key121] = arguments[_key121];
          }

          return _builder.default.apply(
            void 0,
            ["TypeParameterInstantiation"].concat(args)
          );
        }

        function UnionTypeAnnotation() {
          for (
            var _len122 = arguments.length,
              args = new Array(_len122),
              _key122 = 0;
            _key122 < _len122;
            _key122++
          ) {
            args[_key122] = arguments[_key122];
          }

          return _builder.default.apply(
            void 0,
            ["UnionTypeAnnotation"].concat(args)
          );
        }

        function Variance() {
          for (
            var _len123 = arguments.length,
              args = new Array(_len123),
              _key123 = 0;
            _key123 < _len123;
            _key123++
          ) {
            args[_key123] = arguments[_key123];
          }

          return _builder.default.apply(void 0, ["Variance"].concat(args));
        }

        function VoidTypeAnnotation() {
          for (
            var _len124 = arguments.length,
              args = new Array(_len124),
              _key124 = 0;
            _key124 < _len124;
            _key124++
          ) {
            args[_key124] = arguments[_key124];
          }

          return _builder.default.apply(
            void 0,
            ["VoidTypeAnnotation"].concat(args)
          );
        }

        function JSXAttribute() {
          for (
            var _len125 = arguments.length,
              args = new Array(_len125),
              _key125 = 0;
            _key125 < _len125;
            _key125++
          ) {
            args[_key125] = arguments[_key125];
          }

          return _builder.default.apply(void 0, ["JSXAttribute"].concat(args));
        }

        function JSXClosingElement() {
          for (
            var _len126 = arguments.length,
              args = new Array(_len126),
              _key126 = 0;
            _key126 < _len126;
            _key126++
          ) {
            args[_key126] = arguments[_key126];
          }

          return _builder.default.apply(
            void 0,
            ["JSXClosingElement"].concat(args)
          );
        }

        function JSXElement() {
          for (
            var _len127 = arguments.length,
              args = new Array(_len127),
              _key127 = 0;
            _key127 < _len127;
            _key127++
          ) {
            args[_key127] = arguments[_key127];
          }

          return _builder.default.apply(void 0, ["JSXElement"].concat(args));
        }

        function JSXEmptyExpression() {
          for (
            var _len128 = arguments.length,
              args = new Array(_len128),
              _key128 = 0;
            _key128 < _len128;
            _key128++
          ) {
            args[_key128] = arguments[_key128];
          }

          return _builder.default.apply(
            void 0,
            ["JSXEmptyExpression"].concat(args)
          );
        }

        function JSXExpressionContainer() {
          for (
            var _len129 = arguments.length,
              args = new Array(_len129),
              _key129 = 0;
            _key129 < _len129;
            _key129++
          ) {
            args[_key129] = arguments[_key129];
          }

          return _builder.default.apply(
            void 0,
            ["JSXExpressionContainer"].concat(args)
          );
        }

        function JSXSpreadChild() {
          for (
            var _len130 = arguments.length,
              args = new Array(_len130),
              _key130 = 0;
            _key130 < _len130;
            _key130++
          ) {
            args[_key130] = arguments[_key130];
          }

          return _builder.default.apply(
            void 0,
            ["JSXSpreadChild"].concat(args)
          );
        }

        function JSXIdentifier() {
          for (
            var _len131 = arguments.length,
              args = new Array(_len131),
              _key131 = 0;
            _key131 < _len131;
            _key131++
          ) {
            args[_key131] = arguments[_key131];
          }

          return _builder.default.apply(void 0, ["JSXIdentifier"].concat(args));
        }

        function JSXMemberExpression() {
          for (
            var _len132 = arguments.length,
              args = new Array(_len132),
              _key132 = 0;
            _key132 < _len132;
            _key132++
          ) {
            args[_key132] = arguments[_key132];
          }

          return _builder.default.apply(
            void 0,
            ["JSXMemberExpression"].concat(args)
          );
        }

        function JSXNamespacedName() {
          for (
            var _len133 = arguments.length,
              args = new Array(_len133),
              _key133 = 0;
            _key133 < _len133;
            _key133++
          ) {
            args[_key133] = arguments[_key133];
          }

          return _builder.default.apply(
            void 0,
            ["JSXNamespacedName"].concat(args)
          );
        }

        function JSXOpeningElement() {
          for (
            var _len134 = arguments.length,
              args = new Array(_len134),
              _key134 = 0;
            _key134 < _len134;
            _key134++
          ) {
            args[_key134] = arguments[_key134];
          }

          return _builder.default.apply(
            void 0,
            ["JSXOpeningElement"].concat(args)
          );
        }

        function JSXSpreadAttribute() {
          for (
            var _len135 = arguments.length,
              args = new Array(_len135),
              _key135 = 0;
            _key135 < _len135;
            _key135++
          ) {
            args[_key135] = arguments[_key135];
          }

          return _builder.default.apply(
            void 0,
            ["JSXSpreadAttribute"].concat(args)
          );
        }

        function JSXText() {
          for (
            var _len136 = arguments.length,
              args = new Array(_len136),
              _key136 = 0;
            _key136 < _len136;
            _key136++
          ) {
            args[_key136] = arguments[_key136];
          }

          return _builder.default.apply(void 0, ["JSXText"].concat(args));
        }

        function JSXFragment() {
          for (
            var _len137 = arguments.length,
              args = new Array(_len137),
              _key137 = 0;
            _key137 < _len137;
            _key137++
          ) {
            args[_key137] = arguments[_key137];
          }

          return _builder.default.apply(void 0, ["JSXFragment"].concat(args));
        }

        function JSXOpeningFragment() {
          for (
            var _len138 = arguments.length,
              args = new Array(_len138),
              _key138 = 0;
            _key138 < _len138;
            _key138++
          ) {
            args[_key138] = arguments[_key138];
          }

          return _builder.default.apply(
            void 0,
            ["JSXOpeningFragment"].concat(args)
          );
        }

        function JSXClosingFragment() {
          for (
            var _len139 = arguments.length,
              args = new Array(_len139),
              _key139 = 0;
            _key139 < _len139;
            _key139++
          ) {
            args[_key139] = arguments[_key139];
          }

          return _builder.default.apply(
            void 0,
            ["JSXClosingFragment"].concat(args)
          );
        }

        function Noop() {
          for (
            var _len140 = arguments.length,
              args = new Array(_len140),
              _key140 = 0;
            _key140 < _len140;
            _key140++
          ) {
            args[_key140] = arguments[_key140];
          }

          return _builder.default.apply(void 0, ["Noop"].concat(args));
        }

        function ParenthesizedExpression() {
          for (
            var _len141 = arguments.length,
              args = new Array(_len141),
              _key141 = 0;
            _key141 < _len141;
            _key141++
          ) {
            args[_key141] = arguments[_key141];
          }

          return _builder.default.apply(
            void 0,
            ["ParenthesizedExpression"].concat(args)
          );
        }

        function AwaitExpression() {
          for (
            var _len142 = arguments.length,
              args = new Array(_len142),
              _key142 = 0;
            _key142 < _len142;
            _key142++
          ) {
            args[_key142] = arguments[_key142];
          }

          return _builder.default.apply(
            void 0,
            ["AwaitExpression"].concat(args)
          );
        }

        function BindExpression() {
          for (
            var _len143 = arguments.length,
              args = new Array(_len143),
              _key143 = 0;
            _key143 < _len143;
            _key143++
          ) {
            args[_key143] = arguments[_key143];
          }

          return _builder.default.apply(
            void 0,
            ["BindExpression"].concat(args)
          );
        }

        function ClassProperty() {
          for (
            var _len144 = arguments.length,
              args = new Array(_len144),
              _key144 = 0;
            _key144 < _len144;
            _key144++
          ) {
            args[_key144] = arguments[_key144];
          }

          return _builder.default.apply(void 0, ["ClassProperty"].concat(args));
        }

        function OptionalMemberExpression() {
          for (
            var _len145 = arguments.length,
              args = new Array(_len145),
              _key145 = 0;
            _key145 < _len145;
            _key145++
          ) {
            args[_key145] = arguments[_key145];
          }

          return _builder.default.apply(
            void 0,
            ["OptionalMemberExpression"].concat(args)
          );
        }

        function OptionalCallExpression() {
          for (
            var _len146 = arguments.length,
              args = new Array(_len146),
              _key146 = 0;
            _key146 < _len146;
            _key146++
          ) {
            args[_key146] = arguments[_key146];
          }

          return _builder.default.apply(
            void 0,
            ["OptionalCallExpression"].concat(args)
          );
        }

        function ClassPrivateProperty() {
          for (
            var _len147 = arguments.length,
              args = new Array(_len147),
              _key147 = 0;
            _key147 < _len147;
            _key147++
          ) {
            args[_key147] = arguments[_key147];
          }

          return _builder.default.apply(
            void 0,
            ["ClassPrivateProperty"].concat(args)
          );
        }

        function Import() {
          for (
            var _len148 = arguments.length,
              args = new Array(_len148),
              _key148 = 0;
            _key148 < _len148;
            _key148++
          ) {
            args[_key148] = arguments[_key148];
          }

          return _builder.default.apply(void 0, ["Import"].concat(args));
        }

        function Decorator() {
          for (
            var _len149 = arguments.length,
              args = new Array(_len149),
              _key149 = 0;
            _key149 < _len149;
            _key149++
          ) {
            args[_key149] = arguments[_key149];
          }

          return _builder.default.apply(void 0, ["Decorator"].concat(args));
        }

        function DoExpression() {
          for (
            var _len150 = arguments.length,
              args = new Array(_len150),
              _key150 = 0;
            _key150 < _len150;
            _key150++
          ) {
            args[_key150] = arguments[_key150];
          }

          return _builder.default.apply(void 0, ["DoExpression"].concat(args));
        }

        function ExportDefaultSpecifier() {
          for (
            var _len151 = arguments.length,
              args = new Array(_len151),
              _key151 = 0;
            _key151 < _len151;
            _key151++
          ) {
            args[_key151] = arguments[_key151];
          }

          return _builder.default.apply(
            void 0,
            ["ExportDefaultSpecifier"].concat(args)
          );
        }

        function ExportNamespaceSpecifier() {
          for (
            var _len152 = arguments.length,
              args = new Array(_len152),
              _key152 = 0;
            _key152 < _len152;
            _key152++
          ) {
            args[_key152] = arguments[_key152];
          }

          return _builder.default.apply(
            void 0,
            ["ExportNamespaceSpecifier"].concat(args)
          );
        }

        function PrivateName() {
          for (
            var _len153 = arguments.length,
              args = new Array(_len153),
              _key153 = 0;
            _key153 < _len153;
            _key153++
          ) {
            args[_key153] = arguments[_key153];
          }

          return _builder.default.apply(void 0, ["PrivateName"].concat(args));
        }

        function TSParameterProperty() {
          for (
            var _len154 = arguments.length,
              args = new Array(_len154),
              _key154 = 0;
            _key154 < _len154;
            _key154++
          ) {
            args[_key154] = arguments[_key154];
          }

          return _builder.default.apply(
            void 0,
            ["TSParameterProperty"].concat(args)
          );
        }

        function TSDeclareFunction() {
          for (
            var _len155 = arguments.length,
              args = new Array(_len155),
              _key155 = 0;
            _key155 < _len155;
            _key155++
          ) {
            args[_key155] = arguments[_key155];
          }

          return _builder.default.apply(
            void 0,
            ["TSDeclareFunction"].concat(args)
          );
        }

        function TSDeclareMethod() {
          for (
            var _len156 = arguments.length,
              args = new Array(_len156),
              _key156 = 0;
            _key156 < _len156;
            _key156++
          ) {
            args[_key156] = arguments[_key156];
          }

          return _builder.default.apply(
            void 0,
            ["TSDeclareMethod"].concat(args)
          );
        }

        function TSQualifiedName() {
          for (
            var _len157 = arguments.length,
              args = new Array(_len157),
              _key157 = 0;
            _key157 < _len157;
            _key157++
          ) {
            args[_key157] = arguments[_key157];
          }

          return _builder.default.apply(
            void 0,
            ["TSQualifiedName"].concat(args)
          );
        }

        function TSCallSignatureDeclaration() {
          for (
            var _len158 = arguments.length,
              args = new Array(_len158),
              _key158 = 0;
            _key158 < _len158;
            _key158++
          ) {
            args[_key158] = arguments[_key158];
          }

          return _builder.default.apply(
            void 0,
            ["TSCallSignatureDeclaration"].concat(args)
          );
        }

        function TSConstructSignatureDeclaration() {
          for (
            var _len159 = arguments.length,
              args = new Array(_len159),
              _key159 = 0;
            _key159 < _len159;
            _key159++
          ) {
            args[_key159] = arguments[_key159];
          }

          return _builder.default.apply(
            void 0,
            ["TSConstructSignatureDeclaration"].concat(args)
          );
        }

        function TSPropertySignature() {
          for (
            var _len160 = arguments.length,
              args = new Array(_len160),
              _key160 = 0;
            _key160 < _len160;
            _key160++
          ) {
            args[_key160] = arguments[_key160];
          }

          return _builder.default.apply(
            void 0,
            ["TSPropertySignature"].concat(args)
          );
        }

        function TSMethodSignature() {
          for (
            var _len161 = arguments.length,
              args = new Array(_len161),
              _key161 = 0;
            _key161 < _len161;
            _key161++
          ) {
            args[_key161] = arguments[_key161];
          }

          return _builder.default.apply(
            void 0,
            ["TSMethodSignature"].concat(args)
          );
        }

        function TSIndexSignature() {
          for (
            var _len162 = arguments.length,
              args = new Array(_len162),
              _key162 = 0;
            _key162 < _len162;
            _key162++
          ) {
            args[_key162] = arguments[_key162];
          }

          return _builder.default.apply(
            void 0,
            ["TSIndexSignature"].concat(args)
          );
        }

        function TSAnyKeyword() {
          for (
            var _len163 = arguments.length,
              args = new Array(_len163),
              _key163 = 0;
            _key163 < _len163;
            _key163++
          ) {
            args[_key163] = arguments[_key163];
          }

          return _builder.default.apply(void 0, ["TSAnyKeyword"].concat(args));
        }

        function TSNumberKeyword() {
          for (
            var _len164 = arguments.length,
              args = new Array(_len164),
              _key164 = 0;
            _key164 < _len164;
            _key164++
          ) {
            args[_key164] = arguments[_key164];
          }

          return _builder.default.apply(
            void 0,
            ["TSNumberKeyword"].concat(args)
          );
        }

        function TSObjectKeyword() {
          for (
            var _len165 = arguments.length,
              args = new Array(_len165),
              _key165 = 0;
            _key165 < _len165;
            _key165++
          ) {
            args[_key165] = arguments[_key165];
          }

          return _builder.default.apply(
            void 0,
            ["TSObjectKeyword"].concat(args)
          );
        }

        function TSBooleanKeyword() {
          for (
            var _len166 = arguments.length,
              args = new Array(_len166),
              _key166 = 0;
            _key166 < _len166;
            _key166++
          ) {
            args[_key166] = arguments[_key166];
          }

          return _builder.default.apply(
            void 0,
            ["TSBooleanKeyword"].concat(args)
          );
        }

        function TSStringKeyword() {
          for (
            var _len167 = arguments.length,
              args = new Array(_len167),
              _key167 = 0;
            _key167 < _len167;
            _key167++
          ) {
            args[_key167] = arguments[_key167];
          }

          return _builder.default.apply(
            void 0,
            ["TSStringKeyword"].concat(args)
          );
        }

        function TSSymbolKeyword() {
          for (
            var _len168 = arguments.length,
              args = new Array(_len168),
              _key168 = 0;
            _key168 < _len168;
            _key168++
          ) {
            args[_key168] = arguments[_key168];
          }

          return _builder.default.apply(
            void 0,
            ["TSSymbolKeyword"].concat(args)
          );
        }

        function TSVoidKeyword() {
          for (
            var _len169 = arguments.length,
              args = new Array(_len169),
              _key169 = 0;
            _key169 < _len169;
            _key169++
          ) {
            args[_key169] = arguments[_key169];
          }

          return _builder.default.apply(void 0, ["TSVoidKeyword"].concat(args));
        }

        function TSUndefinedKeyword() {
          for (
            var _len170 = arguments.length,
              args = new Array(_len170),
              _key170 = 0;
            _key170 < _len170;
            _key170++
          ) {
            args[_key170] = arguments[_key170];
          }

          return _builder.default.apply(
            void 0,
            ["TSUndefinedKeyword"].concat(args)
          );
        }

        function TSNullKeyword() {
          for (
            var _len171 = arguments.length,
              args = new Array(_len171),
              _key171 = 0;
            _key171 < _len171;
            _key171++
          ) {
            args[_key171] = arguments[_key171];
          }

          return _builder.default.apply(void 0, ["TSNullKeyword"].concat(args));
        }

        function TSNeverKeyword() {
          for (
            var _len172 = arguments.length,
              args = new Array(_len172),
              _key172 = 0;
            _key172 < _len172;
            _key172++
          ) {
            args[_key172] = arguments[_key172];
          }

          return _builder.default.apply(
            void 0,
            ["TSNeverKeyword"].concat(args)
          );
        }

        function TSThisType() {
          for (
            var _len173 = arguments.length,
              args = new Array(_len173),
              _key173 = 0;
            _key173 < _len173;
            _key173++
          ) {
            args[_key173] = arguments[_key173];
          }

          return _builder.default.apply(void 0, ["TSThisType"].concat(args));
        }

        function TSFunctionType() {
          for (
            var _len174 = arguments.length,
              args = new Array(_len174),
              _key174 = 0;
            _key174 < _len174;
            _key174++
          ) {
            args[_key174] = arguments[_key174];
          }

          return _builder.default.apply(
            void 0,
            ["TSFunctionType"].concat(args)
          );
        }

        function TSConstructorType() {
          for (
            var _len175 = arguments.length,
              args = new Array(_len175),
              _key175 = 0;
            _key175 < _len175;
            _key175++
          ) {
            args[_key175] = arguments[_key175];
          }

          return _builder.default.apply(
            void 0,
            ["TSConstructorType"].concat(args)
          );
        }

        function TSTypeReference() {
          for (
            var _len176 = arguments.length,
              args = new Array(_len176),
              _key176 = 0;
            _key176 < _len176;
            _key176++
          ) {
            args[_key176] = arguments[_key176];
          }

          return _builder.default.apply(
            void 0,
            ["TSTypeReference"].concat(args)
          );
        }

        function TSTypePredicate() {
          for (
            var _len177 = arguments.length,
              args = new Array(_len177),
              _key177 = 0;
            _key177 < _len177;
            _key177++
          ) {
            args[_key177] = arguments[_key177];
          }

          return _builder.default.apply(
            void 0,
            ["TSTypePredicate"].concat(args)
          );
        }

        function TSTypeQuery() {
          for (
            var _len178 = arguments.length,
              args = new Array(_len178),
              _key178 = 0;
            _key178 < _len178;
            _key178++
          ) {
            args[_key178] = arguments[_key178];
          }

          return _builder.default.apply(void 0, ["TSTypeQuery"].concat(args));
        }

        function TSTypeLiteral() {
          for (
            var _len179 = arguments.length,
              args = new Array(_len179),
              _key179 = 0;
            _key179 < _len179;
            _key179++
          ) {
            args[_key179] = arguments[_key179];
          }

          return _builder.default.apply(void 0, ["TSTypeLiteral"].concat(args));
        }

        function TSArrayType() {
          for (
            var _len180 = arguments.length,
              args = new Array(_len180),
              _key180 = 0;
            _key180 < _len180;
            _key180++
          ) {
            args[_key180] = arguments[_key180];
          }

          return _builder.default.apply(void 0, ["TSArrayType"].concat(args));
        }

        function TSTupleType() {
          for (
            var _len181 = arguments.length,
              args = new Array(_len181),
              _key181 = 0;
            _key181 < _len181;
            _key181++
          ) {
            args[_key181] = arguments[_key181];
          }

          return _builder.default.apply(void 0, ["TSTupleType"].concat(args));
        }

        function TSUnionType() {
          for (
            var _len182 = arguments.length,
              args = new Array(_len182),
              _key182 = 0;
            _key182 < _len182;
            _key182++
          ) {
            args[_key182] = arguments[_key182];
          }

          return _builder.default.apply(void 0, ["TSUnionType"].concat(args));
        }

        function TSIntersectionType() {
          for (
            var _len183 = arguments.length,
              args = new Array(_len183),
              _key183 = 0;
            _key183 < _len183;
            _key183++
          ) {
            args[_key183] = arguments[_key183];
          }

          return _builder.default.apply(
            void 0,
            ["TSIntersectionType"].concat(args)
          );
        }

        function TSConditionalType() {
          for (
            var _len184 = arguments.length,
              args = new Array(_len184),
              _key184 = 0;
            _key184 < _len184;
            _key184++
          ) {
            args[_key184] = arguments[_key184];
          }

          return _builder.default.apply(
            void 0,
            ["TSConditionalType"].concat(args)
          );
        }

        function TSInferType() {
          for (
            var _len185 = arguments.length,
              args = new Array(_len185),
              _key185 = 0;
            _key185 < _len185;
            _key185++
          ) {
            args[_key185] = arguments[_key185];
          }

          return _builder.default.apply(void 0, ["TSInferType"].concat(args));
        }

        function TSParenthesizedType() {
          for (
            var _len186 = arguments.length,
              args = new Array(_len186),
              _key186 = 0;
            _key186 < _len186;
            _key186++
          ) {
            args[_key186] = arguments[_key186];
          }

          return _builder.default.apply(
            void 0,
            ["TSParenthesizedType"].concat(args)
          );
        }

        function TSTypeOperator() {
          for (
            var _len187 = arguments.length,
              args = new Array(_len187),
              _key187 = 0;
            _key187 < _len187;
            _key187++
          ) {
            args[_key187] = arguments[_key187];
          }

          return _builder.default.apply(
            void 0,
            ["TSTypeOperator"].concat(args)
          );
        }

        function TSIndexedAccessType() {
          for (
            var _len188 = arguments.length,
              args = new Array(_len188),
              _key188 = 0;
            _key188 < _len188;
            _key188++
          ) {
            args[_key188] = arguments[_key188];
          }

          return _builder.default.apply(
            void 0,
            ["TSIndexedAccessType"].concat(args)
          );
        }

        function TSMappedType() {
          for (
            var _len189 = arguments.length,
              args = new Array(_len189),
              _key189 = 0;
            _key189 < _len189;
            _key189++
          ) {
            args[_key189] = arguments[_key189];
          }

          return _builder.default.apply(void 0, ["TSMappedType"].concat(args));
        }

        function TSLiteralType() {
          for (
            var _len190 = arguments.length,
              args = new Array(_len190),
              _key190 = 0;
            _key190 < _len190;
            _key190++
          ) {
            args[_key190] = arguments[_key190];
          }

          return _builder.default.apply(void 0, ["TSLiteralType"].concat(args));
        }

        function TSExpressionWithTypeArguments() {
          for (
            var _len191 = arguments.length,
              args = new Array(_len191),
              _key191 = 0;
            _key191 < _len191;
            _key191++
          ) {
            args[_key191] = arguments[_key191];
          }

          return _builder.default.apply(
            void 0,
            ["TSExpressionWithTypeArguments"].concat(args)
          );
        }

        function TSInterfaceDeclaration() {
          for (
            var _len192 = arguments.length,
              args = new Array(_len192),
              _key192 = 0;
            _key192 < _len192;
            _key192++
          ) {
            args[_key192] = arguments[_key192];
          }

          return _builder.default.apply(
            void 0,
            ["TSInterfaceDeclaration"].concat(args)
          );
        }

        function TSInterfaceBody() {
          for (
            var _len193 = arguments.length,
              args = new Array(_len193),
              _key193 = 0;
            _key193 < _len193;
            _key193++
          ) {
            args[_key193] = arguments[_key193];
          }

          return _builder.default.apply(
            void 0,
            ["TSInterfaceBody"].concat(args)
          );
        }

        function TSTypeAliasDeclaration() {
          for (
            var _len194 = arguments.length,
              args = new Array(_len194),
              _key194 = 0;
            _key194 < _len194;
            _key194++
          ) {
            args[_key194] = arguments[_key194];
          }

          return _builder.default.apply(
            void 0,
            ["TSTypeAliasDeclaration"].concat(args)
          );
        }

        function TSAsExpression() {
          for (
            var _len195 = arguments.length,
              args = new Array(_len195),
              _key195 = 0;
            _key195 < _len195;
            _key195++
          ) {
            args[_key195] = arguments[_key195];
          }

          return _builder.default.apply(
            void 0,
            ["TSAsExpression"].concat(args)
          );
        }

        function TSTypeAssertion() {
          for (
            var _len196 = arguments.length,
              args = new Array(_len196),
              _key196 = 0;
            _key196 < _len196;
            _key196++
          ) {
            args[_key196] = arguments[_key196];
          }

          return _builder.default.apply(
            void 0,
            ["TSTypeAssertion"].concat(args)
          );
        }

        function TSEnumDeclaration() {
          for (
            var _len197 = arguments.length,
              args = new Array(_len197),
              _key197 = 0;
            _key197 < _len197;
            _key197++
          ) {
            args[_key197] = arguments[_key197];
          }

          return _builder.default.apply(
            void 0,
            ["TSEnumDeclaration"].concat(args)
          );
        }

        function TSEnumMember() {
          for (
            var _len198 = arguments.length,
              args = new Array(_len198),
              _key198 = 0;
            _key198 < _len198;
            _key198++
          ) {
            args[_key198] = arguments[_key198];
          }

          return _builder.default.apply(void 0, ["TSEnumMember"].concat(args));
        }

        function TSModuleDeclaration() {
          for (
            var _len199 = arguments.length,
              args = new Array(_len199),
              _key199 = 0;
            _key199 < _len199;
            _key199++
          ) {
            args[_key199] = arguments[_key199];
          }

          return _builder.default.apply(
            void 0,
            ["TSModuleDeclaration"].concat(args)
          );
        }

        function TSModuleBlock() {
          for (
            var _len200 = arguments.length,
              args = new Array(_len200),
              _key200 = 0;
            _key200 < _len200;
            _key200++
          ) {
            args[_key200] = arguments[_key200];
          }

          return _builder.default.apply(void 0, ["TSModuleBlock"].concat(args));
        }

        function TSImportEqualsDeclaration() {
          for (
            var _len201 = arguments.length,
              args = new Array(_len201),
              _key201 = 0;
            _key201 < _len201;
            _key201++
          ) {
            args[_key201] = arguments[_key201];
          }

          return _builder.default.apply(
            void 0,
            ["TSImportEqualsDeclaration"].concat(args)
          );
        }

        function TSExternalModuleReference() {
          for (
            var _len202 = arguments.length,
              args = new Array(_len202),
              _key202 = 0;
            _key202 < _len202;
            _key202++
          ) {
            args[_key202] = arguments[_key202];
          }

          return _builder.default.apply(
            void 0,
            ["TSExternalModuleReference"].concat(args)
          );
        }

        function TSNonNullExpression() {
          for (
            var _len203 = arguments.length,
              args = new Array(_len203),
              _key203 = 0;
            _key203 < _len203;
            _key203++
          ) {
            args[_key203] = arguments[_key203];
          }

          return _builder.default.apply(
            void 0,
            ["TSNonNullExpression"].concat(args)
          );
        }

        function TSExportAssignment() {
          for (
            var _len204 = arguments.length,
              args = new Array(_len204),
              _key204 = 0;
            _key204 < _len204;
            _key204++
          ) {
            args[_key204] = arguments[_key204];
          }

          return _builder.default.apply(
            void 0,
            ["TSExportAssignment"].concat(args)
          );
        }

        function TSNamespaceExportDeclaration() {
          for (
            var _len205 = arguments.length,
              args = new Array(_len205),
              _key205 = 0;
            _key205 < _len205;
            _key205++
          ) {
            args[_key205] = arguments[_key205];
          }

          return _builder.default.apply(
            void 0,
            ["TSNamespaceExportDeclaration"].concat(args)
          );
        }

        function TSTypeAnnotation() {
          for (
            var _len206 = arguments.length,
              args = new Array(_len206),
              _key206 = 0;
            _key206 < _len206;
            _key206++
          ) {
            args[_key206] = arguments[_key206];
          }

          return _builder.default.apply(
            void 0,
            ["TSTypeAnnotation"].concat(args)
          );
        }

        function TSTypeParameterInstantiation() {
          for (
            var _len207 = arguments.length,
              args = new Array(_len207),
              _key207 = 0;
            _key207 < _len207;
            _key207++
          ) {
            args[_key207] = arguments[_key207];
          }

          return _builder.default.apply(
            void 0,
            ["TSTypeParameterInstantiation"].concat(args)
          );
        }

        function TSTypeParameterDeclaration() {
          for (
            var _len208 = arguments.length,
              args = new Array(_len208),
              _key208 = 0;
            _key208 < _len208;
            _key208++
          ) {
            args[_key208] = arguments[_key208];
          }

          return _builder.default.apply(
            void 0,
            ["TSTypeParameterDeclaration"].concat(args)
          );
        }

        function TSTypeParameter() {
          for (
            var _len209 = arguments.length,
              args = new Array(_len209),
              _key209 = 0;
            _key209 < _len209;
            _key209++
          ) {
            args[_key209] = arguments[_key209];
          }

          return _builder.default.apply(
            void 0,
            ["TSTypeParameter"].concat(args)
          );
        }

        function NumberLiteral() {
          console.trace(
            "The node type NumberLiteral has been renamed to NumericLiteral"
          );

          for (
            var _len210 = arguments.length,
              args = new Array(_len210),
              _key210 = 0;
            _key210 < _len210;
            _key210++
          ) {
            args[_key210] = arguments[_key210];
          }

          return NumberLiteral.apply(void 0, ["NumberLiteral"].concat(args));
        }

        function RegexLiteral() {
          console.trace(
            "The node type RegexLiteral has been renamed to RegExpLiteral"
          );

          for (
            var _len211 = arguments.length,
              args = new Array(_len211),
              _key211 = 0;
            _key211 < _len211;
            _key211++
          ) {
            args[_key211] = arguments[_key211];
          }

          return RegexLiteral.apply(void 0, ["RegexLiteral"].concat(args));
        }

        function RestProperty() {
          console.trace(
            "The node type RestProperty has been renamed to RestElement"
          );

          for (
            var _len212 = arguments.length,
              args = new Array(_len212),
              _key212 = 0;
            _key212 < _len212;
            _key212++
          ) {
            args[_key212] = arguments[_key212];
          }

          return RestProperty.apply(void 0, ["RestProperty"].concat(args));
        }

        function SpreadProperty() {
          console.trace(
            "The node type SpreadProperty has been renamed to SpreadElement"
          );

          for (
            var _len213 = arguments.length,
              args = new Array(_len213),
              _key213 = 0;
            _key213 < _len213;
            _key213++
          ) {
            args[_key213] = arguments[_key213];
          }

          return SpreadProperty.apply(void 0, ["SpreadProperty"].concat(args));
        }

        /***/
      },
      /* 6 */
      /***/ function(module, exports) {
        var isArray = Array.isArray;
        module.exports = isArray;

        /***/
      },
      /* 7 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process) {
          function normalizeArray(parts, allowAboveRoot) {
            var up = 0;

            for (var i = parts.length - 1; i >= 0; i--) {
              var last = parts[i];

              if (last === ".") {
                parts.splice(i, 1);
              } else if (last === "..") {
                parts.splice(i, 1);
                up++;
              } else if (up) {
                parts.splice(i, 1);
                up--;
              }
            }

            if (allowAboveRoot) {
              for (; up--; up) {
                parts.unshift("..");
              }
            }

            return parts;
          }

          var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;

          var splitPath = function splitPath(filename) {
            return splitPathRe.exec(filename).slice(1);
          };

          exports.resolve = function() {
            var resolvedPath = "",
              resolvedAbsolute = false;

            for (
              var i = arguments.length - 1;
              i >= -1 && !resolvedAbsolute;
              i--
            ) {
              var path = i >= 0 ? arguments[i] : process.cwd();

              if (typeof path !== "string") {
                throw new TypeError(
                  "Arguments to path.resolve must be strings"
                );
              } else if (!path) {
                continue;
              }

              resolvedPath = path + "/" + resolvedPath;
              resolvedAbsolute = path.charAt(0) === "/";
            }

            resolvedPath = normalizeArray(
              filter(resolvedPath.split("/"), function(p) {
                return !!p;
              }),
              !resolvedAbsolute
            ).join("/");
            return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
          };

          exports.normalize = function(path) {
            var isAbsolute = exports.isAbsolute(path),
              trailingSlash = substr(path, -1) === "/";
            path = normalizeArray(
              filter(path.split("/"), function(p) {
                return !!p;
              }),
              !isAbsolute
            ).join("/");

            if (!path && !isAbsolute) {
              path = ".";
            }

            if (path && trailingSlash) {
              path += "/";
            }

            return (isAbsolute ? "/" : "") + path;
          };

          exports.isAbsolute = function(path) {
            return path.charAt(0) === "/";
          };

          exports.join = function() {
            var paths = Array.prototype.slice.call(arguments, 0);
            return exports.normalize(
              filter(paths, function(p, index) {
                if (typeof p !== "string") {
                  throw new TypeError("Arguments to path.join must be strings");
                }

                return p;
              }).join("/")
            );
          };

          exports.relative = function(from, to) {
            from = exports.resolve(from).substr(1);
            to = exports.resolve(to).substr(1);

            function trim(arr) {
              var start = 0;

              for (; start < arr.length; start++) {
                if (arr[start] !== "") break;
              }

              var end = arr.length - 1;

              for (; end >= 0; end--) {
                if (arr[end] !== "") break;
              }

              if (start > end) return [];
              return arr.slice(start, end - start + 1);
            }

            var fromParts = trim(from.split("/"));
            var toParts = trim(to.split("/"));
            var length = Math.min(fromParts.length, toParts.length);
            var samePartsLength = length;

            for (var i = 0; i < length; i++) {
              if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
              }
            }

            var outputParts = [];

            for (var i = samePartsLength; i < fromParts.length; i++) {
              outputParts.push("..");
            }

            outputParts = outputParts.concat(toParts.slice(samePartsLength));
            return outputParts.join("/");
          };

          exports.sep = "/";
          exports.delimiter = ":";

          exports.dirname = function(path) {
            var result = splitPath(path),
              root = result[0],
              dir = result[1];

            if (!root && !dir) {
              return ".";
            }

            if (dir) {
              dir = dir.substr(0, dir.length - 1);
            }

            return root + dir;
          };

          exports.basename = function(path, ext) {
            var f = splitPath(path)[2];

            if (ext && f.substr(-1 * ext.length) === ext) {
              f = f.substr(0, f.length - ext.length);
            }

            return f;
          };

          exports.extname = function(path) {
            return splitPath(path)[3];
          };

          function filter(xs, f) {
            if (xs.filter) return xs.filter(f);
            var res = [];

            for (var i = 0; i < xs.length; i++) {
              if (f(xs[i], i, xs)) res.push(xs[i]);
            }

            return res;
          }

          var substr =
            "ab".substr(-1) === "b"
              ? function(str, start, len) {
                  return str.substr(start, len);
                }
              : function(str, start, len) {
                  if (start < 0) start = str.length + start;
                  return str.substr(start, len);
                };
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(12)));

        /***/
      },
      /* 8 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = traverse;
        Object.defineProperty(exports, "NodePath", {
          enumerable: true,
          get: function get() {
            return _path.default;
          }
        });
        Object.defineProperty(exports, "Scope", {
          enumerable: true,
          get: function get() {
            return _scope.default;
          }
        });
        Object.defineProperty(exports, "Hub", {
          enumerable: true,
          get: function get() {
            return _hub.default;
          }
        });
        exports.visitors = void 0;

        var _context = _interopRequireDefault(__webpack_require__(249));

        var visitors = _interopRequireWildcard(__webpack_require__(444));

        exports.visitors = visitors;

        function _includes() {
          var data = _interopRequireDefault(__webpack_require__(79));

          _includes = function _includes() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var cache = _interopRequireWildcard(__webpack_require__(49));

        var _path = _interopRequireDefault(__webpack_require__(23));

        var _scope = _interopRequireDefault(__webpack_require__(141));

        var _hub = _interopRequireDefault(__webpack_require__(445));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function traverse(parent, opts, scope, state, parentPath) {
          if (!parent) return;
          if (!opts) opts = {};

          if (!opts.noScope && !scope) {
            if (parent.type !== "Program" && parent.type !== "File") {
              throw new Error(
                "You must pass a scope and parentPath unless traversing a Program/File. " +
                  ("Instead of that you tried to traverse a " +
                    parent.type +
                    " node without ") +
                  "passing scope and parentPath."
              );
            }
          }

          visitors.explode(opts);
          traverse.node(parent, opts, scope, state, parentPath);
        }

        traverse.visitors = visitors;
        traverse.verify = visitors.verify;
        traverse.explode = visitors.explode;

        traverse.cheap = function(node, enter) {
          return t().traverseFast(node, enter);
        };

        traverse.node = function(
          node,
          opts,
          scope,
          state,
          parentPath,
          skipKeys
        ) {
          var keys = t().VISITOR_KEYS[node.type];
          if (!keys) return;
          var context = new _context.default(scope, opts, state, parentPath);

          for (
            var _iterator = keys,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var key = _ref;
            if (skipKeys && skipKeys[key]) continue;
            if (context.visit(node, key)) return;
          }
        };

        traverse.clearNode = function(node, opts) {
          t().removeProperties(node, opts);
          cache.path.delete(node);
        };

        traverse.removeProperties = function(tree, opts) {
          t().traverseFast(tree, traverse.clearNode, opts);
          return tree;
        };

        function hasBlacklistedType(path, state) {
          if (path.node.type === state.type) {
            state.has = true;
            path.stop();
          }
        }

        traverse.hasType = function(tree, type, blacklistTypes) {
          if ((0, _includes().default)(blacklistTypes, tree.type)) return false;
          if (tree.type === type) return true;
          var state = {
            has: false,
            type: type
          };
          traverse(
            tree,
            {
              noScope: true,
              blacklist: blacklistTypes,
              enter: hasBlacklistedType
            },
            null,
            state
          );
          return state.has;
        };

        traverse.cache = cache;

        /***/
      },
      /* 9 */
      /***/ function(module, exports, __webpack_require__) {
        var freeGlobal = __webpack_require__(107);

        var freeSelf =
          typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        module.exports = root;

        /***/
      },
      /* 10 */
      /***/ function(module, exports) {
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }

        module.exports = isObjectLike;

        /***/
      },
      /* 11 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "VISITOR_KEYS", {
          enumerable: true,
          get: function get() {
            return _utils.VISITOR_KEYS;
          }
        });
        Object.defineProperty(exports, "ALIAS_KEYS", {
          enumerable: true,
          get: function get() {
            return _utils.ALIAS_KEYS;
          }
        });
        Object.defineProperty(exports, "FLIPPED_ALIAS_KEYS", {
          enumerable: true,
          get: function get() {
            return _utils.FLIPPED_ALIAS_KEYS;
          }
        });
        Object.defineProperty(exports, "NODE_FIELDS", {
          enumerable: true,
          get: function get() {
            return _utils.NODE_FIELDS;
          }
        });
        Object.defineProperty(exports, "BUILDER_KEYS", {
          enumerable: true,
          get: function get() {
            return _utils.BUILDER_KEYS;
          }
        });
        Object.defineProperty(exports, "DEPRECATED_KEYS", {
          enumerable: true,
          get: function get() {
            return _utils.DEPRECATED_KEYS;
          }
        });
        exports.TYPES = void 0;

        function _toFastProperties() {
          var data = _interopRequireDefault(__webpack_require__(315));

          _toFastProperties = function _toFastProperties() {
            return data;
          };

          return data;
        }

        __webpack_require__(71);

        __webpack_require__(75);

        __webpack_require__(318);

        __webpack_require__(319);

        __webpack_require__(320);

        __webpack_require__(321);

        __webpack_require__(322);

        var _utils = __webpack_require__(16);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        (0, _toFastProperties().default)(_utils.VISITOR_KEYS);
        (0, _toFastProperties().default)(_utils.ALIAS_KEYS);
        (0, _toFastProperties().default)(_utils.FLIPPED_ALIAS_KEYS);
        (0, _toFastProperties().default)(_utils.NODE_FIELDS);
        (0, _toFastProperties().default)(_utils.BUILDER_KEYS);
        (0, _toFastProperties().default)(_utils.DEPRECATED_KEYS);
        var TYPES = Object.keys(_utils.VISITOR_KEYS)
          .concat(Object.keys(_utils.FLIPPED_ALIAS_KEYS))
          .concat(Object.keys(_utils.DEPRECATED_KEYS));
        exports.TYPES = TYPES;

        /***/
      },
      /* 12 */
      /***/ function(module, exports) {
        var process = (module.exports = {});
        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }

        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }

        (function() {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }

          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();

        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0);
          }

          if (
            (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
            setTimeout
          ) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }

          try {
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e) {
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }

        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker);
          }

          if (
            (cachedClearTimeout === defaultClearTimeout ||
              !cachedClearTimeout) &&
            clearTimeout
          ) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }

          try {
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              return cachedClearTimeout.call(null, marker);
            } catch (e) {
              return cachedClearTimeout.call(this, marker);
            }
          }
        }

        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }

          draining = false;

          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }

          if (queue.length) {
            drainQueue();
          }
        }

        function drainQueue() {
          if (draining) {
            return;
          }

          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;

          while (len) {
            currentQueue = queue;
            queue = [];

            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }

            queueIndex = -1;
            len = queue.length;
          }

          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }

        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);

          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }

          queue.push(new Item(fun, args));

          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };

        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }

        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };

        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function(name) {
          return [];
        };

        process.binding = function(name) {
          throw new Error("process.binding is not supported");
        };

        process.cwd = function() {
          return "/";
        };

        process.chdir = function(dir) {
          throw new Error("process.chdir is not supported");
        };

        process.umask = function() {
          return 0;
        };

        /***/
      },
      /* 13 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(global) {
          /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

          function compare(a, b) {
            if (a === b) {
              return 0;
            }

            var x = a.length;
            var y = b.length;

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i];
                y = b[i];
                break;
              }
            }

            if (x < y) {
              return -1;
            }

            if (y < x) {
              return 1;
            }

            return 0;
          }

          function isBuffer(b) {
            if (global.Buffer && typeof global.Buffer.isBuffer === "function") {
              return global.Buffer.isBuffer(b);
            }

            return !!(b != null && b._isBuffer);
          }

          var util = __webpack_require__(194);

          var hasOwn = Object.prototype.hasOwnProperty;
          var pSlice = Array.prototype.slice;

          var functionsHaveNames = (function() {
            return function foo() {}.name === "foo";
          })();

          function pToString(obj) {
            return Object.prototype.toString.call(obj);
          }

          function isView(arrbuf) {
            if (isBuffer(arrbuf)) {
              return false;
            }

            if (typeof global.ArrayBuffer !== "function") {
              return false;
            }

            if (typeof ArrayBuffer.isView === "function") {
              return ArrayBuffer.isView(arrbuf);
            }

            if (!arrbuf) {
              return false;
            }

            if (arrbuf instanceof DataView) {
              return true;
            }

            if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
              return true;
            }

            return false;
          }

          var assert = (module.exports = ok);
          var regex = /\s*function\s+([^\(\s]*)\s*/;

          function getName(func) {
            if (!util.isFunction(func)) {
              return;
            }

            if (functionsHaveNames) {
              return func.name;
            }

            var str = func.toString();
            var match = str.match(regex);
            return match && match[1];
          }

          assert.AssertionError = function AssertionError(options) {
            this.name = "AssertionError";
            this.actual = options.actual;
            this.expected = options.expected;
            this.operator = options.operator;

            if (options.message) {
              this.message = options.message;
              this.generatedMessage = false;
            } else {
              this.message = getMessage(this);
              this.generatedMessage = true;
            }

            var stackStartFunction = options.stackStartFunction || fail;

            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, stackStartFunction);
            } else {
              var err = new Error();

              if (err.stack) {
                var out = err.stack;
                var fn_name = getName(stackStartFunction);
                var idx = out.indexOf("\n" + fn_name);

                if (idx >= 0) {
                  var next_line = out.indexOf("\n", idx + 1);
                  out = out.substring(next_line + 1);
                }

                this.stack = out;
              }
            }
          };

          util.inherits(assert.AssertionError, Error);

          function truncate(s, n) {
            if (typeof s === "string") {
              return s.length < n ? s : s.slice(0, n);
            } else {
              return s;
            }
          }

          function inspect(something) {
            if (functionsHaveNames || !util.isFunction(something)) {
              return util.inspect(something);
            }

            var rawname = getName(something);
            var name = rawname ? ": " + rawname : "";
            return "[Function" + name + "]";
          }

          function getMessage(self) {
            return (
              truncate(inspect(self.actual), 128) +
              " " +
              self.operator +
              " " +
              truncate(inspect(self.expected), 128)
            );
          }

          function fail(
            actual,
            expected,
            message,
            operator,
            stackStartFunction
          ) {
            throw new assert.AssertionError({
              message: message,
              actual: actual,
              expected: expected,
              operator: operator,
              stackStartFunction: stackStartFunction
            });
          }

          assert.fail = fail;

          function ok(value, message) {
            if (!value) fail(value, true, message, "==", assert.ok);
          }

          assert.ok = ok;

          assert.equal = function equal(actual, expected, message) {
            if (actual != expected)
              fail(actual, expected, message, "==", assert.equal);
          };

          assert.notEqual = function notEqual(actual, expected, message) {
            if (actual == expected) {
              fail(actual, expected, message, "!=", assert.notEqual);
            }
          };

          assert.deepEqual = function deepEqual(actual, expected, message) {
            if (!_deepEqual(actual, expected, false)) {
              fail(actual, expected, message, "deepEqual", assert.deepEqual);
            }
          };

          assert.deepStrictEqual = function deepStrictEqual(
            actual,
            expected,
            message
          ) {
            if (!_deepEqual(actual, expected, true)) {
              fail(
                actual,
                expected,
                message,
                "deepStrictEqual",
                assert.deepStrictEqual
              );
            }
          };

          function _deepEqual(actual, expected, strict, memos) {
            if (actual === expected) {
              return true;
            } else if (isBuffer(actual) && isBuffer(expected)) {
              return compare(actual, expected) === 0;
            } else if (util.isDate(actual) && util.isDate(expected)) {
              return actual.getTime() === expected.getTime();
            } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
              return (
                actual.source === expected.source &&
                actual.global === expected.global &&
                actual.multiline === expected.multiline &&
                actual.lastIndex === expected.lastIndex &&
                actual.ignoreCase === expected.ignoreCase
              );
            } else if (
              (actual === null || typeof actual !== "object") &&
              (expected === null || typeof expected !== "object")
            ) {
              return strict ? actual === expected : actual == expected;
            } else if (
              isView(actual) &&
              isView(expected) &&
              pToString(actual) === pToString(expected) &&
              !(
                actual instanceof Float32Array || actual instanceof Float64Array
              )
            ) {
              return (
                compare(
                  new Uint8Array(actual.buffer),
                  new Uint8Array(expected.buffer)
                ) === 0
              );
            } else if (isBuffer(actual) !== isBuffer(expected)) {
              return false;
            } else {
              memos = memos || {
                actual: [],
                expected: []
              };
              var actualIndex = memos.actual.indexOf(actual);

              if (actualIndex !== -1) {
                if (actualIndex === memos.expected.indexOf(expected)) {
                  return true;
                }
              }

              memos.actual.push(actual);
              memos.expected.push(expected);
              return objEquiv(actual, expected, strict, memos);
            }
          }

          function isArguments(object) {
            return (
              Object.prototype.toString.call(object) == "[object Arguments]"
            );
          }

          function objEquiv(a, b, strict, actualVisitedObjects) {
            if (a === null || a === undefined || b === null || b === undefined)
              return false;
            if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
            if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
              return false;
            var aIsArgs = isArguments(a);
            var bIsArgs = isArguments(b);
            if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs)) return false;

            if (aIsArgs) {
              a = pSlice.call(a);
              b = pSlice.call(b);
              return _deepEqual(a, b, strict);
            }

            var ka = objectKeys(a);
            var kb = objectKeys(b);
            var key, i;
            if (ka.length !== kb.length) return false;
            ka.sort();
            kb.sort();

            for (i = ka.length - 1; i >= 0; i--) {
              if (ka[i] !== kb[i]) return false;
            }

            for (i = ka.length - 1; i >= 0; i--) {
              key = ka[i];
              if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                return false;
            }

            return true;
          }

          assert.notDeepEqual = function notDeepEqual(
            actual,
            expected,
            message
          ) {
            if (_deepEqual(actual, expected, false)) {
              fail(
                actual,
                expected,
                message,
                "notDeepEqual",
                assert.notDeepEqual
              );
            }
          };

          assert.notDeepStrictEqual = notDeepStrictEqual;

          function notDeepStrictEqual(actual, expected, message) {
            if (_deepEqual(actual, expected, true)) {
              fail(
                actual,
                expected,
                message,
                "notDeepStrictEqual",
                notDeepStrictEqual
              );
            }
          }

          assert.strictEqual = function strictEqual(actual, expected, message) {
            if (actual !== expected) {
              fail(actual, expected, message, "===", assert.strictEqual);
            }
          };

          assert.notStrictEqual = function notStrictEqual(
            actual,
            expected,
            message
          ) {
            if (actual === expected) {
              fail(actual, expected, message, "!==", assert.notStrictEqual);
            }
          };

          function expectedException(actual, expected) {
            if (!actual || !expected) {
              return false;
            }

            if (Object.prototype.toString.call(expected) == "[object RegExp]") {
              return expected.test(actual);
            }

            try {
              if (actual instanceof expected) {
                return true;
              }
            } catch (e) {}

            if (Error.isPrototypeOf(expected)) {
              return false;
            }

            return expected.call({}, actual) === true;
          }

          function _tryBlock(block) {
            var error;

            try {
              block();
            } catch (e) {
              error = e;
            }

            return error;
          }

          function _throws(shouldThrow, block, expected, message) {
            var actual;

            if (typeof block !== "function") {
              throw new TypeError('"block" argument must be a function');
            }

            if (typeof expected === "string") {
              message = expected;
              expected = null;
            }

            actual = _tryBlock(block);
            message =
              (expected && expected.name ? " (" + expected.name + ")." : ".") +
              (message ? " " + message : ".");

            if (shouldThrow && !actual) {
              fail(actual, expected, "Missing expected exception" + message);
            }

            var userProvidedMessage = typeof message === "string";
            var isUnwantedException = !shouldThrow && util.isError(actual);
            var isUnexpectedException = !shouldThrow && actual && !expected;

            if (
              (isUnwantedException &&
                userProvidedMessage &&
                expectedException(actual, expected)) ||
              isUnexpectedException
            ) {
              fail(actual, expected, "Got unwanted exception" + message);
            }

            if (
              (shouldThrow &&
                actual &&
                expected &&
                !expectedException(actual, expected)) ||
              (!shouldThrow && actual)
            ) {
              throw actual;
            }
          }

          assert.throws = function(block, error, message) {
            _throws(true, block, error, message);
          };

          assert.doesNotThrow = function(block, error, message) {
            _throws(false, block, error, message);
          };

          assert.ifError = function(err) {
            if (err) throw err;
          };

          var objectKeys =
            Object.keys ||
            function(obj) {
              var keys = [];

              for (var key in obj) {
                if (hasOwn.call(obj, key)) keys.push(key);
              }

              return keys;
            };
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(18)));

        /***/
      },
      /* 14 */
      /***/ function(module, exports, __webpack_require__) {
        var Symbol = __webpack_require__(24),
          getRawTag = __webpack_require__(267),
          objectToString = __webpack_require__(268);

        var nullTag = "[object Null]",
          undefinedTag = "[object Undefined]";
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }

          return symToStringTag && symToStringTag in Object(value)
            ? getRawTag(value)
            : objectToString(value);
        }

        module.exports = baseGetTag;

        /***/
      },
      /* 15 */
      /***/ function(module, exports) {
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }

        module.exports = isObject;

        /***/
      },
      /* 16 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.validate = validate;
        exports.typeIs = typeIs;
        exports.validateType = validateType;
        exports.validateOptional = validateOptional;
        exports.validateOptionalType = validateOptionalType;
        exports.arrayOf = arrayOf;
        exports.arrayOfType = arrayOfType;
        exports.validateArrayOfType = validateArrayOfType;
        exports.assertEach = assertEach;
        exports.assertOneOf = assertOneOf;
        exports.assertNodeType = assertNodeType;
        exports.assertNodeOrValueType = assertNodeOrValueType;
        exports.assertValueType = assertValueType;
        exports.chain = chain;
        exports.default = defineType;
        exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = void 0;

        var _is = _interopRequireDefault(__webpack_require__(73));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var VISITOR_KEYS = {};
        exports.VISITOR_KEYS = VISITOR_KEYS;
        var ALIAS_KEYS = {};
        exports.ALIAS_KEYS = ALIAS_KEYS;
        var FLIPPED_ALIAS_KEYS = {};
        exports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;
        var NODE_FIELDS = {};
        exports.NODE_FIELDS = NODE_FIELDS;
        var BUILDER_KEYS = {};
        exports.BUILDER_KEYS = BUILDER_KEYS;
        var DEPRECATED_KEYS = {};
        exports.DEPRECATED_KEYS = DEPRECATED_KEYS;

        function getType(val) {
          if (Array.isArray(val)) {
            return "array";
          } else if (val === null) {
            return "null";
          } else if (val === undefined) {
            return "undefined";
          } else {
            return typeof val;
          }
        }

        function validate(validate) {
          return {
            validate: validate
          };
        }

        function typeIs(typeName) {
          return typeof typeName === "string"
            ? assertNodeType(typeName)
            : assertNodeType.apply(void 0, typeName);
        }

        function validateType(typeName) {
          return validate(typeIs(typeName));
        }

        function validateOptional(validate) {
          return {
            validate: validate,
            optional: true
          };
        }

        function validateOptionalType(typeName) {
          return {
            validate: typeIs(typeName),
            optional: true
          };
        }

        function arrayOf(elementType) {
          return chain(assertValueType("array"), assertEach(elementType));
        }

        function arrayOfType(typeName) {
          return arrayOf(typeIs(typeName));
        }

        function validateArrayOfType(typeName) {
          return validate(arrayOfType(typeName));
        }

        function assertEach(callback) {
          function validator(node, key, val) {
            if (!Array.isArray(val)) return;

            for (var i = 0; i < val.length; i++) {
              callback(node, key + "[" + i + "]", val[i]);
            }
          }

          validator.each = callback;
          return validator;
        }

        function assertOneOf() {
          for (
            var _len = arguments.length, values = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            values[_key] = arguments[_key];
          }

          function validate(node, key, val) {
            if (values.indexOf(val) < 0) {
              throw new TypeError(
                "Property " +
                  key +
                  " expected value to be one of " +
                  JSON.stringify(values) +
                  " but got " +
                  JSON.stringify(val)
              );
            }
          }

          validate.oneOf = values;
          return validate;
        }

        function assertNodeType() {
          for (
            var _len2 = arguments.length, types = new Array(_len2), _key2 = 0;
            _key2 < _len2;
            _key2++
          ) {
            types[_key2] = arguments[_key2];
          }

          function validate(node, key, val) {
            var valid = false;

            for (var _i = 0; _i < types.length; _i++) {
              var type = types[_i];

              if ((0, _is.default)(type, val)) {
                valid = true;
                break;
              }
            }

            if (!valid) {
              throw new TypeError(
                "Property " +
                  key +
                  " of " +
                  node.type +
                  " expected node to be of a type " +
                  JSON.stringify(types) +
                  " " +
                  ("but instead got " + JSON.stringify(val && val.type))
              );
            }
          }

          validate.oneOfNodeTypes = types;
          return validate;
        }

        function assertNodeOrValueType() {
          for (
            var _len3 = arguments.length, types = new Array(_len3), _key3 = 0;
            _key3 < _len3;
            _key3++
          ) {
            types[_key3] = arguments[_key3];
          }

          function validate(node, key, val) {
            var valid = false;

            for (var _i2 = 0; _i2 < types.length; _i2++) {
              var type = types[_i2];

              if (getType(val) === type || (0, _is.default)(type, val)) {
                valid = true;
                break;
              }
            }

            if (!valid) {
              throw new TypeError(
                "Property " +
                  key +
                  " of " +
                  node.type +
                  " expected node to be of a type " +
                  JSON.stringify(types) +
                  " " +
                  ("but instead got " + JSON.stringify(val && val.type))
              );
            }
          }

          validate.oneOfNodeOrValueTypes = types;
          return validate;
        }

        function assertValueType(type) {
          function validate(node, key, val) {
            var valid = getType(val) === type;

            if (!valid) {
              throw new TypeError(
                "Property " +
                  key +
                  " expected type of " +
                  type +
                  " but got " +
                  getType(val)
              );
            }
          }

          validate.type = type;
          return validate;
        }

        function chain() {
          for (
            var _len4 = arguments.length, fns = new Array(_len4), _key4 = 0;
            _key4 < _len4;
            _key4++
          ) {
            fns[_key4] = arguments[_key4];
          }

          function validate() {
            for (var _i3 = 0; _i3 < fns.length; _i3++) {
              var fn = fns[_i3];
              fn.apply(void 0, arguments);
            }
          }

          validate.chainOf = fns;
          return validate;
        }

        function defineType(type, opts) {
          if (opts === void 0) {
            opts = {};
          }

          var inherits = (opts.inherits && store[opts.inherits]) || {};
          var fields = opts.fields || inherits.fields || {};
          var visitor = opts.visitor || inherits.visitor || [];
          var aliases = opts.aliases || inherits.aliases || [];
          var builder = opts.builder || inherits.builder || opts.visitor || [];

          if (opts.deprecatedAlias) {
            DEPRECATED_KEYS[opts.deprecatedAlias] = type;
          }

          var _arr = visitor.concat(builder);

          for (var _i4 = 0; _i4 < _arr.length; _i4++) {
            var _key5 = _arr[_i4];
            fields[_key5] = fields[_key5] || {};
          }

          for (var key in fields) {
            var field = fields[key];

            if (builder.indexOf(key) === -1) {
              field.optional = true;
            }

            if (field.default === undefined) {
              field.default = null;
            } else if (!field.validate) {
              field.validate = assertValueType(getType(field.default));
            }
          }

          VISITOR_KEYS[type] = opts.visitor = visitor;
          BUILDER_KEYS[type] = opts.builder = builder;
          NODE_FIELDS[type] = opts.fields = fields;
          ALIAS_KEYS[type] = opts.aliases = aliases;
          aliases.forEach(function(alias) {
            FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];
            FLIPPED_ALIAS_KEYS[alias].push(type);
          });
          store[type] = opts;
        }

        var store = {};

        /***/
      },
      /* 17 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIsNative = __webpack_require__(266),
          getValue = __webpack_require__(271);

        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined;
        }

        module.exports = getNative;

        /***/
      },
      /* 18 */
      /***/ function(module, exports) {
        var g;

        g = (function() {
          return this;
        })();

        try {
          g = g || Function("return this")() || (1, eval)("this");
        } catch (e) {
          if (typeof window === "object") g = window;
        }

        module.exports = g;

        /***/
      },
      /* 19 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NOT_LOCAL_BINDING = exports.BLOCK_SCOPED_SYMBOL = exports.INHERIT_KEYS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = exports.BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.UPDATE_OPERATORS = exports.LOGICAL_OPERATORS = exports.COMMENT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = void 0;
        var STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
        exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
        var FLATTENABLE_KEYS = ["body", "expressions"];
        exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
        var FOR_INIT_KEYS = ["left", "init"];
        exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
        var COMMENT_KEYS = [
          "leadingComments",
          "trailingComments",
          "innerComments"
        ];
        exports.COMMENT_KEYS = COMMENT_KEYS;
        var LOGICAL_OPERATORS = ["||", "&&", "??"];
        exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
        var UPDATE_OPERATORS = ["++", "--"];
        exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
        var BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
        exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
        var EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
        exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
        var COMPARISON_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS.concat([
          "in",
          "instanceof"
        ]);
        exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
        var BOOLEAN_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS.concat(
          BOOLEAN_NUMBER_BINARY_OPERATORS
        );
        exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
        var NUMBER_BINARY_OPERATORS = [
          "-",
          "/",
          "%",
          "*",
          "**",
          "&",
          "|",
          ">>",
          ">>>",
          "<<",
          "^"
        ];
        exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
        var BINARY_OPERATORS = ["+"].concat(
          NUMBER_BINARY_OPERATORS,
          BOOLEAN_BINARY_OPERATORS
        );
        exports.BINARY_OPERATORS = BINARY_OPERATORS;
        var BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
        exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
        var NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
        exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
        var STRING_UNARY_OPERATORS = ["typeof"];
        exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
        var UNARY_OPERATORS = ["void", "throw"].concat(
          BOOLEAN_UNARY_OPERATORS,
          NUMBER_UNARY_OPERATORS,
          STRING_UNARY_OPERATORS
        );
        exports.UNARY_OPERATORS = UNARY_OPERATORS;
        var INHERIT_KEYS = {
          optional: ["typeAnnotation", "typeParameters", "returnType"],
          force: ["start", "loc", "end"]
        };
        exports.INHERIT_KEYS = INHERIT_KEYS;
        var BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
        exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
        var NOT_LOCAL_BINDING = Symbol.for(
          "should not be considered a local binding"
        );
        exports.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;

        /***/
      },
      /* 20 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function _helperGetFunctionArity() {
          var data = _interopRequireDefault(__webpack_require__(431));

          _helperGetFunctionArity = function _helperGetFunctionArity() {
            return data;
          };

          return data;
        }

        function _template2() {
          var data = _interopRequireDefault(__webpack_require__(21));

          _template2 = function _template2() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var buildPropertyMethodAssignmentWrapper = (0, _template2().default)(
          "\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n"
        );
        var buildGeneratorPropertyMethodAssignmentWrapper = (0,
        _template2().default)(
          "\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n"
        );
        var visitor = {
          "ReferencedIdentifier|BindingIdentifier": function ReferencedIdentifierBindingIdentifier(
            path,
            state
          ) {
            if (path.node.name !== state.name) return;
            var localDeclar = path.scope.getBindingIdentifier(state.name);
            if (localDeclar !== state.outerDeclar) return;
            state.selfReference = true;
            path.stop();
          }
        };

        function getNameFromLiteralId(id) {
          if (t().isNullLiteral(id)) {
            return "null";
          }

          if (t().isRegExpLiteral(id)) {
            return "_" + id.pattern + "_" + id.flags;
          }

          if (t().isTemplateLiteral(id)) {
            return id.quasis
              .map(function(quasi) {
                return quasi.value.raw;
              })
              .join("");
          }

          if (id.value !== undefined) {
            return id.value + "";
          }

          return "";
        }

        function wrap(state, method, id, scope) {
          if (state.selfReference) {
            if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
              scope.rename(id.name);
            } else {
              if (!t().isFunction(method)) return;
              var build = buildPropertyMethodAssignmentWrapper;

              if (method.generator) {
                build = buildGeneratorPropertyMethodAssignmentWrapper;
              }

              var _template = build({
                FUNCTION: method,
                FUNCTION_ID: id,
                FUNCTION_KEY: scope.generateUidIdentifier(id.name)
              }).expression;
              var params = _template.callee.body.body[0].params;

              for (
                var i = 0, len = (0, _helperGetFunctionArity().default)(method);
                i < len;
                i++
              ) {
                params.push(scope.generateUidIdentifier("x"));
              }

              return _template;
            }
          }

          method.id = id;
          scope.getProgramParent().references[id.name] = true;
        }

        function visit(node, name, scope) {
          var state = {
            selfAssignment: false,
            selfReference: false,
            outerDeclar: scope.getBindingIdentifier(name),
            references: [],
            name: name
          };
          var binding = scope.getOwnBinding(name);

          if (binding) {
            if (binding.kind === "param") {
              state.selfReference = true;
            } else {
            }
          } else if (state.outerDeclar || scope.hasGlobal(name)) {
            scope.traverse(node, visitor, state);
          }

          return state;
        }

        function _default(_ref, localBinding) {
          var node = _ref.node,
            parent = _ref.parent,
            scope = _ref.scope,
            id = _ref.id;

          if (localBinding === void 0) {
            localBinding = false;
          }

          if (node.id) return;

          if (
            (t().isObjectProperty(parent) ||
              t().isObjectMethod(parent, {
                kind: "method"
              })) &&
            (!parent.computed || t().isLiteral(parent.key))
          ) {
            id = parent.key;
          } else if (t().isVariableDeclarator(parent)) {
            id = parent.id;

            if (t().isIdentifier(id) && !localBinding) {
              var binding = scope.parent.getBinding(id.name);

              if (
                binding &&
                binding.constant &&
                scope.getBinding(id.name) === binding
              ) {
                node.id = t().cloneNode(id);
                node.id[t().NOT_LOCAL_BINDING] = true;
                return;
              }
            }
          } else if (t().isAssignmentExpression(parent)) {
            id = parent.left;
          } else if (!id) {
            return;
          }

          var name;

          if (id && t().isLiteral(id)) {
            name = getNameFromLiteralId(id);
          } else if (id && t().isIdentifier(id)) {
            name = id.name;
          }

          if (name === undefined) {
            return;
          }

          name = t().toBindingIdentifierName(name);
          id = t().identifier(name);
          id[t().NOT_LOCAL_BINDING] = true;
          var state = visit(node, name, scope);
          return wrap(state, node, id, scope) || node;
        }

        /***/
      },
      /* 21 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.program = exports.expression = exports.statements = exports.statement = exports.smart = void 0;

        var formatters = _interopRequireWildcard(__webpack_require__(432));

        var _builder = _interopRequireDefault(__webpack_require__(433));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var smart = (0, _builder.default)(formatters.smart);
        exports.smart = smart;
        var statement = (0, _builder.default)(formatters.statement);
        exports.statement = statement;
        var statements = (0, _builder.default)(formatters.statements);
        exports.statements = statements;
        var expression = (0, _builder.default)(formatters.expression);
        exports.expression = expression;
        var program = (0, _builder.default)(formatters.program);
        exports.program = program;

        var _default = Object.assign(smart.bind(undefined), {
          smart: smart,
          statement: statement,
          statements: statements,
          expression: expression,
          program: program,
          ast: smart.ast
        });

        exports.default = _default;

        /***/
      },
      /* 22 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.loadOptions = loadOptions;
        Object.defineProperty(exports, "default", {
          enumerable: true,
          get: function get() {
            return _full.default;
          }
        });
        Object.defineProperty(exports, "loadPartialConfig", {
          enumerable: true,
          get: function get() {
            return _partial.loadPartialConfig;
          }
        });
        exports.OptionManager = void 0;

        var _full = _interopRequireDefault(__webpack_require__(449));

        var _partial = __webpack_require__(164);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function loadOptions(opts) {
          var config = (0, _full.default)(opts);
          return config ? config.options : null;
        }

        var OptionManager = (function() {
          function OptionManager() {}

          var _proto = OptionManager.prototype;

          _proto.init = function init(opts) {
            return loadOptions(opts);
          };

          return OptionManager;
        })();

        exports.OptionManager = OptionManager;

        /***/
      },
      /* 23 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var virtualTypes = _interopRequireWildcard(__webpack_require__(102));

        function _debug2() {
          var data = _interopRequireDefault(__webpack_require__(140));

          _debug2 = function _debug2() {
            return data;
          };

          return data;
        }

        function _invariant() {
          var data = _interopRequireDefault(__webpack_require__(371));

          _invariant = function _invariant() {
            return data;
          };

          return data;
        }

        var _index = _interopRequireDefault(__webpack_require__(8));

        var _scope = _interopRequireDefault(__webpack_require__(141));

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var _cache = __webpack_require__(49);

        function _generator() {
          var data = _interopRequireDefault(__webpack_require__(81));

          _generator = function _generator() {
            return data;
          };

          return data;
        }

        var NodePath_ancestry = _interopRequireWildcard(
          __webpack_require__(414)
        );

        var NodePath_inference = _interopRequireWildcard(
          __webpack_require__(415)
        );

        var NodePath_replacement = _interopRequireWildcard(
          __webpack_require__(418)
        );

        var NodePath_evaluation = _interopRequireWildcard(
          __webpack_require__(429)
        );

        var NodePath_conversion = _interopRequireWildcard(
          __webpack_require__(430)
        );

        var NodePath_introspection = _interopRequireWildcard(
          __webpack_require__(436)
        );

        var NodePath_context = _interopRequireWildcard(
          __webpack_require__(437)
        );

        var NodePath_removal = _interopRequireWildcard(
          __webpack_require__(438)
        );

        var NodePath_modification = _interopRequireWildcard(
          __webpack_require__(440)
        );

        var NodePath_family = _interopRequireWildcard(__webpack_require__(442));

        var NodePath_comments = _interopRequireWildcard(
          __webpack_require__(443)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var _debug = (0, _debug2().default)("babel");

        var NodePath = (function() {
          function NodePath(hub, parent) {
            this.parent = parent;
            this.hub = hub;
            this.contexts = [];
            this.data = {};
            this.shouldSkip = false;
            this.shouldStop = false;
            this.removed = false;
            this.state = null;
            this.opts = null;
            this.skipKeys = null;
            this.parentPath = null;
            this.context = null;
            this.container = null;
            this.listKey = null;
            this.inList = false;
            this.parentKey = null;
            this.key = null;
            this.node = null;
            this.scope = null;
            this.type = null;
            this.typeAnnotation = null;
          }

          NodePath.get = function get(_ref) {
            var hub = _ref.hub,
              parentPath = _ref.parentPath,
              parent = _ref.parent,
              container = _ref.container,
              listKey = _ref.listKey,
              key = _ref.key;

            if (!hub && parentPath) {
              hub = parentPath.hub;
            }

            (0, _invariant().default)(
              parent,
              "To get a node path the parent needs to exist"
            );
            var targetNode = container[key];
            var paths = _cache.path.get(parent) || [];

            if (!_cache.path.has(parent)) {
              _cache.path.set(parent, paths);
            }

            var path;

            for (var i = 0; i < paths.length; i++) {
              var pathCheck = paths[i];

              if (pathCheck.node === targetNode) {
                path = pathCheck;
                break;
              }
            }

            if (!path) {
              path = new NodePath(hub, parent);
              paths.push(path);
            }

            path.setup(parentPath, container, listKey, key);
            return path;
          };

          var _proto = NodePath.prototype;

          _proto.getScope = function getScope(scope) {
            return this.isScope() ? new _scope.default(this) : scope;
          };

          _proto.setData = function setData(key, val) {
            return (this.data[key] = val);
          };

          _proto.getData = function getData(key, def) {
            var val = this.data[key];
            if (!val && def) val = this.data[key] = def;
            return val;
          };

          _proto.buildCodeFrameError = function buildCodeFrameError(
            msg,
            Error
          ) {
            if (Error === void 0) {
              Error = SyntaxError;
            }

            return this.hub.file.buildCodeFrameError(this.node, msg, Error);
          };

          _proto.traverse = function traverse(visitor, state) {
            (0, _index.default)(this.node, visitor, this.scope, state, this);
          };

          _proto.set = function set(key, node) {
            t().validate(this.node, key, node);
            this.node[key] = node;
          };

          _proto.getPathLocation = function getPathLocation() {
            var parts = [];
            var path = this;

            do {
              var key = path.key;
              if (path.inList) key = path.listKey + "[" + key + "]";
              parts.unshift(key);
            } while ((path = path.parentPath));

            return parts.join(".");
          };

          _proto.debug = function debug(message) {
            if (!_debug.enabled) return;

            _debug(this.getPathLocation() + " " + this.type + ": " + message);
          };

          _proto.toString = function toString() {
            return (0, _generator().default)(this.node).code;
          };

          return NodePath;
        })();

        exports.default = NodePath;
        Object.assign(
          NodePath.prototype,
          NodePath_ancestry,
          NodePath_inference,
          NodePath_replacement,
          NodePath_evaluation,
          NodePath_conversion,
          NodePath_introspection,
          NodePath_context,
          NodePath_removal,
          NodePath_modification,
          NodePath_family,
          NodePath_comments
        );
        var _arr = t().TYPES;

        var _loop2 = function _loop2() {
          var type = _arr[_i];
          var typeKey = "is" + type;
          var fn = t()[typeKey];

          NodePath.prototype[typeKey] = function(opts) {
            return fn(this.node, opts);
          };

          NodePath.prototype["assert" + type] = function(opts) {
            if (!fn(this.node, opts)) {
              throw new TypeError("Expected node path of type " + type);
            }
          };
        };

        for (var _i = 0; _i < _arr.length; _i++) {
          _loop2();
        }

        var _loop = function _loop(type) {
          if (type[0] === "_") return "continue";
          if (t().TYPES.indexOf(type) < 0) t().TYPES.push(type);
          var virtualType = virtualTypes[type];

          NodePath.prototype["is" + type] = function(opts) {
            return virtualType.checkPath(this, opts);
          };
        };

        for (var type in virtualTypes) {
          var _ret = _loop(type);

          if (_ret === "continue") continue;
        }

        /***/
      },
      /* 24 */
      /***/ function(module, exports, __webpack_require__) {
        var root = __webpack_require__(9);

        var Symbol = root.Symbol;
        module.exports = Symbol;

        /***/
      },
      /* 25 */
      /***/ function(module, exports, __webpack_require__) {
        var arrayLikeKeys = __webpack_require__(112),
          baseKeys = __webpack_require__(290),
          isArrayLike = __webpack_require__(28);

        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        module.exports = keys;

        /***/
      },
      /* 26 */
      /***/ function(module, exports) {
        module.exports = function(module) {
          if (!module.webpackPolyfill) {
            module.deprecate = function() {};

            module.paths = [];
            if (!module.children) module.children = [];
            Object.defineProperty(module, "loaded", {
              enumerable: true,
              get: function get() {
                return module.l;
              }
            });
            Object.defineProperty(module, "id", {
              enumerable: true,
              get: function get() {
                return module.i;
              }
            });
            module.webpackPolyfill = 1;
          }

          return module;
        };

        /***/
      },
      /* 27 */
      /***/ function(module, exports) {
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }

        module.exports = baseUnary;

        /***/
      },
      /* 28 */
      /***/ function(module, exports, __webpack_require__) {
        var isFunction = __webpack_require__(106),
          isLength = __webpack_require__(65);

        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }

        module.exports = isArrayLike;

        /***/
      },
      /* 29 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.__esModule = true;
        exports.wrapWithTypes = wrapWithTypes;
        exports.getTypes = getTypes;
        exports.runtimeProperty = runtimeProperty;
        exports.isReference = isReference;
        exports.replaceWithOrRemove = replaceWithOrRemove;
        var currentTypes = null;

        function wrapWithTypes(types, fn) {
          return function() {
            var oldTypes = currentTypes;
            currentTypes = types;

            try {
              for (
                var _len = arguments.length, args = Array(_len), _key = 0;
                _key < _len;
                _key++
              ) {
                args[_key] = arguments[_key];
              }

              return fn.apply(this, args);
            } finally {
              currentTypes = oldTypes;
            }
          };
        }

        function getTypes() {
          return currentTypes;
        }

        function runtimeProperty(name) {
          var t = getTypes();
          return t.memberExpression(
            t.identifier("regeneratorRuntime"),
            t.identifier(name),
            false
          );
        }

        function isReference(path) {
          return (
            path.isReferenced() ||
            path.parentPath.isAssignmentExpression({
              left: path.node
            })
          );
        }

        function replaceWithOrRemove(path, replacement) {
          if (replacement) {
            path.replaceWith(replacement);
          } else {
            path.remove();
          }
        }

        /***/
      },
      /* 30 */
      /***/ function(module, exports) {
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }

        module.exports = eq;

        /***/
      },
      /* 31 */
      /***/ function(module, exports, __webpack_require__) {
        var assignValue = __webpack_require__(109),
          baseAssignValue = __webpack_require__(110);

        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1,
            length = props.length;

          while (++index < length) {
            var key = props[index];
            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined;

            if (newValue === undefined) {
              newValue = source[key];
            }

            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }

          return object;
        }

        module.exports = copyObject;

        /***/
      },
      /* 32 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isValidIdentifier;

        function _esutils() {
          var data = _interopRequireDefault(__webpack_require__(72));

          _esutils = function _esutils() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function isValidIdentifier(name) {
          if (
            typeof name !== "string" ||
            _esutils().default.keyword.isReservedWordES6(name, true)
          ) {
            return false;
          } else if (name === "await") {
            return false;
          } else {
            return _esutils().default.keyword.isIdentifierNameES6(name);
          }
        }

        /***/
      },
      /* 33 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = cloneNode;

        var _definitions = __webpack_require__(11);

        var has = Function.call.bind(Object.prototype.hasOwnProperty);

        function cloneIfNode(obj, deep) {
          if (
            obj &&
            typeof obj.type === "string" &&
            obj.type !== "CommentLine" &&
            obj.type !== "CommentBlock"
          ) {
            return cloneNode(obj, deep);
          }

          return obj;
        }

        function cloneIfNodeOrArray(obj, deep) {
          if (Array.isArray(obj)) {
            return obj.map(function(node) {
              return cloneIfNode(node, deep);
            });
          }

          return cloneIfNode(obj, deep);
        }

        function cloneNode(node, deep) {
          if (deep === void 0) {
            deep = true;
          }

          if (!node) return node;
          var type = node.type;
          var newNode = {
            type: type
          };

          if (type === "Identifier") {
            newNode.name = node.name;
          } else if (!has(_definitions.NODE_FIELDS, type)) {
            throw new Error('Unknown node type: "' + type + '"');
          } else {
            var _arr = Object.keys(_definitions.NODE_FIELDS[type]);

            for (var _i = 0; _i < _arr.length; _i++) {
              var field = _arr[_i];

              if (has(node, field)) {
                newNode[field] = deep
                  ? cloneIfNodeOrArray(node[field], true)
                  : node[field];
              }
            }
          }

          if (has(node, "loc")) {
            newNode.loc = node.loc;
          }

          if (has(node, "leadingComments")) {
            newNode.leadingComments = node.leadingComments;
          }

          if (has(node, "innerComments")) {
            newNode.innerComments = node.innerCmments;
          }

          if (has(node, "trailingComments")) {
            newNode.trailingComments = node.trailingComments;
          }

          if (has(node, "extra")) {
            newNode.extra = Object.assign({}, node.extra);
          }

          return newNode;
        }

        /***/
      },
      /* 34 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGetTag = __webpack_require__(14),
          isObjectLike = __webpack_require__(10);

        var symbolTag = "[object Symbol]";

        function isSymbol(value) {
          return (
            typeof value == "symbol" ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag)
          );
        }

        module.exports = isSymbol;

        /***/
      },
      /* 35 */
      /***/ function(module, exports, __webpack_require__) {
        var eq = __webpack_require__(30),
          isArrayLike = __webpack_require__(28),
          isIndex = __webpack_require__(64),
          isObject = __webpack_require__(15);

        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }

          var type = typeof index;

          if (
            type == "number"
              ? isArrayLike(object) && isIndex(index, object.length)
              : type == "string" && index in object
          ) {
            return eq(object[index], value);
          }

          return false;
        }

        module.exports = isIterateeCall;

        /***/
      },
      /* 36 */
      /***/ function(module, exports) {
        function getArg(aArgs, aName, aDefaultValue) {
          if (aName in aArgs) {
            return aArgs[aName];
          } else if (arguments.length === 3) {
            return aDefaultValue;
          } else {
            throw new Error('"' + aName + '" is a required argument.');
          }
        }

        exports.getArg = getArg;
        var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
        var dataUrlRegexp = /^data:.+\,.+$/;

        function urlParse(aUrl) {
          var match = aUrl.match(urlRegexp);

          if (!match) {
            return null;
          }

          return {
            scheme: match[1],
            auth: match[2],
            host: match[3],
            port: match[4],
            path: match[5]
          };
        }

        exports.urlParse = urlParse;

        function urlGenerate(aParsedUrl) {
          var url = "";

          if (aParsedUrl.scheme) {
            url += aParsedUrl.scheme + ":";
          }

          url += "//";

          if (aParsedUrl.auth) {
            url += aParsedUrl.auth + "@";
          }

          if (aParsedUrl.host) {
            url += aParsedUrl.host;
          }

          if (aParsedUrl.port) {
            url += ":" + aParsedUrl.port;
          }

          if (aParsedUrl.path) {
            url += aParsedUrl.path;
          }

          return url;
        }

        exports.urlGenerate = urlGenerate;

        function normalize(aPath) {
          var path = aPath;
          var url = urlParse(aPath);

          if (url) {
            if (!url.path) {
              return aPath;
            }

            path = url.path;
          }

          var isAbsolute = exports.isAbsolute(path);
          var parts = path.split(/\/+/);

          for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
            part = parts[i];

            if (part === ".") {
              parts.splice(i, 1);
            } else if (part === "..") {
              up++;
            } else if (up > 0) {
              if (part === "") {
                parts.splice(i + 1, up);
                up = 0;
              } else {
                parts.splice(i, 2);
                up--;
              }
            }
          }

          path = parts.join("/");

          if (path === "") {
            path = isAbsolute ? "/" : ".";
          }

          if (url) {
            url.path = path;
            return urlGenerate(url);
          }

          return path;
        }

        exports.normalize = normalize;

        function join(aRoot, aPath) {
          if (aRoot === "") {
            aRoot = ".";
          }

          if (aPath === "") {
            aPath = ".";
          }

          var aPathUrl = urlParse(aPath);
          var aRootUrl = urlParse(aRoot);

          if (aRootUrl) {
            aRoot = aRootUrl.path || "/";
          }

          if (aPathUrl && !aPathUrl.scheme) {
            if (aRootUrl) {
              aPathUrl.scheme = aRootUrl.scheme;
            }

            return urlGenerate(aPathUrl);
          }

          if (aPathUrl || aPath.match(dataUrlRegexp)) {
            return aPath;
          }

          if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
            aRootUrl.host = aPath;
            return urlGenerate(aRootUrl);
          }

          var joined =
            aPath.charAt(0) === "/"
              ? aPath
              : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);

          if (aRootUrl) {
            aRootUrl.path = joined;
            return urlGenerate(aRootUrl);
          }

          return joined;
        }

        exports.join = join;

        exports.isAbsolute = function(aPath) {
          return aPath.charAt(0) === "/" || !!aPath.match(urlRegexp);
        };

        function relative(aRoot, aPath) {
          if (aRoot === "") {
            aRoot = ".";
          }

          aRoot = aRoot.replace(/\/$/, "");
          var level = 0;

          while (aPath.indexOf(aRoot + "/") !== 0) {
            var index = aRoot.lastIndexOf("/");

            if (index < 0) {
              return aPath;
            }

            aRoot = aRoot.slice(0, index);

            if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
              return aPath;
            }

            ++level;
          }

          return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
        }

        exports.relative = relative;

        var supportsNullProto = (function() {
          var obj = Object.create(null);
          return !("__proto__" in obj);
        })();

        function identity(s) {
          return s;
        }

        function toSetString(aStr) {
          if (isProtoString(aStr)) {
            return "$" + aStr;
          }

          return aStr;
        }

        exports.toSetString = supportsNullProto ? identity : toSetString;

        function fromSetString(aStr) {
          if (isProtoString(aStr)) {
            return aStr.slice(1);
          }

          return aStr;
        }

        exports.fromSetString = supportsNullProto ? identity : fromSetString;

        function isProtoString(s) {
          if (!s) {
            return false;
          }

          var length = s.length;

          if (length < 9) {
            return false;
          }

          if (
            s.charCodeAt(length - 1) !== 95 ||
            s.charCodeAt(length - 2) !== 95 ||
            s.charCodeAt(length - 3) !== 111 ||
            s.charCodeAt(length - 4) !== 116 ||
            s.charCodeAt(length - 5) !== 111 ||
            s.charCodeAt(length - 6) !== 114 ||
            s.charCodeAt(length - 7) !== 112 ||
            s.charCodeAt(length - 8) !== 95 ||
            s.charCodeAt(length - 9) !== 95
          ) {
            return false;
          }

          for (var i = length - 10; i >= 0; i--) {
            if (s.charCodeAt(i) !== 36) {
              return false;
            }
          }

          return true;
        }

        function compareByOriginalPositions(
          mappingA,
          mappingB,
          onlyCompareOriginal
        ) {
          var cmp = mappingA.source - mappingB.source;

          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalLine - mappingB.originalLine;

          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalColumn - mappingB.originalColumn;

          if (cmp !== 0 || onlyCompareOriginal) {
            return cmp;
          }

          cmp = mappingA.generatedColumn - mappingB.generatedColumn;

          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.generatedLine - mappingB.generatedLine;

          if (cmp !== 0) {
            return cmp;
          }

          return mappingA.name - mappingB.name;
        }

        exports.compareByOriginalPositions = compareByOriginalPositions;

        function compareByGeneratedPositionsDeflated(
          mappingA,
          mappingB,
          onlyCompareGenerated
        ) {
          var cmp = mappingA.generatedLine - mappingB.generatedLine;

          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.generatedColumn - mappingB.generatedColumn;

          if (cmp !== 0 || onlyCompareGenerated) {
            return cmp;
          }

          cmp = mappingA.source - mappingB.source;

          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalLine - mappingB.originalLine;

          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalColumn - mappingB.originalColumn;

          if (cmp !== 0) {
            return cmp;
          }

          return mappingA.name - mappingB.name;
        }

        exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

        function strcmp(aStr1, aStr2) {
          if (aStr1 === aStr2) {
            return 0;
          }

          if (aStr1 > aStr2) {
            return 1;
          }

          return -1;
        }

        function compareByGeneratedPositionsInflated(mappingA, mappingB) {
          var cmp = mappingA.generatedLine - mappingB.generatedLine;

          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.generatedColumn - mappingB.generatedColumn;

          if (cmp !== 0) {
            return cmp;
          }

          cmp = strcmp(mappingA.source, mappingB.source);

          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalLine - mappingB.originalLine;

          if (cmp !== 0) {
            return cmp;
          }

          cmp = mappingA.originalColumn - mappingB.originalColumn;

          if (cmp !== 0) {
            return cmp;
          }

          return strcmp(mappingA.name, mappingB.name);
        }

        exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

        /***/
      },
      /* 37 */
      /***/ function(module, exports, __webpack_require__) {
        var listCacheClear = __webpack_require__(256),
          listCacheDelete = __webpack_require__(257),
          listCacheGet = __webpack_require__(258),
          listCacheHas = __webpack_require__(259),
          listCacheSet = __webpack_require__(260);

        function ListCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();

          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        module.exports = ListCache;

        /***/
      },
      /* 38 */
      /***/ function(module, exports, __webpack_require__) {
        var eq = __webpack_require__(30);

        function assocIndexOf(array, key) {
          var length = array.length;

          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }

          return -1;
        }

        module.exports = assocIndexOf;

        /***/
      },
      /* 39 */
      /***/ function(module, exports, __webpack_require__) {
        var getNative = __webpack_require__(17);

        var nativeCreate = getNative(Object, "create");
        module.exports = nativeCreate;

        /***/
      },
      /* 40 */
      /***/ function(module, exports, __webpack_require__) {
        var isKeyable = __webpack_require__(280);

        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key)
            ? data[typeof key == "string" ? "string" : "hash"]
            : data.map;
        }

        module.exports = getMapData;

        /***/
      },
      /* 41 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(module) {
          var freeGlobal = __webpack_require__(107);

          var freeExports =
            typeof exports == "object" &&
            exports &&
            !exports.nodeType &&
            exports;
          var freeModule =
            freeExports &&
            typeof module == "object" &&
            module &&
            !module.nodeType &&
            module;
          var moduleExports = freeModule && freeModule.exports === freeExports;
          var freeProcess = moduleExports && freeGlobal.process;

          var nodeUtil = (function() {
            try {
              return (
                freeProcess &&
                freeProcess.binding &&
                freeProcess.binding("util")
              );
            } catch (e) {}
          })();

          module.exports = nodeUtil;
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(26)(module)));

        /***/
      },
      /* 42 */
      /***/ function(module, exports, __webpack_require__) {
        var arrayLikeKeys = __webpack_require__(112),
          baseKeysIn = __webpack_require__(293),
          isArrayLike = __webpack_require__(28);

        function keysIn(object) {
          return isArrayLike(object)
            ? arrayLikeKeys(object, true)
            : baseKeysIn(object);
        }

        module.exports = keysIn;

        /***/
      },
      /* 43 */
      /***/ function(module, exports, __webpack_require__) {
        var DataView = __webpack_require__(300),
          Map = __webpack_require__(60),
          Promise = __webpack_require__(301),
          Set = __webpack_require__(120),
          WeakMap = __webpack_require__(302),
          baseGetTag = __webpack_require__(14),
          toSource = __webpack_require__(108);

        var mapTag = "[object Map]",
          objectTag = "[object Object]",
          promiseTag = "[object Promise]",
          setTag = "[object Set]",
          weakMapTag = "[object WeakMap]";
        var dataViewTag = "[object DataView]";
        var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);
        var getTag = baseGetTag;

        if (
          (DataView &&
            getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map && getTag(new Map()) != mapTag) ||
          (Promise && getTag(Promise.resolve()) != promiseTag) ||
          (Set && getTag(new Set()) != setTag) ||
          (WeakMap && getTag(new WeakMap()) != weakMapTag)
        ) {
          getTag = function getTag(value) {
            var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : "";

            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;

                case mapCtorString:
                  return mapTag;

                case promiseCtorString:
                  return promiseTag;

                case setCtorString:
                  return setTag;

                case weakMapCtorString:
                  return weakMapTag;
              }
            }

            return result;
          };
        }

        module.exports = getTag;

        /***/
      },
      /* 44 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = getBindingIdentifiers;

        var _generated = __webpack_require__(4);

        function getBindingIdentifiers(node, duplicates, outerOnly) {
          var search = [].concat(node);
          var ids = Object.create(null);

          while (search.length) {
            var id = search.shift();
            if (!id) continue;
            var keys = getBindingIdentifiers.keys[id.type];

            if ((0, _generated.isIdentifier)(id)) {
              if (duplicates) {
                var _ids = (ids[id.name] = ids[id.name] || []);

                _ids.push(id);
              } else {
                ids[id.name] = id;
              }

              continue;
            }

            if ((0, _generated.isExportDeclaration)(id)) {
              if ((0, _generated.isDeclaration)(id.declaration)) {
                search.push(id.declaration);
              }

              continue;
            }

            if (outerOnly) {
              if ((0, _generated.isFunctionDeclaration)(id)) {
                search.push(id.id);
                continue;
              }

              if ((0, _generated.isFunctionExpression)(id)) {
                continue;
              }
            }

            if (keys) {
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];

                if (id[key]) {
                  search = search.concat(id[key]);
                }
              }
            }
          }

          return ids;
        }

        getBindingIdentifiers.keys = {
          DeclareClass: ["id"],
          DeclareFunction: ["id"],
          DeclareModule: ["id"],
          DeclareVariable: ["id"],
          InterfaceDeclaration: ["id"],
          TypeAlias: ["id"],
          OpaqueType: ["id"],
          CatchClause: ["param"],
          LabeledStatement: ["label"],
          UnaryExpression: ["argument"],
          AssignmentExpression: ["left"],
          ImportSpecifier: ["local"],
          ImportNamespaceSpecifier: ["local"],
          ImportDefaultSpecifier: ["local"],
          ImportDeclaration: ["specifiers"],
          ExportSpecifier: ["exported"],
          ExportNamespaceSpecifier: ["exported"],
          ExportDefaultSpecifier: ["exported"],
          FunctionDeclaration: ["id", "params"],
          FunctionExpression: ["id", "params"],
          ArrowFunctionExpression: ["params"],
          ObjectMethod: ["params"],
          ClassMethod: ["params"],
          ForInStatement: ["left"],
          ForOfStatement: ["left"],
          ClassDeclaration: ["id"],
          ClassExpression: ["id"],
          RestElement: ["argument"],
          UpdateExpression: ["argument"],
          ObjectProperty: ["value"],
          AssignmentPattern: ["left"],
          ArrayPattern: ["elements"],
          ObjectPattern: ["properties"],
          VariableDeclaration: ["declarations"],
          VariableDeclarator: ["id"]
        };

        /***/
      },
      /* 45 */
      /***/ function(module, exports, __webpack_require__) {
        var toFinite = __webpack_require__(373);

        function toInteger(value) {
          var result = toFinite(value),
            remainder = result % 1;
          return result === result
            ? remainder ? result - remainder : result
            : 0;
        }

        module.exports = toInteger;

        /***/
      },
      /* 46 */
      /***/ function(module, exports) {
        function arrayMap(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }

          return result;
        }

        module.exports = arrayMap;

        /***/
      },
      /* 47 */
      /***/ function(module, exports, __webpack_require__) {
        var identity = __webpack_require__(48),
          overRest = __webpack_require__(380),
          setToString = __webpack_require__(382);

        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }

        module.exports = baseRest;

        /***/
      },
      /* 48 */
      /***/ function(module, exports) {
        function identity(value) {
          return value;
        }

        module.exports = identity;

        /***/
      },
      /* 49 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.clear = clear;
        exports.clearPath = clearPath;
        exports.clearScope = clearScope;
        exports.scope = exports.path = void 0;
        var path = new WeakMap();
        exports.path = path;
        var scope = new WeakMap();
        exports.scope = scope;

        function clear() {
          clearPath();
          clearScope();
        }

        function clearPath() {
          exports.path = path = new WeakMap();
        }

        function clearScope() {
          exports.scope = scope = new WeakMap();
        }

        /***/
      },
      /* 50 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(process) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.codeFrameColumns = codeFrameColumns;
          exports.default = _default;

          function _highlight() {
            var data = _interopRequireWildcard(__webpack_require__(419));

            _highlight = function _highlight() {
              return data;
            };

            return data;
          }

          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};

              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc =
                      Object.defineProperty && Object.getOwnPropertyDescriptor
                        ? Object.getOwnPropertyDescriptor(obj, key)
                        : {};

                    if (desc.get || desc.set) {
                      Object.defineProperty(newObj, key, desc);
                    } else {
                      newObj[key] = obj[key];
                    }
                  }
                }
              }

              newObj.default = obj;
              return newObj;
            }
          }

          var deprecationWarningShown = false;

          function getDefs(chalk) {
            return {
              gutter: chalk.grey,
              marker: chalk.red.bold,
              message: chalk.red.bold
            };
          }

          var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

          function getMarkerLines(loc, source, opts) {
            var startLoc = Object.assign(
              {},
              {
                column: 0,
                line: -1
              },
              loc.start
            );
            var endLoc = Object.assign({}, startLoc, loc.end);

            var _ref = opts || {},
              _ref$linesAbove = _ref.linesAbove,
              linesAbove = _ref$linesAbove === void 0 ? 2 : _ref$linesAbove,
              _ref$linesBelow = _ref.linesBelow,
              linesBelow = _ref$linesBelow === void 0 ? 3 : _ref$linesBelow;

            var startLine = startLoc.line;
            var startColumn = startLoc.column;
            var endLine = endLoc.line;
            var endColumn = endLoc.column;
            var start = Math.max(startLine - (linesAbove + 1), 0);
            var end = Math.min(source.length, endLine + linesBelow);

            if (startLine === -1) {
              start = 0;
            }

            if (endLine === -1) {
              end = source.length;
            }

            var lineDiff = endLine - startLine;
            var markerLines = {};

            if (lineDiff) {
              for (var i = 0; i <= lineDiff; i++) {
                var lineNumber = i + startLine;

                if (!startColumn) {
                  markerLines[lineNumber] = true;
                } else if (i === 0) {
                  var sourceLength = source[lineNumber - 1].length;
                  markerLines[lineNumber] = [
                    startColumn,
                    sourceLength - startColumn
                  ];
                } else if (i === lineDiff) {
                  markerLines[lineNumber] = [0, endColumn];
                } else {
                  var _sourceLength = source[lineNumber - i].length;
                  markerLines[lineNumber] = [0, _sourceLength];
                }
              }
            } else {
              if (startColumn === endColumn) {
                if (startColumn) {
                  markerLines[startLine] = [startColumn, 0];
                } else {
                  markerLines[startLine] = true;
                }
              } else {
                markerLines[startLine] = [startColumn, endColumn - startColumn];
              }
            }

            return {
              start: start,
              end: end,
              markerLines: markerLines
            };
          }

          function codeFrameColumns(rawLines, loc, opts) {
            if (opts === void 0) {
              opts = {};
            }

            var highlighted =
              (opts.highlightCode || opts.forceColor) &&
              (0, _highlight().shouldHighlight)(opts);
            var chalk = (0, _highlight().getChalk)(opts);
            var defs = getDefs(chalk);

            var maybeHighlight = function maybeHighlight(chalkFn, string) {
              return highlighted ? chalkFn(string) : string;
            };

            if (highlighted)
              rawLines = (0, _highlight().default)(rawLines, opts);
            var lines = rawLines.split(NEWLINE);

            var _getMarkerLines = getMarkerLines(loc, lines, opts),
              start = _getMarkerLines.start,
              end = _getMarkerLines.end,
              markerLines = _getMarkerLines.markerLines;

            var hasColumns = loc.start && typeof loc.start.column === "number";
            var numberMaxWidth = String(end).length;
            var frame = lines
              .slice(start, end)
              .map(function(line, index) {
                var number = start + 1 + index;
                var paddedNumber = (" " + number).slice(-numberMaxWidth);
                var gutter = " " + paddedNumber + " | ";
                var hasMarker = markerLines[number];
                var lastMarkerLine = !markerLines[number + 1];

                if (hasMarker) {
                  var markerLine = "";

                  if (Array.isArray(hasMarker)) {
                    var markerSpacing = line
                      .slice(0, Math.max(hasMarker[0] - 1, 0))
                      .replace(/[^\t]/g, " ");
                    var numberOfMarkers = hasMarker[1] || 1;
                    markerLine = [
                      "\n ",
                      maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")),
                      markerSpacing,
                      maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)
                    ].join("");

                    if (lastMarkerLine && opts.message) {
                      markerLine +=
                        " " + maybeHighlight(defs.message, opts.message);
                    }
                  }

                  return [
                    maybeHighlight(defs.marker, ">"),
                    maybeHighlight(defs.gutter, gutter),
                    line,
                    markerLine
                  ].join("");
                } else {
                  return " " + maybeHighlight(defs.gutter, gutter) + line;
                }
              })
              .join("\n");

            if (opts.message && !hasColumns) {
              frame =
                "" +
                " ".repeat(numberMaxWidth + 1) +
                opts.message +
                "\n" +
                frame;
            }

            if (highlighted) {
              return chalk.reset(frame);
            } else {
              return frame;
            }
          }

          function _default(rawLines, lineNumber, colNumber, opts) {
            if (opts === void 0) {
              opts = {};
            }

            if (!deprecationWarningShown) {
              deprecationWarningShown = true;
              var message =
                "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";

              if (process.emitWarning) {
                process.emitWarning(message, "DeprecationWarning");
              } else {
                var deprecationError = new Error(message);
                deprecationError.name = "DeprecationWarning";
                console.warn(new Error(message));
              }
            }

            colNumber = Math.max(colNumber, 0);
            var location = {
              start: {
                column: colNumber,
                line: lineNumber
              }
            };
            return codeFrameColumns(rawLines, location, opts);
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(12)));

        /***/
      },
      /* 51 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createItemFromDescriptor = createItemFromDescriptor;
        exports.createConfigItem = createConfigItem;
        exports.getItemDescriptor = getItemDescriptor;

        function _path() {
          var data = _interopRequireDefault(__webpack_require__(7));

          _path = function _path() {
            return data;
          };

          return data;
        }

        var _configDescriptors = __webpack_require__(159);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function createItemFromDescriptor(desc) {
          return new ConfigItem(desc);
        }

        function createConfigItem(value, _temp) {
          var _ref = _temp === void 0 ? {} : _temp,
            _ref$dirname = _ref.dirname,
            dirname = _ref$dirname === void 0 ? "." : _ref$dirname,
            type = _ref.type;

          var descriptor = (0, _configDescriptors.createDescriptor)(
            value,
            _path().default.resolve(dirname),
            {
              type: type,
              alias: "programmatic item"
            }
          );
          return createItemFromDescriptor(descriptor);
        }

        function getItemDescriptor(item) {
          if (item instanceof ConfigItem) {
            return item._descriptor;
          }

          return undefined;
        }

        var ConfigItem = function ConfigItem(descriptor) {
          this._descriptor = descriptor;
          Object.defineProperty(this, "_descriptor", {
            enumerable: false
          });

          if (this._descriptor.options === false) {
            throw new Error("Assertion failure - unexpected false options");
          }

          this.value = this._descriptor.value;
          this.options = this._descriptor.options;
          this.dirname = this._descriptor.dirname;
          this.name = this._descriptor.name;
          this.file = this._descriptor.file
            ? {
                request: this._descriptor.file.request,
                resolved: this._descriptor.file.resolved
              }
            : undefined;
          Object.freeze(this);
        };

        Object.freeze(ConfigItem.prototype);

        /***/
      },
      /* 52 */
      /***/ function(module, exports) {
        module.exports = function isExtglob(str) {
          return typeof str === "string" && /[@?!+*]\(/.test(str);
        };

        /***/
      },
      /* 53 */
      /***/ function(module, exports, __webpack_require__) {
        var isExtglob = __webpack_require__(52);

        module.exports = function isGlob(str) {
          return (
            typeof str === "string" &&
            (/[*!?{}(|)[\]]/.test(str) || isExtglob(str))
          );
        };

        /***/
      },
      /* 54 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.runAsync = runAsync;
        exports.runSync = runSync;

        function _traverse() {
          var data = _interopRequireDefault(__webpack_require__(8));

          _traverse = function _traverse() {
            return data;
          };

          return data;
        }

        var _pluginPass = _interopRequireDefault(__webpack_require__(490));

        var _blockHoistPlugin = _interopRequireDefault(
          __webpack_require__(491)
        );

        var _normalizeOpts = _interopRequireDefault(__webpack_require__(172));

        var _normalizeFile = _interopRequireDefault(__webpack_require__(173));

        var _generate = _interopRequireDefault(__webpack_require__(526));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function runAsync(config, code, ast, callback) {
          var result;

          try {
            result = runSync(config, code, ast);
          } catch (err) {
            return callback(err);
          }

          return callback(null, result);
        }

        function runSync(config, code, ast) {
          var file = (0, _normalizeFile.default)(
            config.passes,
            (0, _normalizeOpts.default)(config),
            code,
            ast
          );
          transformFile(file, config.passes);
          var opts = file.opts;

          var _ref =
              opts.code !== false
                ? (0, _generate.default)(config.passes, file)
                : {},
            outputCode = _ref.outputCode,
            outputMap = _ref.outputMap;

          return {
            metadata: file.metadata,
            options: opts,
            ast: opts.ast === true ? file.ast : null,
            code: outputCode === undefined ? null : outputCode,
            map: outputMap === undefined ? null : outputMap,
            sourceType: file.ast.program.sourceType
          };
        }

        function transformFile(file, pluginPasses) {
          for (
            var _iterator = pluginPasses,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref2;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref2 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref2 = _i.value;
            }

            var pluginPairs = _ref2;
            var passPairs = [];
            var passes = [];
            var visitors = [];

            for (
              var _iterator2 = pluginPairs.concat([
                  (0, _blockHoistPlugin.default)()
                ]),
                _isArray2 = Array.isArray(_iterator2),
                _i2 = 0,
                _iterator2 = _isArray2
                  ? _iterator2
                  : _iterator2[Symbol.iterator]();
              ;

            ) {
              var _ref3;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref3 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref3 = _i2.value;
              }

              var plugin = _ref3;
              var pass = new _pluginPass.default(
                file,
                plugin.key,
                plugin.options
              );
              passPairs.push([plugin, pass]);
              passes.push(pass);
              visitors.push(plugin.visitor);
            }

            for (var _i3 = 0; _i3 < passPairs.length; _i3++) {
              var _passPairs$_i = passPairs[_i3],
                _plugin = _passPairs$_i[0],
                _pass = _passPairs$_i[1];
              var fn = _plugin.pre;

              if (fn) {
                var result = fn.call(_pass, file);

                if (isThenable(result)) {
                  throw new Error(
                    "You appear to be using an plugin with an async .pre, " +
                      "which your current version of Babel does not support." +
                      "If you're using a published plugin, you may need to upgrade " +
                      "your @babel/core version."
                  );
                }
              }
            }

            var visitor = _traverse().default.visitors.merge(
              visitors,
              passes,
              file.opts.wrapPluginVisitorMethod
            );

            (0, _traverse().default)(file.ast, visitor, file.scope);

            for (var _i4 = 0; _i4 < passPairs.length; _i4++) {
              var _passPairs$_i2 = passPairs[_i4],
                _plugin2 = _passPairs$_i2[0],
                _pass2 = _passPairs$_i2[1];
              var _fn = _plugin2.post;

              if (_fn) {
                var _result = _fn.call(_pass2, file);

                if (isThenable(_result)) {
                  throw new Error(
                    "You appear to be using an plugin with an async .post, " +
                      "which your current version of Babel does not support." +
                      "If you're using a published plugin, you may need to upgrade " +
                      "your @babel/core version."
                  );
                }
              }
            }
          }
        }

        function isThenable(val) {
          return (
            !!val &&
            (typeof val === "object" || typeof val === "function") &&
            typeof val.then === "function"
          );
        }

        /***/
      },
      /* 55 */
      /***/ function(module, exports, __webpack_require__) {
        var isSymbol = __webpack_require__(34);

        var INFINITY = 1 / 0;

        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }

          var result = value + "";
          return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }

        module.exports = toKey;

        /***/
      },
      /* 56 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = annotateAsPure;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var PURE_ANNOTATION = "#__PURE__";

        var isPureAnnotated = function isPureAnnotated(_ref) {
          var leadingComments = _ref.leadingComments;
          return (
            !!leadingComments &&
            leadingComments.some(function(comment) {
              return /[@#]__PURE__/.test(comment.value);
            })
          );
        };

        function annotateAsPure(pathOrNode) {
          var node = pathOrNode.node || pathOrNode;

          if (isPureAnnotated(node)) {
            return;
          }

          t().addComment(node, "leading", PURE_ANNOTATION);
        }

        /***/
      },
      /* 57 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.is = is;
        exports.pullFlag = pullFlag;

        function _pull() {
          var data = _interopRequireDefault(__webpack_require__(211));

          _pull = function _pull() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function is(node, flag) {
          return node.type === "RegExpLiteral" && node.flags.indexOf(flag) >= 0;
        }

        function pullFlag(node, flag) {
          var flags = node.flags.split("");
          if (node.flags.indexOf(flag) < 0) return;
          (0, _pull().default)(flags, flag);
          node.flags = flags.join("");
        }

        /***/
      },
      /* 58 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = shallowEqual;

        function shallowEqual(actual, expected) {
          var keys = Object.keys(expected);
          var _arr = keys;

          for (var _i = 0; _i < _arr.length; _i++) {
            var key = _arr[_i];

            if (actual[key] !== expected[key]) {
              return false;
            }
          }

          return true;
        }

        /***/
      },
      /* 59 */
      /***/ function(module, exports, __webpack_require__) {
        var ListCache = __webpack_require__(37),
          stackClear = __webpack_require__(261),
          stackDelete = __webpack_require__(262),
          stackGet = __webpack_require__(263),
          stackHas = __webpack_require__(264),
          stackSet = __webpack_require__(265);

        function Stack(entries) {
          var data = (this.__data__ = new ListCache(entries));
          this.size = data.size;
        }

        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        module.exports = Stack;

        /***/
      },
      /* 60 */
      /***/ function(module, exports, __webpack_require__) {
        var getNative = __webpack_require__(17),
          root = __webpack_require__(9);

        var Map = getNative(root, "Map");
        module.exports = Map;

        /***/
      },
      /* 61 */
      /***/ function(module, exports, __webpack_require__) {
        var mapCacheClear = __webpack_require__(272),
          mapCacheDelete = __webpack_require__(279),
          mapCacheGet = __webpack_require__(281),
          mapCacheHas = __webpack_require__(282),
          mapCacheSet = __webpack_require__(283);

        function MapCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();

          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        module.exports = MapCache;

        /***/
      },
      /* 62 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIsArguments = __webpack_require__(287),
          isObjectLike = __webpack_require__(10);

        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;
        var isArguments = baseIsArguments(
          (function() {
            return arguments;
          })()
        )
          ? baseIsArguments
          : function(value) {
              return (
                isObjectLike(value) &&
                hasOwnProperty.call(value, "callee") &&
                !propertyIsEnumerable.call(value, "callee")
              );
            };
        module.exports = isArguments;

        /***/
      },
      /* 63 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(module) {
          var root = __webpack_require__(9),
            stubFalse = __webpack_require__(288);

          var freeExports =
            typeof exports == "object" &&
            exports &&
            !exports.nodeType &&
            exports;
          var freeModule =
            freeExports &&
            typeof module == "object" &&
            module &&
            !module.nodeType &&
            module;
          var moduleExports = freeModule && freeModule.exports === freeExports;
          var Buffer = moduleExports ? root.Buffer : undefined;
          var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
          var isBuffer = nativeIsBuffer || stubFalse;
          module.exports = isBuffer;
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(26)(module)));

        /***/
      },
      /* 64 */
      /***/ function(module, exports) {
        var MAX_SAFE_INTEGER = 9007199254740991;
        var reIsUint = /^(?:0|[1-9]\d*)$/;

        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return (
            !!length &&
            (type == "number" || (type != "symbol" && reIsUint.test(value))) &&
            value > -1 &&
            value % 1 == 0 &&
            value < length
          );
        }

        module.exports = isIndex;

        /***/
      },
      /* 65 */
      /***/ function(module, exports) {
        var MAX_SAFE_INTEGER = 9007199254740991;

        function isLength(value) {
          return (
            typeof value == "number" &&
            value > -1 &&
            value % 1 == 0 &&
            value <= MAX_SAFE_INTEGER
          );
        }

        module.exports = isLength;

        /***/
      },
      /* 66 */
      /***/ function(module, exports) {
        var objectProto = Object.prototype;

        function isPrototype(value) {
          var Ctor = value && value.constructor,
            proto =
              (typeof Ctor == "function" && Ctor.prototype) || objectProto;
          return value === proto;
        }

        module.exports = isPrototype;

        /***/
      },
      /* 67 */
      /***/ function(module, exports, __webpack_require__) {
        var arrayFilter = __webpack_require__(297),
          stubArray = __webpack_require__(116);

        var objectProto = Object.prototype;
        var propertyIsEnumerable = objectProto.propertyIsEnumerable;
        var nativeGetSymbols = Object.getOwnPropertySymbols;
        var getSymbols = !nativeGetSymbols
          ? stubArray
          : function(object) {
              if (object == null) {
                return [];
              }

              object = Object(object);
              return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
              });
            };
        module.exports = getSymbols;

        /***/
      },
      /* 68 */
      /***/ function(module, exports) {
        function arrayPush(array, values) {
          var index = -1,
            length = values.length,
            offset = array.length;

          while (++index < length) {
            array[offset + index] = values[index];
          }

          return array;
        }

        module.exports = arrayPush;

        /***/
      },
      /* 69 */
      /***/ function(module, exports, __webpack_require__) {
        var overArg = __webpack_require__(114);

        var getPrototype = overArg(Object.getPrototypeOf, Object);
        module.exports = getPrototype;

        /***/
      },
      /* 70 */
      /***/ function(module, exports, __webpack_require__) {
        var Uint8Array = __webpack_require__(121);

        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result).set(new Uint8Array(arrayBuffer));
          return result;
        }

        module.exports = cloneArrayBuffer;

        /***/
      },
      /* 71 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.patternLikeCommon = exports.functionDeclarationCommon = exports.functionTypeAnnotationCommon = exports.functionCommon = void 0;

        var _isValidIdentifier = _interopRequireDefault(
          __webpack_require__(32)
        );

        var _constants = __webpack_require__(19);

        var _utils = _interopRequireWildcard(__webpack_require__(16));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);

            if (typeof Object.getOwnPropertySymbols === "function") {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym
                  ).enumerable;
                })
              );
            }

            ownKeys.forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          }

          return target;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        (0, _utils.default)("ArrayExpression", {
          fields: {
            elements: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeOrValueType)(
                    "null",
                    "Expression",
                    "SpreadElement"
                  )
                )
              ),
              default: []
            }
          },
          visitor: ["elements"],
          aliases: ["Expression"]
        });
        (0, _utils.default)("AssignmentExpression", {
          fields: {
            operator: {
              validate: (0, _utils.assertValueType)("string")
            },
            left: {
              validate: (0, _utils.assertNodeType)("LVal")
            },
            right: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          },
          builder: ["operator", "left", "right"],
          visitor: ["left", "right"],
          aliases: ["Expression"]
        });
        (0, _utils.default)("BinaryExpression", {
          builder: ["operator", "left", "right"],
          fields: {
            operator: {
              validate: _utils.assertOneOf.apply(
                void 0,
                _constants.BINARY_OPERATORS
              )
            },
            left: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            right: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          },
          visitor: ["left", "right"],
          aliases: ["Binary", "Expression"]
        });
        (0, _utils.default)("Directive", {
          visitor: ["value"],
          fields: {
            value: {
              validate: (0, _utils.assertNodeType)("DirectiveLiteral")
            }
          }
        });
        (0, _utils.default)("DirectiveLiteral", {
          builder: ["value"],
          fields: {
            value: {
              validate: (0, _utils.assertValueType)("string")
            }
          }
        });
        (0, _utils.default)("BlockStatement", {
          builder: ["body", "directives"],
          visitor: ["directives", "body"],
          fields: {
            directives: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))
              ),
              default: []
            },
            body: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))
              )
            }
          },
          aliases: ["Scopable", "BlockParent", "Block", "Statement"]
        });
        (0, _utils.default)("BreakStatement", {
          visitor: ["label"],
          fields: {
            label: {
              validate: (0, _utils.assertNodeType)("Identifier"),
              optional: true
            }
          },
          aliases: ["Statement", "Terminatorless", "CompletionStatement"]
        });
        (0, _utils.default)("CallExpression", {
          visitor: ["callee", "arguments", "typeParameters"],
          builder: ["callee", "arguments"],
          aliases: ["Expression"],
          fields: {
            callee: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            arguments: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "Expression",
                    "SpreadElement",
                    "JSXNamespacedName"
                  )
                )
              )
            },
            optional: {
              validate: (0, _utils.assertOneOf)(true, false),
              optional: true
            },
            typeParameters: {
              validate: (0, _utils.assertNodeType)(
                "TypeParameterInstantiation",
                "TSTypeParameterInstantiation"
              ),
              optional: true
            }
          }
        });
        (0, _utils.default)("CatchClause", {
          visitor: ["param", "body"],
          fields: {
            param: {
              validate: (0, _utils.assertNodeType)("Identifier"),
              optional: true
            },
            body: {
              validate: (0, _utils.assertNodeType)("BlockStatement")
            }
          },
          aliases: ["Scopable", "BlockParent"]
        });
        (0, _utils.default)("ConditionalExpression", {
          visitor: ["test", "consequent", "alternate"],
          fields: {
            test: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            consequent: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            alternate: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          },
          aliases: ["Expression", "Conditional"]
        });
        (0, _utils.default)("ContinueStatement", {
          visitor: ["label"],
          fields: {
            label: {
              validate: (0, _utils.assertNodeType)("Identifier"),
              optional: true
            }
          },
          aliases: ["Statement", "Terminatorless", "CompletionStatement"]
        });
        (0, _utils.default)("DebuggerStatement", {
          aliases: ["Statement"]
        });
        (0, _utils.default)("DoWhileStatement", {
          visitor: ["test", "body"],
          fields: {
            test: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            body: {
              validate: (0, _utils.assertNodeType)("Statement")
            }
          },
          aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
        });
        (0, _utils.default)("EmptyStatement", {
          aliases: ["Statement"]
        });
        (0, _utils.default)("ExpressionStatement", {
          visitor: ["expression"],
          fields: {
            expression: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          },
          aliases: ["Statement", "ExpressionWrapper"]
        });
        (0, _utils.default)("File", {
          builder: ["program", "comments", "tokens"],
          visitor: ["program"],
          fields: {
            program: {
              validate: (0, _utils.assertNodeType)("Program")
            }
          }
        });
        (0, _utils.default)("ForInStatement", {
          visitor: ["left", "right", "body"],
          aliases: [
            "Scopable",
            "Statement",
            "For",
            "BlockParent",
            "Loop",
            "ForXStatement"
          ],
          fields: {
            left: {
              validate: (0, _utils.assertNodeType)(
                "VariableDeclaration",
                "LVal"
              )
            },
            right: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            body: {
              validate: (0, _utils.assertNodeType)("Statement")
            }
          }
        });
        (0, _utils.default)("ForStatement", {
          visitor: ["init", "test", "update", "body"],
          aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
          fields: {
            init: {
              validate: (0, _utils.assertNodeType)(
                "VariableDeclaration",
                "Expression"
              ),
              optional: true
            },
            test: {
              validate: (0, _utils.assertNodeType)("Expression"),
              optional: true
            },
            update: {
              validate: (0, _utils.assertNodeType)("Expression"),
              optional: true
            },
            body: {
              validate: (0, _utils.assertNodeType)("Statement")
            }
          }
        });
        var functionCommon = {
          params: {
            validate: (0, _utils.chain)(
              (0, _utils.assertValueType)("array"),
              (0, _utils.assertEach)((0, _utils.assertNodeType)("LVal"))
            )
          },
          generator: {
            default: false,
            validate: (0, _utils.assertValueType)("boolean")
          },
          async: {
            validate: (0, _utils.assertValueType)("boolean"),
            default: false
          }
        };
        exports.functionCommon = functionCommon;
        var functionTypeAnnotationCommon = {
          returnType: {
            validate: (0, _utils.assertNodeType)(
              "TypeAnnotation",
              "TSTypeAnnotation",
              "Noop"
            ),
            optional: true
          },
          typeParameters: {
            validate: (0, _utils.assertNodeType)(
              "TypeParameterDeclaration",
              "TSTypeParameterDeclaration",
              "Noop"
            ),
            optional: true
          }
        };
        exports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;

        var functionDeclarationCommon = _objectSpread({}, functionCommon, {
          declare: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          id: {
            validate: (0, _utils.assertNodeType)("Identifier"),
            optional: true
          }
        });

        exports.functionDeclarationCommon = functionDeclarationCommon;
        (0, _utils.default)("FunctionDeclaration", {
          builder: ["id", "params", "body", "generator", "async"],
          visitor: ["id", "params", "body", "returnType", "typeParameters"],
          fields: _objectSpread(
            {},
            functionDeclarationCommon,
            functionTypeAnnotationCommon,
            {
              body: {
                validate: (0, _utils.assertNodeType)("BlockStatement")
              }
            }
          ),
          aliases: [
            "Scopable",
            "Function",
            "BlockParent",
            "FunctionParent",
            "Statement",
            "Pureish",
            "Declaration"
          ]
        });
        (0, _utils.default)("FunctionExpression", {
          inherits: "FunctionDeclaration",
          aliases: [
            "Scopable",
            "Function",
            "BlockParent",
            "FunctionParent",
            "Expression",
            "Pureish"
          ],
          fields: _objectSpread(
            {},
            functionCommon,
            functionTypeAnnotationCommon,
            {
              id: {
                validate: (0, _utils.assertNodeType)("Identifier"),
                optional: true
              },
              body: {
                validate: (0, _utils.assertNodeType)("BlockStatement")
              }
            }
          )
        });
        var patternLikeCommon = {
          typeAnnotation: {
            validate: (0, _utils.assertNodeType)(
              "TypeAnnotation",
              "TSTypeAnnotation",
              "Noop"
            ),
            optional: true
          },
          decorators: {
            validate: (0, _utils.chain)(
              (0, _utils.assertValueType)("array"),
              (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))
            )
          }
        };
        exports.patternLikeCommon = patternLikeCommon;
        (0, _utils.default)("Identifier", {
          builder: ["name"],
          visitor: ["typeAnnotation"],
          aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
          fields: _objectSpread({}, patternLikeCommon, {
            name: {
              validate: (0, _utils.chain)(function(node, key, val) {
                if (!(0, _isValidIdentifier.default)(val)) {
                }
              }, (0, _utils.assertValueType)("string"))
            },
            optional: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true
            }
          })
        });
        (0, _utils.default)("IfStatement", {
          visitor: ["test", "consequent", "alternate"],
          aliases: ["Statement", "Conditional"],
          fields: {
            test: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            consequent: {
              validate: (0, _utils.assertNodeType)("Statement")
            },
            alternate: {
              optional: true,
              validate: (0, _utils.assertNodeType)("Statement")
            }
          }
        });
        (0, _utils.default)("LabeledStatement", {
          visitor: ["label", "body"],
          aliases: ["Statement"],
          fields: {
            label: {
              validate: (0, _utils.assertNodeType)("Identifier")
            },
            body: {
              validate: (0, _utils.assertNodeType)("Statement")
            }
          }
        });
        (0, _utils.default)("StringLiteral", {
          builder: ["value"],
          fields: {
            value: {
              validate: (0, _utils.assertValueType)("string")
            }
          },
          aliases: ["Expression", "Pureish", "Literal", "Immutable"]
        });
        (0, _utils.default)("NumericLiteral", {
          builder: ["value"],
          deprecatedAlias: "NumberLiteral",
          fields: {
            value: {
              validate: (0, _utils.assertValueType)("number")
            }
          },
          aliases: ["Expression", "Pureish", "Literal", "Immutable"]
        });
        (0, _utils.default)("NullLiteral", {
          aliases: ["Expression", "Pureish", "Literal", "Immutable"]
        });
        (0, _utils.default)("BooleanLiteral", {
          builder: ["value"],
          fields: {
            value: {
              validate: (0, _utils.assertValueType)("boolean")
            }
          },
          aliases: ["Expression", "Pureish", "Literal", "Immutable"]
        });
        (0, _utils.default)("RegExpLiteral", {
          builder: ["pattern", "flags"],
          deprecatedAlias: "RegexLiteral",
          aliases: ["Expression", "Literal"],
          fields: {
            pattern: {
              validate: (0, _utils.assertValueType)("string")
            },
            flags: {
              validate: (0, _utils.assertValueType)("string"),
              default: ""
            }
          }
        });
        (0, _utils.default)("LogicalExpression", {
          builder: ["operator", "left", "right"],
          visitor: ["left", "right"],
          aliases: ["Binary", "Expression"],
          fields: {
            operator: {
              validate: _utils.assertOneOf.apply(
                void 0,
                _constants.LOGICAL_OPERATORS
              )
            },
            left: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            right: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          }
        });
        (0, _utils.default)("MemberExpression", {
          builder: ["object", "property", "computed", "optional"],
          visitor: ["object", "property"],
          aliases: ["Expression", "LVal"],
          fields: {
            object: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            property: {
              validate: (function() {
                var normal = (0, _utils.assertNodeType)(
                  "Identifier",
                  "PrivateName"
                );
                var computed = (0, _utils.assertNodeType)("Expression");
                return function(node, key, val) {
                  var validator = node.computed ? computed : normal;
                  validator(node, key, val);
                };
              })()
            },
            computed: {
              default: false
            },
            optional: {
              validate: (0, _utils.assertOneOf)(true, false),
              optional: true
            }
          }
        });
        (0, _utils.default)("NewExpression", {
          inherits: "CallExpression"
        });
        (0, _utils.default)("Program", {
          visitor: ["directives", "body"],
          builder: ["body", "directives", "sourceType"],
          fields: {
            sourceFile: {
              validate: (0, _utils.assertValueType)("string")
            },
            sourceType: {
              validate: (0, _utils.assertOneOf)("script", "module"),
              default: "script"
            },
            directives: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))
              ),
              default: []
            },
            body: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))
              )
            }
          },
          aliases: ["Scopable", "BlockParent", "Block"]
        });
        (0, _utils.default)("ObjectExpression", {
          visitor: ["properties"],
          aliases: ["Expression"],
          fields: {
            properties: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "ObjectMethod",
                    "ObjectProperty",
                    "SpreadElement"
                  )
                )
              )
            }
          }
        });
        (0, _utils.default)("ObjectMethod", {
          builder: ["kind", "key", "params", "body", "computed"],
          fields: _objectSpread(
            {},
            functionCommon,
            functionTypeAnnotationCommon,
            {
              kind: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("string"),
                  (0, _utils.assertOneOf)("method", "get", "set")
                ),
                default: "method"
              },
              computed: {
                validate: (0, _utils.assertValueType)("boolean"),
                default: false
              },
              key: {
                validate: (function() {
                  var normal = (0, _utils.assertNodeType)(
                    "Identifier",
                    "StringLiteral",
                    "NumericLiteral"
                  );
                  var computed = (0, _utils.assertNodeType)("Expression");
                  return function(node, key, val) {
                    var validator = node.computed ? computed : normal;
                    validator(node, key, val);
                  };
                })()
              },
              decorators: {
                validate: (0, _utils.chain)(
                  (0, _utils.assertValueType)("array"),
                  (0, _utils.assertEach)(
                    (0, _utils.assertNodeType)("Decorator")
                  )
                )
              },
              body: {
                validate: (0, _utils.assertNodeType)("BlockStatement")
              }
            }
          ),
          visitor: [
            "key",
            "params",
            "body",
            "decorators",
            "returnType",
            "typeParameters"
          ],
          aliases: [
            "UserWhitespacable",
            "Function",
            "Scopable",
            "BlockParent",
            "FunctionParent",
            "Method",
            "ObjectMember"
          ]
        });
        (0, _utils.default)("ObjectProperty", {
          builder: ["key", "value", "computed", "shorthand", "decorators"],
          fields: {
            computed: {
              validate: (0, _utils.assertValueType)("boolean"),
              default: false
            },
            key: {
              validate: (function() {
                var normal = (0, _utils.assertNodeType)(
                  "Identifier",
                  "StringLiteral",
                  "NumericLiteral"
                );
                var computed = (0, _utils.assertNodeType)("Expression");
                return function(node, key, val) {
                  var validator = node.computed ? computed : normal;
                  validator(node, key, val);
                };
              })()
            },
            value: {
              validate: (0, _utils.assertNodeType)("Expression", "PatternLike")
            },
            shorthand: {
              validate: (0, _utils.assertValueType)("boolean"),
              default: false
            },
            decorators: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))
              ),
              optional: true
            }
          },
          visitor: ["key", "value", "decorators"],
          aliases: ["UserWhitespacable", "Property", "ObjectMember"]
        });
        (0, _utils.default)("RestElement", {
          visitor: ["argument", "typeAnnotation"],
          builder: ["argument"],
          aliases: ["LVal", "PatternLike"],
          deprecatedAlias: "RestProperty",
          fields: _objectSpread({}, patternLikeCommon, {
            argument: {
              validate: (0, _utils.assertNodeType)("LVal")
            }
          })
        });
        (0, _utils.default)("ReturnStatement", {
          visitor: ["argument"],
          aliases: ["Statement", "Terminatorless", "CompletionStatement"],
          fields: {
            argument: {
              validate: (0, _utils.assertNodeType)("Expression"),
              optional: true
            }
          }
        });
        (0, _utils.default)("SequenceExpression", {
          visitor: ["expressions"],
          fields: {
            expressions: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression"))
              )
            }
          },
          aliases: ["Expression"]
        });
        (0, _utils.default)("SwitchCase", {
          visitor: ["test", "consequent"],
          fields: {
            test: {
              validate: (0, _utils.assertNodeType)("Expression"),
              optional: true
            },
            consequent: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))
              )
            }
          }
        });
        (0, _utils.default)("SwitchStatement", {
          visitor: ["discriminant", "cases"],
          aliases: ["Statement", "BlockParent", "Scopable"],
          fields: {
            discriminant: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            cases: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("SwitchCase"))
              )
            }
          }
        });
        (0, _utils.default)("ThisExpression", {
          aliases: ["Expression"]
        });
        (0, _utils.default)("ThrowStatement", {
          visitor: ["argument"],
          aliases: ["Statement", "Terminatorless", "CompletionStatement"],
          fields: {
            argument: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          }
        });
        (0, _utils.default)("TryStatement", {
          visitor: ["block", "handler", "finalizer"],
          aliases: ["Statement"],
          fields: {
            block: {
              validate: (0, _utils.assertNodeType)("BlockStatement")
            },
            handler: {
              optional: true,
              validate: (0, _utils.assertNodeType)("CatchClause")
            },
            finalizer: {
              optional: true,
              validate: (0, _utils.assertNodeType)("BlockStatement")
            }
          }
        });
        (0, _utils.default)("UnaryExpression", {
          builder: ["operator", "argument", "prefix"],
          fields: {
            prefix: {
              default: true
            },
            argument: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            operator: {
              validate: _utils.assertOneOf.apply(
                void 0,
                _constants.UNARY_OPERATORS
              )
            }
          },
          visitor: ["argument"],
          aliases: ["UnaryLike", "Expression"]
        });
        (0, _utils.default)("UpdateExpression", {
          builder: ["operator", "argument", "prefix"],
          fields: {
            prefix: {
              default: false
            },
            argument: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            operator: {
              validate: _utils.assertOneOf.apply(
                void 0,
                _constants.UPDATE_OPERATORS
              )
            }
          },
          visitor: ["argument"],
          aliases: ["Expression"]
        });
        (0, _utils.default)("VariableDeclaration", {
          builder: ["kind", "declarations"],
          visitor: ["declarations"],
          aliases: ["Statement", "Declaration"],
          fields: {
            declare: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true
            },
            kind: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("string"),
                (0, _utils.assertOneOf)("var", "let", "const")
              )
            },
            declarations: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)("VariableDeclarator")
                )
              )
            }
          }
        });
        (0, _utils.default)("VariableDeclarator", {
          visitor: ["id", "init"],
          fields: {
            id: {
              validate: (0, _utils.assertNodeType)("LVal")
            },
            definite: {
              optional: true,
              validate: (0, _utils.assertValueType)("boolean")
            },
            init: {
              optional: true,
              validate: (0, _utils.assertNodeType)("Expression")
            }
          }
        });
        (0, _utils.default)("WhileStatement", {
          visitor: ["test", "body"],
          aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
          fields: {
            test: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            body: {
              validate: (0, _utils.assertNodeType)(
                "BlockStatement",
                "Statement"
              )
            }
          }
        });
        (0, _utils.default)("WithStatement", {
          visitor: ["object", "body"],
          aliases: ["Statement"],
          fields: {
            object: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            body: {
              validate: (0, _utils.assertNodeType)(
                "BlockStatement",
                "Statement"
              )
            }
          }
        });

        /***/
      },
      /* 72 */
      /***/ function(module, exports, __webpack_require__) {
        (function() {
          "use strict";

          exports.ast = __webpack_require__(316);
          exports.code = __webpack_require__(122);
          exports.keyword = __webpack_require__(317);
        })();

        /***/
      },
      /* 73 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = is;

        var _shallowEqual = _interopRequireDefault(__webpack_require__(58));

        var _isType = _interopRequireDefault(__webpack_require__(74));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function is(type, node, opts) {
          if (!node) return false;
          var matches = (0, _isType.default)(node.type, type);
          if (!matches) return false;

          if (typeof opts === "undefined") {
            return true;
          } else {
            return (0, _shallowEqual.default)(node, opts);
          }
        }

        /***/
      },
      /* 74 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isType;

        var _definitions = __webpack_require__(11);

        function isType(nodeType, targetType) {
          if (nodeType === targetType) return true;
          if (_definitions.ALIAS_KEYS[targetType]) return false;
          var aliases = _definitions.FLIPPED_ALIAS_KEYS[targetType];

          if (aliases) {
            if (aliases[0] === nodeType) return true;

            for (
              var _iterator = aliases,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var alias = _ref;
              if (nodeType === alias) return true;
            }
          }

          return false;
        }

        /***/
      },
      /* 75 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.classMethodOrDeclareMethodCommon = exports.classMethodOrPropertyCommon = void 0;

        var _utils = _interopRequireWildcard(__webpack_require__(16));

        var _core = __webpack_require__(71);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);

            if (typeof Object.getOwnPropertySymbols === "function") {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym
                  ).enumerable;
                })
              );
            }

            ownKeys.forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          }

          return target;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        (0, _utils.default)("AssignmentPattern", {
          visitor: ["left", "right"],
          builder: ["left", "right"],
          aliases: ["Pattern", "PatternLike", "LVal"],
          fields: _objectSpread({}, _core.patternLikeCommon, {
            left: {
              validate: (0, _utils.assertNodeType)(
                "Identifier",
                "ObjectPattern",
                "ArrayPattern"
              )
            },
            right: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            decorators: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))
              )
            }
          })
        });
        (0, _utils.default)("ArrayPattern", {
          visitor: ["elements", "typeAnnotation"],
          builder: ["elements"],
          aliases: ["Pattern", "PatternLike", "LVal"],
          fields: _objectSpread({}, _core.patternLikeCommon, {
            elements: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)("PatternLike")
                )
              )
            },
            decorators: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))
              )
            }
          })
        });
        (0, _utils.default)("ArrowFunctionExpression", {
          builder: ["params", "body", "async"],
          visitor: ["params", "body", "returnType", "typeParameters"],
          aliases: [
            "Scopable",
            "Function",
            "BlockParent",
            "FunctionParent",
            "Expression",
            "Pureish"
          ],
          fields: _objectSpread(
            {},
            _core.functionCommon,
            _core.functionTypeAnnotationCommon,
            {
              expression: {
                validate: (0, _utils.assertValueType)("boolean")
              },
              body: {
                validate: (0, _utils.assertNodeType)(
                  "BlockStatement",
                  "Expression"
                )
              }
            }
          )
        });
        (0, _utils.default)("ClassBody", {
          visitor: ["body"],
          fields: {
            body: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "ClassMethod",
                    "ClassProperty",
                    "ClassPrivateProperty",
                    "TSDeclareMethod",
                    "TSIndexSignature"
                  )
                )
              )
            }
          }
        });
        var classCommon = {
          typeParameters: {
            validate: (0, _utils.assertNodeType)(
              "TypeParameterDeclaration",
              "TSTypeParameterDeclaration",
              "Noop"
            ),
            optional: true
          },
          body: {
            validate: (0, _utils.assertNodeType)("ClassBody")
          },
          superClass: {
            optional: true,
            validate: (0, _utils.assertNodeType)("Expression")
          },
          superTypeParameters: {
            validate: (0, _utils.assertNodeType)(
              "TypeParameterInstantiation",
              "TSTypeParameterInstantiation"
            ),
            optional: true
          },
          implements: {
            validate: (0, _utils.chain)(
              (0, _utils.assertValueType)("array"),
              (0, _utils.assertEach)(
                (0, _utils.assertNodeType)(
                  "TSExpressionWithTypeArguments",
                  "ClassImplements"
                )
              )
            ),
            optional: true
          }
        };
        (0, _utils.default)("ClassDeclaration", {
          builder: ["id", "superClass", "body", "decorators"],
          visitor: [
            "id",
            "body",
            "superClass",
            "mixins",
            "typeParameters",
            "superTypeParameters",
            "implements",
            "decorators"
          ],
          aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
          fields: _objectSpread({}, classCommon, {
            declare: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true
            },
            abstract: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true
            },
            id: {
              validate: (0, _utils.assertNodeType)("Identifier"),
              optional: true
            },
            decorators: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))
              ),
              optional: true
            }
          })
        });
        (0, _utils.default)("ClassExpression", {
          inherits: "ClassDeclaration",
          aliases: ["Scopable", "Class", "Expression", "Pureish"],
          fields: _objectSpread({}, classCommon, {
            id: {
              optional: true,
              validate: (0, _utils.assertNodeType)("Identifier")
            },
            body: {
              validate: (0, _utils.assertNodeType)("ClassBody")
            },
            superClass: {
              optional: true,
              validate: (0, _utils.assertNodeType)("Expression")
            },
            decorators: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))
              ),
              optional: true
            }
          })
        });
        (0, _utils.default)("ExportAllDeclaration", {
          visitor: ["source"],
          aliases: [
            "Statement",
            "Declaration",
            "ModuleDeclaration",
            "ExportDeclaration"
          ],
          fields: {
            source: {
              validate: (0, _utils.assertNodeType)("StringLiteral")
            }
          }
        });
        (0, _utils.default)("ExportDefaultDeclaration", {
          visitor: ["declaration"],
          aliases: [
            "Statement",
            "Declaration",
            "ModuleDeclaration",
            "ExportDeclaration"
          ],
          fields: {
            declaration: {
              validate: (0, _utils.assertNodeType)(
                "FunctionDeclaration",
                "TSDeclareFunction",
                "ClassDeclaration",
                "Expression"
              )
            }
          }
        });
        (0, _utils.default)("ExportNamedDeclaration", {
          visitor: ["declaration", "specifiers", "source"],
          aliases: [
            "Statement",
            "Declaration",
            "ModuleDeclaration",
            "ExportDeclaration"
          ],
          fields: {
            declaration: {
              validate: (0, _utils.assertNodeType)("Declaration"),
              optional: true
            },
            specifiers: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "ExportSpecifier",
                    "ExportDefaultSpecifier",
                    "ExportNamespaceSpecifier"
                  )
                )
              )
            },
            source: {
              validate: (0, _utils.assertNodeType)("StringLiteral"),
              optional: true
            }
          }
        });
        (0, _utils.default)("ExportSpecifier", {
          visitor: ["local", "exported"],
          aliases: ["ModuleSpecifier"],
          fields: {
            local: {
              validate: (0, _utils.assertNodeType)("Identifier")
            },
            exported: {
              validate: (0, _utils.assertNodeType)("Identifier")
            }
          }
        });
        (0, _utils.default)("ForOfStatement", {
          visitor: ["left", "right", "body"],
          aliases: [
            "Scopable",
            "Statement",
            "For",
            "BlockParent",
            "Loop",
            "ForXStatement"
          ],
          fields: {
            left: {
              validate: (0, _utils.assertNodeType)(
                "VariableDeclaration",
                "LVal"
              )
            },
            right: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            body: {
              validate: (0, _utils.assertNodeType)("Statement")
            },
            await: {
              default: false,
              validate: (0, _utils.assertValueType)("boolean")
            }
          }
        });
        (0, _utils.default)("ImportDeclaration", {
          visitor: ["specifiers", "source"],
          aliases: ["Statement", "Declaration", "ModuleDeclaration"],
          fields: {
            specifiers: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "ImportSpecifier",
                    "ImportDefaultSpecifier",
                    "ImportNamespaceSpecifier"
                  )
                )
              )
            },
            source: {
              validate: (0, _utils.assertNodeType)("StringLiteral")
            }
          }
        });
        (0, _utils.default)("ImportDefaultSpecifier", {
          visitor: ["local"],
          aliases: ["ModuleSpecifier"],
          fields: {
            local: {
              validate: (0, _utils.assertNodeType)("Identifier")
            }
          }
        });
        (0, _utils.default)("ImportNamespaceSpecifier", {
          visitor: ["local"],
          aliases: ["ModuleSpecifier"],
          fields: {
            local: {
              validate: (0, _utils.assertNodeType)("Identifier")
            }
          }
        });
        (0, _utils.default)("ImportSpecifier", {
          visitor: ["local", "imported"],
          aliases: ["ModuleSpecifier"],
          fields: {
            local: {
              validate: (0, _utils.assertNodeType)("Identifier")
            },
            imported: {
              validate: (0, _utils.assertNodeType)("Identifier")
            },
            importKind: {
              validate: (0, _utils.assertOneOf)(null, "type", "typeof")
            }
          }
        });
        (0, _utils.default)("MetaProperty", {
          visitor: ["meta", "property"],
          aliases: ["Expression"],
          fields: {
            meta: {
              validate: (0, _utils.assertNodeType)("Identifier")
            },
            property: {
              validate: (0, _utils.assertNodeType)("Identifier")
            }
          }
        });
        var classMethodOrPropertyCommon = {
          abstract: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          accessibility: {
            validate: (0, _utils.chain)(
              (0, _utils.assertValueType)("string"),
              (0, _utils.assertOneOf)("public", "private", "protected")
            ),
            optional: true
          },
          static: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          computed: {
            default: false,
            validate: (0, _utils.assertValueType)("boolean")
          },
          optional: {
            validate: (0, _utils.assertValueType)("boolean"),
            optional: true
          },
          key: {
            validate: (0, _utils.chain)(
              (function() {
                var normal = (0, _utils.assertNodeType)(
                  "Identifier",
                  "StringLiteral",
                  "NumericLiteral"
                );
                var computed = (0, _utils.assertNodeType)("Expression");
                return function(node, key, val) {
                  var validator = node.computed ? computed : normal;
                  validator(node, key, val);
                };
              })(),
              (0, _utils.assertNodeType)(
                "Identifier",
                "StringLiteral",
                "NumericLiteral",
                "Expression"
              )
            )
          }
        };
        exports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;

        var classMethodOrDeclareMethodCommon = _objectSpread(
          {},
          _core.functionCommon,
          classMethodOrPropertyCommon,
          {
            kind: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("string"),
                (0, _utils.assertOneOf)("get", "set", "method", "constructor")
              ),
              default: "method"
            },
            access: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("string"),
                (0, _utils.assertOneOf)("public", "private", "protected")
              ),
              optional: true
            },
            decorators: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))
              ),
              optional: true
            }
          }
        );

        exports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
        (0, _utils.default)("ClassMethod", {
          aliases: [
            "Function",
            "Scopable",
            "BlockParent",
            "FunctionParent",
            "Method"
          ],
          builder: ["kind", "key", "params", "body", "computed", "static"],
          visitor: [
            "key",
            "params",
            "body",
            "decorators",
            "returnType",
            "typeParameters"
          ],
          fields: _objectSpread(
            {},
            classMethodOrDeclareMethodCommon,
            _core.functionTypeAnnotationCommon,
            {
              body: {
                validate: (0, _utils.assertNodeType)("BlockStatement")
              }
            }
          )
        });
        (0, _utils.default)("ObjectPattern", {
          visitor: ["properties", "typeAnnotation"],
          builder: ["properties"],
          aliases: ["Pattern", "PatternLike", "LVal"],
          fields: _objectSpread({}, _core.patternLikeCommon, {
            properties: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)("RestElement", "ObjectProperty")
                )
              )
            }
          })
        });
        (0, _utils.default)("SpreadElement", {
          visitor: ["argument"],
          aliases: ["UnaryLike"],
          deprecatedAlias: "SpreadProperty",
          fields: {
            argument: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          }
        });
        (0, _utils.default)("Super", {
          aliases: ["Expression"]
        });
        (0, _utils.default)("TaggedTemplateExpression", {
          visitor: ["tag", "quasi"],
          aliases: ["Expression"],
          fields: {
            tag: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            quasi: {
              validate: (0, _utils.assertNodeType)("TemplateLiteral")
            }
          }
        });
        (0, _utils.default)("TemplateElement", {
          builder: ["value", "tail"],
          fields: {
            value: {},
            tail: {
              validate: (0, _utils.assertValueType)("boolean"),
              default: false
            }
          }
        });
        (0, _utils.default)("TemplateLiteral", {
          visitor: ["quasis", "expressions"],
          aliases: ["Expression", "Literal"],
          fields: {
            quasis: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)("TemplateElement")
                )
              )
            },
            expressions: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression"))
              )
            }
          }
        });
        (0, _utils.default)("YieldExpression", {
          builder: ["argument", "delegate"],
          visitor: ["argument"],
          aliases: ["Expression", "Terminatorless"],
          fields: {
            delegate: {
              validate: (0, _utils.assertValueType)("boolean"),
              default: false
            },
            argument: {
              optional: true,
              validate: (0, _utils.assertNodeType)("Expression")
            }
          }
        });

        /***/
      },
      /* 76 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = inherit;

        function _uniq() {
          var data = _interopRequireDefault(__webpack_require__(330));

          _uniq = function _uniq() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function inherit(key, child, parent) {
          if (child && parent) {
            child[key] = (0, _uniq().default)(
              [].concat(child[key], parent[key]).filter(Boolean)
            );
          }
        }

        /***/
      },
      /* 77 */
      /***/ function(module, exports, __webpack_require__) {
        var baseFindIndex = __webpack_require__(335),
          baseIsNaN = __webpack_require__(336),
          strictIndexOf = __webpack_require__(337);

        function baseIndexOf(array, value, fromIndex) {
          return value === value
            ? strictIndexOf(array, value, fromIndex)
            : baseFindIndex(array, baseIsNaN, fromIndex);
        }

        module.exports = baseIndexOf;

        /***/
      },
      /* 78 */
      /***/ function(module, exports) {
        function setToArray(set) {
          var index = -1,
            result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }

        module.exports = setToArray;

        /***/
      },
      /* 79 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIndexOf = __webpack_require__(77),
          isArrayLike = __webpack_require__(28),
          isString = __webpack_require__(372),
          toInteger = __webpack_require__(45),
          values = __webpack_require__(142);

        var nativeMax = Math.max;

        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection)
            ? collection
            : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;

          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }

          return isString(collection)
            ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1
            : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }

        module.exports = includes;

        /***/
      },
      /* 80 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = splitExportDeclaration;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function splitExportDeclaration(exportDeclaration) {
          if (!exportDeclaration.isExportDeclaration()) {
            throw new Error("Only export declarations can be splitted.");
          }

          var isDefault = exportDeclaration.isExportDefaultDeclaration();
          var declaration = exportDeclaration.get("declaration");
          var isClassDeclaration = declaration.isClassDeclaration();

          if (isDefault) {
            var standaloneDeclaration =
              declaration.isFunctionDeclaration() || isClassDeclaration;
            var scope = declaration.isScope()
              ? declaration.scope.parent
              : declaration.scope;
            var id = declaration.node.id;
            var needBindingRegistration = false;

            if (!id) {
              needBindingRegistration = true;
              id = scope.generateUidIdentifier("default");

              if (
                standaloneDeclaration ||
                declaration.isFunctionExpression() ||
                declaration.isClassExpression()
              ) {
                declaration.node.id = t().cloneNode(id);
              }
            }

            var updatedDeclaration = standaloneDeclaration
              ? declaration
              : t().variableDeclaration("var", [
                  t().variableDeclarator(t().cloneNode(id), declaration.node)
                ]);
            var updatedExportDeclaration = t().exportNamedDeclaration(null, [
              t().exportSpecifier(t().cloneNode(id), t().identifier("default"))
            ]);
            exportDeclaration.insertAfter(updatedExportDeclaration);
            exportDeclaration.replaceWith(updatedDeclaration);

            if (needBindingRegistration) {
              scope.registerBinding(
                isClassDeclaration ? "let" : "var",
                exportDeclaration
              );
            }

            return exportDeclaration;
          }

          if (exportDeclaration.get("specifiers").length > 0) {
            throw new Error(
              "It doesn't make sense to split exported specifiers."
            );
          }

          var bindingIdentifiers = declaration.getOuterBindingIdentifiers();
          var specifiers = Object.keys(bindingIdentifiers).map(function(name) {
            return t().exportSpecifier(
              t().identifier(name),
              t().identifier(name)
            );
          });
          var aliasDeclar = t().exportNamedDeclaration(null, specifiers);
          exportDeclaration.insertAfter(aliasDeclar);
          exportDeclaration.replaceWith(declaration.node);
          return exportDeclaration;
        }

        /***/
      },
      /* 81 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;
        exports.CodeGenerator = void 0;

        var _sourceMap = _interopRequireDefault(__webpack_require__(387));

        var _printer = _interopRequireDefault(__webpack_require__(394));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }

        var Generator = (function(_Printer) {
          _inheritsLoose(Generator, _Printer);

          function Generator(ast, opts, code) {
            var _this;

            if (opts === void 0) {
              opts = {};
            }

            var format = normalizeOptions(code, opts);
            var map = opts.sourceMaps
              ? new _sourceMap.default(opts, code)
              : null;
            _this = _Printer.call(this, format, map) || this;
            _this.ast = ast;
            return _this;
          }

          var _proto = Generator.prototype;

          _proto.generate = function generate() {
            return _Printer.prototype.generate.call(this, this.ast);
          };

          return Generator;
        })(_printer.default);

        function normalizeOptions(code, opts) {
          var format = {
            auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
            auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
            shouldPrintComment: opts.shouldPrintComment,
            retainLines: opts.retainLines,
            retainFunctionParens: opts.retainFunctionParens,
            comments: opts.comments == null || opts.comments,
            compact: opts.compact,
            minified: opts.minified,
            concise: opts.concise,
            jsonCompatibleStrings: opts.jsonCompatibleStrings,
            indent: {
              adjustMultilineComment: true,
              style: "  ",
              base: 0
            }
          };

          if (format.minified) {
            format.compact = true;

            format.shouldPrintComment =
              format.shouldPrintComment ||
              function() {
                return format.comments;
              };
          } else {
            format.shouldPrintComment =
              format.shouldPrintComment ||
              function(value) {
                return (
                  format.comments ||
                  value.indexOf("@license") >= 0 ||
                  value.indexOf("@preserve") >= 0
                );
              };
          }

          if (format.compact === "auto") {
            format.compact = code.length > 500000;

            if (format.compact) {
              console.error(
                "[BABEL] Note: The code generator has deoptimised the styling of " +
                  (opts.filename + " as it exceeds the max of " + "500KB" + ".")
              );
            }
          }

          if (format.compact) {
            format.indent.adjustMultilineComment = false;
          }

          return format;
        }

        var CodeGenerator = (function() {
          function CodeGenerator(ast, opts, code) {
            this._generator = new Generator(ast, opts, code);
          }

          var _proto2 = CodeGenerator.prototype;

          _proto2.generate = function generate() {
            return this._generator.generate();
          };

          return CodeGenerator;
        })();

        exports.CodeGenerator = CodeGenerator;

        function _default(ast, opts, code) {
          var gen = new Generator(ast, opts, code);
          return gen.generate();
        }

        /***/
      },
      /* 82 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Identifier = Identifier;
        exports.SpreadElement = exports.RestElement = RestElement;
        exports.ObjectPattern = exports.ObjectExpression = ObjectExpression;
        exports.ObjectMethod = ObjectMethod;
        exports.ObjectProperty = ObjectProperty;
        exports.ArrayPattern = exports.ArrayExpression = ArrayExpression;
        exports.RegExpLiteral = RegExpLiteral;
        exports.BooleanLiteral = BooleanLiteral;
        exports.NullLiteral = NullLiteral;
        exports.NumericLiteral = NumericLiteral;
        exports.StringLiteral = StringLiteral;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _jsesc() {
          var data = _interopRequireDefault(__webpack_require__(406));

          _jsesc = function _jsesc() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function Identifier(node) {
          this.word(node.name);
        }

        function RestElement(node) {
          this.token("...");
          this.print(node.argument, node);
        }

        function ObjectExpression(node) {
          var props = node.properties;
          this.token("{");
          this.printInnerComments(node);

          if (props.length) {
            this.space();
            this.printList(props, node, {
              indent: true,
              statement: true
            });
            this.space();
          }

          this.token("}");
        }

        function ObjectMethod(node) {
          this.printJoin(node.decorators, node);

          this._methodHead(node);

          this.space();
          this.print(node.body, node);
        }

        function ObjectProperty(node) {
          this.printJoin(node.decorators, node);

          if (node.computed) {
            this.token("[");
            this.print(node.key, node);
            this.token("]");
          } else {
            if (
              t().isAssignmentPattern(node.value) &&
              t().isIdentifier(node.key) &&
              node.key.name === node.value.left.name
            ) {
              this.print(node.value, node);
              return;
            }

            this.print(node.key, node);

            if (
              node.shorthand &&
              t().isIdentifier(node.key) &&
              t().isIdentifier(node.value) &&
              node.key.name === node.value.name
            ) {
              return;
            }
          }

          this.token(":");
          this.space();
          this.print(node.value, node);
        }

        function ArrayExpression(node) {
          var elems = node.elements;
          var len = elems.length;
          this.token("[");
          this.printInnerComments(node);

          for (var i = 0; i < elems.length; i++) {
            var elem = elems[i];

            if (elem) {
              if (i > 0) this.space();
              this.print(elem, node);
              if (i < len - 1) this.token(",");
            } else {
              this.token(",");
            }
          }

          this.token("]");
        }

        function RegExpLiteral(node) {
          this.word("/" + node.pattern + "/" + node.flags);
        }

        function BooleanLiteral(node) {
          this.word(node.value ? "true" : "false");
        }

        function NullLiteral() {
          this.word("null");
        }

        function NumericLiteral(node) {
          var raw = this.getPossibleRaw(node);
          var value = node.value + "";

          if (raw == null) {
            this.number(value);
          } else if (this.format.minified) {
            this.number(raw.length < value.length ? raw : value);
          } else {
            this.number(raw);
          }
        }

        function StringLiteral(node) {
          var raw = this.getPossibleRaw(node);

          if (!this.format.minified && raw != null) {
            this.token(raw);
            return;
          }

          var opts = {
            quotes: "double",
            wrap: true
          };

          if (this.format.jsonCompatibleStrings) {
            opts.json = true;
          }

          var val = (0, _jsesc().default)(node.value, opts);
          return this.token(val);
        }

        /***/
      },
      /* 83 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        function _AwaitValue(value) {
          this.wrapped = value;
        }

        function _AsyncGenerator(gen) {
          var front, back;

          function send(key, arg) {
            return new Promise(function(resolve, reject) {
              var request = {
                key: key,
                arg: arg,
                resolve: resolve,
                reject: reject,
                next: null
              };

              if (back) {
                back = back.next = request;
              } else {
                front = back = request;
                resume(key, arg);
              }
            });
          }

          function resume(key, arg) {
            try {
              var result = gen[key](arg);
              var value = result.value;
              var wrappedAwait = value instanceof _AwaitValue;
              Promise.resolve(wrappedAwait ? value.wrapped : value).then(
                function(arg) {
                  if (wrappedAwait) {
                    resume("next", arg);
                    return;
                  }

                  settle(result.done ? "return" : "normal", arg);
                },
                function(err) {
                  resume("throw", err);
                }
              );
            } catch (err) {
              settle("throw", err);
            }
          }

          function settle(type, value) {
            switch (type) {
              case "return":
                front.resolve({
                  value: value,
                  done: true
                });
                break;

              case "throw":
                front.reject(value);
                break;

              default:
                front.resolve({
                  value: value,
                  done: false
                });
                break;
            }

            front = front.next;

            if (front) {
              resume(front.key, front.arg);
            } else {
              back = null;
            }
          }

          this._invoke = send;

          if (typeof gen.return !== "function") {
            this.return = undefined;
          }
        }

        if (typeof Symbol === "function" && Symbol.asyncIterator) {
          _AsyncGenerator.prototype[Symbol.asyncIterator] = function() {
            return this;
          };
        }

        _AsyncGenerator.prototype.next = function(arg) {
          return this._invoke("next", arg);
        };

        _AsyncGenerator.prototype.throw = function(arg) {
          return this._invoke("throw", arg);
        };

        _AsyncGenerator.prototype.return = function(arg) {
          return this._invoke("return", arg);
        };

        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }

        var defaultOptions = {
          sourceType: "script",
          sourceFilename: undefined,
          startLine: 1,
          allowAwaitOutsideFunction: false,
          allowReturnOutsideFunction: false,
          allowImportExportEverywhere: false,
          allowSuperOutsideMethod: false,
          plugins: [],
          strictMode: null,
          ranges: false,
          tokens: false
        };

        function getOptions(opts) {
          var options = {};

          for (var key in defaultOptions) {
            options[key] =
              opts && opts[key] != null ? opts[key] : defaultOptions[key];
          }

          return options;
        }

        var beforeExpr = true;
        var startsExpr = true;
        var isLoop = true;
        var isAssign = true;
        var prefix = true;
        var postfix = true;

        var TokenType = function TokenType(label, conf) {
          if (conf === void 0) {
            conf = {};
          }

          this.label = label;
          this.keyword = conf.keyword;
          this.beforeExpr = !!conf.beforeExpr;
          this.startsExpr = !!conf.startsExpr;
          this.rightAssociative = !!conf.rightAssociative;
          this.isLoop = !!conf.isLoop;
          this.isAssign = !!conf.isAssign;
          this.prefix = !!conf.prefix;
          this.postfix = !!conf.postfix;
          this.binop = conf.binop === 0 ? 0 : conf.binop || null;
          this.updateContext = null;
        };

        var KeywordTokenType = (function(_TokenType) {
          _inheritsLoose(KeywordTokenType, _TokenType);

          function KeywordTokenType(name, options) {
            if (options === void 0) {
              options = {};
            }

            options.keyword = name;
            return _TokenType.call(this, name, options) || this;
          }

          return KeywordTokenType;
        })(TokenType);

        var BinopTokenType = (function(_TokenType2) {
          _inheritsLoose(BinopTokenType, _TokenType2);

          function BinopTokenType(name, prec) {
            return (
              _TokenType2.call(this, name, {
                beforeExpr: beforeExpr,
                binop: prec
              }) || this
            );
          }

          return BinopTokenType;
        })(TokenType);

        var types = {
          num: new TokenType("num", {
            startsExpr: startsExpr
          }),
          bigint: new TokenType("bigint", {
            startsExpr: startsExpr
          }),
          regexp: new TokenType("regexp", {
            startsExpr: startsExpr
          }),
          string: new TokenType("string", {
            startsExpr: startsExpr
          }),
          name: new TokenType("name", {
            startsExpr: startsExpr
          }),
          eof: new TokenType("eof"),
          bracketL: new TokenType("[", {
            beforeExpr: beforeExpr,
            startsExpr: startsExpr
          }),
          bracketR: new TokenType("]"),
          braceL: new TokenType("{", {
            beforeExpr: beforeExpr,
            startsExpr: startsExpr
          }),
          braceBarL: new TokenType("{|", {
            beforeExpr: beforeExpr,
            startsExpr: startsExpr
          }),
          braceR: new TokenType("}"),
          braceBarR: new TokenType("|}"),
          parenL: new TokenType("(", {
            beforeExpr: beforeExpr,
            startsExpr: startsExpr
          }),
          parenR: new TokenType(")"),
          comma: new TokenType(",", {
            beforeExpr: beforeExpr
          }),
          semi: new TokenType(";", {
            beforeExpr: beforeExpr
          }),
          colon: new TokenType(":", {
            beforeExpr: beforeExpr
          }),
          doubleColon: new TokenType("::", {
            beforeExpr: beforeExpr
          }),
          dot: new TokenType("."),
          question: new TokenType("?", {
            beforeExpr: beforeExpr
          }),
          questionDot: new TokenType("?."),
          arrow: new TokenType("=>", {
            beforeExpr: beforeExpr
          }),
          template: new TokenType("template"),
          ellipsis: new TokenType("...", {
            beforeExpr: beforeExpr
          }),
          backQuote: new TokenType("`", {
            startsExpr: startsExpr
          }),
          dollarBraceL: new TokenType("${", {
            beforeExpr: beforeExpr,
            startsExpr: startsExpr
          }),
          at: new TokenType("@"),
          hash: new TokenType("#"),
          eq: new TokenType("=", {
            beforeExpr: beforeExpr,
            isAssign: isAssign
          }),
          assign: new TokenType("_=", {
            beforeExpr: beforeExpr,
            isAssign: isAssign
          }),
          incDec: new TokenType("++/--", {
            prefix: prefix,
            postfix: postfix,
            startsExpr: startsExpr
          }),
          bang: new TokenType("!", {
            beforeExpr: beforeExpr,
            prefix: prefix,
            startsExpr: startsExpr
          }),
          tilde: new TokenType("~", {
            beforeExpr: beforeExpr,
            prefix: prefix,
            startsExpr: startsExpr
          }),
          pipeline: new BinopTokenType("|>", 0),
          nullishCoalescing: new BinopTokenType("??", 1),
          logicalOR: new BinopTokenType("||", 1),
          logicalAND: new BinopTokenType("&&", 2),
          bitwiseOR: new BinopTokenType("|", 3),
          bitwiseXOR: new BinopTokenType("^", 4),
          bitwiseAND: new BinopTokenType("&", 5),
          equality: new BinopTokenType("==/!=", 6),
          relational: new BinopTokenType("</>", 7),
          bitShift: new BinopTokenType("<</>>", 8),
          plusMin: new TokenType("+/-", {
            beforeExpr: beforeExpr,
            binop: 9,
            prefix: prefix,
            startsExpr: startsExpr
          }),
          modulo: new BinopTokenType("%", 10),
          star: new BinopTokenType("*", 10),
          slash: new BinopTokenType("/", 10),
          exponent: new TokenType("**", {
            beforeExpr: beforeExpr,
            binop: 11,
            rightAssociative: true
          })
        };
        var keywords = {
          break: new KeywordTokenType("break"),
          case: new KeywordTokenType("case", {
            beforeExpr: beforeExpr
          }),
          catch: new KeywordTokenType("catch"),
          continue: new KeywordTokenType("continue"),
          debugger: new KeywordTokenType("debugger"),
          default: new KeywordTokenType("default", {
            beforeExpr: beforeExpr
          }),
          do: new KeywordTokenType("do", {
            isLoop: isLoop,
            beforeExpr: beforeExpr
          }),
          else: new KeywordTokenType("else", {
            beforeExpr: beforeExpr
          }),
          finally: new KeywordTokenType("finally"),
          for: new KeywordTokenType("for", {
            isLoop: isLoop
          }),
          function: new KeywordTokenType("function", {
            startsExpr: startsExpr
          }),
          if: new KeywordTokenType("if"),
          return: new KeywordTokenType("return", {
            beforeExpr: beforeExpr
          }),
          switch: new KeywordTokenType("switch"),
          throw: new KeywordTokenType("throw", {
            beforeExpr: beforeExpr,
            prefix: prefix,
            startsExpr: startsExpr
          }),
          try: new KeywordTokenType("try"),
          var: new KeywordTokenType("var"),
          let: new KeywordTokenType("let"),
          const: new KeywordTokenType("const"),
          while: new KeywordTokenType("while", {
            isLoop: isLoop
          }),
          with: new KeywordTokenType("with"),
          new: new KeywordTokenType("new", {
            beforeExpr: beforeExpr,
            startsExpr: startsExpr
          }),
          this: new KeywordTokenType("this", {
            startsExpr: startsExpr
          }),
          super: new KeywordTokenType("super", {
            startsExpr: startsExpr
          }),
          class: new KeywordTokenType("class"),
          extends: new KeywordTokenType("extends", {
            beforeExpr: beforeExpr
          }),
          export: new KeywordTokenType("export"),
          import: new KeywordTokenType("import", {
            startsExpr: startsExpr
          }),
          yield: new KeywordTokenType("yield", {
            beforeExpr: beforeExpr,
            startsExpr: startsExpr
          }),
          null: new KeywordTokenType("null", {
            startsExpr: startsExpr
          }),
          true: new KeywordTokenType("true", {
            startsExpr: startsExpr
          }),
          false: new KeywordTokenType("false", {
            startsExpr: startsExpr
          }),
          in: new KeywordTokenType("in", {
            beforeExpr: beforeExpr,
            binop: 7
          }),
          instanceof: new KeywordTokenType("instanceof", {
            beforeExpr: beforeExpr,
            binop: 7
          }),
          typeof: new KeywordTokenType("typeof", {
            beforeExpr: beforeExpr,
            prefix: prefix,
            startsExpr: startsExpr
          }),
          void: new KeywordTokenType("void", {
            beforeExpr: beforeExpr,
            prefix: prefix,
            startsExpr: startsExpr
          }),
          delete: new KeywordTokenType("delete", {
            beforeExpr: beforeExpr,
            prefix: prefix,
            startsExpr: startsExpr
          })
        };
        Object.keys(keywords).forEach(function(name) {
          types["_" + name] = keywords[name];
        });

        function makePredicate(words) {
          var wordsArr = words.split(" ");
          return function(str) {
            return wordsArr.indexOf(str) >= 0;
          };
        }

        var reservedWords = {
          "6": makePredicate("enum await"),
          strict: makePredicate(
            "implements interface let package private protected public static yield"
          ),
          strictBind: makePredicate("eval arguments")
        };
        var isKeyword = makePredicate(
          "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super"
        );
        var nonASCIIidentifierStartChars =
          "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
        var nonASCIIidentifierChars =
          "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA900-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
        var nonASCIIidentifierStart = new RegExp(
          "[" + nonASCIIidentifierStartChars + "]"
        );
        var nonASCIIidentifier = new RegExp(
          "[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]"
        );
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        var astralIdentifierStartCodes = [
          0,
          11,
          2,
          25,
          2,
          18,
          2,
          1,
          2,
          14,
          3,
          13,
          35,
          122,
          70,
          52,
          268,
          28,
          4,
          48,
          48,
          31,
          14,
          29,
          6,
          37,
          11,
          29,
          3,
          35,
          5,
          7,
          2,
          4,
          43,
          157,
          19,
          35,
          5,
          35,
          5,
          39,
          9,
          51,
          157,
          310,
          10,
          21,
          11,
          7,
          153,
          5,
          3,
          0,
          2,
          43,
          2,
          1,
          4,
          0,
          3,
          22,
          11,
          22,
          10,
          30,
          66,
          18,
          2,
          1,
          11,
          21,
          11,
          25,
          71,
          55,
          7,
          1,
          65,
          0,
          16,
          3,
          2,
          2,
          2,
          26,
          45,
          28,
          4,
          28,
          36,
          7,
          2,
          27,
          28,
          53,
          11,
          21,
          11,
          18,
          14,
          17,
          111,
          72,
          56,
          50,
          14,
          50,
          785,
          52,
          76,
          44,
          33,
          24,
          27,
          35,
          42,
          34,
          4,
          0,
          13,
          47,
          15,
          3,
          22,
          0,
          2,
          0,
          36,
          17,
          2,
          24,
          85,
          6,
          2,
          0,
          2,
          3,
          2,
          14,
          2,
          9,
          8,
          46,
          39,
          7,
          3,
          1,
          3,
          21,
          2,
          6,
          2,
          1,
          2,
          4,
          4,
          0,
          19,
          0,
          13,
          4,
          159,
          52,
          19,
          3,
          54,
          47,
          21,
          1,
          2,
          0,
          185,
          46,
          42,
          3,
          37,
          47,
          21,
          0,
          60,
          42,
          86,
          25,
          391,
          63,
          32,
          0,
          257,
          0,
          11,
          39,
          8,
          0,
          22,
          0,
          12,
          39,
          3,
          3,
          55,
          56,
          264,
          8,
          2,
          36,
          18,
          0,
          50,
          29,
          113,
          6,
          2,
          1,
          2,
          37,
          22,
          0,
          698,
          921,
          103,
          110,
          18,
          195,
          2749,
          1070,
          4050,
          582,
          8634,
          568,
          8,
          30,
          114,
          29,
          19,
          47,
          17,
          3,
          32,
          20,
          6,
          18,
          881,
          68,
          12,
          0,
          67,
          12,
          65,
          1,
          31,
          6124,
          20,
          754,
          9486,
          286,
          82,
          395,
          2309,
          106,
          6,
          12,
          4,
          8,
          8,
          9,
          5991,
          84,
          2,
          70,
          2,
          1,
          3,
          0,
          3,
          1,
          3,
          3,
          2,
          11,
          2,
          0,
          2,
          6,
          2,
          64,
          2,
          3,
          3,
          7,
          2,
          6,
          2,
          27,
          2,
          3,
          2,
          4,
          2,
          0,
          4,
          6,
          2,
          339,
          3,
          24,
          2,
          24,
          2,
          30,
          2,
          24,
          2,
          30,
          2,
          24,
          2,
          30,
          2,
          24,
          2,
          30,
          2,
          24,
          2,
          7,
          4149,
          196,
          60,
          67,
          1213,
          3,
          2,
          26,
          2,
          1,
          2,
          0,
          3,
          0,
          2,
          9,
          2,
          3,
          2,
          0,
          2,
          0,
          7,
          0,
          5,
          0,
          2,
          0,
          2,
          0,
          2,
          2,
          2,
          1,
          2,
          0,
          3,
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          1,
          2,
          0,
          3,
          3,
          2,
          6,
          2,
          3,
          2,
          3,
          2,
          0,
          2,
          9,
          2,
          16,
          6,
          2,
          2,
          4,
          2,
          16,
          4421,
          42710,
          42,
          4148,
          12,
          221,
          3,
          5761,
          15,
          7472,
          3104,
          541
        ];
        var astralIdentifierCodes = [
          509,
          0,
          227,
          0,
          150,
          4,
          294,
          9,
          1368,
          2,
          2,
          1,
          6,
          3,
          41,
          2,
          5,
          0,
          166,
          1,
          1306,
          2,
          54,
          14,
          32,
          9,
          16,
          3,
          46,
          10,
          54,
          9,
          7,
          2,
          37,
          13,
          2,
          9,
          52,
          0,
          13,
          2,
          49,
          13,
          10,
          2,
          4,
          9,
          83,
          11,
          7,
          0,
          161,
          11,
          6,
          9,
          7,
          3,
          57,
          0,
          2,
          6,
          3,
          1,
          3,
          2,
          10,
          0,
          11,
          1,
          3,
          6,
          4,
          4,
          193,
          17,
          10,
          9,
          87,
          19,
          13,
          9,
          214,
          6,
          3,
          8,
          28,
          1,
          83,
          16,
          16,
          9,
          82,
          12,
          9,
          9,
          84,
          14,
          5,
          9,
          423,
          9,
          280,
          9,
          41,
          6,
          2,
          3,
          9,
          0,
          10,
          10,
          47,
          15,
          406,
          7,
          2,
          7,
          17,
          9,
          57,
          21,
          2,
          13,
          123,
          5,
          4,
          0,
          2,
          1,
          2,
          6,
          2,
          0,
          9,
          9,
          19719,
          9,
          135,
          4,
          60,
          6,
          26,
          9,
          1016,
          45,
          17,
          3,
          19723,
          1,
          5319,
          4,
          4,
          5,
          9,
          7,
          3,
          6,
          31,
          3,
          149,
          2,
          1418,
          49,
          513,
          54,
          5,
          49,
          9,
          0,
          15,
          0,
          23,
          4,
          2,
          14,
          1361,
          6,
          2,
          16,
          3,
          6,
          2,
          1,
          2,
          4,
          2214,
          6,
          110,
          6,
          6,
          9,
          792487,
          239
        ];

        function isInAstralSet(code, set) {
          var pos = 0x10000;

          for (var i = 0; i < set.length; i += 2) {
            pos += set[i];
            if (pos > code) return false;
            pos += set[i + 1];
            if (pos >= code) return true;
          }

          return false;
        }

        function isIdentifierStart(code) {
          if (code < 65) return code === 36;
          if (code < 91) return true;
          if (code < 97) return code === 95;
          if (code < 123) return true;

          if (code <= 0xffff) {
            return (
              code >= 0xaa &&
              nonASCIIidentifierStart.test(String.fromCharCode(code))
            );
          }

          return isInAstralSet(code, astralIdentifierStartCodes);
        }

        function isIteratorStart(current, next) {
          return current === 64 && next === 64;
        }

        function isIdentifierChar(code) {
          if (code < 48) return code === 36;
          if (code < 58) return true;
          if (code < 65) return false;
          if (code < 91) return true;
          if (code < 97) return code === 95;
          if (code < 123) return true;

          if (code <= 0xffff) {
            return (
              code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))
            );
          }

          return (
            isInAstralSet(code, astralIdentifierStartCodes) ||
            isInAstralSet(code, astralIdentifierCodes)
          );
        }

        var lineBreak = /\r\n?|\n|\u2028|\u2029/;
        var lineBreakG = new RegExp(lineBreak.source, "g");

        function isNewLine(code) {
          return (
            code === 10 || code === 13 || code === 0x2028 || code === 0x2029
          );
        }

        var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

        var TokContext = function TokContext(
          token,
          isExpr,
          preserveSpace,
          override
        ) {
          this.token = token;
          this.isExpr = !!isExpr;
          this.preserveSpace = !!preserveSpace;
          this.override = override;
        };

        var types$1 = {
          braceStatement: new TokContext("{", false),
          braceExpression: new TokContext("{", true),
          templateQuasi: new TokContext("${", true),
          parenStatement: new TokContext("(", false),
          parenExpression: new TokContext("(", true),
          template: new TokContext("`", true, true, function(p) {
            return p.readTmplToken();
          }),
          functionExpression: new TokContext("function", true)
        };

        types.parenR.updateContext = types.braceR.updateContext = function() {
          if (this.state.context.length === 1) {
            this.state.exprAllowed = true;
            return;
          }

          var out = this.state.context.pop();

          if (
            out === types$1.braceStatement &&
            this.curContext() === types$1.functionExpression
          ) {
            this.state.context.pop();
            this.state.exprAllowed = false;
          } else if (out === types$1.templateQuasi) {
            this.state.exprAllowed = true;
          } else {
            this.state.exprAllowed = !out.isExpr;
          }
        };

        types.name.updateContext = function(prevType) {
          if (
            this.state.value === "of" &&
            this.curContext() === types$1.parenStatement
          ) {
            this.state.exprAllowed = !prevType.beforeExpr;
            return;
          }

          this.state.exprAllowed = false;

          if (
            prevType === types._let ||
            prevType === types._const ||
            prevType === types._var
          ) {
            if (lineBreak.test(this.input.slice(this.state.end))) {
              this.state.exprAllowed = true;
            }
          }

          if (this.state.isIterator) {
            this.state.isIterator = false;
          }
        };

        types.braceL.updateContext = function(prevType) {
          this.state.context.push(
            this.braceIsBlock(prevType)
              ? types$1.braceStatement
              : types$1.braceExpression
          );
          this.state.exprAllowed = true;
        };

        types.dollarBraceL.updateContext = function() {
          this.state.context.push(types$1.templateQuasi);
          this.state.exprAllowed = true;
        };

        types.parenL.updateContext = function(prevType) {
          var statementParens =
            prevType === types._if ||
            prevType === types._for ||
            prevType === types._with ||
            prevType === types._while;
          this.state.context.push(
            statementParens ? types$1.parenStatement : types$1.parenExpression
          );
          this.state.exprAllowed = true;
        };

        types.incDec.updateContext = function() {};

        types._function.updateContext = function(prevType) {
          if (this.state.exprAllowed && !this.braceIsBlock(prevType)) {
            this.state.context.push(types$1.functionExpression);
          }

          this.state.exprAllowed = false;
        };

        types.backQuote.updateContext = function() {
          if (this.curContext() === types$1.template) {
            this.state.context.pop();
          } else {
            this.state.context.push(types$1.template);
          }

          this.state.exprAllowed = false;
        };

        var Position = function Position(line, col) {
          this.line = line;
          this.column = col;
        };

        var SourceLocation = function SourceLocation(start, end) {
          this.start = start;
          this.end = end;
        };

        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0; ; ) {
            lineBreakG.lastIndex = cur;
            var match = lineBreakG.exec(input);

            if (match && match.index < offset) {
              ++line;
              cur = match.index + match[0].length;
            } else {
              return new Position(line, offset - cur);
            }
          }

          throw new Error("Unreachable");
        }

        var BaseParser = (function() {
          function BaseParser() {
            this.sawUnambiguousESM = false;
          }

          var _proto = BaseParser.prototype;

          _proto.isReservedWord = function isReservedWord(word) {
            if (word === "await") {
              return this.inModule;
            } else {
              return reservedWords[6](word);
            }
          };

          _proto.hasPlugin = function hasPlugin(name) {
            return !!this.plugins[name];
          };

          return BaseParser;
        })();

        function last(stack) {
          return stack[stack.length - 1];
        }

        var CommentsParser = (function(_BaseParser) {
          _inheritsLoose(CommentsParser, _BaseParser);

          function CommentsParser() {
            return _BaseParser.apply(this, arguments) || this;
          }

          var _proto = CommentsParser.prototype;

          _proto.addComment = function addComment(comment) {
            if (this.filename) comment.loc.filename = this.filename;
            this.state.trailingComments.push(comment);
            this.state.leadingComments.push(comment);
          };

          _proto.processComment = function processComment(node) {
            if (node.type === "Program" && node.body.length > 0) return;
            var stack = this.state.commentStack;
            var firstChild, lastChild, trailingComments, i, j;

            if (this.state.trailingComments.length > 0) {
              if (this.state.trailingComments[0].start >= node.end) {
                trailingComments = this.state.trailingComments;
                this.state.trailingComments = [];
              } else {
                this.state.trailingComments.length = 0;
              }
            } else if (stack.length > 0) {
              var lastInStack = last(stack);

              if (
                lastInStack.trailingComments &&
                lastInStack.trailingComments[0].start >= node.end
              ) {
                trailingComments = lastInStack.trailingComments;
                delete lastInStack.trailingComments;
              }
            }

            if (stack.length > 0 && last(stack).start >= node.start) {
              firstChild = stack.pop();
            }

            while (stack.length > 0 && last(stack).start >= node.start) {
              lastChild = stack.pop();
            }

            if (!lastChild && firstChild) lastChild = firstChild;

            if (firstChild && this.state.leadingComments.length > 0) {
              var lastComment = last(this.state.leadingComments);

              if (firstChild.type === "ObjectProperty") {
                if (lastComment.start >= node.start) {
                  if (this.state.commentPreviousNode) {
                    for (j = 0; j < this.state.leadingComments.length; j++) {
                      if (
                        this.state.leadingComments[j].end <
                        this.state.commentPreviousNode.end
                      ) {
                        this.state.leadingComments.splice(j, 1);
                        j--;
                      }
                    }

                    if (this.state.leadingComments.length > 0) {
                      firstChild.trailingComments = this.state.leadingComments;
                      this.state.leadingComments = [];
                    }
                  }
                }
              } else if (
                node.type === "CallExpression" &&
                node.arguments &&
                node.arguments.length
              ) {
                var lastArg = last(node.arguments);

                if (
                  lastArg &&
                  lastComment.start >= lastArg.start &&
                  lastComment.end <= node.end
                ) {
                  if (this.state.commentPreviousNode) {
                    if (this.state.leadingComments.length > 0) {
                      lastArg.trailingComments = this.state.leadingComments;
                      this.state.leadingComments = [];
                    }
                  }
                }
              }
            }

            if (lastChild) {
              if (lastChild.leadingComments) {
                if (
                  lastChild !== node &&
                  lastChild.leadingComments.length > 0 &&
                  last(lastChild.leadingComments).end <= node.start
                ) {
                  node.leadingComments = lastChild.leadingComments;
                  delete lastChild.leadingComments;
                } else {
                  for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
                    if (lastChild.leadingComments[i].end <= node.start) {
                      node.leadingComments = lastChild.leadingComments.splice(
                        0,
                        i + 1
                      );
                      break;
                    }
                  }
                }
              }
            } else if (this.state.leadingComments.length > 0) {
              if (last(this.state.leadingComments).end <= node.start) {
                if (this.state.commentPreviousNode) {
                  for (j = 0; j < this.state.leadingComments.length; j++) {
                    if (
                      this.state.leadingComments[j].end <
                      this.state.commentPreviousNode.end
                    ) {
                      this.state.leadingComments.splice(j, 1);
                      j--;
                    }
                  }
                }

                if (this.state.leadingComments.length > 0) {
                  node.leadingComments = this.state.leadingComments;
                  this.state.leadingComments = [];
                }
              } else {
                for (i = 0; i < this.state.leadingComments.length; i++) {
                  if (this.state.leadingComments[i].end > node.start) {
                    break;
                  }
                }

                var leadingComments = this.state.leadingComments.slice(0, i);

                if (leadingComments.length) {
                  node.leadingComments = leadingComments;
                }

                trailingComments = this.state.leadingComments.slice(i);

                if (trailingComments.length === 0) {
                  trailingComments = null;
                }
              }
            }

            this.state.commentPreviousNode = node;

            if (trailingComments) {
              if (
                trailingComments.length &&
                trailingComments[0].start >= node.start &&
                last(trailingComments).end <= node.end
              ) {
                node.innerComments = trailingComments;
              } else {
                node.trailingComments = trailingComments;
              }
            }

            stack.push(node);
          };

          return CommentsParser;
        })(BaseParser);

        var LocationParser = (function(_CommentsParser) {
          _inheritsLoose(LocationParser, _CommentsParser);

          function LocationParser() {
            return _CommentsParser.apply(this, arguments) || this;
          }

          var _proto = LocationParser.prototype;

          _proto.raise = function raise(pos, message, _temp) {
            var _ref = _temp === void 0 ? {} : _temp,
              missingPluginNames = _ref.missingPluginNames,
              code = _ref.code;

            var loc = getLineInfo(this.input, pos);
            message += " (" + loc.line + ":" + loc.column + ")";
            var err = new SyntaxError(message);
            err.pos = pos;
            err.loc = loc;

            if (missingPluginNames) {
              err.missingPlugin = missingPluginNames;
            }

            if (code !== undefined) {
              err.code = code;
            }

            throw err;
          };

          return LocationParser;
        })(CommentsParser);

        var State = (function() {
          function State() {}

          var _proto = State.prototype;

          _proto.init = function init(options, input) {
            this.strict =
              options.strictMode === false
                ? false
                : options.sourceType === "module";
            this.input = input;
            this.potentialArrowAt = -1;
            this.noArrowAt = [];
            this.noArrowParamsConversionAt = [];
            this.inMethod = false;
            this.inFunction = false;
            this.inParameters = false;
            this.maybeInArrowParameters = false;
            this.inGenerator = false;
            this.inAsync = false;
            this.inPropertyName = false;
            this.inType = false;
            this.inClassProperty = false;
            this.noAnonFunctionType = false;
            this.hasFlowComment = false;
            this.isIterator = false;
            this.classLevel = 0;
            this.labels = [];
            this.decoratorStack = [[]];
            this.yieldInPossibleArrowParameters = null;
            this.tokens = [];
            this.comments = [];
            this.trailingComments = [];
            this.leadingComments = [];
            this.commentStack = [];
            this.commentPreviousNode = null;
            this.pos = this.lineStart = 0;
            this.curLine = options.startLine;
            this.type = types.eof;
            this.value = null;
            this.start = this.end = this.pos;
            this.startLoc = this.endLoc = this.curPosition();
            this.lastTokEndLoc = this.lastTokStartLoc = null;
            this.lastTokStart = this.lastTokEnd = this.pos;
            this.context = [types$1.braceStatement];
            this.exprAllowed = true;
            this.containsEsc = this.containsOctal = false;
            this.octalPosition = null;
            this.invalidTemplateEscapePosition = null;
            this.exportedIdentifiers = [];
          };

          _proto.curPosition = function curPosition() {
            return new Position(this.curLine, this.pos - this.lineStart);
          };

          _proto.clone = function clone(skipArrays) {
            var _this = this;

            var state = new State();
            Object.keys(this).forEach(function(key) {
              var val = _this[key];

              if ((!skipArrays || key === "context") && Array.isArray(val)) {
                val = val.slice();
              }

              state[key] = val;
            });
            return state;
          };

          return State;
        })();

        var _isDigit = function isDigit(code) {
          return code >= 48 && code <= 57;
        };

        var VALID_REGEX_FLAGS = "gmsiyu";
        var forbiddenNumericSeparatorSiblings = {
          decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],
          hex: [46, 88, 95, 120]
        };
        var allowedNumericSeparatorSiblings = {};
        allowedNumericSeparatorSiblings.bin = [48, 49];
        allowedNumericSeparatorSiblings.oct = allowedNumericSeparatorSiblings.bin.concat(
          [50, 51, 52, 53, 54, 55]
        );
        allowedNumericSeparatorSiblings.dec = allowedNumericSeparatorSiblings.oct.concat(
          [56, 57]
        );
        allowedNumericSeparatorSiblings.hex = allowedNumericSeparatorSiblings.dec.concat(
          [65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102]
        );

        var Token = function Token(state) {
          this.type = state.type;
          this.value = state.value;
          this.start = state.start;
          this.end = state.end;
          this.loc = new SourceLocation(state.startLoc, state.endLoc);
        };

        function codePointToString(code) {
          if (code <= 0xffff) {
            return String.fromCharCode(code);
          } else {
            return String.fromCharCode(
              ((code - 0x10000) >> 10) + 0xd800,
              ((code - 0x10000) & 1023) + 0xdc00
            );
          }
        }

        var Tokenizer = (function(_LocationParser) {
          _inheritsLoose(Tokenizer, _LocationParser);

          function Tokenizer(options, input) {
            var _this;

            _this = _LocationParser.call(this) || this;
            _this.state = new State();

            _this.state.init(options, input);

            _this.isLookahead = false;
            return _this;
          }

          var _proto = Tokenizer.prototype;

          _proto.next = function next() {
            if (this.options.tokens && !this.isLookahead) {
              this.state.tokens.push(new Token(this.state));
            }

            this.state.lastTokEnd = this.state.end;
            this.state.lastTokStart = this.state.start;
            this.state.lastTokEndLoc = this.state.endLoc;
            this.state.lastTokStartLoc = this.state.startLoc;
            this.nextToken();
          };

          _proto.eat = function eat(type) {
            if (this.match(type)) {
              this.next();
              return true;
            } else {
              return false;
            }
          };

          _proto.match = function match(type) {
            return this.state.type === type;
          };

          _proto.isKeyword = function isKeyword$$1(word) {
            return isKeyword(word);
          };

          _proto.lookahead = function lookahead() {
            var old = this.state;
            this.state = old.clone(true);
            this.isLookahead = true;
            this.next();
            this.isLookahead = false;
            var curr = this.state;
            this.state = old;
            return curr;
          };

          _proto.setStrict = function setStrict(strict) {
            this.state.strict = strict;
            if (!this.match(types.num) && !this.match(types.string)) return;
            this.state.pos = this.state.start;

            while (this.state.pos < this.state.lineStart) {
              this.state.lineStart =
                this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
              --this.state.curLine;
            }

            this.nextToken();
          };

          _proto.curContext = function curContext() {
            return this.state.context[this.state.context.length - 1];
          };

          _proto.nextToken = function nextToken() {
            var curContext = this.curContext();
            if (!curContext || !curContext.preserveSpace) this.skipSpace();
            this.state.containsOctal = false;
            this.state.octalPosition = null;
            this.state.start = this.state.pos;
            this.state.startLoc = this.state.curPosition();

            if (this.state.pos >= this.input.length) {
              this.finishToken(types.eof);
              return;
            }

            if (curContext.override) {
              curContext.override(this);
            } else {
              this.readToken(this.fullCharCodeAtPos());
            }
          };

          _proto.readToken = function readToken(code) {
            if (isIdentifierStart(code) || code === 92) {
              this.readWord();
            } else {
              this.getTokenFromCode(code);
            }
          };

          _proto.fullCharCodeAtPos = function fullCharCodeAtPos() {
            var code = this.input.charCodeAt(this.state.pos);
            if (code <= 0xd7ff || code >= 0xe000) return code;
            var next = this.input.charCodeAt(this.state.pos + 1);
            return (code << 10) + next - 0x35fdc00;
          };

          _proto.pushComment = function pushComment(
            block,
            text,
            start,
            end,
            startLoc,
            endLoc
          ) {
            var comment = {
              type: block ? "CommentBlock" : "CommentLine",
              value: text,
              start: start,
              end: end,
              loc: new SourceLocation(startLoc, endLoc)
            };

            if (!this.isLookahead) {
              if (this.options.tokens) this.state.tokens.push(comment);
              this.state.comments.push(comment);
              this.addComment(comment);
            }
          };

          _proto.skipBlockComment = function skipBlockComment() {
            var startLoc = this.state.curPosition();
            var start = this.state.pos;
            var end = this.input.indexOf("*/", (this.state.pos += 2));
            if (end === -1)
              this.raise(this.state.pos - 2, "Unterminated comment");
            this.state.pos = end + 2;
            lineBreakG.lastIndex = start;
            var match;

            while (
              (match = lineBreakG.exec(this.input)) &&
              match.index < this.state.pos
            ) {
              ++this.state.curLine;
              this.state.lineStart = match.index + match[0].length;
            }

            this.pushComment(
              true,
              this.input.slice(start + 2, end),
              start,
              this.state.pos,
              startLoc,
              this.state.curPosition()
            );
          };

          _proto.skipLineComment = function skipLineComment(startSkip) {
            var start = this.state.pos;
            var startLoc = this.state.curPosition();
            var ch = this.input.charCodeAt((this.state.pos += startSkip));

            if (this.state.pos < this.input.length) {
              while (
                ch !== 10 &&
                ch !== 13 &&
                ch !== 8232 &&
                ch !== 8233 &&
                ++this.state.pos < this.input.length
              ) {
                ch = this.input.charCodeAt(this.state.pos);
              }
            }

            this.pushComment(
              false,
              this.input.slice(start + startSkip, this.state.pos),
              start,
              this.state.pos,
              startLoc,
              this.state.curPosition()
            );
          };

          _proto.skipSpace = function skipSpace() {
            loop: while (this.state.pos < this.input.length) {
              var ch = this.input.charCodeAt(this.state.pos);

              switch (ch) {
                case 32:
                case 160:
                  ++this.state.pos;
                  break;

                case 13:
                  if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                    ++this.state.pos;
                  }

                case 10:
                case 8232:
                case 8233:
                  ++this.state.pos;
                  ++this.state.curLine;
                  this.state.lineStart = this.state.pos;
                  break;

                case 47:
                  switch (this.input.charCodeAt(this.state.pos + 1)) {
                    case 42:
                      this.skipBlockComment();
                      break;

                    case 47:
                      this.skipLineComment(2);
                      break;

                    default:
                      break loop;
                  }

                  break;

                default:
                  if (
                    (ch > 8 && ch < 14) ||
                    (ch >= 5760 &&
                      nonASCIIwhitespace.test(String.fromCharCode(ch)))
                  ) {
                    ++this.state.pos;
                  } else {
                    break loop;
                  }
              }
            }
          };

          _proto.finishToken = function finishToken(type, val) {
            this.state.end = this.state.pos;
            this.state.endLoc = this.state.curPosition();
            var prevType = this.state.type;
            this.state.type = type;
            this.state.value = val;
            this.updateContext(prevType);
          };

          _proto.readToken_dot = function readToken_dot() {
            var next = this.input.charCodeAt(this.state.pos + 1);

            if (next >= 48 && next <= 57) {
              this.readNumber(true);
              return;
            }

            var next2 = this.input.charCodeAt(this.state.pos + 2);

            if (next === 46 && next2 === 46) {
              this.state.pos += 3;
              this.finishToken(types.ellipsis);
            } else {
              ++this.state.pos;
              this.finishToken(types.dot);
            }
          };

          _proto.readToken_slash = function readToken_slash() {
            if (this.state.exprAllowed) {
              ++this.state.pos;
              this.readRegexp();
              return;
            }

            var next = this.input.charCodeAt(this.state.pos + 1);

            if (next === 61) {
              this.finishOp(types.assign, 2);
            } else {
              this.finishOp(types.slash, 1);
            }
          };

          _proto.readToken_mult_modulo = function readToken_mult_modulo(code) {
            var type = code === 42 ? types.star : types.modulo;
            var width = 1;
            var next = this.input.charCodeAt(this.state.pos + 1);
            var exprAllowed = this.state.exprAllowed;

            if (code === 42 && next === 42) {
              width++;
              next = this.input.charCodeAt(this.state.pos + 2);
              type = types.exponent;
            }

            if (next === 61 && !exprAllowed) {
              width++;
              type = types.assign;
            }

            this.finishOp(type, width);
          };

          _proto.readToken_pipe_amp = function readToken_pipe_amp(code) {
            var next = this.input.charCodeAt(this.state.pos + 1);

            if (next === code) {
              if (this.input.charCodeAt(this.state.pos + 2) === 61) {
                this.finishOp(types.assign, 3);
              } else {
                this.finishOp(
                  code === 124 ? types.logicalOR : types.logicalAND,
                  2
                );
              }

              return;
            }

            if (code === 124) {
              if (next === 62) {
                this.finishOp(types.pipeline, 2);
                return;
              } else if (next === 125 && this.hasPlugin("flow")) {
                this.finishOp(types.braceBarR, 2);
                return;
              }
            }

            if (next === 61) {
              this.finishOp(types.assign, 2);
              return;
            }

            this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
          };

          _proto.readToken_caret = function readToken_caret() {
            var next = this.input.charCodeAt(this.state.pos + 1);

            if (next === 61) {
              this.finishOp(types.assign, 2);
            } else {
              this.finishOp(types.bitwiseXOR, 1);
            }
          };

          _proto.readToken_plus_min = function readToken_plus_min(code) {
            var next = this.input.charCodeAt(this.state.pos + 1);

            if (next === code) {
              if (
                next === 45 &&
                !this.inModule &&
                this.input.charCodeAt(this.state.pos + 2) === 62 &&
                lineBreak.test(
                  this.input.slice(this.state.lastTokEnd, this.state.pos)
                )
              ) {
                this.skipLineComment(3);
                this.skipSpace();
                this.nextToken();
                return;
              }

              this.finishOp(types.incDec, 2);
              return;
            }

            if (next === 61) {
              this.finishOp(types.assign, 2);
            } else {
              this.finishOp(types.plusMin, 1);
            }
          };

          _proto.readToken_lt_gt = function readToken_lt_gt(code) {
            var next = this.input.charCodeAt(this.state.pos + 1);
            var size = 1;

            if (next === code) {
              size =
                code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62
                  ? 3
                  : 2;

              if (this.input.charCodeAt(this.state.pos + size) === 61) {
                this.finishOp(types.assign, size + 1);
                return;
              }

              this.finishOp(types.bitShift, size);
              return;
            }

            if (
              next === 33 &&
              code === 60 &&
              !this.inModule &&
              this.input.charCodeAt(this.state.pos + 2) === 45 &&
              this.input.charCodeAt(this.state.pos + 3) === 45
            ) {
              this.skipLineComment(4);
              this.skipSpace();
              this.nextToken();
              return;
            }

            if (next === 61) {
              size = 2;
            }

            this.finishOp(types.relational, size);
          };

          _proto.readToken_eq_excl = function readToken_eq_excl(code) {
            var next = this.input.charCodeAt(this.state.pos + 1);

            if (next === 61) {
              this.finishOp(
                types.equality,
                this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2
              );
              return;
            }

            if (code === 61 && next === 62) {
              this.state.pos += 2;
              this.finishToken(types.arrow);
              return;
            }

            this.finishOp(code === 61 ? types.eq : types.bang, 1);
          };

          _proto.readToken_question = function readToken_question() {
            var next = this.input.charCodeAt(this.state.pos + 1);
            var next2 = this.input.charCodeAt(this.state.pos + 2);

            if (next === 63) {
              if (next2 === 61) {
                this.finishOp(types.assign, 3);
              } else {
                this.finishOp(types.nullishCoalescing, 2);
              }
            } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
              this.state.pos += 2;
              this.finishToken(types.questionDot);
            } else {
              ++this.state.pos;
              this.finishToken(types.question);
            }
          };

          _proto.getTokenFromCode = function getTokenFromCode(code) {
            switch (code) {
              case 35:
                if (
                  (this.hasPlugin("classPrivateProperties") ||
                    this.hasPlugin("classPrivateMethods")) &&
                  this.state.classLevel > 0
                ) {
                  ++this.state.pos;
                  this.finishToken(types.hash);
                  return;
                } else {
                  this.raise(
                    this.state.pos,
                    "Unexpected character '" + codePointToString(code) + "'"
                  );
                }

              case 46:
                this.readToken_dot();
                return;

              case 40:
                ++this.state.pos;
                this.finishToken(types.parenL);
                return;

              case 41:
                ++this.state.pos;
                this.finishToken(types.parenR);
                return;

              case 59:
                ++this.state.pos;
                this.finishToken(types.semi);
                return;

              case 44:
                ++this.state.pos;
                this.finishToken(types.comma);
                return;

              case 91:
                ++this.state.pos;
                this.finishToken(types.bracketL);
                return;

              case 93:
                ++this.state.pos;
                this.finishToken(types.bracketR);
                return;

              case 123:
                if (
                  this.hasPlugin("flow") &&
                  this.input.charCodeAt(this.state.pos + 1) === 124
                ) {
                  this.finishOp(types.braceBarL, 2);
                } else {
                  ++this.state.pos;
                  this.finishToken(types.braceL);
                }

                return;

              case 125:
                ++this.state.pos;
                this.finishToken(types.braceR);
                return;

              case 58:
                if (
                  this.hasPlugin("functionBind") &&
                  this.input.charCodeAt(this.state.pos + 1) === 58
                ) {
                  this.finishOp(types.doubleColon, 2);
                } else {
                  ++this.state.pos;
                  this.finishToken(types.colon);
                }

                return;

              case 63:
                this.readToken_question();
                return;

              case 64:
                ++this.state.pos;
                this.finishToken(types.at);
                return;

              case 96:
                ++this.state.pos;
                this.finishToken(types.backQuote);
                return;

              case 48: {
                var next = this.input.charCodeAt(this.state.pos + 1);

                if (next === 120 || next === 88) {
                  this.readRadixNumber(16);
                  return;
                }

                if (next === 111 || next === 79) {
                  this.readRadixNumber(8);
                  return;
                }

                if (next === 98 || next === 66) {
                  this.readRadixNumber(2);
                  return;
                }
              }

              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
                this.readNumber(false);
                return;

              case 34:
              case 39:
                this.readString(code);
                return;

              case 47:
                this.readToken_slash();
                return;

              case 37:
              case 42:
                this.readToken_mult_modulo(code);
                return;

              case 124:
              case 38:
                this.readToken_pipe_amp(code);
                return;

              case 94:
                this.readToken_caret();
                return;

              case 43:
              case 45:
                this.readToken_plus_min(code);
                return;

              case 60:
              case 62:
                this.readToken_lt_gt(code);
                return;

              case 61:
              case 33:
                this.readToken_eq_excl(code);
                return;

              case 126:
                this.finishOp(types.tilde, 1);
                return;
            }

            this.raise(
              this.state.pos,
              "Unexpected character '" + codePointToString(code) + "'"
            );
          };

          _proto.finishOp = function finishOp(type, size) {
            var str = this.input.slice(this.state.pos, this.state.pos + size);
            this.state.pos += size;
            this.finishToken(type, str);
          };

          _proto.readRegexp = function readRegexp() {
            var start = this.state.pos;
            var escaped, inClass;

            for (;;) {
              if (this.state.pos >= this.input.length) {
                this.raise(start, "Unterminated regular expression");
              }

              var ch = this.input.charAt(this.state.pos);

              if (lineBreak.test(ch)) {
                this.raise(start, "Unterminated regular expression");
              }

              if (escaped) {
                escaped = false;
              } else {
                if (ch === "[") {
                  inClass = true;
                } else if (ch === "]" && inClass) {
                  inClass = false;
                } else if (ch === "/" && !inClass) {
                  break;
                }

                escaped = ch === "\\";
              }

              ++this.state.pos;
            }

            var content = this.input.slice(start, this.state.pos);
            ++this.state.pos;
            var mods = "";

            while (this.state.pos < this.input.length) {
              var char = this.input[this.state.pos];
              var charCode = this.fullCharCodeAtPos();

              if (VALID_REGEX_FLAGS.indexOf(char) > -1) {
                if (mods.indexOf(char) > -1) {
                  this.raise(
                    this.state.pos + 1,
                    "Duplicate regular expression flag"
                  );
                }

                ++this.state.pos;
                mods += char;
              } else if (isIdentifierChar(charCode) || charCode === 92) {
                this.raise(
                  this.state.pos + 1,
                  "Invalid regular expression flag"
                );
              } else {
                break;
              }
            }

            this.finishToken(types.regexp, {
              pattern: content,
              flags: mods
            });
          };

          _proto.readInt = function readInt(radix, len) {
            var start = this.state.pos;
            var forbiddenSiblings =
              radix === 16
                ? forbiddenNumericSeparatorSiblings.hex
                : forbiddenNumericSeparatorSiblings.decBinOct;
            var allowedSiblings =
              radix === 16
                ? allowedNumericSeparatorSiblings.hex
                : radix === 10
                  ? allowedNumericSeparatorSiblings.dec
                  : radix === 8
                    ? allowedNumericSeparatorSiblings.oct
                    : allowedNumericSeparatorSiblings.bin;
            var total = 0;

            for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
              var code = this.input.charCodeAt(this.state.pos);
              var val = void 0;

              if (this.hasPlugin("numericSeparator")) {
                var prev = this.input.charCodeAt(this.state.pos - 1);
                var next = this.input.charCodeAt(this.state.pos + 1);

                if (code === 95) {
                  if (allowedSiblings.indexOf(next) === -1) {
                    this.raise(this.state.pos, "Invalid or unexpected token");
                  }

                  if (
                    forbiddenSiblings.indexOf(prev) > -1 ||
                    forbiddenSiblings.indexOf(next) > -1 ||
                    Number.isNaN(next)
                  ) {
                    this.raise(this.state.pos, "Invalid or unexpected token");
                  }

                  ++this.state.pos;
                  continue;
                }
              }

              if (code >= 97) {
                val = code - 97 + 10;
              } else if (code >= 65) {
                val = code - 65 + 10;
              } else if (_isDigit(code)) {
                val = code - 48;
              } else {
                val = Infinity;
              }

              if (val >= radix) break;
              ++this.state.pos;
              total = total * radix + val;
            }

            if (
              this.state.pos === start ||
              (len != null && this.state.pos - start !== len)
            ) {
              return null;
            }

            return total;
          };

          _proto.readRadixNumber = function readRadixNumber(radix) {
            var start = this.state.pos;
            var isBigInt = false;
            this.state.pos += 2;
            var val = this.readInt(radix);

            if (val == null) {
              this.raise(
                this.state.start + 2,
                "Expected number in radix " + radix
              );
            }

            if (this.hasPlugin("bigInt")) {
              if (this.input.charCodeAt(this.state.pos) === 110) {
                ++this.state.pos;
                isBigInt = true;
              }
            }

            if (isIdentifierStart(this.fullCharCodeAtPos())) {
              this.raise(this.state.pos, "Identifier directly after number");
            }

            if (isBigInt) {
              var str = this.input
                .slice(start, this.state.pos)
                .replace(/[_n]/g, "");
              this.finishToken(types.bigint, str);
              return;
            }

            this.finishToken(types.num, val);
          };

          _proto.readNumber = function readNumber(startsWithDot) {
            var start = this.state.pos;
            var octal = this.input.charCodeAt(start) === 48;
            var isFloat = false;
            var isBigInt = false;

            if (!startsWithDot && this.readInt(10) === null) {
              this.raise(start, "Invalid number");
            }

            if (octal && this.state.pos == start + 1) octal = false;
            var next = this.input.charCodeAt(this.state.pos);

            if (next === 46 && !octal) {
              ++this.state.pos;
              this.readInt(10);
              isFloat = true;
              next = this.input.charCodeAt(this.state.pos);
            }

            if ((next === 69 || next === 101) && !octal) {
              next = this.input.charCodeAt(++this.state.pos);

              if (next === 43 || next === 45) {
                ++this.state.pos;
              }

              if (this.readInt(10) === null)
                this.raise(start, "Invalid number");
              isFloat = true;
              next = this.input.charCodeAt(this.state.pos);
            }

            if (this.hasPlugin("bigInt")) {
              if (next === 110) {
                if (isFloat || octal)
                  this.raise(start, "Invalid BigIntLiteral");
                ++this.state.pos;
                isBigInt = true;
              }
            }

            if (isIdentifierStart(this.fullCharCodeAtPos())) {
              this.raise(this.state.pos, "Identifier directly after number");
            }

            var str = this.input
              .slice(start, this.state.pos)
              .replace(/[_n]/g, "");

            if (isBigInt) {
              this.finishToken(types.bigint, str);
              return;
            }

            var val;

            if (isFloat) {
              val = parseFloat(str);
            } else if (!octal || str.length === 1) {
              val = parseInt(str, 10);
            } else if (this.state.strict) {
              this.raise(start, "Invalid number");
            } else if (/[89]/.test(str)) {
              val = parseInt(str, 10);
            } else {
              val = parseInt(str, 8);
            }

            this.finishToken(types.num, val);
          };

          _proto.readCodePoint = function readCodePoint(throwOnInvalid) {
            var ch = this.input.charCodeAt(this.state.pos);
            var code;

            if (ch === 123) {
              var codePos = ++this.state.pos;
              code = this.readHexChar(
                this.input.indexOf("}", this.state.pos) - this.state.pos,
                throwOnInvalid
              );
              ++this.state.pos;

              if (code === null) {
                --this.state.invalidTemplateEscapePosition;
              } else if (code > 0x10ffff) {
                if (throwOnInvalid) {
                  this.raise(codePos, "Code point out of bounds");
                } else {
                  this.state.invalidTemplateEscapePosition = codePos - 2;
                  return null;
                }
              }
            } else {
              code = this.readHexChar(4, throwOnInvalid);
            }

            return code;
          };

          _proto.readString = function readString(quote) {
            var out = "",
              chunkStart = ++this.state.pos;

            for (;;) {
              if (this.state.pos >= this.input.length) {
                this.raise(this.state.start, "Unterminated string constant");
              }

              var ch = this.input.charCodeAt(this.state.pos);
              if (ch === quote) break;

              if (ch === 92) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.readEscapedChar(false);
                chunkStart = this.state.pos;
              } else {
                if (isNewLine(ch)) {
                  this.raise(this.state.start, "Unterminated string constant");
                }

                ++this.state.pos;
              }
            }

            out += this.input.slice(chunkStart, this.state.pos++);
            this.finishToken(types.string, out);
          };

          _proto.readTmplToken = function readTmplToken() {
            var out = "",
              chunkStart = this.state.pos,
              containsInvalid = false;

            for (;;) {
              if (this.state.pos >= this.input.length) {
                this.raise(this.state.start, "Unterminated template");
              }

              var ch = this.input.charCodeAt(this.state.pos);

              if (
                ch === 96 ||
                (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123)
              ) {
                if (
                  this.state.pos === this.state.start &&
                  this.match(types.template)
                ) {
                  if (ch === 36) {
                    this.state.pos += 2;
                    this.finishToken(types.dollarBraceL);
                    return;
                  } else {
                    ++this.state.pos;
                    this.finishToken(types.backQuote);
                    return;
                  }
                }

                out += this.input.slice(chunkStart, this.state.pos);
                this.finishToken(types.template, containsInvalid ? null : out);
                return;
              }

              if (ch === 92) {
                out += this.input.slice(chunkStart, this.state.pos);
                var escaped = this.readEscapedChar(true);

                if (escaped === null) {
                  containsInvalid = true;
                } else {
                  out += escaped;
                }

                chunkStart = this.state.pos;
              } else if (isNewLine(ch)) {
                out += this.input.slice(chunkStart, this.state.pos);
                ++this.state.pos;

                switch (ch) {
                  case 13:
                    if (this.input.charCodeAt(this.state.pos) === 10) {
                      ++this.state.pos;
                    }

                  case 10:
                    out += "\n";
                    break;

                  default:
                    out += String.fromCharCode(ch);
                    break;
                }

                ++this.state.curLine;
                this.state.lineStart = this.state.pos;
                chunkStart = this.state.pos;
              } else {
                ++this.state.pos;
              }
            }
          };

          _proto.readEscapedChar = function readEscapedChar(inTemplate) {
            var throwOnInvalid = !inTemplate;
            var ch = this.input.charCodeAt(++this.state.pos);
            ++this.state.pos;

            switch (ch) {
              case 110:
                return "\n";

              case 114:
                return "\r";

              case 120: {
                var code = this.readHexChar(2, throwOnInvalid);
                return code === null ? null : String.fromCharCode(code);
              }

              case 117: {
                var _code = this.readCodePoint(throwOnInvalid);

                return _code === null ? null : codePointToString(_code);
              }

              case 116:
                return "\t";

              case 98:
                return "\b";

              case 118:
                return "\x0B";

              case 102:
                return "\f";

              case 13:
                if (this.input.charCodeAt(this.state.pos) === 10) {
                  ++this.state.pos;
                }

              case 10:
                this.state.lineStart = this.state.pos;
                ++this.state.curLine;
                return "";

              default:
                if (ch >= 48 && ch <= 55) {
                  var codePos = this.state.pos - 1;
                  var octalStr = this.input
                    .substr(this.state.pos - 1, 3)
                    .match(/^[0-7]+/)[0];
                  var octal = parseInt(octalStr, 8);

                  if (octal > 255) {
                    octalStr = octalStr.slice(0, -1);
                    octal = parseInt(octalStr, 8);
                  }

                  if (octal > 0) {
                    if (inTemplate) {
                      this.state.invalidTemplateEscapePosition = codePos;
                      return null;
                    } else if (this.state.strict) {
                      this.raise(codePos, "Octal literal in strict mode");
                    } else if (!this.state.containsOctal) {
                      this.state.containsOctal = true;
                      this.state.octalPosition = codePos;
                    }
                  }

                  this.state.pos += octalStr.length - 1;
                  return String.fromCharCode(octal);
                }

                return String.fromCharCode(ch);
            }
          };

          _proto.readHexChar = function readHexChar(len, throwOnInvalid) {
            var codePos = this.state.pos;
            var n = this.readInt(16, len);

            if (n === null) {
              if (throwOnInvalid) {
                this.raise(codePos, "Bad character escape sequence");
              } else {
                this.state.pos = codePos - 1;
                this.state.invalidTemplateEscapePosition = codePos - 1;
              }
            }

            return n;
          };

          _proto.readWord1 = function readWord1() {
            this.state.containsEsc = false;
            var word = "",
              first = true,
              chunkStart = this.state.pos;

            while (this.state.pos < this.input.length) {
              var ch = this.fullCharCodeAtPos();

              if (isIdentifierChar(ch)) {
                this.state.pos += ch <= 0xffff ? 1 : 2;
              } else if (this.state.isIterator && ch === 64) {
                this.state.pos += 1;
              } else if (ch === 92) {
                this.state.containsEsc = true;
                word += this.input.slice(chunkStart, this.state.pos);
                var escStart = this.state.pos;

                if (this.input.charCodeAt(++this.state.pos) !== 117) {
                  this.raise(
                    this.state.pos,
                    "Expecting Unicode escape sequence \\uXXXX"
                  );
                }

                ++this.state.pos;
                var esc = this.readCodePoint(true);

                if (
                  !(first ? isIdentifierStart : isIdentifierChar)(esc, true)
                ) {
                  this.raise(escStart, "Invalid Unicode escape");
                }

                word += codePointToString(esc);
                chunkStart = this.state.pos;
              } else {
                break;
              }

              first = false;
            }

            return word + this.input.slice(chunkStart, this.state.pos);
          };

          _proto.isIterator = function isIterator(word) {
            return word === "@@iterator" || word === "@@asyncIterator";
          };

          _proto.readWord = function readWord() {
            var word = this.readWord1();
            var type = types.name;

            if (this.isKeyword(word)) {
              if (this.state.containsEsc) {
                this.raise(
                  this.state.pos,
                  "Escape sequence in keyword " + word
                );
              }

              type = keywords[word];
            }

            if (
              this.state.isIterator &&
              (!this.isIterator(word) || !this.state.inType)
            ) {
              this.raise(this.state.pos, "Invalid identifier " + word);
            }

            this.finishToken(type, word);
          };

          _proto.braceIsBlock = function braceIsBlock(prevType) {
            if (prevType === types.colon) {
              var parent = this.curContext();

              if (
                parent === types$1.braceStatement ||
                parent === types$1.braceExpression
              ) {
                return !parent.isExpr;
              }
            }

            if (prevType === types._return) {
              return lineBreak.test(
                this.input.slice(this.state.lastTokEnd, this.state.start)
              );
            }

            if (
              prevType === types._else ||
              prevType === types.semi ||
              prevType === types.eof ||
              prevType === types.parenR
            ) {
              return true;
            }

            if (prevType === types.braceL) {
              return this.curContext() === types$1.braceStatement;
            }

            if (prevType === types.relational) {
              return true;
            }

            return !this.state.exprAllowed;
          };

          _proto.updateContext = function updateContext(prevType) {
            var type = this.state.type;
            var update;

            if (
              type.keyword &&
              (prevType === types.dot || prevType === types.questionDot)
            ) {
              this.state.exprAllowed = false;
            } else if ((update = type.updateContext)) {
              update.call(this, prevType);
            } else {
              this.state.exprAllowed = type.beforeExpr;
            }
          };

          return Tokenizer;
        })(LocationParser);

        var UtilParser = (function(_Tokenizer) {
          _inheritsLoose(UtilParser, _Tokenizer);

          function UtilParser() {
            return _Tokenizer.apply(this, arguments) || this;
          }

          var _proto = UtilParser.prototype;

          _proto.addExtra = function addExtra(node, key, val) {
            if (!node) return;
            var extra = (node.extra = node.extra || {});
            extra[key] = val;
          };

          _proto.isRelational = function isRelational(op) {
            return this.match(types.relational) && this.state.value === op;
          };

          _proto.expectRelational = function expectRelational(op) {
            if (this.isRelational(op)) {
              this.next();
            } else {
              this.unexpected(null, types.relational);
            }
          };

          _proto.eatRelational = function eatRelational(op) {
            if (this.isRelational(op)) {
              this.next();
              return true;
            }

            return false;
          };

          _proto.isContextual = function isContextual(name) {
            return (
              this.match(types.name) &&
              this.state.value === name &&
              !this.state.containsEsc
            );
          };

          _proto.isLookaheadContextual = function isLookaheadContextual(name) {
            var l = this.lookahead();
            return l.type === types.name && l.value === name;
          };

          _proto.eatContextual = function eatContextual(name) {
            return this.isContextual(name) && this.eat(types.name);
          };

          _proto.expectContextual = function expectContextual(name, message) {
            if (!this.eatContextual(name)) this.unexpected(null, message);
          };

          _proto.canInsertSemicolon = function canInsertSemicolon() {
            return (
              this.match(types.eof) ||
              this.match(types.braceR) ||
              this.hasPrecedingLineBreak()
            );
          };

          _proto.hasPrecedingLineBreak = function hasPrecedingLineBreak() {
            return lineBreak.test(
              this.input.slice(this.state.lastTokEnd, this.state.start)
            );
          };

          _proto.isLineTerminator = function isLineTerminator() {
            return this.eat(types.semi) || this.canInsertSemicolon();
          };

          _proto.semicolon = function semicolon() {
            if (!this.isLineTerminator()) this.unexpected(null, types.semi);
          };

          _proto.expect = function expect(type, pos) {
            this.eat(type) || this.unexpected(pos, type);
          };

          _proto.unexpected = function unexpected(pos, messageOrType) {
            if (messageOrType === void 0) {
              messageOrType = "Unexpected token";
            }

            if (typeof messageOrType !== "string") {
              messageOrType =
                'Unexpected token, expected "' + messageOrType.label + '"';
            }

            throw this.raise(
              pos != null ? pos : this.state.start,
              messageOrType
            );
          };

          _proto.expectPlugin = function expectPlugin(name, pos) {
            if (!this.hasPlugin(name)) {
              throw this.raise(
                pos != null ? pos : this.state.start,
                "This experimental syntax requires enabling the parser plugin: '" +
                  name +
                  "'",
                {
                  missingPluginNames: [name]
                }
              );
            }

            return true;
          };

          _proto.expectOnePlugin = function expectOnePlugin(names, pos) {
            var _this = this;

            if (
              !names.some(function(n) {
                return _this.hasPlugin(n);
              })
            ) {
              throw this.raise(
                pos != null ? pos : this.state.start,
                "This experimental syntax requires enabling one of the following parser plugin(s): '" +
                  names.join(", ") +
                  "'",
                {
                  missingPluginNames: names
                }
              );
            }
          };

          return UtilParser;
        })(Tokenizer);

        var commentKeys = [
          "leadingComments",
          "trailingComments",
          "innerComments"
        ];

        var Node = (function() {
          function Node(parser, pos, loc) {
            this.type = "";
            this.start = pos;
            this.end = 0;
            this.loc = new SourceLocation(loc);
            if (parser && parser.options.ranges) this.range = [pos, 0];
            if (parser && parser.filename) this.loc.filename = parser.filename;
          }

          var _proto = Node.prototype;

          _proto.__clone = function __clone() {
            var _this = this;

            var node2 = new Node();
            Object.keys(this).forEach(function(key) {
              if (commentKeys.indexOf(key) < 0) {
                node2[key] = _this[key];
              }
            });
            return node2;
          };

          return Node;
        })();

        var NodeUtils = (function(_UtilParser) {
          _inheritsLoose(NodeUtils, _UtilParser);

          function NodeUtils() {
            return _UtilParser.apply(this, arguments) || this;
          }

          var _proto2 = NodeUtils.prototype;

          _proto2.startNode = function startNode() {
            return new Node(this, this.state.start, this.state.startLoc);
          };

          _proto2.startNodeAt = function startNodeAt(pos, loc) {
            return new Node(this, pos, loc);
          };

          _proto2.startNodeAtNode = function startNodeAtNode(type) {
            return this.startNodeAt(type.start, type.loc.start);
          };

          _proto2.finishNode = function finishNode(node, type) {
            return this.finishNodeAt(
              node,
              type,
              this.state.lastTokEnd,
              this.state.lastTokEndLoc
            );
          };

          _proto2.finishNodeAt = function finishNodeAt(node, type, pos, loc) {
            node.type = type;
            node.end = pos;
            node.loc.end = loc;
            if (this.options.ranges) node.range[1] = pos;
            this.processComment(node);
            return node;
          };

          _proto2.resetStartLocationFromNode = function resetStartLocationFromNode(
            node,
            locationNode
          ) {
            node.start = locationNode.start;
            node.loc.start = locationNode.loc.start;
            if (this.options.ranges) node.range[0] = locationNode.range[0];
          };

          return NodeUtils;
        })(UtilParser);

        var LValParser = (function(_NodeUtils) {
          _inheritsLoose(LValParser, _NodeUtils);

          function LValParser() {
            return _NodeUtils.apply(this, arguments) || this;
          }

          var _proto = LValParser.prototype;

          _proto.toAssignable = function toAssignable(
            node,
            isBinding,
            contextDescription
          ) {
            if (node) {
              switch (node.type) {
                case "Identifier":
                case "ObjectPattern":
                case "ArrayPattern":
                case "AssignmentPattern":
                  break;

                case "ObjectExpression":
                  node.type = "ObjectPattern";

                  for (var index = 0; index < node.properties.length; index++) {
                    var prop = node.properties[index];
                    var isLast = index === node.properties.length - 1;
                    this.toAssignableObjectExpressionProp(
                      prop,
                      isBinding,
                      isLast
                    );
                  }

                  break;

                case "ObjectProperty":
                  this.toAssignable(node.value, isBinding, contextDescription);
                  break;

                case "SpreadElement": {
                  this.checkToRestConversion(node);
                  node.type = "RestElement";
                  var arg = node.argument;
                  this.toAssignable(arg, isBinding, contextDescription);
                  break;
                }

                case "ArrayExpression":
                  node.type = "ArrayPattern";
                  this.toAssignableList(
                    node.elements,
                    isBinding,
                    contextDescription
                  );
                  break;

                case "AssignmentExpression":
                  if (node.operator === "=") {
                    node.type = "AssignmentPattern";
                    delete node.operator;
                  } else {
                    this.raise(
                      node.left.end,
                      "Only '=' operator can be used for specifying default value."
                    );
                  }

                  break;

                case "MemberExpression":
                  if (!isBinding) break;

                default: {
                  var message =
                    "Invalid left-hand side" +
                    (contextDescription
                      ? " in " + contextDescription
                      : "expression");
                  this.raise(node.start, message);
                }
              }
            }

            return node;
          };

          _proto.toAssignableObjectExpressionProp = function toAssignableObjectExpressionProp(
            prop,
            isBinding,
            isLast
          ) {
            if (prop.type === "ObjectMethod") {
              var error =
                prop.kind === "get" || prop.kind === "set"
                  ? "Object pattern can't contain getter or setter"
                  : "Object pattern can't contain methods";
              this.raise(prop.key.start, error);
            } else if (prop.type === "SpreadElement" && !isLast) {
              this.raise(
                prop.start,
                "The rest element has to be the last element when destructuring"
              );
            } else {
              this.toAssignable(
                prop,
                isBinding,
                "object destructuring pattern"
              );
            }
          };

          _proto.toAssignableList = function toAssignableList(
            exprList,
            isBinding,
            contextDescription
          ) {
            var end = exprList.length;

            if (end) {
              var last = exprList[end - 1];

              if (last && last.type === "RestElement") {
                --end;
              } else if (last && last.type === "SpreadElement") {
                last.type = "RestElement";
                var arg = last.argument;
                this.toAssignable(arg, isBinding, contextDescription);

                if (
                  [
                    "Identifier",
                    "MemberExpression",
                    "ArrayPattern",
                    "ObjectPattern"
                  ].indexOf(arg.type) === -1
                ) {
                  this.unexpected(arg.start);
                }

                --end;
              }
            }

            for (var i = 0; i < end; i++) {
              var elt = exprList[i];

              if (elt && elt.type === "SpreadElement") {
                this.raise(
                  elt.start,
                  "The rest element has to be the last element when destructuring"
                );
              }

              if (elt) this.toAssignable(elt, isBinding, contextDescription);
            }

            return exprList;
          };

          _proto.toReferencedList = function toReferencedList(exprList) {
            return exprList;
          };

          _proto.parseSpread = function parseSpread(
            refShorthandDefaultPos,
            refNeedsArrowPos
          ) {
            var node = this.startNode();
            this.next();
            node.argument = this.parseMaybeAssign(
              false,
              refShorthandDefaultPos,
              undefined,
              refNeedsArrowPos
            );
            return this.finishNode(node, "SpreadElement");
          };

          _proto.parseRest = function parseRest() {
            var node = this.startNode();
            this.next();
            node.argument = this.parseBindingAtom();
            return this.finishNode(node, "RestElement");
          };

          _proto.shouldAllowYieldIdentifier = function shouldAllowYieldIdentifier() {
            return (
              this.match(types._yield) &&
              !this.state.strict &&
              !this.state.inGenerator
            );
          };

          _proto.parseBindingIdentifier = function parseBindingIdentifier() {
            return this.parseIdentifier(this.shouldAllowYieldIdentifier());
          };

          _proto.parseBindingAtom = function parseBindingAtom() {
            switch (this.state.type) {
              case types._yield:
              case types.name:
                return this.parseBindingIdentifier();

              case types.bracketL: {
                var node = this.startNode();
                this.next();
                node.elements = this.parseBindingList(types.bracketR, true);
                return this.finishNode(node, "ArrayPattern");
              }

              case types.braceL:
                return this.parseObj(true);

              default:
                throw this.unexpected();
            }
          };

          _proto.parseBindingList = function parseBindingList(
            close,
            allowEmpty,
            allowModifiers
          ) {
            var elts = [];
            var first = true;

            while (!this.eat(close)) {
              if (first) {
                first = false;
              } else {
                this.expect(types.comma);
              }

              if (allowEmpty && this.match(types.comma)) {
                elts.push(null);
              } else if (this.eat(close)) {
                break;
              } else if (this.match(types.ellipsis)) {
                elts.push(this.parseAssignableListItemTypes(this.parseRest()));
                this.expect(close);
                break;
              } else {
                var decorators = [];

                if (this.match(types.at) && this.hasPlugin("decorators2")) {
                  this.raise(
                    this.state.start,
                    "Stage 2 decorators cannot be used to decorate parameters"
                  );
                }

                while (this.match(types.at)) {
                  decorators.push(this.parseDecorator());
                }

                elts.push(
                  this.parseAssignableListItem(allowModifiers, decorators)
                );
              }
            }

            return elts;
          };

          _proto.parseAssignableListItem = function parseAssignableListItem(
            allowModifiers,
            decorators
          ) {
            var left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left);
            var elt = this.parseMaybeDefault(left.start, left.loc.start, left);

            if (decorators.length) {
              left.decorators = decorators;
            }

            return elt;
          };

          _proto.parseAssignableListItemTypes = function parseAssignableListItemTypes(
            param
          ) {
            return param;
          };

          _proto.parseMaybeDefault = function parseMaybeDefault(
            startPos,
            startLoc,
            left
          ) {
            startLoc = startLoc || this.state.startLoc;
            startPos = startPos || this.state.start;
            left = left || this.parseBindingAtom();
            if (!this.eat(types.eq)) return left;
            var node = this.startNodeAt(startPos, startLoc);
            node.left = left;
            node.right = this.parseMaybeAssign();
            return this.finishNode(node, "AssignmentPattern");
          };

          _proto.checkLVal = function checkLVal(
            expr,
            isBinding,
            checkClashes,
            contextDescription
          ) {
            switch (expr.type) {
              case "Identifier":
                this.checkReservedWord(expr.name, expr.start, false, true);

                if (checkClashes) {
                  var _key = "_" + expr.name;

                  if (checkClashes[_key]) {
                    this.raise(
                      expr.start,
                      "Argument name clash in strict mode"
                    );
                  } else {
                    checkClashes[_key] = true;
                  }
                }

                break;

              case "MemberExpression":
                if (isBinding)
                  this.raise(expr.start, "Binding member expression");
                break;

              case "ObjectPattern":
                for (
                  var _i2 = 0, _expr$properties2 = expr.properties;
                  _i2 < _expr$properties2.length;
                  _i2++
                ) {
                  var prop = _expr$properties2[_i2];
                  if (prop.type === "ObjectProperty") prop = prop.value;
                  this.checkLVal(
                    prop,
                    isBinding,
                    checkClashes,
                    "object destructuring pattern"
                  );
                }

                break;

              case "ArrayPattern":
                for (
                  var _i4 = 0, _expr$elements2 = expr.elements;
                  _i4 < _expr$elements2.length;
                  _i4++
                ) {
                  var elem = _expr$elements2[_i4];

                  if (elem) {
                    this.checkLVal(
                      elem,
                      isBinding,
                      checkClashes,
                      "array destructuring pattern"
                    );
                  }
                }

                break;

              case "AssignmentPattern":
                this.checkLVal(
                  expr.left,
                  isBinding,
                  checkClashes,
                  "assignment pattern"
                );
                break;

              case "RestElement":
                this.checkLVal(
                  expr.argument,
                  isBinding,
                  checkClashes,
                  "rest element"
                );
                break;

              default: {
                var message =
                  (isBinding ? "Binding invalid" : "Invalid") +
                  " left-hand side" +
                  (contextDescription
                    ? " in " + contextDescription
                    : "expression");
                this.raise(expr.start, message);
              }
            }
          };

          _proto.checkToRestConversion = function checkToRestConversion(node) {
            var validArgumentTypes = ["Identifier", "MemberExpression"];

            if (validArgumentTypes.indexOf(node.argument.type) !== -1) {
              return;
            }

            this.raise(node.argument.start, "Invalid rest operator's argument");
          };

          return LValParser;
        })(NodeUtils);

        var ExpressionParser = (function(_LValParser) {
          _inheritsLoose(ExpressionParser, _LValParser);

          function ExpressionParser() {
            return _LValParser.apply(this, arguments) || this;
          }

          var _proto = ExpressionParser.prototype;

          _proto.checkPropClash = function checkPropClash(prop, propHash) {
            if (prop.computed || prop.kind) return;
            var key = prop.key;
            var name = key.type === "Identifier" ? key.name : String(key.value);

            if (name === "__proto__") {
              if (propHash.proto) {
                this.raise(key.start, "Redefinition of __proto__ property");
              }

              propHash.proto = true;
            }
          };

          _proto.getExpression = function getExpression() {
            this.nextToken();
            var expr = this.parseExpression();

            if (!this.match(types.eof)) {
              this.unexpected();
            }

            expr.comments = this.state.comments;
            return expr;
          };

          _proto.parseExpression = function parseExpression(
            noIn,
            refShorthandDefaultPos
          ) {
            var startPos = this.state.start;
            var startLoc = this.state.startLoc;
            var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);

            if (this.match(types.comma)) {
              var _node = this.startNodeAt(startPos, startLoc);

              _node.expressions = [expr];

              while (this.eat(types.comma)) {
                _node.expressions.push(
                  this.parseMaybeAssign(noIn, refShorthandDefaultPos)
                );
              }

              this.toReferencedList(_node.expressions);
              return this.finishNode(_node, "SequenceExpression");
            }

            return expr;
          };

          _proto.parseMaybeAssign = function parseMaybeAssign(
            noIn,
            refShorthandDefaultPos,
            afterLeftParse,
            refNeedsArrowPos
          ) {
            var startPos = this.state.start;
            var startLoc = this.state.startLoc;

            if (this.match(types._yield) && this.state.inGenerator) {
              var _left = this.parseYield();

              if (afterLeftParse) {
                _left = afterLeftParse.call(this, _left, startPos, startLoc);
              }

              return _left;
            }

            var failOnShorthandAssign;

            if (refShorthandDefaultPos) {
              failOnShorthandAssign = false;
            } else {
              refShorthandDefaultPos = {
                start: 0
              };
              failOnShorthandAssign = true;
            }

            if (
              this.match(types.parenL) ||
              this.match(types.name) ||
              this.match(types._yield)
            ) {
              this.state.potentialArrowAt = this.state.start;
            }

            var left = this.parseMaybeConditional(
              noIn,
              refShorthandDefaultPos,
              refNeedsArrowPos
            );

            if (afterLeftParse) {
              left = afterLeftParse.call(this, left, startPos, startLoc);
            }

            if (this.state.type.isAssign) {
              var _node2 = this.startNodeAt(startPos, startLoc);

              var operator = this.state.value;
              _node2.operator = operator;

              if (operator === "??=") {
                this.expectPlugin("nullishCoalescingOperator");
                this.expectPlugin("logicalAssignment");
              }

              if (operator === "||=" || operator === "&&=") {
                this.expectPlugin("logicalAssignment");
              }

              _node2.left = this.match(types.eq)
                ? this.toAssignable(left, undefined, "assignment expression")
                : left;
              refShorthandDefaultPos.start = 0;
              this.checkLVal(
                left,
                undefined,
                undefined,
                "assignment expression"
              );

              if (left.extra && left.extra.parenthesized) {
                var errorMsg;

                if (left.type === "ObjectPattern") {
                  errorMsg = "`({a}) = 0` use `({a} = 0)`";
                } else if (left.type === "ArrayPattern") {
                  errorMsg = "`([a]) = 0` use `([a] = 0)`";
                }

                if (errorMsg) {
                  this.raise(
                    left.start,
                    "You're trying to assign to a parenthesized expression, eg. instead of " +
                      errorMsg
                  );
                }
              }

              this.next();
              _node2.right = this.parseMaybeAssign(noIn);
              return this.finishNode(_node2, "AssignmentExpression");
            } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
              this.unexpected(refShorthandDefaultPos.start);
            }

            return left;
          };

          _proto.parseMaybeConditional = function parseMaybeConditional(
            noIn,
            refShorthandDefaultPos,
            refNeedsArrowPos
          ) {
            var startPos = this.state.start;
            var startLoc = this.state.startLoc;
            var potentialArrowAt = this.state.potentialArrowAt;
            var expr = this.parseExprOps(noIn, refShorthandDefaultPos);

            if (
              expr.type === "ArrowFunctionExpression" &&
              expr.start === potentialArrowAt
            ) {
              return expr;
            }

            if (refShorthandDefaultPos && refShorthandDefaultPos.start)
              return expr;
            return this.parseConditional(
              expr,
              noIn,
              startPos,
              startLoc,
              refNeedsArrowPos
            );
          };

          _proto.parseConditional = function parseConditional(
            expr,
            noIn,
            startPos,
            startLoc,
            refNeedsArrowPos
          ) {
            if (this.eat(types.question)) {
              var _node3 = this.startNodeAt(startPos, startLoc);

              _node3.test = expr;
              _node3.consequent = this.parseMaybeAssign();
              this.expect(types.colon);
              _node3.alternate = this.parseMaybeAssign(noIn);
              return this.finishNode(_node3, "ConditionalExpression");
            }

            return expr;
          };

          _proto.parseExprOps = function parseExprOps(
            noIn,
            refShorthandDefaultPos
          ) {
            var startPos = this.state.start;
            var startLoc = this.state.startLoc;
            var potentialArrowAt = this.state.potentialArrowAt;
            var expr = this.parseMaybeUnary(refShorthandDefaultPos);

            if (
              expr.type === "ArrowFunctionExpression" &&
              expr.start === potentialArrowAt
            ) {
              return expr;
            }

            if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
              return expr;
            }

            return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
          };

          _proto.parseExprOp = function parseExprOp(
            left,
            leftStartPos,
            leftStartLoc,
            minPrec,
            noIn
          ) {
            var prec = this.state.type.binop;

            if (prec != null && (!noIn || !this.match(types._in))) {
              if (prec > minPrec) {
                var _node4 = this.startNodeAt(leftStartPos, leftStartLoc);

                var operator = this.state.value;
                _node4.left = left;
                _node4.operator = operator;

                if (
                  operator === "**" &&
                  left.type === "UnaryExpression" &&
                  left.extra &&
                  !left.extra.parenthesizedArgument &&
                  !left.extra.parenthesized
                ) {
                  this.raise(
                    left.argument.start,
                    "Illegal expression. Wrap left hand side or entire exponentiation in parentheses."
                  );
                }

                var op = this.state.type;

                if (op === types.nullishCoalescing) {
                  this.expectPlugin("nullishCoalescingOperator");
                } else if (op === types.pipeline) {
                  this.expectPlugin("pipelineOperator");
                }

                this.next();
                var startPos = this.state.start;
                var startLoc = this.state.startLoc;

                if (op === types.pipeline) {
                  this.state.potentialArrowAt = startPos;
                }

                _node4.right = this.parseExprOp(
                  this.parseMaybeUnary(),
                  startPos,
                  startLoc,
                  op.rightAssociative ? prec - 1 : prec,
                  noIn
                );
                this.finishNode(
                  _node4,
                  op === types.logicalOR ||
                  op === types.logicalAND ||
                  op === types.nullishCoalescing
                    ? "LogicalExpression"
                    : "BinaryExpression"
                );
                return this.parseExprOp(
                  _node4,
                  leftStartPos,
                  leftStartLoc,
                  minPrec,
                  noIn
                );
              }
            }

            return left;
          };

          _proto.parseMaybeUnary = function parseMaybeUnary(
            refShorthandDefaultPos
          ) {
            if (this.state.type.prefix) {
              var _node5 = this.startNode();

              var update = this.match(types.incDec);
              _node5.operator = this.state.value;
              _node5.prefix = true;

              if (_node5.operator === "throw") {
                this.expectPlugin("throwExpressions");
              }

              this.next();
              var argType = this.state.type;
              _node5.argument = this.parseMaybeUnary();
              this.addExtra(
                _node5,
                "parenthesizedArgument",
                argType === types.parenL &&
                  (!_node5.argument.extra ||
                    !_node5.argument.extra.parenthesized)
              );

              if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
                this.unexpected(refShorthandDefaultPos.start);
              }

              if (update) {
                this.checkLVal(
                  _node5.argument,
                  undefined,
                  undefined,
                  "prefix operation"
                );
              } else if (this.state.strict && _node5.operator === "delete") {
                var arg = _node5.argument;

                if (arg.type === "Identifier") {
                  this.raise(
                    _node5.start,
                    "Deleting local variable in strict mode"
                  );
                } else if (
                  arg.type === "MemberExpression" &&
                  arg.property.type === "PrivateName"
                ) {
                  this.raise(
                    _node5.start,
                    "Deleting a private field is not allowed"
                  );
                }
              }

              return this.finishNode(
                _node5,
                update ? "UpdateExpression" : "UnaryExpression"
              );
            }

            var startPos = this.state.start;
            var startLoc = this.state.startLoc;
            var expr = this.parseExprSubscripts(refShorthandDefaultPos);
            if (refShorthandDefaultPos && refShorthandDefaultPos.start)
              return expr;

            while (this.state.type.postfix && !this.canInsertSemicolon()) {
              var _node6 = this.startNodeAt(startPos, startLoc);

              _node6.operator = this.state.value;
              _node6.prefix = false;
              _node6.argument = expr;
              this.checkLVal(expr, undefined, undefined, "postfix operation");
              this.next();
              expr = this.finishNode(_node6, "UpdateExpression");
            }

            return expr;
          };

          _proto.parseExprSubscripts = function parseExprSubscripts(
            refShorthandDefaultPos
          ) {
            var startPos = this.state.start;
            var startLoc = this.state.startLoc;
            var potentialArrowAt = this.state.potentialArrowAt;
            var expr = this.parseExprAtom(refShorthandDefaultPos);

            if (
              expr.type === "ArrowFunctionExpression" &&
              expr.start === potentialArrowAt
            ) {
              return expr;
            }

            if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
              return expr;
            }

            return this.parseSubscripts(expr, startPos, startLoc);
          };

          _proto.parseSubscripts = function parseSubscripts(
            base,
            startPos,
            startLoc,
            noCalls
          ) {
            var state = {
              optionalChainMember: false,
              stop: false
            };

            do {
              base = this.parseSubscript(
                base,
                startPos,
                startLoc,
                noCalls,
                state
              );
            } while (!state.stop);

            return base;
          };

          _proto.parseSubscript = function parseSubscript(
            base,
            startPos,
            startLoc,
            noCalls,
            state
          ) {
            if (!noCalls && this.eat(types.doubleColon)) {
              var _node7 = this.startNodeAt(startPos, startLoc);

              _node7.object = base;
              _node7.callee = this.parseNoCallExpr();
              state.stop = true;
              return this.parseSubscripts(
                this.finishNode(_node7, "BindExpression"),
                startPos,
                startLoc,
                noCalls
              );
            } else if (this.match(types.questionDot)) {
              this.expectPlugin("optionalChaining");
              state.optionalChainMember = true;

              if (noCalls && this.lookahead().type == types.parenL) {
                state.stop = true;
                return base;
              }

              this.next();

              var _node8 = this.startNodeAt(startPos, startLoc);

              if (this.eat(types.bracketL)) {
                _node8.object = base;
                _node8.property = this.parseExpression();
                _node8.computed = true;
                _node8.optional = true;
                this.expect(types.bracketR);
                return this.finishNode(_node8, "OptionalMemberExpression");
              } else if (this.eat(types.parenL)) {
                var possibleAsync = this.atPossibleAsync(base);
                _node8.callee = base;
                _node8.arguments = this.parseCallExpressionArguments(
                  types.parenR,
                  possibleAsync
                );
                _node8.optional = true;
                return this.finishNode(_node8, "OptionalCallExpression");
              } else {
                _node8.object = base;
                _node8.property = this.parseIdentifier(true);
                _node8.computed = false;
                _node8.optional = true;
                return this.finishNode(_node8, "OptionalMemberExpression");
              }
            } else if (this.eat(types.dot)) {
              var _node9 = this.startNodeAt(startPos, startLoc);

              _node9.object = base;
              _node9.property = this.parseMaybePrivateName();
              _node9.computed = false;

              if (state.optionalChainMember) {
                _node9.optional = false;
                return this.finishNode(_node9, "OptionalMemberExpression");
              }

              return this.finishNode(_node9, "MemberExpression");
            } else if (this.eat(types.bracketL)) {
              var _node10 = this.startNodeAt(startPos, startLoc);

              _node10.object = base;
              _node10.property = this.parseExpression();
              _node10.computed = true;
              this.expect(types.bracketR);

              if (state.optionalChainMember) {
                _node10.optional = false;
                return this.finishNode(_node10, "OptionalMemberExpression");
              }

              return this.finishNode(_node10, "MemberExpression");
            } else if (!noCalls && this.match(types.parenL)) {
              var _possibleAsync = this.atPossibleAsync(base);

              this.next();

              var _node11 = this.startNodeAt(startPos, startLoc);

              _node11.callee = base;
              var refTrailingCommaPos = {
                start: -1
              };
              _node11.arguments = this.parseCallExpressionArguments(
                types.parenR,
                _possibleAsync,
                refTrailingCommaPos
              );

              if (!state.optionalChainMember) {
                this.finishCallExpression(_node11);
              } else {
                this.finishOptionalCallExpression(_node11);
              }

              if (_possibleAsync && this.shouldParseAsyncArrow()) {
                state.stop = true;

                if (refTrailingCommaPos.start > -1) {
                  this.raise(
                    refTrailingCommaPos.start,
                    "A trailing comma is not permitted after the rest element"
                  );
                }

                return this.parseAsyncArrowFromCallExpression(
                  this.startNodeAt(startPos, startLoc),
                  _node11
                );
              } else {
                this.toReferencedList(_node11.arguments);
              }

              return _node11;
            } else if (this.match(types.backQuote)) {
              var _node12 = this.startNodeAt(startPos, startLoc);

              _node12.tag = base;
              _node12.quasi = this.parseTemplate(true);

              if (state.optionalChainMember) {
                this.raise(
                  startPos,
                  "Tagged Template Literals are not allowed in optionalChain"
                );
              }

              return this.finishNode(_node12, "TaggedTemplateExpression");
            } else {
              state.stop = true;
              return base;
            }
          };

          _proto.atPossibleAsync = function atPossibleAsync(base) {
            return (
              !this.state.containsEsc &&
              this.state.potentialArrowAt === base.start &&
              base.type === "Identifier" &&
              base.name === "async" &&
              !this.canInsertSemicolon()
            );
          };

          _proto.finishCallExpression = function finishCallExpression(node) {
            if (node.callee.type === "Import") {
              if (node.arguments.length !== 1) {
                this.raise(
                  node.start,
                  "import() requires exactly one argument"
                );
              }

              var importArg = node.arguments[0];

              if (importArg && importArg.type === "SpreadElement") {
                this.raise(importArg.start, "... is not allowed in import()");
              }
            }

            return this.finishNode(node, "CallExpression");
          };

          _proto.finishOptionalCallExpression = function finishOptionalCallExpression(
            node
          ) {
            if (node.callee.type === "Import") {
              if (node.arguments.length !== 1) {
                this.raise(
                  node.start,
                  "import() requires exactly one argument"
                );
              }

              var importArg = node.arguments[0];

              if (importArg && importArg.type === "SpreadElement") {
                this.raise(importArg.start, "... is not allowed in import()");
              }
            }

            return this.finishNode(node, "OptionalCallExpression");
          };

          _proto.parseCallExpressionArguments = function parseCallExpressionArguments(
            close,
            possibleAsyncArrow,
            refTrailingCommaPos
          ) {
            var elts = [];
            var innerParenStart;
            var first = true;

            while (!this.eat(close)) {
              if (first) {
                first = false;
              } else {
                this.expect(types.comma);
                if (this.eat(close)) break;
              }

              if (this.match(types.parenL) && !innerParenStart) {
                innerParenStart = this.state.start;
              }

              elts.push(
                this.parseExprListItem(
                  false,
                  possibleAsyncArrow
                    ? {
                        start: 0
                      }
                    : undefined,
                  possibleAsyncArrow
                    ? {
                        start: 0
                      }
                    : undefined,
                  possibleAsyncArrow ? refTrailingCommaPos : undefined
                )
              );
            }

            if (
              possibleAsyncArrow &&
              innerParenStart &&
              this.shouldParseAsyncArrow()
            ) {
              this.unexpected();
            }

            return elts;
          };

          _proto.shouldParseAsyncArrow = function shouldParseAsyncArrow() {
            return this.match(types.arrow);
          };

          _proto.parseAsyncArrowFromCallExpression = function parseAsyncArrowFromCallExpression(
            node,
            call
          ) {
            var oldYield = this.state.yieldInPossibleArrowParameters;
            this.state.yieldInPossibleArrowParameters = null;
            this.expect(types.arrow);
            this.parseArrowExpression(node, call.arguments, true);
            this.state.yieldInPossibleArrowParameters = oldYield;
            return node;
          };

          _proto.parseNoCallExpr = function parseNoCallExpr() {
            var startPos = this.state.start;
            var startLoc = this.state.startLoc;
            return this.parseSubscripts(
              this.parseExprAtom(),
              startPos,
              startLoc,
              true
            );
          };

          _proto.parseExprAtom = function parseExprAtom(
            refShorthandDefaultPos
          ) {
            var canBeArrow = this.state.potentialArrowAt === this.state.start;
            var node;

            switch (this.state.type) {
              case types._super:
                if (
                  !this.state.inMethod &&
                  !this.state.inClassProperty &&
                  !this.options.allowSuperOutsideMethod
                ) {
                  this.raise(
                    this.state.start,
                    "super is only allowed in object methods and classes"
                  );
                }

                node = this.startNode();
                this.next();

                if (
                  !this.match(types.parenL) &&
                  !this.match(types.bracketL) &&
                  !this.match(types.dot)
                ) {
                  this.unexpected();
                }

                if (
                  this.match(types.parenL) &&
                  this.state.inMethod !== "constructor" &&
                  !this.options.allowSuperOutsideMethod
                ) {
                  this.raise(
                    node.start,
                    "super() is only valid inside a class constructor. " +
                      "Make sure the method name is spelled exactly as 'constructor'."
                  );
                }

                return this.finishNode(node, "Super");

              case types._import:
                if (this.lookahead().type === types.dot) {
                  return this.parseImportMetaProperty();
                }

                this.expectPlugin("dynamicImport");
                node = this.startNode();
                this.next();

                if (!this.match(types.parenL)) {
                  this.unexpected(null, types.parenL);
                }

                return this.finishNode(node, "Import");

              case types._this:
                node = this.startNode();
                this.next();
                return this.finishNode(node, "ThisExpression");

              case types._yield:
                if (this.state.inGenerator) this.unexpected();

              case types.name: {
                node = this.startNode();
                var allowAwait =
                  this.state.value === "await" &&
                  (this.state.inAsync ||
                    (!this.state.inFunction &&
                      this.options.allowAwaitOutsideFunction));
                var containsEsc = this.state.containsEsc;
                var allowYield = this.shouldAllowYieldIdentifier();
                var id = this.parseIdentifier(allowAwait || allowYield);

                if (id.name === "await") {
                  if (
                    this.state.inAsync ||
                    this.inModule ||
                    (!this.state.inFunction &&
                      this.options.allowAwaitOutsideFunction)
                  ) {
                    return this.parseAwait(node);
                  }
                } else if (
                  !containsEsc &&
                  id.name === "async" &&
                  this.match(types._function) &&
                  !this.canInsertSemicolon()
                ) {
                  this.next();
                  return this.parseFunction(node, false, false, true);
                } else if (
                  canBeArrow &&
                  id.name === "async" &&
                  this.match(types.name)
                ) {
                  var oldYield = this.state.yieldInPossibleArrowParameters;
                  this.state.yieldInPossibleArrowParameters = null;
                  var params = [this.parseIdentifier()];
                  this.expect(types.arrow);
                  this.parseArrowExpression(node, params, true);
                  this.state.yieldInPossibleArrowParameters = oldYield;
                  return node;
                }

                if (
                  canBeArrow &&
                  !this.canInsertSemicolon() &&
                  this.eat(types.arrow)
                ) {
                  var _oldYield = this.state.yieldInPossibleArrowParameters;
                  this.state.yieldInPossibleArrowParameters = null;
                  this.parseArrowExpression(node, [id]);
                  this.state.yieldInPossibleArrowParameters = _oldYield;
                  return node;
                }

                return id;
              }

              case types._do: {
                this.expectPlugin("doExpressions");

                var _node13 = this.startNode();

                this.next();
                var oldInFunction = this.state.inFunction;
                var oldLabels = this.state.labels;
                this.state.labels = [];
                this.state.inFunction = false;
                _node13.body = this.parseBlock(false);
                this.state.inFunction = oldInFunction;
                this.state.labels = oldLabels;
                return this.finishNode(_node13, "DoExpression");
              }

              case types.regexp: {
                var value = this.state.value;
                node = this.parseLiteral(value.value, "RegExpLiteral");
                node.pattern = value.pattern;
                node.flags = value.flags;
                return node;
              }

              case types.num:
                return this.parseLiteral(this.state.value, "NumericLiteral");

              case types.bigint:
                return this.parseLiteral(this.state.value, "BigIntLiteral");

              case types.string:
                return this.parseLiteral(this.state.value, "StringLiteral");

              case types._null:
                node = this.startNode();
                this.next();
                return this.finishNode(node, "NullLiteral");

              case types._true:
              case types._false:
                return this.parseBooleanLiteral();

              case types.parenL:
                return this.parseParenAndDistinguishExpression(canBeArrow);

              case types.bracketL:
                node = this.startNode();
                this.next();
                node.elements = this.parseExprList(
                  types.bracketR,
                  true,
                  refShorthandDefaultPos
                );
                this.toReferencedList(node.elements);
                return this.finishNode(node, "ArrayExpression");

              case types.braceL:
                return this.parseObj(false, refShorthandDefaultPos);

              case types._function:
                return this.parseFunctionExpression();

              case types.at:
                this.parseDecorators();

              case types._class:
                node = this.startNode();
                this.takeDecorators(node);
                return this.parseClass(node, false);

              case types._new:
                return this.parseNew();

              case types.backQuote:
                return this.parseTemplate(false);

              case types.doubleColon: {
                node = this.startNode();
                this.next();
                node.object = null;
                var callee = (node.callee = this.parseNoCallExpr());

                if (callee.type === "MemberExpression") {
                  return this.finishNode(node, "BindExpression");
                } else {
                  throw this.raise(
                    callee.start,
                    "Binding should be performed on object property."
                  );
                }
              }

              default:
                throw this.unexpected();
            }
          };

          _proto.parseBooleanLiteral = function parseBooleanLiteral() {
            var node = this.startNode();
            node.value = this.match(types._true);
            this.next();
            return this.finishNode(node, "BooleanLiteral");
          };

          _proto.parseMaybePrivateName = function parseMaybePrivateName() {
            var isPrivate = this.match(types.hash);

            if (isPrivate) {
              this.expectOnePlugin([
                "classPrivateProperties",
                "classPrivateMethods"
              ]);

              var _node14 = this.startNode();

              this.next();
              _node14.id = this.parseIdentifier(true);
              return this.finishNode(_node14, "PrivateName");
            } else {
              return this.parseIdentifier(true);
            }
          };

          _proto.parseFunctionExpression = function parseFunctionExpression() {
            var node = this.startNode();
            var meta = this.parseIdentifier(true);

            if (this.state.inGenerator && this.eat(types.dot)) {
              return this.parseMetaProperty(node, meta, "sent");
            }

            return this.parseFunction(node, false);
          };

          _proto.parseMetaProperty = function parseMetaProperty(
            node,
            meta,
            propertyName
          ) {
            node.meta = meta;

            if (meta.name === "function" && propertyName === "sent") {
              if (this.isContextual(propertyName)) {
                this.expectPlugin("functionSent");
              } else if (!this.hasPlugin("functionSent")) {
                this.unexpected();
              }
            }

            var containsEsc = this.state.containsEsc;
            node.property = this.parseIdentifier(true);

            if (node.property.name !== propertyName || containsEsc) {
              this.raise(
                node.property.start,
                "The only valid meta property for " +
                  meta.name +
                  " is " +
                  meta.name +
                  "." +
                  propertyName
              );
            }

            return this.finishNode(node, "MetaProperty");
          };

          _proto.parseImportMetaProperty = function parseImportMetaProperty() {
            var node = this.startNode();
            var id = this.parseIdentifier(true);
            this.expect(types.dot);

            if (id.name === "import") {
              if (this.isContextual("meta")) {
                this.expectPlugin("importMeta");
              } else if (!this.hasPlugin("importMeta")) {
                this.raise(
                  id.start,
                  "Dynamic imports require a parameter: import('a.js').then"
                );
              }
            }

            if (!this.inModule) {
              this.raise(
                id.start,
                "import.meta may appear only with 'sourceType: \"module\"'",
                {
                  code: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
                }
              );
            }

            this.sawUnambiguousESM = true;
            return this.parseMetaProperty(node, id, "meta");
          };

          _proto.parseLiteral = function parseLiteral(
            value,
            type,
            startPos,
            startLoc
          ) {
            startPos = startPos || this.state.start;
            startLoc = startLoc || this.state.startLoc;
            var node = this.startNodeAt(startPos, startLoc);
            this.addExtra(node, "rawValue", value);
            this.addExtra(
              node,
              "raw",
              this.input.slice(startPos, this.state.end)
            );
            node.value = value;
            this.next();
            return this.finishNode(node, type);
          };

          _proto.parseParenExpression = function parseParenExpression() {
            this.expect(types.parenL);
            var val = this.parseExpression();
            this.expect(types.parenR);
            return val;
          };

          _proto.parseParenAndDistinguishExpression = function parseParenAndDistinguishExpression(
            canBeArrow
          ) {
            var startPos = this.state.start;
            var startLoc = this.state.startLoc;
            var val;
            this.expect(types.parenL);
            var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            var oldYield = this.state.yieldInPossibleArrowParameters;
            this.state.maybeInArrowParameters = true;
            this.state.yieldInPossibleArrowParameters = null;
            var innerStartPos = this.state.start;
            var innerStartLoc = this.state.startLoc;
            var exprList = [];
            var refShorthandDefaultPos = {
              start: 0
            };
            var refNeedsArrowPos = {
              start: 0
            };
            var first = true;
            var spreadStart;
            var optionalCommaStart;

            while (!this.match(types.parenR)) {
              if (first) {
                first = false;
              } else {
                this.expect(types.comma, refNeedsArrowPos.start || null);

                if (this.match(types.parenR)) {
                  optionalCommaStart = this.state.start;
                  break;
                }
              }

              if (this.match(types.ellipsis)) {
                var spreadNodeStartPos = this.state.start;
                var spreadNodeStartLoc = this.state.startLoc;
                spreadStart = this.state.start;
                exprList.push(
                  this.parseParenItem(
                    this.parseRest(),
                    spreadNodeStartPos,
                    spreadNodeStartLoc
                  )
                );

                if (
                  this.match(types.comma) &&
                  this.lookahead().type === types.parenR
                ) {
                  this.raise(
                    this.state.start,
                    "A trailing comma is not permitted after the rest element"
                  );
                }

                break;
              } else {
                exprList.push(
                  this.parseMaybeAssign(
                    false,
                    refShorthandDefaultPos,
                    this.parseParenItem,
                    refNeedsArrowPos
                  )
                );
              }
            }

            var innerEndPos = this.state.start;
            var innerEndLoc = this.state.startLoc;
            this.expect(types.parenR);
            this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
            var arrowNode = this.startNodeAt(startPos, startLoc);

            if (
              canBeArrow &&
              this.shouldParseArrow() &&
              (arrowNode = this.parseArrow(arrowNode))
            ) {
              for (var _i2 = 0; _i2 < exprList.length; _i2++) {
                var param = exprList[_i2];

                if (param.extra && param.extra.parenthesized) {
                  this.unexpected(param.extra.parenStart);
                }
              }

              this.parseArrowExpression(arrowNode, exprList);
              this.state.yieldInPossibleArrowParameters = oldYield;
              return arrowNode;
            }

            this.state.yieldInPossibleArrowParameters = oldYield;

            if (!exprList.length) {
              this.unexpected(this.state.lastTokStart);
            }

            if (optionalCommaStart) this.unexpected(optionalCommaStart);
            if (spreadStart) this.unexpected(spreadStart);

            if (refShorthandDefaultPos.start) {
              this.unexpected(refShorthandDefaultPos.start);
            }

            if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);

            if (exprList.length > 1) {
              val = this.startNodeAt(innerStartPos, innerStartLoc);
              val.expressions = exprList;
              this.toReferencedList(val.expressions);
              this.finishNodeAt(
                val,
                "SequenceExpression",
                innerEndPos,
                innerEndLoc
              );
            } else {
              val = exprList[0];
            }

            this.addExtra(val, "parenthesized", true);
            this.addExtra(val, "parenStart", startPos);
            return val;
          };

          _proto.shouldParseArrow = function shouldParseArrow() {
            return !this.canInsertSemicolon();
          };

          _proto.parseArrow = function parseArrow(node) {
            if (this.eat(types.arrow)) {
              return node;
            }
          };

          _proto.parseParenItem = function parseParenItem(
            node,
            startPos,
            startLoc
          ) {
            return node;
          };

          _proto.parseNew = function parseNew() {
            var node = this.startNode();
            var meta = this.parseIdentifier(true);

            if (this.eat(types.dot)) {
              var metaProp = this.parseMetaProperty(node, meta, "target");

              if (!this.state.inFunction && !this.state.inClassProperty) {
                var error = "new.target can only be used in functions";

                if (this.hasPlugin("classProperties")) {
                  error += " or class properties";
                }

                this.raise(metaProp.start, error);
              }

              return metaProp;
            }

            node.callee = this.parseNoCallExpr();

            if (
              node.callee.type === "OptionalMemberExpression" ||
              node.callee.type === "OptionalCallExpression"
            ) {
              this.raise(
                this.state.lastTokEnd,
                "constructors in/after an Optional Chain are not allowed"
              );
            }

            if (this.eat(types.questionDot)) {
              this.raise(
                this.state.start,
                "constructors in/after an Optional Chain are not allowed"
              );
            }

            this.parseNewArguments(node);
            return this.finishNode(node, "NewExpression");
          };

          _proto.parseNewArguments = function parseNewArguments(node) {
            if (this.eat(types.parenL)) {
              var args = this.parseExprList(types.parenR);
              this.toReferencedList(args);
              node.arguments = args;
            } else {
              node.arguments = [];
            }
          };

          _proto.parseTemplateElement = function parseTemplateElement(
            isTagged
          ) {
            var elem = this.startNode();

            if (this.state.value === null) {
              if (!isTagged) {
                this.raise(
                  this.state.invalidTemplateEscapePosition || 0,
                  "Invalid escape sequence in template"
                );
              } else {
                this.state.invalidTemplateEscapePosition = null;
              }
            }

            elem.value = {
              raw: this.input
                .slice(this.state.start, this.state.end)
                .replace(/\r\n?/g, "\n"),
              cooked: this.state.value
            };
            this.next();
            elem.tail = this.match(types.backQuote);
            return this.finishNode(elem, "TemplateElement");
          };

          _proto.parseTemplate = function parseTemplate(isTagged) {
            var node = this.startNode();
            this.next();
            node.expressions = [];
            var curElt = this.parseTemplateElement(isTagged);
            node.quasis = [curElt];

            while (!curElt.tail) {
              this.expect(types.dollarBraceL);
              node.expressions.push(this.parseExpression());
              this.expect(types.braceR);
              node.quasis.push((curElt = this.parseTemplateElement(isTagged)));
            }

            this.next();
            return this.finishNode(node, "TemplateLiteral");
          };

          _proto.parseObj = function parseObj(
            isPattern,
            refShorthandDefaultPos
          ) {
            var decorators = [];
            var propHash = Object.create(null);
            var first = true;
            var node = this.startNode();
            node.properties = [];
            this.next();
            var firstRestLocation = null;

            while (!this.eat(types.braceR)) {
              if (first) {
                first = false;
              } else {
                this.expect(types.comma);
                if (this.eat(types.braceR)) break;
              }

              if (this.match(types.at)) {
                if (this.hasPlugin("decorators2")) {
                  this.raise(
                    this.state.start,
                    "Stage 2 decorators disallow object literal property decorators"
                  );
                } else {
                  while (this.match(types.at)) {
                    decorators.push(this.parseDecorator());
                  }
                }
              }

              var prop = this.startNode(),
                isGenerator = false,
                _isAsync = false,
                startPos = void 0,
                startLoc = void 0;

              if (decorators.length) {
                prop.decorators = decorators;
                decorators = [];
              }

              if (this.match(types.ellipsis)) {
                this.expectPlugin("objectRestSpread");
                prop = this.parseSpread(
                  isPattern
                    ? {
                        start: 0
                      }
                    : undefined
                );

                if (isPattern) {
                  this.toAssignable(prop, true, "object pattern");
                }

                node.properties.push(prop);

                if (isPattern) {
                  var position = this.state.start;

                  if (firstRestLocation !== null) {
                    this.unexpected(
                      firstRestLocation,
                      "Cannot have multiple rest elements when destructuring"
                    );
                  } else if (this.eat(types.braceR)) {
                    break;
                  } else if (
                    this.match(types.comma) &&
                    this.lookahead().type === types.braceR
                  ) {
                    this.unexpected(
                      position,
                      "A trailing comma is not permitted after the rest element"
                    );
                  } else {
                    firstRestLocation = position;
                    continue;
                  }
                } else {
                  continue;
                }
              }

              prop.method = false;

              if (isPattern || refShorthandDefaultPos) {
                startPos = this.state.start;
                startLoc = this.state.startLoc;
              }

              if (!isPattern) {
                isGenerator = this.eat(types.star);
              }

              var containsEsc = this.state.containsEsc;

              if (!isPattern && this.isContextual("async")) {
                if (isGenerator) this.unexpected();
                var asyncId = this.parseIdentifier();

                if (
                  this.match(types.colon) ||
                  this.match(types.parenL) ||
                  this.match(types.braceR) ||
                  this.match(types.eq) ||
                  this.match(types.comma)
                ) {
                  prop.key = asyncId;
                  prop.computed = false;
                } else {
                  _isAsync = true;

                  if (this.match(types.star)) {
                    this.expectPlugin("asyncGenerators");
                    this.next();
                    isGenerator = true;
                  }

                  this.parsePropertyName(prop);
                }
              } else {
                this.parsePropertyName(prop);
              }

              this.parseObjPropValue(
                prop,
                startPos,
                startLoc,
                isGenerator,
                _isAsync,
                isPattern,
                refShorthandDefaultPos,
                containsEsc
              );
              this.checkPropClash(prop, propHash);

              if (prop.shorthand) {
                this.addExtra(prop, "shorthand", true);
              }

              node.properties.push(prop);
            }

            if (firstRestLocation !== null) {
              this.unexpected(
                firstRestLocation,
                "The rest element has to be the last element when destructuring"
              );
            }

            if (decorators.length) {
              this.raise(
                this.state.start,
                "You have trailing decorators with no property"
              );
            }

            return this.finishNode(
              node,
              isPattern ? "ObjectPattern" : "ObjectExpression"
            );
          };

          _proto.isGetterOrSetterMethod = function isGetterOrSetterMethod(
            prop,
            isPattern
          ) {
            return (
              !isPattern &&
              !prop.computed &&
              prop.key.type === "Identifier" &&
              (prop.key.name === "get" || prop.key.name === "set") &&
              (this.match(types.string) ||
                this.match(types.num) ||
                this.match(types.bracketL) ||
                this.match(types.name) ||
                !!this.state.type.keyword)
            );
          };

          _proto.checkGetterSetterParams = function checkGetterSetterParams(
            method
          ) {
            var paramCount = method.kind === "get" ? 0 : 1;
            var start = method.start;

            if (method.params.length !== paramCount) {
              if (method.kind === "get") {
                this.raise(start, "getter must not have any formal parameters");
              } else {
                this.raise(
                  start,
                  "setter must have exactly one formal parameter"
                );
              }
            }

            if (
              method.kind === "set" &&
              method.params[0].type === "RestElement"
            ) {
              this.raise(
                start,
                "setter function argument must not be a rest parameter"
              );
            }
          };

          _proto.parseObjectMethod = function parseObjectMethod(
            prop,
            isGenerator,
            isAsync,
            isPattern,
            containsEsc
          ) {
            if (isAsync || isGenerator || this.match(types.parenL)) {
              if (isPattern) this.unexpected();
              prop.kind = "method";
              prop.method = true;
              return this.parseMethod(
                prop,
                isGenerator,
                isAsync,
                false,
                "ObjectMethod"
              );
            }

            if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {
              if (isGenerator || isAsync) this.unexpected();
              prop.kind = prop.key.name;
              this.parsePropertyName(prop);
              this.parseMethod(prop, false, false, false, "ObjectMethod");
              this.checkGetterSetterParams(prop);
              return prop;
            }
          };

          _proto.parseObjectProperty = function parseObjectProperty(
            prop,
            startPos,
            startLoc,
            isPattern,
            refShorthandDefaultPos
          ) {
            prop.shorthand = false;

            if (this.eat(types.colon)) {
              prop.value = isPattern
                ? this.parseMaybeDefault(this.state.start, this.state.startLoc)
                : this.parseMaybeAssign(false, refShorthandDefaultPos);
              return this.finishNode(prop, "ObjectProperty");
            }

            if (!prop.computed && prop.key.type === "Identifier") {
              this.checkReservedWord(prop.key.name, prop.key.start, true, true);

              if (isPattern) {
                prop.value = this.parseMaybeDefault(
                  startPos,
                  startLoc,
                  prop.key.__clone()
                );
              } else if (this.match(types.eq) && refShorthandDefaultPos) {
                if (!refShorthandDefaultPos.start) {
                  refShorthandDefaultPos.start = this.state.start;
                }

                prop.value = this.parseMaybeDefault(
                  startPos,
                  startLoc,
                  prop.key.__clone()
                );
              } else {
                prop.value = prop.key.__clone();
              }

              prop.shorthand = true;
              return this.finishNode(prop, "ObjectProperty");
            }
          };

          _proto.parseObjPropValue = function parseObjPropValue(
            prop,
            startPos,
            startLoc,
            isGenerator,
            isAsync,
            isPattern,
            refShorthandDefaultPos,
            containsEsc
          ) {
            var node =
              this.parseObjectMethod(
                prop,
                isGenerator,
                isAsync,
                isPattern,
                containsEsc
              ) ||
              this.parseObjectProperty(
                prop,
                startPos,
                startLoc,
                isPattern,
                refShorthandDefaultPos
              );
            if (!node) this.unexpected();
            return node;
          };

          _proto.parsePropertyName = function parsePropertyName(prop) {
            if (this.eat(types.bracketL)) {
              prop.computed = true;
              prop.key = this.parseMaybeAssign();
              this.expect(types.bracketR);
            } else {
              var oldInPropertyName = this.state.inPropertyName;
              this.state.inPropertyName = true;
              prop.key =
                this.match(types.num) || this.match(types.string)
                  ? this.parseExprAtom()
                  : this.parseMaybePrivateName();

              if (prop.key.type !== "PrivateName") {
                prop.computed = false;
              }

              this.state.inPropertyName = oldInPropertyName;
            }

            return prop.key;
          };

          _proto.initFunction = function initFunction(node, isAsync) {
            node.id = null;
            node.generator = false;
            node.async = !!isAsync;
          };

          _proto.parseMethod = function parseMethod(
            node,
            isGenerator,
            isAsync,
            isConstructor,
            type
          ) {
            var oldInFunc = this.state.inFunction;
            var oldInMethod = this.state.inMethod;
            var oldInGenerator = this.state.inGenerator;
            this.state.inFunction = true;
            this.state.inMethod = node.kind || true;
            this.state.inGenerator = isGenerator;
            this.initFunction(node, isAsync);
            node.generator = !!isGenerator;
            var allowModifiers = isConstructor;
            this.parseFunctionParams(node, allowModifiers);
            this.parseFunctionBodyAndFinish(node, type);
            this.state.inFunction = oldInFunc;
            this.state.inMethod = oldInMethod;
            this.state.inGenerator = oldInGenerator;
            return node;
          };

          _proto.parseArrowExpression = function parseArrowExpression(
            node,
            params,
            isAsync
          ) {
            if (this.state.yieldInPossibleArrowParameters) {
              this.raise(
                this.state.yieldInPossibleArrowParameters.start,
                "yield is not allowed in the parameters of an arrow function" +
                  " inside a generator"
              );
            }

            var oldInFunc = this.state.inFunction;
            this.state.inFunction = true;
            this.initFunction(node, isAsync);
            if (params) this.setArrowFunctionParameters(node, params);
            var oldInGenerator = this.state.inGenerator;
            var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            this.state.inGenerator = false;
            this.state.maybeInArrowParameters = false;
            this.parseFunctionBody(node, true);
            this.state.inGenerator = oldInGenerator;
            this.state.inFunction = oldInFunc;
            this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
            return this.finishNode(node, "ArrowFunctionExpression");
          };

          _proto.setArrowFunctionParameters = function setArrowFunctionParameters(
            node,
            params
          ) {
            node.params = this.toAssignableList(
              params,
              true,
              "arrow function parameters"
            );
          };

          _proto.isStrictBody = function isStrictBody(node) {
            var isBlockStatement = node.body.type === "BlockStatement";

            if (isBlockStatement && node.body.directives.length) {
              for (
                var _i4 = 0, _node$body$directives2 = node.body.directives;
                _i4 < _node$body$directives2.length;
                _i4++
              ) {
                var directive = _node$body$directives2[_i4];

                if (directive.value.value === "use strict") {
                  return true;
                }
              }
            }

            return false;
          };

          _proto.parseFunctionBodyAndFinish = function parseFunctionBodyAndFinish(
            node,
            type,
            allowExpressionBody
          ) {
            this.parseFunctionBody(node, allowExpressionBody);
            this.finishNode(node, type);
          };

          _proto.parseFunctionBody = function parseFunctionBody(
            node,
            allowExpression
          ) {
            var isExpression = allowExpression && !this.match(types.braceL);
            var oldInParameters = this.state.inParameters;
            var oldInAsync = this.state.inAsync;
            this.state.inParameters = false;
            this.state.inAsync = node.async;

            if (isExpression) {
              node.body = this.parseMaybeAssign();
            } else {
              var oldInGen = this.state.inGenerator;
              var oldInFunc = this.state.inFunction;
              var oldLabels = this.state.labels;
              this.state.inGenerator = node.generator;
              this.state.inFunction = true;
              this.state.labels = [];
              node.body = this.parseBlock(true);
              this.state.inFunction = oldInFunc;
              this.state.inGenerator = oldInGen;
              this.state.labels = oldLabels;
            }

            this.state.inAsync = oldInAsync;
            this.checkFunctionNameAndParams(node, allowExpression);
            this.state.inParameters = oldInParameters;
          };

          _proto.checkFunctionNameAndParams = function checkFunctionNameAndParams(
            node,
            isArrowFunction
          ) {
            var isStrict = this.isStrictBody(node);
            var checkLVal = this.state.strict || isStrict || isArrowFunction;
            var oldStrict = this.state.strict;
            if (isStrict) this.state.strict = isStrict;

            if (checkLVal) {
              var nameHash = Object.create(null);

              if (node.id) {
                this.checkLVal(node.id, true, undefined, "function name");
              }

              for (
                var _i6 = 0, _node$params2 = node.params;
                _i6 < _node$params2.length;
                _i6++
              ) {
                var param = _node$params2[_i6];

                if (isStrict && param.type !== "Identifier") {
                  this.raise(
                    param.start,
                    "Non-simple parameter in strict mode"
                  );
                }

                this.checkLVal(
                  param,
                  true,
                  nameHash,
                  "function parameter list"
                );
              }
            }

            this.state.strict = oldStrict;
          };

          _proto.parseExprList = function parseExprList(
            close,
            allowEmpty,
            refShorthandDefaultPos
          ) {
            var elts = [];
            var first = true;

            while (!this.eat(close)) {
              if (first) {
                first = false;
              } else {
                this.expect(types.comma);
                if (this.eat(close)) break;
              }

              elts.push(
                this.parseExprListItem(allowEmpty, refShorthandDefaultPos)
              );
            }

            return elts;
          };

          _proto.parseExprListItem = function parseExprListItem(
            allowEmpty,
            refShorthandDefaultPos,
            refNeedsArrowPos,
            refTrailingCommaPos
          ) {
            var elt;

            if (allowEmpty && this.match(types.comma)) {
              elt = null;
            } else if (this.match(types.ellipsis)) {
              var spreadNodeStartPos = this.state.start;
              var spreadNodeStartLoc = this.state.startLoc;
              elt = this.parseParenItem(
                this.parseSpread(refShorthandDefaultPos, refNeedsArrowPos),
                spreadNodeStartPos,
                spreadNodeStartLoc
              );

              if (refTrailingCommaPos && this.match(types.comma)) {
                refTrailingCommaPos.start = this.state.start;
              }
            } else {
              elt = this.parseMaybeAssign(
                false,
                refShorthandDefaultPos,
                this.parseParenItem,
                refNeedsArrowPos
              );
            }

            return elt;
          };

          _proto.parseIdentifier = function parseIdentifier(liberal) {
            var node = this.startNode();
            var name = this.parseIdentifierName(node.start, liberal);
            node.name = name;
            node.loc.identifierName = name;
            return this.finishNode(node, "Identifier");
          };

          _proto.parseIdentifierName = function parseIdentifierName(
            pos,
            liberal
          ) {
            if (!liberal) {
              this.checkReservedWord(
                this.state.value,
                this.state.start,
                !!this.state.type.keyword,
                false
              );
            }

            var name;

            if (this.match(types.name)) {
              name = this.state.value;
            } else if (this.state.type.keyword) {
              name = this.state.type.keyword;
            } else {
              throw this.unexpected();
            }

            if (!liberal && name === "await" && this.state.inAsync) {
              this.raise(
                pos,
                "invalid use of await inside of an async function"
              );
            }

            this.next();
            return name;
          };

          _proto.checkReservedWord = function checkReservedWord(
            word,
            startLoc,
            checkKeywords,
            isBinding
          ) {
            if (
              this.state.strict &&
              (reservedWords.strict(word) ||
                (isBinding && reservedWords.strictBind(word)))
            ) {
              this.raise(startLoc, word + " is a reserved word in strict mode");
            }

            if (this.state.inGenerator && word === "yield") {
              this.raise(
                startLoc,
                "yield is a reserved word inside generator functions"
              );
            }

            if (this.state.inClassProperty && word === "arguments") {
              this.raise(
                startLoc,
                "'arguments' is not allowed in class field initializer"
              );
            }

            if (
              this.isReservedWord(word) ||
              (checkKeywords && this.isKeyword(word))
            ) {
              this.raise(startLoc, word + " is a reserved word");
            }
          };

          _proto.parseAwait = function parseAwait(node) {
            if (
              !this.state.inAsync &&
              (this.state.inFunction || !this.options.allowAwaitOutsideFunction)
            ) {
              this.unexpected();
            }

            if (this.match(types.star)) {
              this.raise(
                node.start,
                "await* has been removed from the async functions proposal. Use Promise.all() instead."
              );
            }

            node.argument = this.parseMaybeUnary();
            return this.finishNode(node, "AwaitExpression");
          };

          _proto.parseYield = function parseYield() {
            var node = this.startNode();

            if (this.state.inParameters) {
              this.raise(
                node.start,
                "yield is not allowed in generator parameters"
              );
            }

            if (
              this.state.maybeInArrowParameters &&
              !this.state.yieldInPossibleArrowParameters
            ) {
              this.state.yieldInPossibleArrowParameters = node;
            }

            this.next();

            if (
              this.match(types.semi) ||
              this.canInsertSemicolon() ||
              (!this.match(types.star) && !this.state.type.startsExpr)
            ) {
              node.delegate = false;
              node.argument = null;
            } else {
              node.delegate = this.eat(types.star);
              node.argument = this.parseMaybeAssign();
            }

            return this.finishNode(node, "YieldExpression");
          };

          return ExpressionParser;
        })(LValParser);

        var empty = [];
        var loopLabel = {
          kind: "loop"
        };
        var switchLabel = {
          kind: "switch"
        };

        var StatementParser = (function(_ExpressionParser) {
          _inheritsLoose(StatementParser, _ExpressionParser);

          function StatementParser() {
            return _ExpressionParser.apply(this, arguments) || this;
          }

          var _proto = StatementParser.prototype;

          _proto.parseTopLevel = function parseTopLevel(file, program) {
            program.sourceType = this.options.sourceType;
            this.parseBlockBody(program, true, true, types.eof);
            file.program = this.finishNode(program, "Program");
            file.comments = this.state.comments;
            if (this.options.tokens) file.tokens = this.state.tokens;
            return this.finishNode(file, "File");
          };

          _proto.stmtToDirective = function stmtToDirective(stmt) {
            var expr = stmt.expression;
            var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
            var directive = this.startNodeAt(stmt.start, stmt.loc.start);
            var raw = this.input.slice(expr.start, expr.end);
            var val = (directiveLiteral.value = raw.slice(1, -1));
            this.addExtra(directiveLiteral, "raw", raw);
            this.addExtra(directiveLiteral, "rawValue", val);
            directive.value = this.finishNodeAt(
              directiveLiteral,
              "DirectiveLiteral",
              expr.end,
              expr.loc.end
            );
            return this.finishNodeAt(
              directive,
              "Directive",
              stmt.end,
              stmt.loc.end
            );
          };

          _proto.parseStatement = function parseStatement(
            declaration,
            topLevel
          ) {
            if (this.match(types.at)) {
              this.parseDecorators(true);
            }

            return this.parseStatementContent(declaration, topLevel);
          };

          _proto.parseStatementContent = function parseStatementContent(
            declaration,
            topLevel
          ) {
            var starttype = this.state.type;
            var node = this.startNode();

            switch (starttype) {
              case types._break:
              case types._continue:
                return this.parseBreakContinueStatement(
                  node,
                  starttype.keyword
                );

              case types._debugger:
                return this.parseDebuggerStatement(node);

              case types._do:
                return this.parseDoStatement(node);

              case types._for:
                return this.parseForStatement(node);

              case types._function:
                if (this.lookahead().type === types.dot) break;
                if (!declaration) this.unexpected();
                return this.parseFunctionStatement(node);

              case types._class:
                if (!declaration) this.unexpected();
                return this.parseClass(node, true);

              case types._if:
                return this.parseIfStatement(node);

              case types._return:
                return this.parseReturnStatement(node);

              case types._switch:
                return this.parseSwitchStatement(node);

              case types._throw:
                return this.parseThrowStatement(node);

              case types._try:
                return this.parseTryStatement(node);

              case types._let:
              case types._const:
                if (!declaration) this.unexpected();

              case types._var:
                return this.parseVarStatement(node, starttype);

              case types._while:
                return this.parseWhileStatement(node);

              case types._with:
                return this.parseWithStatement(node);

              case types.braceL:
                return this.parseBlock();

              case types.semi:
                return this.parseEmptyStatement(node);

              case types._export:
              case types._import: {
                var nextToken = this.lookahead();

                if (
                  nextToken.type === types.parenL ||
                  nextToken.type === types.dot
                ) {
                  break;
                }

                if (!this.options.allowImportExportEverywhere && !topLevel) {
                  this.raise(
                    this.state.start,
                    "'import' and 'export' may only appear at the top level"
                  );
                }

                this.next();
                var result;

                if (starttype == types._import) {
                  result = this.parseImport(node);

                  if (
                    result.type === "ImportDeclaration" &&
                    (!result.importKind || result.importKind === "value")
                  ) {
                    this.sawUnambiguousESM = true;
                  }
                } else {
                  result = this.parseExport(node);

                  if (
                    (result.type === "ExportNamedDeclaration" &&
                      (!result.exportKind || result.exportKind === "value")) ||
                    (result.type === "ExportAllDeclaration" &&
                      (!result.exportKind || result.exportKind === "value")) ||
                    result.type === "ExportDefaultDeclaration"
                  ) {
                    this.sawUnambiguousESM = true;
                  }
                }

                this.assertModuleNodeAllowed(node);
                return result;
              }

              case types.name:
                if (this.isContextual("async")) {
                  var state = this.state.clone();
                  this.next();

                  if (
                    this.match(types._function) &&
                    !this.canInsertSemicolon()
                  ) {
                    this.expect(types._function);
                    return this.parseFunction(node, true, false, true);
                  } else {
                    this.state = state;
                  }
                }
            }

            var maybeName = this.state.value;
            var expr = this.parseExpression();

            if (
              starttype === types.name &&
              expr.type === "Identifier" &&
              this.eat(types.colon)
            ) {
              return this.parseLabeledStatement(node, maybeName, expr);
            } else {
              return this.parseExpressionStatement(node, expr);
            }
          };

          _proto.assertModuleNodeAllowed = function assertModuleNodeAllowed(
            node
          ) {
            if (!this.options.allowImportExportEverywhere && !this.inModule) {
              this.raise(
                node.start,
                "'import' and 'export' may appear only with 'sourceType: \"module\"'",
                {
                  code: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"
                }
              );
            }
          };

          _proto.takeDecorators = function takeDecorators(node) {
            var decorators = this.state.decoratorStack[
              this.state.decoratorStack.length - 1
            ];

            if (decorators.length) {
              node.decorators = decorators;
              this.resetStartLocationFromNode(node, decorators[0]);
              this.state.decoratorStack[
                this.state.decoratorStack.length - 1
              ] = [];
            }
          };

          _proto.parseDecorators = function parseDecorators(allowExport) {
            if (this.hasPlugin("decorators2")) {
              allowExport = false;
            }

            var currentContextDecorators = this.state.decoratorStack[
              this.state.decoratorStack.length - 1
            ];

            while (this.match(types.at)) {
              var decorator = this.parseDecorator();
              currentContextDecorators.push(decorator);
            }

            if (this.match(types._export)) {
              if (allowExport) {
                return;
              } else {
                this.raise(
                  this.state.start,
                  "Using the export keyword between a decorator and a class is not allowed. " +
                    "Please use `export @dec class` instead"
                );
              }
            }

            if (!this.match(types._class)) {
              this.raise(
                this.state.start,
                "Leading decorators must be attached to a class declaration"
              );
            }
          };

          _proto.parseDecorator = function parseDecorator() {
            this.expectOnePlugin(["decorators", "decorators2"]);
            var node = this.startNode();
            this.next();

            if (this.hasPlugin("decorators2")) {
              this.state.decoratorStack.push([]);

              if (this.eat(types.parenL)) {
                node.callee = this.parseExpression();
                this.expect(types.parenR);
              } else {
                var startPos = this.state.start;
                var startLoc = this.state.startLoc;
                var expr = this.parseIdentifier(false);

                while (this.eat(types.dot)) {
                  var _node = this.startNodeAt(startPos, startLoc);

                  _node.object = expr;
                  _node.property = this.parseIdentifier(true);
                  _node.computed = false;
                  expr = this.finishNode(_node, "MemberExpression");
                }

                node.callee = expr;
              }

              if (this.eat(types.parenL)) {
                node.arguments = this.parseCallExpressionArguments(
                  types.parenR,
                  false
                );
                this.toReferencedList(node.arguments);
              }

              this.state.decoratorStack.pop();
            } else {
              node.callee = this.parseMaybeAssign();
            }

            return this.finishNode(node, "Decorator");
          };

          _proto.parseBreakContinueStatement = function parseBreakContinueStatement(
            node,
            keyword
          ) {
            var isBreak = keyword === "break";
            this.next();

            if (this.isLineTerminator()) {
              node.label = null;
            } else if (!this.match(types.name)) {
              this.unexpected();
            } else {
              node.label = this.parseIdentifier();
              this.semicolon();
            }

            var i;

            for (i = 0; i < this.state.labels.length; ++i) {
              var lab = this.state.labels[i];

              if (node.label == null || lab.name === node.label.name) {
                if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
                if (node.label && isBreak) break;
              }
            }

            if (i === this.state.labels.length) {
              this.raise(node.start, "Unsyntactic " + keyword);
            }

            return this.finishNode(
              node,
              isBreak ? "BreakStatement" : "ContinueStatement"
            );
          };

          _proto.parseDebuggerStatement = function parseDebuggerStatement(
            node
          ) {
            this.next();
            this.semicolon();
            return this.finishNode(node, "DebuggerStatement");
          };

          _proto.parseDoStatement = function parseDoStatement(node) {
            this.next();
            this.state.labels.push(loopLabel);
            node.body = this.parseStatement(false);
            this.state.labels.pop();
            this.expect(types._while);
            node.test = this.parseParenExpression();
            this.eat(types.semi);
            return this.finishNode(node, "DoWhileStatement");
          };

          _proto.parseForStatement = function parseForStatement(node) {
            this.next();
            this.state.labels.push(loopLabel);
            var forAwait = false;

            if (this.state.inAsync && this.isContextual("await")) {
              this.expectPlugin("asyncGenerators");
              forAwait = true;
              this.next();
            }

            this.expect(types.parenL);

            if (this.match(types.semi)) {
              if (forAwait) {
                this.unexpected();
              }

              return this.parseFor(node, null);
            }

            if (
              this.match(types._var) ||
              this.match(types._let) ||
              this.match(types._const)
            ) {
              var _init = this.startNode();

              var varKind = this.state.type;
              this.next();
              this.parseVar(_init, true, varKind);
              this.finishNode(_init, "VariableDeclaration");

              if (this.match(types._in) || this.isContextual("of")) {
                if (_init.declarations.length === 1) {
                  var declaration = _init.declarations[0];
                  var isForInInitializer =
                    varKind === types._var &&
                    declaration.init &&
                    declaration.id.type != "ObjectPattern" &&
                    declaration.id.type != "ArrayPattern" &&
                    !this.isContextual("of");

                  if (this.state.strict && isForInInitializer) {
                    this.raise(
                      this.state.start,
                      "for-in initializer in strict mode"
                    );
                  } else if (isForInInitializer || !declaration.init) {
                    return this.parseForIn(node, _init, forAwait);
                  }
                }
              }

              if (forAwait) {
                this.unexpected();
              }

              return this.parseFor(node, _init);
            }

            var refShorthandDefaultPos = {
              start: 0
            };
            var init = this.parseExpression(true, refShorthandDefaultPos);

            if (this.match(types._in) || this.isContextual("of")) {
              var description = this.isContextual("of")
                ? "for-of statement"
                : "for-in statement";
              this.toAssignable(init, undefined, description);
              this.checkLVal(init, undefined, undefined, description);
              return this.parseForIn(node, init, forAwait);
            } else if (refShorthandDefaultPos.start) {
              this.unexpected(refShorthandDefaultPos.start);
            }

            if (forAwait) {
              this.unexpected();
            }

            return this.parseFor(node, init);
          };

          _proto.parseFunctionStatement = function parseFunctionStatement(
            node
          ) {
            this.next();
            return this.parseFunction(node, true);
          };

          _proto.parseIfStatement = function parseIfStatement(node) {
            this.next();
            node.test = this.parseParenExpression();
            node.consequent = this.parseStatement(false);
            node.alternate = this.eat(types._else)
              ? this.parseStatement(false)
              : null;
            return this.finishNode(node, "IfStatement");
          };

          _proto.parseReturnStatement = function parseReturnStatement(node) {
            if (
              !this.state.inFunction &&
              !this.options.allowReturnOutsideFunction
            ) {
              this.raise(this.state.start, "'return' outside of function");
            }

            this.next();

            if (this.isLineTerminator()) {
              node.argument = null;
            } else {
              node.argument = this.parseExpression();
              this.semicolon();
            }

            return this.finishNode(node, "ReturnStatement");
          };

          _proto.parseSwitchStatement = function parseSwitchStatement(node) {
            this.next();
            node.discriminant = this.parseParenExpression();
            var cases = (node.cases = []);
            this.expect(types.braceL);
            this.state.labels.push(switchLabel);
            var cur;

            for (var sawDefault; !this.match(types.braceR); ) {
              if (this.match(types._case) || this.match(types._default)) {
                var isCase = this.match(types._case);
                if (cur) this.finishNode(cur, "SwitchCase");
                cases.push((cur = this.startNode()));
                cur.consequent = [];
                this.next();

                if (isCase) {
                  cur.test = this.parseExpression();
                } else {
                  if (sawDefault) {
                    this.raise(
                      this.state.lastTokStart,
                      "Multiple default clauses"
                    );
                  }

                  sawDefault = true;
                  cur.test = null;
                }

                this.expect(types.colon);
              } else {
                if (cur) {
                  cur.consequent.push(this.parseStatement(true));
                } else {
                  this.unexpected();
                }
              }
            }

            if (cur) this.finishNode(cur, "SwitchCase");
            this.next();
            this.state.labels.pop();
            return this.finishNode(node, "SwitchStatement");
          };

          _proto.parseThrowStatement = function parseThrowStatement(node) {
            this.next();

            if (
              lineBreak.test(
                this.input.slice(this.state.lastTokEnd, this.state.start)
              )
            ) {
              this.raise(this.state.lastTokEnd, "Illegal newline after throw");
            }

            node.argument = this.parseExpression();
            this.semicolon();
            return this.finishNode(node, "ThrowStatement");
          };

          _proto.parseTryStatement = function parseTryStatement(node) {
            this.next();
            node.block = this.parseBlock();
            node.handler = null;

            if (this.match(types._catch)) {
              var clause = this.startNode();
              this.next();

              if (this.match(types.parenL)) {
                this.expect(types.parenL);
                clause.param = this.parseBindingAtom();
                var clashes = Object.create(null);
                this.checkLVal(clause.param, true, clashes, "catch clause");
                this.expect(types.parenR);
              } else {
                this.expectPlugin("optionalCatchBinding");
                clause.param = null;
              }

              clause.body = this.parseBlock();
              node.handler = this.finishNode(clause, "CatchClause");
            }

            node.guardedHandlers = empty;
            node.finalizer = this.eat(types._finally)
              ? this.parseBlock()
              : null;

            if (!node.handler && !node.finalizer) {
              this.raise(node.start, "Missing catch or finally clause");
            }

            return this.finishNode(node, "TryStatement");
          };

          _proto.parseVarStatement = function parseVarStatement(node, kind) {
            this.next();
            this.parseVar(node, false, kind);
            this.semicolon();
            return this.finishNode(node, "VariableDeclaration");
          };

          _proto.parseWhileStatement = function parseWhileStatement(node) {
            this.next();
            node.test = this.parseParenExpression();
            this.state.labels.push(loopLabel);
            node.body = this.parseStatement(false);
            this.state.labels.pop();
            return this.finishNode(node, "WhileStatement");
          };

          _proto.parseWithStatement = function parseWithStatement(node) {
            if (this.state.strict) {
              this.raise(this.state.start, "'with' in strict mode");
            }

            this.next();
            node.object = this.parseParenExpression();
            node.body = this.parseStatement(false);
            return this.finishNode(node, "WithStatement");
          };

          _proto.parseEmptyStatement = function parseEmptyStatement(node) {
            this.next();
            return this.finishNode(node, "EmptyStatement");
          };

          _proto.parseLabeledStatement = function parseLabeledStatement(
            node,
            maybeName,
            expr
          ) {
            for (
              var _i2 = 0, _state$labels2 = this.state.labels;
              _i2 < _state$labels2.length;
              _i2++
            ) {
              var label = _state$labels2[_i2];

              if (label.name === maybeName) {
                this.raise(
                  expr.start,
                  "Label '" + maybeName + "' is already declared"
                );
              }
            }

            var kind = this.state.type.isLoop
              ? "loop"
              : this.match(types._switch) ? "switch" : null;

            for (var i = this.state.labels.length - 1; i >= 0; i--) {
              var _label = this.state.labels[i];

              if (_label.statementStart === node.start) {
                _label.statementStart = this.state.start;
                _label.kind = kind;
              } else {
                break;
              }
            }

            this.state.labels.push({
              name: maybeName,
              kind: kind,
              statementStart: this.state.start
            });
            node.body = this.parseStatement(true);

            if (
              node.body.type == "ClassDeclaration" ||
              (node.body.type == "VariableDeclaration" &&
                node.body.kind !== "var") ||
              (node.body.type == "FunctionDeclaration" &&
                (this.state.strict || node.body.generator || node.body.async))
            ) {
              this.raise(node.body.start, "Invalid labeled declaration");
            }

            this.state.labels.pop();
            node.label = expr;
            return this.finishNode(node, "LabeledStatement");
          };

          _proto.parseExpressionStatement = function parseExpressionStatement(
            node,
            expr
          ) {
            node.expression = expr;
            this.semicolon();
            return this.finishNode(node, "ExpressionStatement");
          };

          _proto.parseBlock = function parseBlock(allowDirectives) {
            var node = this.startNode();
            this.expect(types.braceL);
            this.parseBlockBody(node, allowDirectives, false, types.braceR);
            return this.finishNode(node, "BlockStatement");
          };

          _proto.isValidDirective = function isValidDirective(stmt) {
            return (
              stmt.type === "ExpressionStatement" &&
              stmt.expression.type === "StringLiteral" &&
              !stmt.expression.extra.parenthesized
            );
          };

          _proto.parseBlockBody = function parseBlockBody(
            node,
            allowDirectives,
            topLevel,
            end
          ) {
            var body = (node.body = []);
            var directives = (node.directives = []);
            this.parseBlockOrModuleBlockBody(
              body,
              allowDirectives ? directives : undefined,
              topLevel,
              end
            );
          };

          _proto.parseBlockOrModuleBlockBody = function parseBlockOrModuleBlockBody(
            body,
            directives,
            topLevel,
            end
          ) {
            var parsedNonDirective = false;
            var oldStrict;
            var octalPosition;

            while (!this.eat(end)) {
              if (
                !parsedNonDirective &&
                this.state.containsOctal &&
                !octalPosition
              ) {
                octalPosition = this.state.octalPosition;
              }

              var stmt = this.parseStatement(true, topLevel);

              if (
                directives &&
                !parsedNonDirective &&
                this.isValidDirective(stmt)
              ) {
                var directive = this.stmtToDirective(stmt);
                directives.push(directive);

                if (
                  oldStrict === undefined &&
                  directive.value.value === "use strict"
                ) {
                  oldStrict = this.state.strict;
                  this.setStrict(true);

                  if (octalPosition) {
                    this.raise(octalPosition, "Octal literal in strict mode");
                  }
                }

                continue;
              }

              parsedNonDirective = true;
              body.push(stmt);
            }

            if (oldStrict === false) {
              this.setStrict(false);
            }
          };

          _proto.parseFor = function parseFor(node, init) {
            node.init = init;
            this.expect(types.semi);
            node.test = this.match(types.semi) ? null : this.parseExpression();
            this.expect(types.semi);
            node.update = this.match(types.parenR)
              ? null
              : this.parseExpression();
            this.expect(types.parenR);
            node.body = this.parseStatement(false);
            this.state.labels.pop();
            return this.finishNode(node, "ForStatement");
          };

          _proto.parseForIn = function parseForIn(node, init, forAwait) {
            var type = this.match(types._in)
              ? "ForInStatement"
              : "ForOfStatement";

            if (forAwait) {
              this.eatContextual("of");
            } else {
              this.next();
            }

            if (type === "ForOfStatement") {
              node.await = !!forAwait;
            }

            node.left = init;
            node.right = this.parseExpression();
            this.expect(types.parenR);
            node.body = this.parseStatement(false);
            this.state.labels.pop();
            return this.finishNode(node, type);
          };

          _proto.parseVar = function parseVar(node, isFor, kind) {
            var declarations = (node.declarations = []);
            node.kind = kind.keyword;

            for (;;) {
              var decl = this.startNode();
              this.parseVarHead(decl);

              if (this.eat(types.eq)) {
                decl.init = this.parseMaybeAssign(isFor);
              } else {
                if (
                  kind === types._const &&
                  !(this.match(types._in) || this.isContextual("of"))
                ) {
                  if (!this.hasPlugin("typescript")) {
                    this.unexpected();
                  }
                } else if (
                  decl.id.type !== "Identifier" &&
                  !(isFor && (this.match(types._in) || this.isContextual("of")))
                ) {
                  this.raise(
                    this.state.lastTokEnd,
                    "Complex binding patterns require an initialization value"
                  );
                }

                decl.init = null;
              }

              declarations.push(this.finishNode(decl, "VariableDeclarator"));
              if (!this.eat(types.comma)) break;
            }

            return node;
          };

          _proto.parseVarHead = function parseVarHead(decl) {
            decl.id = this.parseBindingAtom();
            this.checkLVal(decl.id, true, undefined, "variable declaration");
          };

          _proto.parseFunction = function parseFunction(
            node,
            isStatement,
            allowExpressionBody,
            isAsync,
            optionalId
          ) {
            var oldInFunc = this.state.inFunction;
            var oldInMethod = this.state.inMethod;
            var oldInGenerator = this.state.inGenerator;
            var oldInClassProperty = this.state.inClassProperty;
            this.state.inFunction = true;
            this.state.inMethod = false;
            this.state.inClassProperty = false;
            this.initFunction(node, isAsync);

            if (this.match(types.star)) {
              if (node.async) {
                this.expectPlugin("asyncGenerators");
              }

              node.generator = true;
              this.next();
            }

            if (
              isStatement &&
              !optionalId &&
              !this.match(types.name) &&
              !this.match(types._yield)
            ) {
              this.unexpected();
            }

            if (!isStatement) this.state.inGenerator = node.generator;

            if (this.match(types.name) || this.match(types._yield)) {
              node.id = this.parseBindingIdentifier();
            }

            if (isStatement) this.state.inGenerator = node.generator;
            this.parseFunctionParams(node);
            this.parseFunctionBodyAndFinish(
              node,
              isStatement ? "FunctionDeclaration" : "FunctionExpression",
              allowExpressionBody
            );
            this.state.inFunction = oldInFunc;
            this.state.inMethod = oldInMethod;
            this.state.inGenerator = oldInGenerator;
            this.state.inClassProperty = oldInClassProperty;
            return node;
          };

          _proto.parseFunctionParams = function parseFunctionParams(
            node,
            allowModifiers
          ) {
            var oldInParameters = this.state.inParameters;
            this.state.inParameters = true;
            this.expect(types.parenL);
            node.params = this.parseBindingList(
              types.parenR,
              false,
              allowModifiers
            );
            this.state.inParameters = oldInParameters;
          };

          _proto.parseClass = function parseClass(
            node,
            isStatement,
            optionalId
          ) {
            this.next();
            this.takeDecorators(node);
            this.parseClassId(node, isStatement, optionalId);
            this.parseClassSuper(node);
            this.parseClassBody(node);
            return this.finishNode(
              node,
              isStatement ? "ClassDeclaration" : "ClassExpression"
            );
          };

          _proto.isClassProperty = function isClassProperty() {
            return (
              this.match(types.eq) ||
              this.match(types.semi) ||
              this.match(types.braceR)
            );
          };

          _proto.isClassMethod = function isClassMethod() {
            return this.match(types.parenL);
          };

          _proto.isNonstaticConstructor = function isNonstaticConstructor(
            method
          ) {
            return (
              !method.computed &&
              !method.static &&
              (method.key.name === "constructor" ||
                method.key.value === "constructor")
            );
          };

          _proto.parseClassBody = function parseClassBody(node) {
            var oldStrict = this.state.strict;
            this.state.strict = true;
            this.state.classLevel++;
            var state = {
              hadConstructor: false
            };
            var decorators = [];
            var classBody = this.startNode();
            classBody.body = [];
            this.expect(types.braceL);

            while (!this.eat(types.braceR)) {
              if (this.eat(types.semi)) {
                if (decorators.length > 0) {
                  this.raise(
                    this.state.lastTokEnd,
                    "Decorators must not be followed by a semicolon"
                  );
                }

                continue;
              }

              if (this.match(types.at)) {
                decorators.push(this.parseDecorator());
                continue;
              }

              var member = this.startNode();

              if (decorators.length) {
                member.decorators = decorators;
                this.resetStartLocationFromNode(member, decorators[0]);
                decorators = [];
              }

              this.parseClassMember(classBody, member, state);

              if (
                member.kind === "constructor" &&
                member.decorators &&
                member.decorators.length > 0
              ) {
                this.raise(
                  member.start,
                  "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?"
                );
              }
            }

            if (decorators.length) {
              this.raise(
                this.state.start,
                "You have trailing decorators with no method"
              );
            }

            node.body = this.finishNode(classBody, "ClassBody");
            this.state.classLevel--;
            this.state.strict = oldStrict;
          };

          _proto.parseClassMember = function parseClassMember(
            classBody,
            member,
            state
          ) {
            var isStatic = false;
            var containsEsc = this.state.containsEsc;

            if (this.match(types.name) && this.state.value === "static") {
              var key = this.parseIdentifier(true);

              if (this.isClassMethod()) {
                var method = member;
                method.kind = "method";
                method.computed = false;
                method.key = key;
                method.static = false;
                this.pushClassMethod(classBody, method, false, false, false);
                return;
              } else if (this.isClassProperty()) {
                var prop = member;
                prop.computed = false;
                prop.key = key;
                prop.static = false;
                classBody.body.push(this.parseClassProperty(prop));
                return;
              } else if (containsEsc) {
                throw this.unexpected();
              }

              isStatic = true;
            }

            this.parseClassMemberWithIsStatic(
              classBody,
              member,
              state,
              isStatic
            );
          };

          _proto.parseClassMemberWithIsStatic = function parseClassMemberWithIsStatic(
            classBody,
            member,
            state,
            isStatic
          ) {
            var publicMethod = member;
            var privateMethod = member;
            var publicProp = member;
            var privateProp = member;
            var method = publicMethod;
            var publicMember = publicMethod;
            member.static = isStatic;

            if (this.eat(types.star)) {
              method.kind = "method";
              this.parseClassPropertyName(method);

              if (method.key.type === "PrivateName") {
                this.pushClassPrivateMethod(
                  classBody,
                  privateMethod,
                  true,
                  false
                );
                return;
              }

              if (this.isNonstaticConstructor(publicMethod)) {
                this.raise(
                  publicMethod.key.start,
                  "Constructor can't be a generator"
                );
              }

              this.pushClassMethod(classBody, publicMethod, true, false, false);
              return;
            }

            var key = this.parseClassPropertyName(member);
            var isPrivate = key.type === "PrivateName";
            var isSimple = key.type === "Identifier";
            this.parsePostMemberNameModifiers(publicMember);

            if (this.isClassMethod()) {
              method.kind = "method";

              if (isPrivate) {
                this.pushClassPrivateMethod(
                  classBody,
                  privateMethod,
                  false,
                  false
                );
                return;
              }

              var isConstructor = this.isNonstaticConstructor(publicMethod);

              if (isConstructor) {
                publicMethod.kind = "constructor";

                if (publicMethod.decorators) {
                  this.raise(
                    publicMethod.start,
                    "You can't attach decorators to a class constructor"
                  );
                }

                if (state.hadConstructor && !this.hasPlugin("typescript")) {
                  this.raise(
                    key.start,
                    "Duplicate constructor in the same class"
                  );
                }

                state.hadConstructor = true;
              }

              this.pushClassMethod(
                classBody,
                publicMethod,
                false,
                false,
                isConstructor
              );
            } else if (this.isClassProperty()) {
              if (isPrivate) {
                this.pushClassPrivateProperty(classBody, privateProp);
              } else {
                this.pushClassProperty(classBody, publicProp);
              }
            } else if (
              isSimple &&
              key.name === "async" &&
              !this.isLineTerminator()
            ) {
              var isGenerator = this.match(types.star);

              if (isGenerator) {
                this.expectPlugin("asyncGenerators");
                this.next();
              }

              method.kind = "method";
              this.parseClassPropertyName(method);

              if (method.key.type === "PrivateName") {
                this.pushClassPrivateMethod(
                  classBody,
                  privateMethod,
                  isGenerator,
                  true
                );
              } else {
                if (this.isNonstaticConstructor(publicMethod)) {
                  this.raise(
                    publicMethod.key.start,
                    "Constructor can't be an async function"
                  );
                }

                this.pushClassMethod(
                  classBody,
                  publicMethod,
                  isGenerator,
                  true,
                  false
                );
              }
            } else if (
              isSimple &&
              (key.name === "get" || key.name === "set") &&
              !(this.isLineTerminator() && this.match(types.star))
            ) {
              method.kind = key.name;
              this.parseClassPropertyName(publicMethod);

              if (method.key.type === "PrivateName") {
                this.pushClassPrivateMethod(
                  classBody,
                  privateMethod,
                  false,
                  false
                );
              } else {
                if (this.isNonstaticConstructor(publicMethod)) {
                  this.raise(
                    publicMethod.key.start,
                    "Constructor can't have get/set modifier"
                  );
                }

                this.pushClassMethod(
                  classBody,
                  publicMethod,
                  false,
                  false,
                  false
                );
              }

              this.checkGetterSetterParams(publicMethod);
            } else if (this.isLineTerminator()) {
              if (isPrivate) {
                this.pushClassPrivateProperty(classBody, privateProp);
              } else {
                this.pushClassProperty(classBody, publicProp);
              }
            } else {
              this.unexpected();
            }
          };

          _proto.parseClassPropertyName = function parseClassPropertyName(
            member
          ) {
            var key = this.parsePropertyName(member);

            if (
              !member.computed &&
              member.static &&
              (key.name === "prototype" || key.value === "prototype")
            ) {
              this.raise(
                key.start,
                "Classes may not have static property named prototype"
              );
            }

            if (key.type === "PrivateName" && key.id.name === "constructor") {
              this.raise(
                key.start,
                "Classes may not have a private field named '#constructor'"
              );
            }

            return key;
          };

          _proto.pushClassProperty = function pushClassProperty(
            classBody,
            prop
          ) {
            if (this.isNonstaticConstructor(prop)) {
              this.raise(
                prop.key.start,
                "Classes may not have a non-static field named 'constructor'"
              );
            }

            classBody.body.push(this.parseClassProperty(prop));
          };

          _proto.pushClassPrivateProperty = function pushClassPrivateProperty(
            classBody,
            prop
          ) {
            this.expectPlugin("classPrivateProperties", prop.key.start);
            classBody.body.push(this.parseClassPrivateProperty(prop));
          };

          _proto.pushClassMethod = function pushClassMethod(
            classBody,
            method,
            isGenerator,
            isAsync,
            isConstructor
          ) {
            classBody.body.push(
              this.parseMethod(
                method,
                isGenerator,
                isAsync,
                isConstructor,
                "ClassMethod"
              )
            );
          };

          _proto.pushClassPrivateMethod = function pushClassPrivateMethod(
            classBody,
            method,
            isGenerator,
            isAsync
          ) {
            this.expectPlugin("classPrivateMethods", method.key.start);
            classBody.body.push(
              this.parseMethod(
                method,
                isGenerator,
                isAsync,
                false,
                "ClassPrivateMethod"
              )
            );
          };

          _proto.parsePostMemberNameModifiers = function parsePostMemberNameModifiers(
            methodOrProp
          ) {};

          _proto.parseAccessModifier = function parseAccessModifier() {
            return undefined;
          };

          _proto.parseClassPrivateProperty = function parseClassPrivateProperty(
            node
          ) {
            var oldInMethod = this.state.inMethod;
            this.state.inMethod = false;
            this.state.inClassProperty = true;
            node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;
            this.semicolon();
            this.state.inClassProperty = false;
            this.state.inMethod = oldInMethod;
            return this.finishNode(node, "ClassPrivateProperty");
          };

          _proto.parseClassProperty = function parseClassProperty(node) {
            if (!node.typeAnnotation) {
              this.expectPlugin("classProperties");
            }

            var oldInMethod = this.state.inMethod;
            this.state.inMethod = false;
            this.state.inClassProperty = true;

            if (this.match(types.eq)) {
              this.expectPlugin("classProperties");
              this.next();
              node.value = this.parseMaybeAssign();
            } else {
              node.value = null;
            }

            this.semicolon();
            this.state.inClassProperty = false;
            this.state.inMethod = oldInMethod;
            return this.finishNode(node, "ClassProperty");
          };

          _proto.parseClassId = function parseClassId(
            node,
            isStatement,
            optionalId
          ) {
            if (this.match(types.name)) {
              node.id = this.parseIdentifier();
            } else {
              if (optionalId || !isStatement) {
                node.id = null;
              } else {
                this.unexpected(null, "A class name is required");
              }
            }
          };

          _proto.parseClassSuper = function parseClassSuper(node) {
            node.superClass = this.eat(types._extends)
              ? this.parseExprSubscripts()
              : null;
          };

          _proto.parseExport = function parseExport(node) {
            if (this.shouldParseExportStar()) {
              this.parseExportStar(node);
              if (node.type === "ExportAllDeclaration") return node;
            } else if (this.isExportDefaultSpecifier()) {
              this.expectPlugin("exportDefaultFrom");
              var specifier = this.startNode();
              specifier.exported = this.parseIdentifier(true);
              var specifiers = [
                this.finishNode(specifier, "ExportDefaultSpecifier")
              ];
              node.specifiers = specifiers;

              if (
                this.match(types.comma) &&
                this.lookahead().type === types.star
              ) {
                this.expect(types.comma);

                var _specifier = this.startNode();

                this.expect(types.star);
                this.expectContextual("as");
                _specifier.exported = this.parseIdentifier();
                specifiers.push(
                  this.finishNode(_specifier, "ExportNamespaceSpecifier")
                );
              } else {
                this.parseExportSpecifiersMaybe(node);
              }

              this.parseExportFrom(node, true);
            } else if (this.eat(types._default)) {
              node.declaration = this.parseExportDefaultExpression();
              this.checkExport(node, true, true);
              return this.finishNode(node, "ExportDefaultDeclaration");
            } else if (this.shouldParseExportDeclaration()) {
              if (this.isContextual("async")) {
                var next = this.lookahead();

                if (next.type !== types._function) {
                  this.unexpected(
                    next.start,
                    'Unexpected token, expected "function"'
                  );
                }
              }

              node.specifiers = [];
              node.source = null;
              node.declaration = this.parseExportDeclaration(node);
            } else {
              node.declaration = null;
              node.specifiers = this.parseExportSpecifiers();
              this.parseExportFrom(node);
            }

            this.checkExport(node, true);
            return this.finishNode(node, "ExportNamedDeclaration");
          };

          _proto.parseExportDefaultExpression = function parseExportDefaultExpression() {
            var expr = this.startNode();

            if (this.eat(types._function)) {
              return this.parseFunction(expr, true, false, false, true);
            } else if (
              this.isContextual("async") &&
              this.lookahead().type === types._function
            ) {
              this.eatContextual("async");
              this.eat(types._function);
              return this.parseFunction(expr, true, false, true, true);
            } else if (this.match(types._class)) {
              return this.parseClass(expr, true, true);
            } else if (this.match(types.at)) {
              this.parseDecorators(false);
              return this.parseClass(expr, true, true);
            } else if (
              this.match(types._let) ||
              this.match(types._const) ||
              this.match(types._var)
            ) {
              return this.raise(
                this.state.start,
                "Only expressions, functions or classes are allowed as the `default` export."
              );
            } else {
              var res = this.parseMaybeAssign();
              this.semicolon();
              return res;
            }
          };

          _proto.parseExportDeclaration = function parseExportDeclaration(
            node
          ) {
            return this.parseStatement(true);
          };

          _proto.isExportDefaultSpecifier = function isExportDefaultSpecifier() {
            if (this.match(types.name)) {
              return this.state.value !== "async";
            }

            if (!this.match(types._default)) {
              return false;
            }

            var lookahead = this.lookahead();
            return (
              lookahead.type === types.comma ||
              (lookahead.type === types.name && lookahead.value === "from")
            );
          };

          _proto.parseExportSpecifiersMaybe = function parseExportSpecifiersMaybe(
            node
          ) {
            if (this.eat(types.comma)) {
              node.specifiers = node.specifiers.concat(
                this.parseExportSpecifiers()
              );
            }
          };

          _proto.parseExportFrom = function parseExportFrom(node, expect) {
            if (this.eatContextual("from")) {
              node.source = this.match(types.string)
                ? this.parseExprAtom()
                : this.unexpected();
              this.checkExport(node);
            } else {
              if (expect) {
                this.unexpected();
              } else {
                node.source = null;
              }
            }

            this.semicolon();
          };

          _proto.shouldParseExportStar = function shouldParseExportStar() {
            return this.match(types.star);
          };

          _proto.parseExportStar = function parseExportStar(node) {
            this.expect(types.star);

            if (this.isContextual("as")) {
              this.parseExportNamespace(node);
            } else {
              this.parseExportFrom(node, true);
              this.finishNode(node, "ExportAllDeclaration");
            }
          };

          _proto.parseExportNamespace = function parseExportNamespace(node) {
            this.expectPlugin("exportNamespaceFrom");
            var specifier = this.startNodeAt(
              this.state.lastTokStart,
              this.state.lastTokStartLoc
            );
            this.next();
            specifier.exported = this.parseIdentifier(true);
            node.specifiers = [
              this.finishNode(specifier, "ExportNamespaceSpecifier")
            ];
            this.parseExportSpecifiersMaybe(node);
            this.parseExportFrom(node, true);
          };

          _proto.shouldParseExportDeclaration = function shouldParseExportDeclaration() {
            return (
              this.state.type.keyword === "var" ||
              this.state.type.keyword === "const" ||
              this.state.type.keyword === "let" ||
              this.state.type.keyword === "function" ||
              this.state.type.keyword === "class" ||
              this.isContextual("async") ||
              (this.match(types.at) && this.expectPlugin("decorators2"))
            );
          };

          _proto.checkExport = function checkExport(
            node,
            checkNames,
            isDefault
          ) {
            if (checkNames) {
              if (isDefault) {
                this.checkDuplicateExports(node, "default");
              } else if (node.specifiers && node.specifiers.length) {
                for (
                  var _i4 = 0, _node$specifiers2 = node.specifiers;
                  _i4 < _node$specifiers2.length;
                  _i4++
                ) {
                  var specifier = _node$specifiers2[_i4];
                  this.checkDuplicateExports(
                    specifier,
                    specifier.exported.name
                  );
                }
              } else if (node.declaration) {
                if (
                  node.declaration.type === "FunctionDeclaration" ||
                  node.declaration.type === "ClassDeclaration"
                ) {
                  var id = node.declaration.id;
                  if (!id) throw new Error("Assertion failure");
                  this.checkDuplicateExports(node, id.name);
                } else if (node.declaration.type === "VariableDeclaration") {
                  for (
                    var _i6 = 0,
                      _node$declaration$dec2 = node.declaration.declarations;
                    _i6 < _node$declaration$dec2.length;
                    _i6++
                  ) {
                    var declaration = _node$declaration$dec2[_i6];
                    this.checkDeclaration(declaration.id);
                  }
                }
              }
            }

            var currentContextDecorators = this.state.decoratorStack[
              this.state.decoratorStack.length - 1
            ];

            if (currentContextDecorators.length) {
              var isClass =
                node.declaration &&
                (node.declaration.type === "ClassDeclaration" ||
                  node.declaration.type === "ClassExpression");

              if (!node.declaration || !isClass) {
                throw this.raise(
                  node.start,
                  "You can only use decorators on an export when exporting a class"
                );
              }

              this.takeDecorators(node.declaration);
            }
          };

          _proto.checkDeclaration = function checkDeclaration(node) {
            if (node.type === "ObjectPattern") {
              for (
                var _i8 = 0, _node$properties2 = node.properties;
                _i8 < _node$properties2.length;
                _i8++
              ) {
                var prop = _node$properties2[_i8];
                this.checkDeclaration(prop);
              }
            } else if (node.type === "ArrayPattern") {
              for (
                var _i10 = 0, _node$elements2 = node.elements;
                _i10 < _node$elements2.length;
                _i10++
              ) {
                var elem = _node$elements2[_i10];

                if (elem) {
                  this.checkDeclaration(elem);
                }
              }
            } else if (node.type === "ObjectProperty") {
              this.checkDeclaration(node.value);
            } else if (node.type === "RestElement") {
              this.checkDeclaration(node.argument);
            } else if (node.type === "Identifier") {
              this.checkDuplicateExports(node, node.name);
            }
          };

          _proto.checkDuplicateExports = function checkDuplicateExports(
            node,
            name
          ) {
            if (this.state.exportedIdentifiers.indexOf(name) > -1) {
              this.raiseDuplicateExportError(node, name);
            }

            this.state.exportedIdentifiers.push(name);
          };

          _proto.raiseDuplicateExportError = function raiseDuplicateExportError(
            node,
            name
          ) {
            throw this.raise(
              node.start,
              name === "default"
                ? "Only one default export allowed per module."
                : "`" +
                  name +
                  "` has already been exported. Exported identifiers must be unique."
            );
          };

          _proto.parseExportSpecifiers = function parseExportSpecifiers() {
            var nodes = [];
            var first = true;
            var needsFrom;
            this.expect(types.braceL);

            while (!this.eat(types.braceR)) {
              if (first) {
                first = false;
              } else {
                this.expect(types.comma);
                if (this.eat(types.braceR)) break;
              }

              var isDefault = this.match(types._default);
              if (isDefault && !needsFrom) needsFrom = true;
              var node = this.startNode();
              node.local = this.parseIdentifier(isDefault);
              node.exported = this.eatContextual("as")
                ? this.parseIdentifier(true)
                : node.local.__clone();
              nodes.push(this.finishNode(node, "ExportSpecifier"));
            }

            if (needsFrom && !this.isContextual("from")) {
              this.unexpected();
            }

            return nodes;
          };

          _proto.parseImport = function parseImport(node) {
            if (this.match(types.string)) {
              node.specifiers = [];
              node.source = this.parseExprAtom();
            } else {
              node.specifiers = [];
              this.parseImportSpecifiers(node);
              this.expectContextual("from");
              node.source = this.match(types.string)
                ? this.parseExprAtom()
                : this.unexpected();
            }

            this.semicolon();
            return this.finishNode(node, "ImportDeclaration");
          };

          _proto.shouldParseDefaultImport = function shouldParseDefaultImport(
            node
          ) {
            return this.match(types.name);
          };

          _proto.parseImportSpecifierLocal = function parseImportSpecifierLocal(
            node,
            specifier,
            type,
            contextDescription
          ) {
            specifier.local = this.parseIdentifier();
            this.checkLVal(
              specifier.local,
              true,
              undefined,
              contextDescription
            );
            node.specifiers.push(this.finishNode(specifier, type));
          };

          _proto.parseImportSpecifiers = function parseImportSpecifiers(node) {
            var first = true;

            if (this.shouldParseDefaultImport(node)) {
              this.parseImportSpecifierLocal(
                node,
                this.startNode(),
                "ImportDefaultSpecifier",
                "default import specifier"
              );
              if (!this.eat(types.comma)) return;
            }

            if (this.match(types.star)) {
              var specifier = this.startNode();
              this.next();
              this.expectContextual("as");
              this.parseImportSpecifierLocal(
                node,
                specifier,
                "ImportNamespaceSpecifier",
                "import namespace specifier"
              );
              return;
            }

            this.expect(types.braceL);

            while (!this.eat(types.braceR)) {
              if (first) {
                first = false;
              } else {
                if (this.eat(types.colon)) {
                  this.unexpected(
                    null,
                    "ES2015 named imports do not destructure. " +
                      "Use another statement for destructuring after the import."
                  );
                }

                this.expect(types.comma);
                if (this.eat(types.braceR)) break;
              }

              this.parseImportSpecifier(node);
            }
          };

          _proto.parseImportSpecifier = function parseImportSpecifier(node) {
            var specifier = this.startNode();
            specifier.imported = this.parseIdentifier(true);

            if (this.eatContextual("as")) {
              specifier.local = this.parseIdentifier();
            } else {
              this.checkReservedWord(
                specifier.imported.name,
                specifier.start,
                true,
                true
              );
              specifier.local = specifier.imported.__clone();
            }

            this.checkLVal(
              specifier.local,
              true,
              undefined,
              "import specifier"
            );
            node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
          };

          return StatementParser;
        })(ExpressionParser);

        var plugins = {};

        var Parser = (function(_StatementParser) {
          _inheritsLoose(Parser, _StatementParser);

          function Parser(options, input) {
            var _this;

            options = getOptions(options);
            _this = _StatementParser.call(this, options, input) || this;
            _this.options = options;
            _this.inModule = _this.options.sourceType === "module";
            _this.input = input;
            _this.plugins = pluginsMap(_this.options.plugins);
            _this.filename = options.sourceFilename;

            if (
              _this.state.pos === 0 &&
              _this.input[0] === "#" &&
              _this.input[1] === "!"
            ) {
              _this.skipLineComment(2);
            }

            return _this;
          }

          var _proto = Parser.prototype;

          _proto.parse = function parse() {
            var file = this.startNode();
            var program = this.startNode();
            this.nextToken();
            return this.parseTopLevel(file, program);
          };

          return Parser;
        })(StatementParser);

        function pluginsMap(pluginList) {
          var pluginMap = {};

          for (var _i2 = 0; _i2 < pluginList.length; _i2++) {
            var _name = pluginList[_i2];
            pluginMap[_name] = true;
          }

          return pluginMap;
        }

        function isSimpleProperty(node) {
          return (
            node != null &&
            node.type === "Property" &&
            node.kind === "init" &&
            node.method === false
          );
        }

        var estreePlugin = function estreePlugin(superClass) {
          return (function(_superClass) {
            _inheritsLoose(_class, _superClass);

            function _class() {
              return _superClass.apply(this, arguments) || this;
            }

            var _proto = _class.prototype;

            _proto.estreeParseRegExpLiteral = function estreeParseRegExpLiteral(
              _ref
            ) {
              var pattern = _ref.pattern,
                flags = _ref.flags;
              var regex = null;

              try {
                regex = new RegExp(pattern, flags);
              } catch (e) {}

              var node = this.estreeParseLiteral(regex);
              node.regex = {
                pattern: pattern,
                flags: flags
              };
              return node;
            };

            _proto.estreeParseLiteral = function estreeParseLiteral(value) {
              return this.parseLiteral(value, "Literal");
            };

            _proto.directiveToStmt = function directiveToStmt(directive) {
              var directiveLiteral = directive.value;
              var stmt = this.startNodeAt(directive.start, directive.loc.start);
              var expression = this.startNodeAt(
                directiveLiteral.start,
                directiveLiteral.loc.start
              );
              expression.value = directiveLiteral.value;
              expression.raw = directiveLiteral.extra.raw;
              stmt.expression = this.finishNodeAt(
                expression,
                "Literal",
                directiveLiteral.end,
                directiveLiteral.loc.end
              );
              stmt.directive = directiveLiteral.extra.raw.slice(1, -1);
              return this.finishNodeAt(
                stmt,
                "ExpressionStatement",
                directive.end,
                directive.loc.end
              );
            };

            _proto.initFunction = function initFunction(node, isAsync) {
              _superClass.prototype.initFunction.call(this, node, isAsync);

              node.expression = false;
            };

            _proto.checkDeclaration = function checkDeclaration(node) {
              if (isSimpleProperty(node)) {
                this.checkDeclaration(node.value);
              } else {
                _superClass.prototype.checkDeclaration.call(this, node);
              }
            };

            _proto.checkGetterSetterParams = function checkGetterSetterParams(
              method
            ) {
              var prop = method;
              var paramCount = prop.kind === "get" ? 0 : 1;
              var start = prop.start;

              if (prop.value.params.length !== paramCount) {
                if (prop.kind === "get") {
                  this.raise(
                    start,
                    "getter must not have any formal parameters"
                  );
                } else {
                  this.raise(
                    start,
                    "setter must have exactly one formal parameter"
                  );
                }
              }

              if (
                prop.kind === "set" &&
                prop.value.params[0].type === "RestElement"
              ) {
                this.raise(
                  start,
                  "setter function argument must not be a rest parameter"
                );
              }
            };

            _proto.checkLVal = function checkLVal(
              expr,
              isBinding,
              checkClashes,
              contextDescription
            ) {
              var _this = this;

              switch (expr.type) {
                case "ObjectPattern":
                  expr.properties.forEach(function(prop) {
                    _this.checkLVal(
                      prop.type === "Property" ? prop.value : prop,
                      isBinding,
                      checkClashes,
                      "object destructuring pattern"
                    );
                  });
                  break;

                default:
                  _superClass.prototype.checkLVal.call(
                    this,
                    expr,
                    isBinding,
                    checkClashes,
                    contextDescription
                  );
              }
            };

            _proto.checkPropClash = function checkPropClash(prop, propHash) {
              if (prop.computed || !isSimpleProperty(prop)) return;
              var key = prop.key;
              var name =
                key.type === "Identifier" ? key.name : String(key.value);

              if (name === "__proto__") {
                if (propHash.proto) {
                  this.raise(key.start, "Redefinition of __proto__ property");
                }

                propHash.proto = true;
              }
            };

            _proto.isStrictBody = function isStrictBody(node) {
              var isBlockStatement = node.body.type === "BlockStatement";

              if (isBlockStatement && node.body.body.length > 0) {
                for (
                  var _i2 = 0, _node$body$body2 = node.body.body;
                  _i2 < _node$body$body2.length;
                  _i2++
                ) {
                  var directive = _node$body$body2[_i2];

                  if (
                    directive.type === "ExpressionStatement" &&
                    directive.expression.type === "Literal"
                  ) {
                    if (directive.expression.value === "use strict")
                      return true;
                  } else {
                    break;
                  }
                }
              }

              return false;
            };

            _proto.isValidDirective = function isValidDirective(stmt) {
              return (
                stmt.type === "ExpressionStatement" &&
                stmt.expression.type === "Literal" &&
                typeof stmt.expression.value === "string" &&
                (!stmt.expression.extra || !stmt.expression.extra.parenthesized)
              );
            };

            _proto.stmtToDirective = function stmtToDirective(stmt) {
              var directive = _superClass.prototype.stmtToDirective.call(
                this,
                stmt
              );

              var value = stmt.expression.value;
              directive.value.value = value;
              return directive;
            };

            _proto.parseBlockBody = function parseBlockBody(
              node,
              allowDirectives,
              topLevel,
              end
            ) {
              var _this2 = this;

              _superClass.prototype.parseBlockBody.call(
                this,
                node,
                allowDirectives,
                topLevel,
                end
              );

              var directiveStatements = node.directives.map(function(d) {
                return _this2.directiveToStmt(d);
              });
              node.body = directiveStatements.concat(node.body);
              delete node.directives;
            };

            _proto.pushClassMethod = function pushClassMethod(
              classBody,
              method,
              isGenerator,
              isAsync,
              isConstructor
            ) {
              this.parseMethod(
                method,
                isGenerator,
                isAsync,
                isConstructor,
                "MethodDefinition"
              );

              if (method.typeParameters) {
                method.value.typeParameters = method.typeParameters;
                delete method.typeParameters;
              }

              classBody.body.push(method);
            };

            _proto.parseExprAtom = function parseExprAtom(
              refShorthandDefaultPos
            ) {
              switch (this.state.type) {
                case types.regexp:
                  return this.estreeParseRegExpLiteral(this.state.value);

                case types.num:
                case types.string:
                  return this.estreeParseLiteral(this.state.value);

                case types._null:
                  return this.estreeParseLiteral(null);

                case types._true:
                  return this.estreeParseLiteral(true);

                case types._false:
                  return this.estreeParseLiteral(false);

                default:
                  return _superClass.prototype.parseExprAtom.call(
                    this,
                    refShorthandDefaultPos
                  );
              }
            };

            _proto.parseLiteral = function parseLiteral(
              value,
              type,
              startPos,
              startLoc
            ) {
              var node = _superClass.prototype.parseLiteral.call(
                this,
                value,
                type,
                startPos,
                startLoc
              );

              node.raw = node.extra.raw;
              delete node.extra;
              return node;
            };

            _proto.parseFunctionBody = function parseFunctionBody(
              node,
              allowExpression
            ) {
              _superClass.prototype.parseFunctionBody.call(
                this,
                node,
                allowExpression
              );

              node.expression = node.body.type !== "BlockStatement";
            };

            _proto.parseMethod = function parseMethod(
              node,
              isGenerator,
              isAsync,
              isConstructor,
              type
            ) {
              var funcNode = this.startNode();
              funcNode.kind = node.kind;
              funcNode = _superClass.prototype.parseMethod.call(
                this,
                funcNode,
                isGenerator,
                isAsync,
                isConstructor,
                "FunctionExpression"
              );
              delete funcNode.kind;
              node.value = funcNode;
              return this.finishNode(node, type);
            };

            _proto.parseObjectMethod = function parseObjectMethod(
              prop,
              isGenerator,
              isAsync,
              isPattern,
              containsEsc
            ) {
              var node = _superClass.prototype.parseObjectMethod.call(
                this,
                prop,
                isGenerator,
                isAsync,
                isPattern,
                containsEsc
              );

              if (node) {
                node.type = "Property";
                if (node.kind === "method") node.kind = "init";
                node.shorthand = false;
              }

              return node;
            };

            _proto.parseObjectProperty = function parseObjectProperty(
              prop,
              startPos,
              startLoc,
              isPattern,
              refShorthandDefaultPos
            ) {
              var node = _superClass.prototype.parseObjectProperty.call(
                this,
                prop,
                startPos,
                startLoc,
                isPattern,
                refShorthandDefaultPos
              );

              if (node) {
                node.kind = "init";
                node.type = "Property";
              }

              return node;
            };

            _proto.toAssignable = function toAssignable(
              node,
              isBinding,
              contextDescription
            ) {
              if (isSimpleProperty(node)) {
                this.toAssignable(node.value, isBinding, contextDescription);
                return node;
              }

              return _superClass.prototype.toAssignable.call(
                this,
                node,
                isBinding,
                contextDescription
              );
            };

            _proto.toAssignableObjectExpressionProp = function toAssignableObjectExpressionProp(
              prop,
              isBinding,
              isLast
            ) {
              if (prop.kind === "get" || prop.kind === "set") {
                this.raise(
                  prop.key.start,
                  "Object pattern can't contain getter or setter"
                );
              } else if (prop.method) {
                this.raise(
                  prop.key.start,
                  "Object pattern can't contain methods"
                );
              } else {
                _superClass.prototype.toAssignableObjectExpressionProp.call(
                  this,
                  prop,
                  isBinding,
                  isLast
                );
              }
            };

            return _class;
          })(superClass);
        };

        var primitiveTypes = [
          "any",
          "bool",
          "boolean",
          "empty",
          "false",
          "mixed",
          "null",
          "number",
          "static",
          "string",
          "true",
          "typeof",
          "void"
        ];

        function isEsModuleType(bodyElement) {
          return (
            bodyElement.type === "DeclareExportAllDeclaration" ||
            (bodyElement.type === "DeclareExportDeclaration" &&
              (!bodyElement.declaration ||
                (bodyElement.declaration.type !== "TypeAlias" &&
                  bodyElement.declaration.type !== "InterfaceDeclaration")))
          );
        }

        function hasTypeImportKind(node) {
          return node.importKind === "type" || node.importKind === "typeof";
        }

        function isMaybeDefaultImport(state) {
          return (
            (state.type === types.name || !!state.type.keyword) &&
            state.value !== "from"
          );
        }

        var exportSuggestions = {
          const: "declare export var",
          let: "declare export var",
          type: "export type",
          interface: "export interface"
        };

        function partition(list, test) {
          var list1 = [];
          var list2 = [];

          for (var i = 0; i < list.length; i++) {
            (test(list[i], i, list) ? list1 : list2).push(list[i]);
          }

          return [list1, list2];
        }

        var flowPlugin = function flowPlugin(superClass) {
          return (function(_superClass) {
            _inheritsLoose(_class, _superClass);

            function _class() {
              return _superClass.apply(this, arguments) || this;
            }

            var _proto = _class.prototype;

            _proto.flowParseTypeInitialiser = function flowParseTypeInitialiser(
              tok
            ) {
              var oldInType = this.state.inType;
              this.state.inType = true;
              this.expect(tok || types.colon);
              var type = this.flowParseType();
              this.state.inType = oldInType;
              return type;
            };

            _proto.flowParsePredicate = function flowParsePredicate() {
              var node = this.startNode();
              var moduloLoc = this.state.startLoc;
              var moduloPos = this.state.start;
              this.expect(types.modulo);
              var checksLoc = this.state.startLoc;
              this.expectContextual("checks");

              if (
                moduloLoc.line !== checksLoc.line ||
                moduloLoc.column !== checksLoc.column - 1
              ) {
                this.raise(
                  moduloPos,
                  "Spaces between ´%´ and ´checks´ are not allowed here."
                );
              }

              if (this.eat(types.parenL)) {
                node.value = this.parseExpression();
                this.expect(types.parenR);
                return this.finishNode(node, "DeclaredPredicate");
              } else {
                return this.finishNode(node, "InferredPredicate");
              }
            };

            _proto.flowParseTypeAndPredicateInitialiser = function flowParseTypeAndPredicateInitialiser() {
              var oldInType = this.state.inType;
              this.state.inType = true;
              this.expect(types.colon);
              var type = null;
              var predicate = null;

              if (this.match(types.modulo)) {
                this.state.inType = oldInType;
                predicate = this.flowParsePredicate();
              } else {
                type = this.flowParseType();
                this.state.inType = oldInType;

                if (this.match(types.modulo)) {
                  predicate = this.flowParsePredicate();
                }
              }

              return [type, predicate];
            };

            _proto.flowParseDeclareClass = function flowParseDeclareClass(
              node
            ) {
              this.next();
              this.flowParseInterfaceish(node, true);
              return this.finishNode(node, "DeclareClass");
            };

            _proto.flowParseDeclareFunction = function flowParseDeclareFunction(
              node
            ) {
              this.next();
              var id = (node.id = this.parseIdentifier());
              var typeNode = this.startNode();
              var typeContainer = this.startNode();

              if (this.isRelational("<")) {
                typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
              } else {
                typeNode.typeParameters = null;
              }

              this.expect(types.parenL);
              var tmp = this.flowParseFunctionTypeParams();
              typeNode.params = tmp.params;
              typeNode.rest = tmp.rest;
              this.expect(types.parenR);

              var _flowParseTypeAndPred = this.flowParseTypeAndPredicateInitialiser();

              typeNode.returnType = _flowParseTypeAndPred[0];
              node.predicate = _flowParseTypeAndPred[1];
              typeContainer.typeAnnotation = this.finishNode(
                typeNode,
                "FunctionTypeAnnotation"
              );
              id.typeAnnotation = this.finishNode(
                typeContainer,
                "TypeAnnotation"
              );
              this.finishNode(id, id.type);
              this.semicolon();
              return this.finishNode(node, "DeclareFunction");
            };

            _proto.flowParseDeclare = function flowParseDeclare(
              node,
              insideModule
            ) {
              if (this.match(types._class)) {
                return this.flowParseDeclareClass(node);
              } else if (this.match(types._function)) {
                return this.flowParseDeclareFunction(node);
              } else if (this.match(types._var)) {
                return this.flowParseDeclareVariable(node);
              } else if (this.isContextual("module")) {
                if (this.lookahead().type === types.dot) {
                  return this.flowParseDeclareModuleExports(node);
                } else {
                  if (insideModule) {
                    this.unexpected(
                      null,
                      "`declare module` cannot be used inside another `declare module`"
                    );
                  }

                  return this.flowParseDeclareModule(node);
                }
              } else if (this.isContextual("type")) {
                return this.flowParseDeclareTypeAlias(node);
              } else if (this.isContextual("opaque")) {
                return this.flowParseDeclareOpaqueType(node);
              } else if (this.isContextual("interface")) {
                return this.flowParseDeclareInterface(node);
              } else if (this.match(types._export)) {
                return this.flowParseDeclareExportDeclaration(
                  node,
                  insideModule
                );
              } else {
                throw this.unexpected();
              }
            };

            _proto.flowParseDeclareVariable = function flowParseDeclareVariable(
              node
            ) {
              this.next();
              node.id = this.flowParseTypeAnnotatableIdentifier(true);
              this.semicolon();
              return this.finishNode(node, "DeclareVariable");
            };

            _proto.flowParseDeclareModule = function flowParseDeclareModule(
              node
            ) {
              var _this = this;

              this.next();

              if (this.match(types.string)) {
                node.id = this.parseExprAtom();
              } else {
                node.id = this.parseIdentifier();
              }

              var bodyNode = (node.body = this.startNode());
              var body = (bodyNode.body = []);
              this.expect(types.braceL);

              while (!this.match(types.braceR)) {
                var _bodyNode = this.startNode();

                if (this.match(types._import)) {
                  var lookahead = this.lookahead();

                  if (
                    lookahead.value !== "type" &&
                    lookahead.value !== "typeof"
                  ) {
                    this.unexpected(
                      null,
                      "Imports within a `declare module` body must always be `import type` or `import typeof`"
                    );
                  }

                  this.next();
                  this.parseImport(_bodyNode);
                } else {
                  this.expectContextual(
                    "declare",
                    "Only declares and type imports are allowed inside declare module"
                  );
                  _bodyNode = this.flowParseDeclare(_bodyNode, true);
                }

                body.push(_bodyNode);
              }

              this.expect(types.braceR);
              this.finishNode(bodyNode, "BlockStatement");
              var kind = null;
              var hasModuleExport = false;
              var errorMessage =
                "Found both `declare module.exports` and `declare export` in the same module. " +
                "Modules can only have 1 since they are either an ES module or they are a CommonJS module";
              body.forEach(function(bodyElement) {
                if (isEsModuleType(bodyElement)) {
                  if (kind === "CommonJS") {
                    _this.unexpected(bodyElement.start, errorMessage);
                  }

                  kind = "ES";
                } else if (bodyElement.type === "DeclareModuleExports") {
                  if (hasModuleExport) {
                    _this.unexpected(
                      bodyElement.start,
                      "Duplicate `declare module.exports` statement"
                    );
                  }

                  if (kind === "ES")
                    _this.unexpected(bodyElement.start, errorMessage);
                  kind = "CommonJS";
                  hasModuleExport = true;
                }
              });
              node.kind = kind || "CommonJS";
              return this.finishNode(node, "DeclareModule");
            };

            _proto.flowParseDeclareExportDeclaration = function flowParseDeclareExportDeclaration(
              node,
              insideModule
            ) {
              this.expect(types._export);

              if (this.eat(types._default)) {
                if (this.match(types._function) || this.match(types._class)) {
                  node.declaration = this.flowParseDeclare(this.startNode());
                } else {
                  node.declaration = this.flowParseType();
                  this.semicolon();
                }

                node.default = true;
                return this.finishNode(node, "DeclareExportDeclaration");
              } else {
                if (
                  this.match(types._const) ||
                  this.match(types._let) ||
                  ((this.isContextual("type") ||
                    this.isContextual("interface")) &&
                    !insideModule)
                ) {
                  var label = this.state.value;
                  var suggestion = exportSuggestions[label];
                  this.unexpected(
                    this.state.start,
                    "`declare export " +
                      label +
                      "` is not supported. Use `" +
                      suggestion +
                      "` instead"
                  );
                }

                if (
                  this.match(types._var) ||
                  this.match(types._function) ||
                  this.match(types._class) ||
                  this.isContextual("opaque")
                ) {
                  node.declaration = this.flowParseDeclare(this.startNode());
                  node.default = false;
                  return this.finishNode(node, "DeclareExportDeclaration");
                } else if (
                  this.match(types.star) ||
                  this.match(types.braceL) ||
                  this.isContextual("interface") ||
                  this.isContextual("type") ||
                  this.isContextual("opaque")
                ) {
                  node = this.parseExport(node);

                  if (node.type === "ExportNamedDeclaration") {
                    node.type = "ExportDeclaration";
                    node.default = false;
                    delete node.exportKind;
                  }

                  node.type = "Declare" + node.type;
                  return node;
                }
              }

              throw this.unexpected();
            };

            _proto.flowParseDeclareModuleExports = function flowParseDeclareModuleExports(
              node
            ) {
              this.expectContextual("module");
              this.expect(types.dot);
              this.expectContextual("exports");
              node.typeAnnotation = this.flowParseTypeAnnotation();
              this.semicolon();
              return this.finishNode(node, "DeclareModuleExports");
            };

            _proto.flowParseDeclareTypeAlias = function flowParseDeclareTypeAlias(
              node
            ) {
              this.next();
              this.flowParseTypeAlias(node);
              return this.finishNode(node, "DeclareTypeAlias");
            };

            _proto.flowParseDeclareOpaqueType = function flowParseDeclareOpaqueType(
              node
            ) {
              this.next();
              this.flowParseOpaqueType(node, true);
              return this.finishNode(node, "DeclareOpaqueType");
            };

            _proto.flowParseDeclareInterface = function flowParseDeclareInterface(
              node
            ) {
              this.next();
              this.flowParseInterfaceish(node);
              return this.finishNode(node, "DeclareInterface");
            };

            _proto.flowParseInterfaceish = function flowParseInterfaceish(
              node,
              isClass
            ) {
              node.id = this.flowParseRestrictedIdentifier(!isClass);

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              } else {
                node.typeParameters = null;
              }

              node.extends = [];
              node.implements = [];
              node.mixins = [];

              if (this.eat(types._extends)) {
                do {
                  node.extends.push(this.flowParseInterfaceExtends());
                } while (!isClass && this.eat(types.comma));
              }

              if (this.isContextual("mixins")) {
                this.next();

                do {
                  node.mixins.push(this.flowParseInterfaceExtends());
                } while (this.eat(types.comma));
              }

              if (this.isContextual("implements")) {
                this.next();

                do {
                  node.implements.push(this.flowParseInterfaceExtends());
                } while (this.eat(types.comma));
              }

              node.body = this.flowParseObjectType(true, false, false);
            };

            _proto.flowParseInterfaceExtends = function flowParseInterfaceExtends() {
              var node = this.startNode();
              node.id = this.flowParseQualifiedTypeIdentifier();

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterInstantiation();
              } else {
                node.typeParameters = null;
              }

              return this.finishNode(node, "InterfaceExtends");
            };

            _proto.flowParseInterface = function flowParseInterface(node) {
              this.flowParseInterfaceish(node);
              return this.finishNode(node, "InterfaceDeclaration");
            };

            _proto.checkReservedType = function checkReservedType(
              word,
              startLoc
            ) {
              if (primitiveTypes.indexOf(word) > -1) {
                this.raise(startLoc, "Cannot overwrite primitive type " + word);
              }
            };

            _proto.flowParseRestrictedIdentifier = function flowParseRestrictedIdentifier(
              liberal
            ) {
              this.checkReservedType(this.state.value, this.state.start);
              return this.parseIdentifier(liberal);
            };

            _proto.flowParseTypeAlias = function flowParseTypeAlias(node) {
              node.id = this.flowParseRestrictedIdentifier();

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              } else {
                node.typeParameters = null;
              }

              node.right = this.flowParseTypeInitialiser(types.eq);
              this.semicolon();
              return this.finishNode(node, "TypeAlias");
            };

            _proto.flowParseOpaqueType = function flowParseOpaqueType(
              node,
              declare
            ) {
              this.expectContextual("type");
              node.id = this.flowParseRestrictedIdentifier(true);

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              } else {
                node.typeParameters = null;
              }

              node.supertype = null;

              if (this.match(types.colon)) {
                node.supertype = this.flowParseTypeInitialiser(types.colon);
              }

              node.impltype = null;

              if (!declare) {
                node.impltype = this.flowParseTypeInitialiser(types.eq);
              }

              this.semicolon();
              return this.finishNode(node, "OpaqueType");
            };

            _proto.flowParseTypeParameter = function flowParseTypeParameter() {
              var node = this.startNode();
              var variance = this.flowParseVariance();
              var ident = this.flowParseTypeAnnotatableIdentifier();
              node.name = ident.name;
              node.variance = variance;
              node.bound = ident.typeAnnotation;

              if (this.match(types.eq)) {
                this.eat(types.eq);
                node.default = this.flowParseType();
              }

              return this.finishNode(node, "TypeParameter");
            };

            _proto.flowParseTypeParameterDeclaration = function flowParseTypeParameterDeclaration() {
              var oldInType = this.state.inType;
              var node = this.startNode();
              node.params = [];
              this.state.inType = true;

              if (this.isRelational("<") || this.match(types.jsxTagStart)) {
                this.next();
              } else {
                this.unexpected();
              }

              do {
                node.params.push(this.flowParseTypeParameter());

                if (!this.isRelational(">")) {
                  this.expect(types.comma);
                }
              } while (!this.isRelational(">"));

              this.expectRelational(">");
              this.state.inType = oldInType;
              return this.finishNode(node, "TypeParameterDeclaration");
            };

            _proto.flowParseTypeParameterInstantiation = function flowParseTypeParameterInstantiation() {
              var node = this.startNode();
              var oldInType = this.state.inType;
              node.params = [];
              this.state.inType = true;
              this.expectRelational("<");

              while (!this.isRelational(">")) {
                node.params.push(this.flowParseType());

                if (!this.isRelational(">")) {
                  this.expect(types.comma);
                }
              }

              this.expectRelational(">");
              this.state.inType = oldInType;
              return this.finishNode(node, "TypeParameterInstantiation");
            };

            _proto.flowParseObjectPropertyKey = function flowParseObjectPropertyKey() {
              return this.match(types.num) || this.match(types.string)
                ? this.parseExprAtom()
                : this.parseIdentifier(true);
            };

            _proto.flowParseObjectTypeIndexer = function flowParseObjectTypeIndexer(
              node,
              isStatic,
              variance
            ) {
              node.static = isStatic;
              this.expect(types.bracketL);

              if (this.lookahead().type === types.colon) {
                node.id = this.flowParseObjectPropertyKey();
                node.key = this.flowParseTypeInitialiser();
              } else {
                node.id = null;
                node.key = this.flowParseType();
              }

              this.expect(types.bracketR);
              node.value = this.flowParseTypeInitialiser();
              node.variance = variance;
              return this.finishNode(node, "ObjectTypeIndexer");
            };

            _proto.flowParseObjectTypeMethodish = function flowParseObjectTypeMethodish(
              node
            ) {
              node.params = [];
              node.rest = null;
              node.typeParameters = null;

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              }

              this.expect(types.parenL);

              while (!this.match(types.parenR) && !this.match(types.ellipsis)) {
                node.params.push(this.flowParseFunctionTypeParam());

                if (!this.match(types.parenR)) {
                  this.expect(types.comma);
                }
              }

              if (this.eat(types.ellipsis)) {
                node.rest = this.flowParseFunctionTypeParam();
              }

              this.expect(types.parenR);
              node.returnType = this.flowParseTypeInitialiser();
              return this.finishNode(node, "FunctionTypeAnnotation");
            };

            _proto.flowParseObjectTypeCallProperty = function flowParseObjectTypeCallProperty(
              node,
              isStatic
            ) {
              var valueNode = this.startNode();
              node.static = isStatic;
              node.value = this.flowParseObjectTypeMethodish(valueNode);
              return this.finishNode(node, "ObjectTypeCallProperty");
            };

            _proto.flowParseObjectType = function flowParseObjectType(
              allowStatic,
              allowExact,
              allowSpread
            ) {
              var oldInType = this.state.inType;
              this.state.inType = true;
              var nodeStart = this.startNode();
              nodeStart.callProperties = [];
              nodeStart.properties = [];
              nodeStart.indexers = [];
              var endDelim;
              var exact;

              if (allowExact && this.match(types.braceBarL)) {
                this.expect(types.braceBarL);
                endDelim = types.braceBarR;
                exact = true;
              } else {
                this.expect(types.braceL);
                endDelim = types.braceR;
                exact = false;
              }

              nodeStart.exact = exact;

              while (!this.match(endDelim)) {
                var isStatic = false;
                var node = this.startNode();

                if (
                  allowStatic &&
                  this.isContextual("static") &&
                  this.lookahead().type !== types.colon
                ) {
                  this.next();
                  isStatic = true;
                }

                var variance = this.flowParseVariance();

                if (this.match(types.bracketL)) {
                  nodeStart.indexers.push(
                    this.flowParseObjectTypeIndexer(node, isStatic, variance)
                  );
                } else if (this.match(types.parenL) || this.isRelational("<")) {
                  if (variance) {
                    this.unexpected(variance.start);
                  }

                  nodeStart.callProperties.push(
                    this.flowParseObjectTypeCallProperty(node, isStatic)
                  );
                } else {
                  var kind = "init";

                  if (this.isContextual("get") || this.isContextual("set")) {
                    var lookahead = this.lookahead();

                    if (
                      lookahead.type === types.name ||
                      lookahead.type === types.string ||
                      lookahead.type === types.num
                    ) {
                      kind = this.state.value;
                      this.next();
                    }
                  }

                  nodeStart.properties.push(
                    this.flowParseObjectTypeProperty(
                      node,
                      isStatic,
                      variance,
                      kind,
                      allowSpread
                    )
                  );
                }

                this.flowObjectTypeSemicolon();
              }

              this.expect(endDelim);
              var out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
              this.state.inType = oldInType;
              return out;
            };

            _proto.flowParseObjectTypeProperty = function flowParseObjectTypeProperty(
              node,
              isStatic,
              variance,
              kind,
              allowSpread
            ) {
              if (this.match(types.ellipsis)) {
                if (!allowSpread) {
                  this.unexpected(
                    null,
                    "Spread operator cannot appear in class or interface definitions"
                  );
                }

                if (variance) {
                  this.unexpected(
                    variance.start,
                    "Spread properties cannot have variance"
                  );
                }

                this.expect(types.ellipsis);
                node.argument = this.flowParseType();
                return this.finishNode(node, "ObjectTypeSpreadProperty");
              } else {
                node.key = this.flowParseObjectPropertyKey();
                node.static = isStatic;
                node.kind = kind;
                var optional = false;

                if (this.isRelational("<") || this.match(types.parenL)) {
                  node.method = true;

                  if (variance) {
                    this.unexpected(variance.start);
                  }

                  node.value = this.flowParseObjectTypeMethodish(
                    this.startNodeAt(node.start, node.loc.start)
                  );

                  if (kind === "get" || kind === "set") {
                    this.flowCheckGetterSetterParams(node);
                  }
                } else {
                  if (kind !== "init") this.unexpected();
                  node.method = false;

                  if (this.eat(types.question)) {
                    optional = true;
                  }

                  node.value = this.flowParseTypeInitialiser();
                  node.variance = variance;
                }

                node.optional = optional;
                return this.finishNode(node, "ObjectTypeProperty");
              }
            };

            _proto.flowCheckGetterSetterParams = function flowCheckGetterSetterParams(
              property
            ) {
              var paramCount = property.kind === "get" ? 0 : 1;
              var start = property.start;
              var length =
                property.value.params.length + (property.value.rest ? 1 : 0);

              if (length !== paramCount) {
                if (property.kind === "get") {
                  this.raise(
                    start,
                    "getter must not have any formal parameters"
                  );
                } else {
                  this.raise(
                    start,
                    "setter must have exactly one formal parameter"
                  );
                }
              }

              if (property.kind === "set" && property.value.rest) {
                this.raise(
                  start,
                  "setter function argument must not be a rest parameter"
                );
              }
            };

            _proto.flowObjectTypeSemicolon = function flowObjectTypeSemicolon() {
              if (
                !this.eat(types.semi) &&
                !this.eat(types.comma) &&
                !this.match(types.braceR) &&
                !this.match(types.braceBarR)
              ) {
                this.unexpected();
              }
            };

            _proto.flowParseQualifiedTypeIdentifier = function flowParseQualifiedTypeIdentifier(
              startPos,
              startLoc,
              id
            ) {
              startPos = startPos || this.state.start;
              startLoc = startLoc || this.state.startLoc;
              var node = id || this.parseIdentifier();

              while (this.eat(types.dot)) {
                var node2 = this.startNodeAt(startPos, startLoc);
                node2.qualification = node;
                node2.id = this.parseIdentifier();
                node = this.finishNode(node2, "QualifiedTypeIdentifier");
              }

              return node;
            };

            _proto.flowParseGenericType = function flowParseGenericType(
              startPos,
              startLoc,
              id
            ) {
              var node = this.startNodeAt(startPos, startLoc);
              node.typeParameters = null;
              node.id = this.flowParseQualifiedTypeIdentifier(
                startPos,
                startLoc,
                id
              );

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterInstantiation();
              }

              return this.finishNode(node, "GenericTypeAnnotation");
            };

            _proto.flowParseTypeofType = function flowParseTypeofType() {
              var node = this.startNode();
              this.expect(types._typeof);
              node.argument = this.flowParsePrimaryType();
              return this.finishNode(node, "TypeofTypeAnnotation");
            };

            _proto.flowParseTupleType = function flowParseTupleType() {
              var node = this.startNode();
              node.types = [];
              this.expect(types.bracketL);

              while (
                this.state.pos < this.input.length &&
                !this.match(types.bracketR)
              ) {
                node.types.push(this.flowParseType());
                if (this.match(types.bracketR)) break;
                this.expect(types.comma);
              }

              this.expect(types.bracketR);
              return this.finishNode(node, "TupleTypeAnnotation");
            };

            _proto.flowParseFunctionTypeParam = function flowParseFunctionTypeParam() {
              var name = null;
              var optional = false;
              var typeAnnotation = null;
              var node = this.startNode();
              var lh = this.lookahead();

              if (lh.type === types.colon || lh.type === types.question) {
                name = this.parseIdentifier();

                if (this.eat(types.question)) {
                  optional = true;
                }

                typeAnnotation = this.flowParseTypeInitialiser();
              } else {
                typeAnnotation = this.flowParseType();
              }

              node.name = name;
              node.optional = optional;
              node.typeAnnotation = typeAnnotation;
              return this.finishNode(node, "FunctionTypeParam");
            };

            _proto.reinterpretTypeAsFunctionTypeParam = function reinterpretTypeAsFunctionTypeParam(
              type
            ) {
              var node = this.startNodeAt(type.start, type.loc.start);
              node.name = null;
              node.optional = false;
              node.typeAnnotation = type;
              return this.finishNode(node, "FunctionTypeParam");
            };

            _proto.flowParseFunctionTypeParams = function flowParseFunctionTypeParams(
              params
            ) {
              if (params === void 0) {
                params = [];
              }

              var rest = null;

              while (!this.match(types.parenR) && !this.match(types.ellipsis)) {
                params.push(this.flowParseFunctionTypeParam());

                if (!this.match(types.parenR)) {
                  this.expect(types.comma);
                }
              }

              if (this.eat(types.ellipsis)) {
                rest = this.flowParseFunctionTypeParam();
              }

              return {
                params: params,
                rest: rest
              };
            };

            _proto.flowIdentToTypeAnnotation = function flowIdentToTypeAnnotation(
              startPos,
              startLoc,
              node,
              id
            ) {
              switch (id.name) {
                case "any":
                  return this.finishNode(node, "AnyTypeAnnotation");

                case "void":
                  return this.finishNode(node, "VoidTypeAnnotation");

                case "bool":
                case "boolean":
                  return this.finishNode(node, "BooleanTypeAnnotation");

                case "mixed":
                  return this.finishNode(node, "MixedTypeAnnotation");

                case "empty":
                  return this.finishNode(node, "EmptyTypeAnnotation");

                case "number":
                  return this.finishNode(node, "NumberTypeAnnotation");

                case "string":
                  return this.finishNode(node, "StringTypeAnnotation");

                default:
                  return this.flowParseGenericType(startPos, startLoc, id);
              }
            };

            _proto.flowParsePrimaryType = function flowParsePrimaryType() {
              var startPos = this.state.start;
              var startLoc = this.state.startLoc;
              var node = this.startNode();
              var tmp;
              var type;
              var isGroupedType = false;
              var oldNoAnonFunctionType = this.state.noAnonFunctionType;

              switch (this.state.type) {
                case types.name:
                  return this.flowIdentToTypeAnnotation(
                    startPos,
                    startLoc,
                    node,
                    this.parseIdentifier()
                  );

                case types.braceL:
                  return this.flowParseObjectType(false, false, true);

                case types.braceBarL:
                  return this.flowParseObjectType(false, true, true);

                case types.bracketL:
                  return this.flowParseTupleType();

                case types.relational:
                  if (this.state.value === "<") {
                    node.typeParameters = this.flowParseTypeParameterDeclaration();
                    this.expect(types.parenL);
                    tmp = this.flowParseFunctionTypeParams();
                    node.params = tmp.params;
                    node.rest = tmp.rest;
                    this.expect(types.parenR);
                    this.expect(types.arrow);
                    node.returnType = this.flowParseType();
                    return this.finishNode(node, "FunctionTypeAnnotation");
                  }

                  break;

                case types.parenL:
                  this.next();

                  if (
                    !this.match(types.parenR) &&
                    !this.match(types.ellipsis)
                  ) {
                    if (this.match(types.name)) {
                      var token = this.lookahead().type;
                      isGroupedType =
                        token !== types.question && token !== types.colon;
                    } else {
                      isGroupedType = true;
                    }
                  }

                  if (isGroupedType) {
                    this.state.noAnonFunctionType = false;
                    type = this.flowParseType();
                    this.state.noAnonFunctionType = oldNoAnonFunctionType;

                    if (
                      this.state.noAnonFunctionType ||
                      !(
                        this.match(types.comma) ||
                        (this.match(types.parenR) &&
                          this.lookahead().type === types.arrow)
                      )
                    ) {
                      this.expect(types.parenR);
                      return type;
                    } else {
                      this.eat(types.comma);
                    }
                  }

                  if (type) {
                    tmp = this.flowParseFunctionTypeParams([
                      this.reinterpretTypeAsFunctionTypeParam(type)
                    ]);
                  } else {
                    tmp = this.flowParseFunctionTypeParams();
                  }

                  node.params = tmp.params;
                  node.rest = tmp.rest;
                  this.expect(types.parenR);
                  this.expect(types.arrow);
                  node.returnType = this.flowParseType();
                  node.typeParameters = null;
                  return this.finishNode(node, "FunctionTypeAnnotation");

                case types.string:
                  return this.parseLiteral(
                    this.state.value,
                    "StringLiteralTypeAnnotation"
                  );

                case types._true:
                case types._false:
                  node.value = this.match(types._true);
                  this.next();
                  return this.finishNode(node, "BooleanLiteralTypeAnnotation");

                case types.plusMin:
                  if (this.state.value === "-") {
                    this.next();

                    if (!this.match(types.num)) {
                      this.unexpected(
                        null,
                        'Unexpected token, expected "number"'
                      );
                    }

                    return this.parseLiteral(
                      -this.state.value,
                      "NumberLiteralTypeAnnotation",
                      node.start,
                      node.loc.start
                    );
                  }

                  this.unexpected();

                case types.num:
                  return this.parseLiteral(
                    this.state.value,
                    "NumberLiteralTypeAnnotation"
                  );

                case types._null:
                  this.next();
                  return this.finishNode(node, "NullLiteralTypeAnnotation");

                case types._this:
                  this.next();
                  return this.finishNode(node, "ThisTypeAnnotation");

                case types.star:
                  this.next();
                  return this.finishNode(node, "ExistsTypeAnnotation");

                default:
                  if (this.state.type.keyword === "typeof") {
                    return this.flowParseTypeofType();
                  }
              }

              throw this.unexpected();
            };

            _proto.flowParsePostfixType = function flowParsePostfixType() {
              var startPos = this.state.start,
                startLoc = this.state.startLoc;
              var type = this.flowParsePrimaryType();

              while (!this.canInsertSemicolon() && this.match(types.bracketL)) {
                var node = this.startNodeAt(startPos, startLoc);
                node.elementType = type;
                this.expect(types.bracketL);
                this.expect(types.bracketR);
                type = this.finishNode(node, "ArrayTypeAnnotation");
              }

              return type;
            };

            _proto.flowParsePrefixType = function flowParsePrefixType() {
              var node = this.startNode();

              if (this.eat(types.question)) {
                node.typeAnnotation = this.flowParsePrefixType();
                return this.finishNode(node, "NullableTypeAnnotation");
              } else {
                return this.flowParsePostfixType();
              }
            };

            _proto.flowParseAnonFunctionWithoutParens = function flowParseAnonFunctionWithoutParens() {
              var param = this.flowParsePrefixType();

              if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {
                var node = this.startNodeAt(param.start, param.loc.start);
                node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
                node.rest = null;
                node.returnType = this.flowParseType();
                node.typeParameters = null;
                return this.finishNode(node, "FunctionTypeAnnotation");
              }

              return param;
            };

            _proto.flowParseIntersectionType = function flowParseIntersectionType() {
              var node = this.startNode();
              this.eat(types.bitwiseAND);
              var type = this.flowParseAnonFunctionWithoutParens();
              node.types = [type];

              while (this.eat(types.bitwiseAND)) {
                node.types.push(this.flowParseAnonFunctionWithoutParens());
              }

              return node.types.length === 1
                ? type
                : this.finishNode(node, "IntersectionTypeAnnotation");
            };

            _proto.flowParseUnionType = function flowParseUnionType() {
              var node = this.startNode();
              this.eat(types.bitwiseOR);
              var type = this.flowParseIntersectionType();
              node.types = [type];

              while (this.eat(types.bitwiseOR)) {
                node.types.push(this.flowParseIntersectionType());
              }

              return node.types.length === 1
                ? type
                : this.finishNode(node, "UnionTypeAnnotation");
            };

            _proto.flowParseType = function flowParseType() {
              var oldInType = this.state.inType;
              this.state.inType = true;
              var type = this.flowParseUnionType();
              this.state.inType = oldInType;
              this.state.exprAllowed =
                this.state.exprAllowed || this.state.noAnonFunctionType;
              return type;
            };

            _proto.flowParseTypeAnnotation = function flowParseTypeAnnotation() {
              var node = this.startNode();
              node.typeAnnotation = this.flowParseTypeInitialiser();
              return this.finishNode(node, "TypeAnnotation");
            };

            _proto.flowParseTypeAnnotatableIdentifier = function flowParseTypeAnnotatableIdentifier(
              allowPrimitiveOverride
            ) {
              var ident = allowPrimitiveOverride
                ? this.parseIdentifier()
                : this.flowParseRestrictedIdentifier();

              if (this.match(types.colon)) {
                ident.typeAnnotation = this.flowParseTypeAnnotation();
                this.finishNode(ident, ident.type);
              }

              return ident;
            };

            _proto.typeCastToParameter = function typeCastToParameter(node) {
              node.expression.typeAnnotation = node.typeAnnotation;
              return this.finishNodeAt(
                node.expression,
                node.expression.type,
                node.typeAnnotation.end,
                node.typeAnnotation.loc.end
              );
            };

            _proto.flowParseVariance = function flowParseVariance() {
              var variance = null;

              if (this.match(types.plusMin)) {
                variance = this.startNode();

                if (this.state.value === "+") {
                  variance.kind = "plus";
                } else {
                  variance.kind = "minus";
                }

                this.next();
                this.finishNode(variance, "Variance");
              }

              return variance;
            };

            _proto.parseFunctionBody = function parseFunctionBody(
              node,
              allowExpressionBody
            ) {
              var _this2 = this;

              if (allowExpressionBody) {
                return this.forwardNoArrowParamsConversionAt(node, function() {
                  return _superClass.prototype.parseFunctionBody.call(
                    _this2,
                    node,
                    true
                  );
                });
              }

              return _superClass.prototype.parseFunctionBody.call(
                this,
                node,
                false
              );
            };

            _proto.parseFunctionBodyAndFinish = function parseFunctionBodyAndFinish(
              node,
              type,
              allowExpressionBody
            ) {
              if (!allowExpressionBody && this.match(types.colon)) {
                var typeNode = this.startNode();

                var _flowParseTypeAndPred2 = this.flowParseTypeAndPredicateInitialiser();

                typeNode.typeAnnotation = _flowParseTypeAndPred2[0];
                node.predicate = _flowParseTypeAndPred2[1];
                node.returnType = typeNode.typeAnnotation
                  ? this.finishNode(typeNode, "TypeAnnotation")
                  : null;
              }

              _superClass.prototype.parseFunctionBodyAndFinish.call(
                this,
                node,
                type,
                allowExpressionBody
              );
            };

            _proto.parseStatement = function parseStatement(
              declaration,
              topLevel
            ) {
              if (
                this.state.strict &&
                this.match(types.name) &&
                this.state.value === "interface"
              ) {
                var node = this.startNode();
                this.next();
                return this.flowParseInterface(node);
              } else {
                return _superClass.prototype.parseStatement.call(
                  this,
                  declaration,
                  topLevel
                );
              }
            };

            _proto.parseExpressionStatement = function parseExpressionStatement(
              node,
              expr
            ) {
              if (expr.type === "Identifier") {
                if (expr.name === "declare") {
                  if (
                    this.match(types._class) ||
                    this.match(types.name) ||
                    this.match(types._function) ||
                    this.match(types._var) ||
                    this.match(types._export)
                  ) {
                    return this.flowParseDeclare(node);
                  }
                } else if (this.match(types.name)) {
                  if (expr.name === "interface") {
                    return this.flowParseInterface(node);
                  } else if (expr.name === "type") {
                    return this.flowParseTypeAlias(node);
                  } else if (expr.name === "opaque") {
                    return this.flowParseOpaqueType(node, false);
                  }
                }
              }

              return _superClass.prototype.parseExpressionStatement.call(
                this,
                node,
                expr
              );
            };

            _proto.shouldParseExportDeclaration = function shouldParseExportDeclaration() {
              return (
                this.isContextual("type") ||
                this.isContextual("interface") ||
                this.isContextual("opaque") ||
                _superClass.prototype.shouldParseExportDeclaration.call(this)
              );
            };

            _proto.isExportDefaultSpecifier = function isExportDefaultSpecifier() {
              if (
                this.match(types.name) &&
                (this.state.value === "type" ||
                  this.state.value === "interface" ||
                  this.state.value == "opaque")
              ) {
                return false;
              }

              return _superClass.prototype.isExportDefaultSpecifier.call(this);
            };

            _proto.parseConditional = function parseConditional(
              expr,
              noIn,
              startPos,
              startLoc,
              refNeedsArrowPos
            ) {
              var _this3 = this;

              if (!this.match(types.question)) return expr;

              if (refNeedsArrowPos) {
                var _state = this.state.clone();

                try {
                  return _superClass.prototype.parseConditional.call(
                    this,
                    expr,
                    noIn,
                    startPos,
                    startLoc
                  );
                } catch (err) {
                  if (err instanceof SyntaxError) {
                    this.state = _state;
                    refNeedsArrowPos.start = err.pos || this.state.start;
                    return expr;
                  } else {
                    throw err;
                  }
                }
              }

              this.expect(types.question);
              var state = this.state.clone();
              var originalNoArrowAt = this.state.noArrowAt;
              var node = this.startNodeAt(startPos, startLoc);

              var _tryParseConditionalC = this.tryParseConditionalConsequent(),
                consequent = _tryParseConditionalC.consequent,
                failed = _tryParseConditionalC.failed;

              var _getArrowLikeExpressi = this.getArrowLikeExpressions(
                  consequent
                ),
                valid = _getArrowLikeExpressi[0],
                invalid = _getArrowLikeExpressi[1];

              if (failed || invalid.length > 0) {
                var noArrowAt = originalNoArrowAt.concat();

                if (invalid.length > 0) {
                  this.state = state;
                  this.state.noArrowAt = noArrowAt;

                  for (var i = 0; i < invalid.length; i++) {
                    noArrowAt.push(invalid[i].start);
                  }

                  var _tryParseConditionalC2 = this.tryParseConditionalConsequent();

                  consequent = _tryParseConditionalC2.consequent;
                  failed = _tryParseConditionalC2.failed;

                  var _getArrowLikeExpressi2 = this.getArrowLikeExpressions(
                    consequent
                  );

                  valid = _getArrowLikeExpressi2[0];
                  invalid = _getArrowLikeExpressi2[1];
                }

                if (failed && valid.length > 1) {
                  this.raise(
                    state.start,
                    "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate."
                  );
                }

                if (failed && valid.length === 1) {
                  this.state = state;
                  this.state.noArrowAt = noArrowAt.concat(valid[0].start);

                  var _tryParseConditionalC3 = this.tryParseConditionalConsequent();

                  consequent = _tryParseConditionalC3.consequent;
                  failed = _tryParseConditionalC3.failed;
                }

                this.getArrowLikeExpressions(consequent, true);
              }

              this.state.noArrowAt = originalNoArrowAt;
              this.expect(types.colon);
              node.test = expr;
              node.consequent = consequent;
              node.alternate = this.forwardNoArrowParamsConversionAt(
                node,
                function() {
                  return _this3.parseMaybeAssign(
                    noIn,
                    undefined,
                    undefined,
                    undefined
                  );
                }
              );
              return this.finishNode(node, "ConditionalExpression");
            };

            _proto.tryParseConditionalConsequent = function tryParseConditionalConsequent() {
              this.state.noArrowParamsConversionAt.push(this.state.start);
              var consequent = this.parseMaybeAssign();
              var failed = !this.match(types.colon);
              this.state.noArrowParamsConversionAt.pop();
              return {
                consequent: consequent,
                failed: failed
              };
            };

            _proto.getArrowLikeExpressions = function getArrowLikeExpressions(
              node,
              disallowInvalid
            ) {
              var _this4 = this;

              var stack = [node];
              var arrows = [];

              while (stack.length !== 0) {
                var _node = stack.pop();

                if (_node.type === "ArrowFunctionExpression") {
                  if (_node.typeParameters || !_node.returnType) {
                    this.toAssignableList(
                      _node.params,
                      true,
                      "arrow function parameters"
                    );

                    _superClass.prototype.checkFunctionNameAndParams.call(
                      this,
                      _node,
                      true
                    );
                  } else {
                    arrows.push(_node);
                  }

                  stack.push(_node.body);
                } else if (_node.type === "ConditionalExpression") {
                  stack.push(_node.consequent);
                  stack.push(_node.alternate);
                }
              }

              if (disallowInvalid) {
                for (var i = 0; i < arrows.length; i++) {
                  this.toAssignableList(
                    node.params,
                    true,
                    "arrow function parameters"
                  );
                }

                return [arrows, []];
              }

              return partition(arrows, function(node) {
                try {
                  _this4.toAssignableList(
                    node.params,
                    true,
                    "arrow function parameters"
                  );

                  return true;
                } catch (err) {
                  return false;
                }
              });
            };

            _proto.forwardNoArrowParamsConversionAt = function forwardNoArrowParamsConversionAt(
              node,
              parse
            ) {
              var result;

              if (
                this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1
              ) {
                this.state.noArrowParamsConversionAt.push(this.state.start);
                result = parse();
                this.state.noArrowParamsConversionAt.pop();
              } else {
                result = parse();
              }

              return result;
            };

            _proto.parseParenItem = function parseParenItem(
              node,
              startPos,
              startLoc
            ) {
              node = _superClass.prototype.parseParenItem.call(
                this,
                node,
                startPos,
                startLoc
              );

              if (this.eat(types.question)) {
                node.optional = true;
              }

              if (this.match(types.colon)) {
                var typeCastNode = this.startNodeAt(startPos, startLoc);
                typeCastNode.expression = node;
                typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
                return this.finishNode(typeCastNode, "TypeCastExpression");
              }

              return node;
            };

            _proto.assertModuleNodeAllowed = function assertModuleNodeAllowed(
              node
            ) {
              if (
                (node.type === "ImportDeclaration" &&
                  (node.importKind === "type" ||
                    node.importKind === "typeof")) ||
                (node.type === "ExportNamedDeclaration" &&
                  node.exportKind === "type") ||
                (node.type === "ExportAllDeclaration" &&
                  node.exportKind === "type")
              ) {
                return;
              }

              _superClass.prototype.assertModuleNodeAllowed.call(this, node);
            };

            _proto.parseExport = function parseExport(node) {
              node = _superClass.prototype.parseExport.call(this, node);

              if (
                node.type === "ExportNamedDeclaration" ||
                node.type === "ExportAllDeclaration"
              ) {
                node.exportKind = node.exportKind || "value";
              }

              return node;
            };

            _proto.parseExportDeclaration = function parseExportDeclaration(
              node
            ) {
              if (this.isContextual("type")) {
                node.exportKind = "type";
                var declarationNode = this.startNode();
                this.next();

                if (this.match(types.braceL)) {
                  node.specifiers = this.parseExportSpecifiers();
                  this.parseExportFrom(node);
                  return null;
                } else {
                  return this.flowParseTypeAlias(declarationNode);
                }
              } else if (this.isContextual("opaque")) {
                node.exportKind = "type";

                var _declarationNode = this.startNode();

                this.next();
                return this.flowParseOpaqueType(_declarationNode, false);
              } else if (this.isContextual("interface")) {
                node.exportKind = "type";

                var _declarationNode2 = this.startNode();

                this.next();
                return this.flowParseInterface(_declarationNode2);
              } else {
                return _superClass.prototype.parseExportDeclaration.call(
                  this,
                  node
                );
              }
            };

            _proto.shouldParseExportStar = function shouldParseExportStar() {
              return (
                _superClass.prototype.shouldParseExportStar.call(this) ||
                (this.isContextual("type") &&
                  this.lookahead().type === types.star)
              );
            };

            _proto.parseExportStar = function parseExportStar(node) {
              if (this.eatContextual("type")) {
                node.exportKind = "type";
              }

              return _superClass.prototype.parseExportStar.call(this, node);
            };

            _proto.parseExportNamespace = function parseExportNamespace(node) {
              if (node.exportKind === "type") {
                this.unexpected();
              }

              return _superClass.prototype.parseExportNamespace.call(
                this,
                node
              );
            };

            _proto.parseClassId = function parseClassId(
              node,
              isStatement,
              optionalId
            ) {
              _superClass.prototype.parseClassId.call(
                this,
                node,
                isStatement,
                optionalId
              );

              if (this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              }
            };

            _proto.isKeyword = function isKeyword$$1(name) {
              if (this.state.inType && name === "void") {
                return false;
              } else {
                return _superClass.prototype.isKeyword.call(this, name);
              }
            };

            _proto.readToken = function readToken(code) {
              var next = this.input.charCodeAt(this.state.pos + 1);

              if (this.state.inType && (code === 62 || code === 60)) {
                return this.finishOp(types.relational, 1);
              } else if (isIteratorStart(code, next)) {
                this.state.isIterator = true;
                return _superClass.prototype.readWord.call(this);
              } else {
                return _superClass.prototype.readToken.call(this, code);
              }
            };

            _proto.toAssignable = function toAssignable(
              node,
              isBinding,
              contextDescription
            ) {
              if (node.type === "TypeCastExpression") {
                return _superClass.prototype.toAssignable.call(
                  this,
                  this.typeCastToParameter(node),
                  isBinding,
                  contextDescription
                );
              } else {
                return _superClass.prototype.toAssignable.call(
                  this,
                  node,
                  isBinding,
                  contextDescription
                );
              }
            };

            _proto.toAssignableList = function toAssignableList(
              exprList,
              isBinding,
              contextDescription
            ) {
              for (var i = 0; i < exprList.length; i++) {
                var expr = exprList[i];

                if (expr && expr.type === "TypeCastExpression") {
                  exprList[i] = this.typeCastToParameter(expr);
                }
              }

              return _superClass.prototype.toAssignableList.call(
                this,
                exprList,
                isBinding,
                contextDescription
              );
            };

            _proto.toReferencedList = function toReferencedList(exprList) {
              for (var i = 0; i < exprList.length; i++) {
                var expr = exprList[i];

                if (
                  expr &&
                  expr._exprListItem &&
                  expr.type === "TypeCastExpression"
                ) {
                  this.raise(expr.start, "Unexpected type cast");
                }
              }

              return exprList;
            };

            _proto.parseExprListItem = function parseExprListItem(
              allowEmpty,
              refShorthandDefaultPos,
              refNeedsArrowPos
            ) {
              var container = this.startNode();

              var node = _superClass.prototype.parseExprListItem.call(
                this,
                allowEmpty,
                refShorthandDefaultPos,
                refNeedsArrowPos
              );

              if (this.match(types.colon)) {
                container._exprListItem = true;
                container.expression = node;
                container.typeAnnotation = this.flowParseTypeAnnotation();
                return this.finishNode(container, "TypeCastExpression");
              } else {
                return node;
              }
            };

            _proto.checkLVal = function checkLVal(
              expr,
              isBinding,
              checkClashes,
              contextDescription
            ) {
              if (expr.type !== "TypeCastExpression") {
                return _superClass.prototype.checkLVal.call(
                  this,
                  expr,
                  isBinding,
                  checkClashes,
                  contextDescription
                );
              }
            };

            _proto.parseClassProperty = function parseClassProperty(node) {
              if (this.match(types.colon)) {
                node.typeAnnotation = this.flowParseTypeAnnotation();
              }

              return _superClass.prototype.parseClassProperty.call(this, node);
            };

            _proto.isClassMethod = function isClassMethod() {
              return (
                this.isRelational("<") ||
                _superClass.prototype.isClassMethod.call(this)
              );
            };

            _proto.isClassProperty = function isClassProperty() {
              return (
                this.match(types.colon) ||
                _superClass.prototype.isClassProperty.call(this)
              );
            };

            _proto.isNonstaticConstructor = function isNonstaticConstructor(
              method
            ) {
              return (
                !this.match(types.colon) &&
                _superClass.prototype.isNonstaticConstructor.call(this, method)
              );
            };

            _proto.pushClassMethod = function pushClassMethod(
              classBody,
              method,
              isGenerator,
              isAsync,
              isConstructor
            ) {
              if (method.variance) {
                this.unexpected(method.variance.start);
              }

              delete method.variance;

              if (this.isRelational("<")) {
                method.typeParameters = this.flowParseTypeParameterDeclaration();
              }

              _superClass.prototype.pushClassMethod.call(
                this,
                classBody,
                method,
                isGenerator,
                isAsync,
                isConstructor
              );
            };

            _proto.pushClassPrivateMethod = function pushClassPrivateMethod(
              classBody,
              method,
              isGenerator,
              isAsync
            ) {
              if (method.variance) {
                this.unexpected(method.variance.start);
              }

              delete method.variance;

              if (this.isRelational("<")) {
                method.typeParameters = this.flowParseTypeParameterDeclaration();
              }

              _superClass.prototype.pushClassPrivateMethod.call(
                this,
                classBody,
                method,
                isGenerator,
                isAsync
              );
            };

            _proto.parseClassSuper = function parseClassSuper(node) {
              _superClass.prototype.parseClassSuper.call(this, node);

              if (node.superClass && this.isRelational("<")) {
                node.superTypeParameters = this.flowParseTypeParameterInstantiation();
              }

              if (this.isContextual("implements")) {
                this.next();
                var implemented = (node.implements = []);

                do {
                  var _node2 = this.startNode();

                  _node2.id = this.flowParseRestrictedIdentifier(true);

                  if (this.isRelational("<")) {
                    _node2.typeParameters = this.flowParseTypeParameterInstantiation();
                  } else {
                    _node2.typeParameters = null;
                  }

                  implemented.push(this.finishNode(_node2, "ClassImplements"));
                } while (this.eat(types.comma));
              }
            };

            _proto.parsePropertyName = function parsePropertyName(node) {
              var variance = this.flowParseVariance();

              var key = _superClass.prototype.parsePropertyName.call(
                this,
                node
              );

              node.variance = variance;
              return key;
            };

            _proto.parseObjPropValue = function parseObjPropValue(
              prop,
              startPos,
              startLoc,
              isGenerator,
              isAsync,
              isPattern,
              refShorthandDefaultPos,
              containsEsc
            ) {
              if (prop.variance) {
                this.unexpected(prop.variance.start);
              }

              delete prop.variance;
              var typeParameters;

              if (this.isRelational("<")) {
                typeParameters = this.flowParseTypeParameterDeclaration();
                if (!this.match(types.parenL)) this.unexpected();
              }

              _superClass.prototype.parseObjPropValue.call(
                this,
                prop,
                startPos,
                startLoc,
                isGenerator,
                isAsync,
                isPattern,
                refShorthandDefaultPos,
                containsEsc
              );

              if (typeParameters) {
                (prop.value || prop).typeParameters = typeParameters;
              }
            };

            _proto.parseAssignableListItemTypes = function parseAssignableListItemTypes(
              param
            ) {
              if (this.eat(types.question)) {
                if (param.type !== "Identifier") {
                  throw this.raise(
                    param.start,
                    "A binding pattern parameter cannot be optional in an implementation signature."
                  );
                }

                param.optional = true;
              }

              if (this.match(types.colon)) {
                param.typeAnnotation = this.flowParseTypeAnnotation();
              }

              this.finishNode(param, param.type);
              return param;
            };

            _proto.parseMaybeDefault = function parseMaybeDefault(
              startPos,
              startLoc,
              left
            ) {
              var node = _superClass.prototype.parseMaybeDefault.call(
                this,
                startPos,
                startLoc,
                left
              );

              if (
                node.type === "AssignmentPattern" &&
                node.typeAnnotation &&
                node.right.start < node.typeAnnotation.start
              ) {
                this.raise(
                  node.typeAnnotation.start,
                  "Type annotations must come before default assignments, " +
                    "e.g. instead of `age = 25: number` use `age: number = 25`"
                );
              }

              return node;
            };

            _proto.shouldParseDefaultImport = function shouldParseDefaultImport(
              node
            ) {
              if (!hasTypeImportKind(node)) {
                return _superClass.prototype.shouldParseDefaultImport.call(
                  this,
                  node
                );
              }

              return isMaybeDefaultImport(this.state);
            };

            _proto.parseImportSpecifierLocal = function parseImportSpecifierLocal(
              node,
              specifier,
              type,
              contextDescription
            ) {
              specifier.local = hasTypeImportKind(node)
                ? this.flowParseRestrictedIdentifier(true)
                : this.parseIdentifier();
              this.checkLVal(
                specifier.local,
                true,
                undefined,
                contextDescription
              );
              node.specifiers.push(this.finishNode(specifier, type));
            };

            _proto.parseImportSpecifiers = function parseImportSpecifiers(
              node
            ) {
              node.importKind = "value";
              var kind = null;

              if (this.match(types._typeof)) {
                kind = "typeof";
              } else if (this.isContextual("type")) {
                kind = "type";
              }

              if (kind) {
                var lh = this.lookahead();

                if (kind === "type" && lh.type === types.star) {
                  this.unexpected(lh.start);
                }

                if (
                  isMaybeDefaultImport(lh) ||
                  lh.type === types.braceL ||
                  lh.type === types.star
                ) {
                  this.next();
                  node.importKind = kind;
                }
              }

              _superClass.prototype.parseImportSpecifiers.call(this, node);
            };

            _proto.parseImportSpecifier = function parseImportSpecifier(node) {
              var specifier = this.startNode();
              var firstIdentLoc = this.state.start;
              var firstIdent = this.parseIdentifier(true);
              var specifierTypeKind = null;

              if (firstIdent.name === "type") {
                specifierTypeKind = "type";
              } else if (firstIdent.name === "typeof") {
                specifierTypeKind = "typeof";
              }

              var isBinding = false;

              if (
                this.isContextual("as") &&
                !this.isLookaheadContextual("as")
              ) {
                var as_ident = this.parseIdentifier(true);

                if (
                  specifierTypeKind !== null &&
                  !this.match(types.name) &&
                  !this.state.type.keyword
                ) {
                  specifier.imported = as_ident;
                  specifier.importKind = specifierTypeKind;
                  specifier.local = as_ident.__clone();
                } else {
                  specifier.imported = firstIdent;
                  specifier.importKind = null;
                  specifier.local = this.parseIdentifier();
                }
              } else if (
                specifierTypeKind !== null &&
                (this.match(types.name) || this.state.type.keyword)
              ) {
                specifier.imported = this.parseIdentifier(true);
                specifier.importKind = specifierTypeKind;

                if (this.eatContextual("as")) {
                  specifier.local = this.parseIdentifier();
                } else {
                  isBinding = true;
                  specifier.local = specifier.imported.__clone();
                }
              } else {
                isBinding = true;
                specifier.imported = firstIdent;
                specifier.importKind = null;
                specifier.local = specifier.imported.__clone();
              }

              var nodeIsTypeImport = hasTypeImportKind(node);
              var specifierIsTypeImport = hasTypeImportKind(specifier);

              if (nodeIsTypeImport && specifierIsTypeImport) {
                this.raise(
                  firstIdentLoc,
                  "The `type` and `typeof` keywords on named imports can only be used on regular " +
                    "`import` statements. It cannot be used with `import type` or `import typeof` statements"
                );
              }

              if (nodeIsTypeImport || specifierIsTypeImport) {
                this.checkReservedType(
                  specifier.local.name,
                  specifier.local.start
                );
              }

              if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {
                this.checkReservedWord(
                  specifier.local.name,
                  specifier.start,
                  true,
                  true
                );
              }

              this.checkLVal(
                specifier.local,
                true,
                undefined,
                "import specifier"
              );
              node.specifiers.push(
                this.finishNode(specifier, "ImportSpecifier")
              );
            };

            _proto.parseFunctionParams = function parseFunctionParams(node) {
              var kind = node.kind;

              if (kind !== "get" && kind !== "set" && this.isRelational("<")) {
                node.typeParameters = this.flowParseTypeParameterDeclaration();
              }

              _superClass.prototype.parseFunctionParams.call(this, node);
            };

            _proto.parseVarHead = function parseVarHead(decl) {
              _superClass.prototype.parseVarHead.call(this, decl);

              if (this.match(types.colon)) {
                decl.id.typeAnnotation = this.flowParseTypeAnnotation();
                this.finishNode(decl.id, decl.id.type);
              }
            };

            _proto.parseAsyncArrowFromCallExpression = function parseAsyncArrowFromCallExpression(
              node,
              call
            ) {
              if (this.match(types.colon)) {
                var oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                node.returnType = this.flowParseTypeAnnotation();
                this.state.noAnonFunctionType = oldNoAnonFunctionType;
              }

              return _superClass.prototype.parseAsyncArrowFromCallExpression.call(
                this,
                node,
                call
              );
            };

            _proto.shouldParseAsyncArrow = function shouldParseAsyncArrow() {
              return (
                this.match(types.colon) ||
                _superClass.prototype.shouldParseAsyncArrow.call(this)
              );
            };

            _proto.parseMaybeAssign = function parseMaybeAssign(
              noIn,
              refShorthandDefaultPos,
              afterLeftParse,
              refNeedsArrowPos
            ) {
              var _this5 = this;

              var jsxError = null;

              if (types.jsxTagStart && this.match(types.jsxTagStart)) {
                var state = this.state.clone();

                try {
                  return _superClass.prototype.parseMaybeAssign.call(
                    this,
                    noIn,
                    refShorthandDefaultPos,
                    afterLeftParse,
                    refNeedsArrowPos
                  );
                } catch (err) {
                  if (err instanceof SyntaxError) {
                    this.state = state;
                    this.state.context.length -= 2;
                    jsxError = err;
                  } else {
                    throw err;
                  }
                }
              }

              if (jsxError != null || this.isRelational("<")) {
                var arrowExpression;
                var typeParameters;

                try {
                  typeParameters = this.flowParseTypeParameterDeclaration();
                  arrowExpression = this.forwardNoArrowParamsConversionAt(
                    typeParameters,
                    function() {
                      return _superClass.prototype.parseMaybeAssign.call(
                        _this5,
                        noIn,
                        refShorthandDefaultPos,
                        afterLeftParse,
                        refNeedsArrowPos
                      );
                    }
                  );
                  arrowExpression.typeParameters = typeParameters;
                  this.resetStartLocationFromNode(
                    arrowExpression,
                    typeParameters
                  );
                } catch (err) {
                  throw jsxError || err;
                }

                if (arrowExpression.type === "ArrowFunctionExpression") {
                  return arrowExpression;
                } else if (jsxError != null) {
                  throw jsxError;
                } else {
                  this.raise(
                    typeParameters.start,
                    "Expected an arrow function after this type parameter declaration"
                  );
                }
              }

              return _superClass.prototype.parseMaybeAssign.call(
                this,
                noIn,
                refShorthandDefaultPos,
                afterLeftParse,
                refNeedsArrowPos
              );
            };

            _proto.parseArrow = function parseArrow(node) {
              if (this.match(types.colon)) {
                var state = this.state.clone();

                try {
                  var oldNoAnonFunctionType = this.state.noAnonFunctionType;
                  this.state.noAnonFunctionType = true;
                  var typeNode = this.startNode();

                  var _flowParseTypeAndPred3 = this.flowParseTypeAndPredicateInitialiser();

                  typeNode.typeAnnotation = _flowParseTypeAndPred3[0];
                  node.predicate = _flowParseTypeAndPred3[1];
                  this.state.noAnonFunctionType = oldNoAnonFunctionType;
                  if (this.canInsertSemicolon()) this.unexpected();
                  if (!this.match(types.arrow)) this.unexpected();
                  node.returnType = typeNode.typeAnnotation
                    ? this.finishNode(typeNode, "TypeAnnotation")
                    : null;
                } catch (err) {
                  if (err instanceof SyntaxError) {
                    this.state = state;
                  } else {
                    throw err;
                  }
                }
              }

              return _superClass.prototype.parseArrow.call(this, node);
            };

            _proto.shouldParseArrow = function shouldParseArrow() {
              return (
                this.match(types.colon) ||
                _superClass.prototype.shouldParseArrow.call(this)
              );
            };

            _proto.setArrowFunctionParameters = function setArrowFunctionParameters(
              node,
              params
            ) {
              if (
                this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1
              ) {
                node.params = params;
              } else {
                _superClass.prototype.setArrowFunctionParameters.call(
                  this,
                  node,
                  params
                );
              }
            };

            _proto.checkFunctionNameAndParams = function checkFunctionNameAndParams(
              node,
              isArrowFunction
            ) {
              if (
                isArrowFunction &&
                this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1
              ) {
                return;
              }

              return _superClass.prototype.checkFunctionNameAndParams.call(
                this,
                node,
                isArrowFunction
              );
            };

            _proto.parseParenAndDistinguishExpression = function parseParenAndDistinguishExpression(
              canBeArrow
            ) {
              return _superClass.prototype.parseParenAndDistinguishExpression.call(
                this,
                canBeArrow &&
                  this.state.noArrowAt.indexOf(this.state.start) === -1
              );
            };

            _proto.parseSubscripts = function parseSubscripts(
              base,
              startPos,
              startLoc,
              noCalls
            ) {
              if (
                base.type === "Identifier" &&
                base.name === "async" &&
                this.state.noArrowAt.indexOf(startPos) !== -1
              ) {
                this.next();
                var node = this.startNodeAt(startPos, startLoc);
                node.callee = base;
                node.arguments = this.parseCallExpressionArguments(
                  types.parenR,
                  false
                );
                base = this.finishNode(node, "CallExpression");
              } else if (
                base.type === "Identifier" &&
                base.name === "async" &&
                this.isRelational("<")
              ) {
                var state = this.state.clone();
                var error;

                try {
                  var _node3 = this.parseAsyncArrowWithTypeParameters(
                    startPos,
                    startLoc
                  );

                  if (_node3) return _node3;
                } catch (e) {
                  error = e;
                }

                this.state = state;

                try {
                  return _superClass.prototype.parseSubscripts.call(
                    this,
                    base,
                    startPos,
                    startLoc,
                    noCalls
                  );
                } catch (e) {
                  throw error || e;
                }
              }

              return _superClass.prototype.parseSubscripts.call(
                this,
                base,
                startPos,
                startLoc,
                noCalls
              );
            };

            _proto.parseAsyncArrowWithTypeParameters = function parseAsyncArrowWithTypeParameters(
              startPos,
              startLoc
            ) {
              var node = this.startNodeAt(startPos, startLoc);
              this.parseFunctionParams(node);
              if (!this.parseArrow(node)) return;
              return this.parseArrowExpression(node, undefined, true);
            };

            _proto.readToken_mult_modulo = function readToken_mult_modulo(
              code
            ) {
              var next = this.input.charCodeAt(this.state.pos + 1);

              if (code === 42 && next === 47 && this.state.hasFlowComment) {
                this.state.hasFlowComment = false;
                this.state.pos += 2;
                this.nextToken();
                return;
              }

              _superClass.prototype.readToken_mult_modulo.call(this, code);
            };

            _proto.skipBlockComment = function skipBlockComment() {
              if (
                this.hasPlugin("flow") &&
                this.hasPlugin("flowComments") &&
                this.skipFlowComment()
              ) {
                this.hasFlowCommentCompletion();
                this.state.pos += this.skipFlowComment();
                this.state.hasFlowComment = true;
                return;
              }

              var end;

              if (this.hasPlugin("flow") && this.state.hasFlowComment) {
                end = this.input.indexOf("*-/", (this.state.pos += 2));
                if (end === -1)
                  this.raise(this.state.pos - 2, "Unterminated comment");
                this.state.pos = end + 3;
                return;
              }

              _superClass.prototype.skipBlockComment.call(this);
            };

            _proto.skipFlowComment = function skipFlowComment() {
              var ch2 = this.input.charCodeAt(this.state.pos + 2);
              var ch3 = this.input.charCodeAt(this.state.pos + 3);

              if (ch2 === 58 && ch3 === 58) {
                return 4;
              }

              if (this.input.slice(this.state.pos + 2, 14) === "flow-include") {
                return 14;
              }

              if (ch2 === 58 && ch3 !== 58 && 2) {
                return 2;
              }

              return false;
            };

            _proto.hasFlowCommentCompletion = function hasFlowCommentCompletion() {
              var end = this.input.indexOf("*/", this.state.pos);

              if (end === -1) {
                this.raise(this.state.pos, "Unterminated comment");
              }
            };

            return _class;
          })(superClass);
        };

        var entities = {
          quot: '"',
          amp: "&",
          apos: "'",
          lt: "<",
          gt: ">",
          nbsp: "\xA0",
          iexcl: "\xA1",
          cent: "\xA2",
          pound: "\xA3",
          curren: "\xA4",
          yen: "\xA5",
          brvbar: "\xA6",
          sect: "\xA7",
          uml: "\xA8",
          copy: "\xA9",
          ordf: "\xAA",
          laquo: "\xAB",
          not: "\xAC",
          shy: "\xAD",
          reg: "\xAE",
          macr: "\xAF",
          deg: "\xB0",
          plusmn: "\xB1",
          sup2: "\xB2",
          sup3: "\xB3",
          acute: "\xB4",
          micro: "\xB5",
          para: "\xB6",
          middot: "\xB7",
          cedil: "\xB8",
          sup1: "\xB9",
          ordm: "\xBA",
          raquo: "\xBB",
          frac14: "\xBC",
          frac12: "\xBD",
          frac34: "\xBE",
          iquest: "\xBF",
          Agrave: "\xC0",
          Aacute: "\xC1",
          Acirc: "\xC2",
          Atilde: "\xC3",
          Auml: "\xC4",
          Aring: "\xC5",
          AElig: "\xC6",
          Ccedil: "\xC7",
          Egrave: "\xC8",
          Eacute: "\xC9",
          Ecirc: "\xCA",
          Euml: "\xCB",
          Igrave: "\xCC",
          Iacute: "\xCD",
          Icirc: "\xCE",
          Iuml: "\xCF",
          ETH: "\xD0",
          Ntilde: "\xD1",
          Ograve: "\xD2",
          Oacute: "\xD3",
          Ocirc: "\xD4",
          Otilde: "\xD5",
          Ouml: "\xD6",
          times: "\xD7",
          Oslash: "\xD8",
          Ugrave: "\xD9",
          Uacute: "\xDA",
          Ucirc: "\xDB",
          Uuml: "\xDC",
          Yacute: "\xDD",
          THORN: "\xDE",
          szlig: "\xDF",
          agrave: "\xE0",
          aacute: "\xE1",
          acirc: "\xE2",
          atilde: "\xE3",
          auml: "\xE4",
          aring: "\xE5",
          aelig: "\xE6",
          ccedil: "\xE7",
          egrave: "\xE8",
          eacute: "\xE9",
          ecirc: "\xEA",
          euml: "\xEB",
          igrave: "\xEC",
          iacute: "\xED",
          icirc: "\xEE",
          iuml: "\xEF",
          eth: "\xF0",
          ntilde: "\xF1",
          ograve: "\xF2",
          oacute: "\xF3",
          ocirc: "\xF4",
          otilde: "\xF5",
          ouml: "\xF6",
          divide: "\xF7",
          oslash: "\xF8",
          ugrave: "\xF9",
          uacute: "\xFA",
          ucirc: "\xFB",
          uuml: "\xFC",
          yacute: "\xFD",
          thorn: "\xFE",
          yuml: "\xFF",
          OElig: "\u0152",
          oelig: "\u0153",
          Scaron: "\u0160",
          scaron: "\u0161",
          Yuml: "\u0178",
          fnof: "\u0192",
          circ: "\u02C6",
          tilde: "\u02DC",
          Alpha: "\u0391",
          Beta: "\u0392",
          Gamma: "\u0393",
          Delta: "\u0394",
          Epsilon: "\u0395",
          Zeta: "\u0396",
          Eta: "\u0397",
          Theta: "\u0398",
          Iota: "\u0399",
          Kappa: "\u039A",
          Lambda: "\u039B",
          Mu: "\u039C",
          Nu: "\u039D",
          Xi: "\u039E",
          Omicron: "\u039F",
          Pi: "\u03A0",
          Rho: "\u03A1",
          Sigma: "\u03A3",
          Tau: "\u03A4",
          Upsilon: "\u03A5",
          Phi: "\u03A6",
          Chi: "\u03A7",
          Psi: "\u03A8",
          Omega: "\u03A9",
          alpha: "\u03B1",
          beta: "\u03B2",
          gamma: "\u03B3",
          delta: "\u03B4",
          epsilon: "\u03B5",
          zeta: "\u03B6",
          eta: "\u03B7",
          theta: "\u03B8",
          iota: "\u03B9",
          kappa: "\u03BA",
          lambda: "\u03BB",
          mu: "\u03BC",
          nu: "\u03BD",
          xi: "\u03BE",
          omicron: "\u03BF",
          pi: "\u03C0",
          rho: "\u03C1",
          sigmaf: "\u03C2",
          sigma: "\u03C3",
          tau: "\u03C4",
          upsilon: "\u03C5",
          phi: "\u03C6",
          chi: "\u03C7",
          psi: "\u03C8",
          omega: "\u03C9",
          thetasym: "\u03D1",
          upsih: "\u03D2",
          piv: "\u03D6",
          ensp: "\u2002",
          emsp: "\u2003",
          thinsp: "\u2009",
          zwnj: "\u200C",
          zwj: "\u200D",
          lrm: "\u200E",
          rlm: "\u200F",
          ndash: "\u2013",
          mdash: "\u2014",
          lsquo: "\u2018",
          rsquo: "\u2019",
          sbquo: "\u201A",
          ldquo: "\u201C",
          rdquo: "\u201D",
          bdquo: "\u201E",
          dagger: "\u2020",
          Dagger: "\u2021",
          bull: "\u2022",
          hellip: "\u2026",
          permil: "\u2030",
          prime: "\u2032",
          Prime: "\u2033",
          lsaquo: "\u2039",
          rsaquo: "\u203A",
          oline: "\u203E",
          frasl: "\u2044",
          euro: "\u20AC",
          image: "\u2111",
          weierp: "\u2118",
          real: "\u211C",
          trade: "\u2122",
          alefsym: "\u2135",
          larr: "\u2190",
          uarr: "\u2191",
          rarr: "\u2192",
          darr: "\u2193",
          harr: "\u2194",
          crarr: "\u21B5",
          lArr: "\u21D0",
          uArr: "\u21D1",
          rArr: "\u21D2",
          dArr: "\u21D3",
          hArr: "\u21D4",
          forall: "\u2200",
          part: "\u2202",
          exist: "\u2203",
          empty: "\u2205",
          nabla: "\u2207",
          isin: "\u2208",
          notin: "\u2209",
          ni: "\u220B",
          prod: "\u220F",
          sum: "\u2211",
          minus: "\u2212",
          lowast: "\u2217",
          radic: "\u221A",
          prop: "\u221D",
          infin: "\u221E",
          ang: "\u2220",
          and: "\u2227",
          or: "\u2228",
          cap: "\u2229",
          cup: "\u222A",
          int: "\u222B",
          there4: "\u2234",
          sim: "\u223C",
          cong: "\u2245",
          asymp: "\u2248",
          ne: "\u2260",
          equiv: "\u2261",
          le: "\u2264",
          ge: "\u2265",
          sub: "\u2282",
          sup: "\u2283",
          nsub: "\u2284",
          sube: "\u2286",
          supe: "\u2287",
          oplus: "\u2295",
          otimes: "\u2297",
          perp: "\u22A5",
          sdot: "\u22C5",
          lceil: "\u2308",
          rceil: "\u2309",
          lfloor: "\u230A",
          rfloor: "\u230B",
          lang: "\u2329",
          rang: "\u232A",
          loz: "\u25CA",
          spades: "\u2660",
          clubs: "\u2663",
          hearts: "\u2665",
          diams: "\u2666"
        };
        var HEX_NUMBER = /^[\da-fA-F]+$/;
        var DECIMAL_NUMBER = /^\d+$/;
        types$1.j_oTag = new TokContext("<tag", false);
        types$1.j_cTag = new TokContext("</tag", false);
        types$1.j_expr = new TokContext("<tag>...</tag>", true, true);
        types.jsxName = new TokenType("jsxName");
        types.jsxText = new TokenType("jsxText", {
          beforeExpr: true
        });
        types.jsxTagStart = new TokenType("jsxTagStart", {
          startsExpr: true
        });
        types.jsxTagEnd = new TokenType("jsxTagEnd");

        types.jsxTagStart.updateContext = function() {
          this.state.context.push(types$1.j_expr);
          this.state.context.push(types$1.j_oTag);
          this.state.exprAllowed = false;
        };

        types.jsxTagEnd.updateContext = function(prevType) {
          var out = this.state.context.pop();

          if (
            (out === types$1.j_oTag && prevType === types.slash) ||
            out === types$1.j_cTag
          ) {
            this.state.context.pop();
            this.state.exprAllowed = this.curContext() === types$1.j_expr;
          } else {
            this.state.exprAllowed = true;
          }
        };

        function isFragment(object) {
          return object
            ? object.type === "JSXOpeningFragment" ||
                object.type === "JSXClosingFragment"
            : false;
        }

        function getQualifiedJSXName(object) {
          if (object.type === "JSXIdentifier") {
            return object.name;
          }

          if (object.type === "JSXNamespacedName") {
            return object.namespace.name + ":" + object.name.name;
          }

          if (object.type === "JSXMemberExpression") {
            return (
              getQualifiedJSXName(object.object) +
              "." +
              getQualifiedJSXName(object.property)
            );
          }

          throw new Error("Node had unexpected type: " + object.type);
        }

        var jsxPlugin = function jsxPlugin(superClass) {
          return (function(_superClass) {
            _inheritsLoose(_class, _superClass);

            function _class() {
              return _superClass.apply(this, arguments) || this;
            }

            var _proto = _class.prototype;

            _proto.jsxReadToken = function jsxReadToken() {
              var out = "";
              var chunkStart = this.state.pos;

              for (;;) {
                if (this.state.pos >= this.input.length) {
                  this.raise(this.state.start, "Unterminated JSX contents");
                }

                var ch = this.input.charCodeAt(this.state.pos);

                switch (ch) {
                  case 60:
                  case 123:
                    if (this.state.pos === this.state.start) {
                      if (ch === 60 && this.state.exprAllowed) {
                        ++this.state.pos;
                        return this.finishToken(types.jsxTagStart);
                      }

                      return this.getTokenFromCode(ch);
                    }

                    out += this.input.slice(chunkStart, this.state.pos);
                    return this.finishToken(types.jsxText, out);

                  case 38:
                    out += this.input.slice(chunkStart, this.state.pos);
                    out += this.jsxReadEntity();
                    chunkStart = this.state.pos;
                    break;

                  default:
                    if (isNewLine(ch)) {
                      out += this.input.slice(chunkStart, this.state.pos);
                      out += this.jsxReadNewLine(true);
                      chunkStart = this.state.pos;
                    } else {
                      ++this.state.pos;
                    }
                }
              }
            };

            _proto.jsxReadNewLine = function jsxReadNewLine(normalizeCRLF) {
              var ch = this.input.charCodeAt(this.state.pos);
              var out;
              ++this.state.pos;

              if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
                ++this.state.pos;
                out = normalizeCRLF ? "\n" : "\r\n";
              } else {
                out = String.fromCharCode(ch);
              }

              ++this.state.curLine;
              this.state.lineStart = this.state.pos;
              return out;
            };

            _proto.jsxReadString = function jsxReadString(quote) {
              var out = "";
              var chunkStart = ++this.state.pos;

              for (;;) {
                if (this.state.pos >= this.input.length) {
                  this.raise(this.state.start, "Unterminated string constant");
                }

                var ch = this.input.charCodeAt(this.state.pos);
                if (ch === quote) break;

                if (ch === 38) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  out += this.jsxReadEntity();
                  chunkStart = this.state.pos;
                } else if (isNewLine(ch)) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  out += this.jsxReadNewLine(false);
                  chunkStart = this.state.pos;
                } else {
                  ++this.state.pos;
                }
              }

              out += this.input.slice(chunkStart, this.state.pos++);
              return this.finishToken(types.string, out);
            };

            _proto.jsxReadEntity = function jsxReadEntity() {
              var str = "";
              var count = 0;
              var entity;
              var ch = this.input[this.state.pos];
              var startPos = ++this.state.pos;

              while (this.state.pos < this.input.length && count++ < 10) {
                ch = this.input[this.state.pos++];

                if (ch === ";") {
                  if (str[0] === "#") {
                    if (str[1] === "x") {
                      str = str.substr(2);

                      if (HEX_NUMBER.test(str)) {
                        entity = String.fromCodePoint(parseInt(str, 16));
                      }
                    } else {
                      str = str.substr(1);

                      if (DECIMAL_NUMBER.test(str)) {
                        entity = String.fromCodePoint(parseInt(str, 10));
                      }
                    }
                  } else {
                    entity = entities[str];
                  }

                  break;
                }

                str += ch;
              }

              if (!entity) {
                this.state.pos = startPos;
                return "&";
              }

              return entity;
            };

            _proto.jsxReadWord = function jsxReadWord() {
              var ch;
              var start = this.state.pos;

              do {
                ch = this.input.charCodeAt(++this.state.pos);
              } while (isIdentifierChar(ch) || ch === 45);

              return this.finishToken(
                types.jsxName,
                this.input.slice(start, this.state.pos)
              );
            };

            _proto.jsxParseIdentifier = function jsxParseIdentifier() {
              var node = this.startNode();

              if (this.match(types.jsxName)) {
                node.name = this.state.value;
              } else if (this.state.type.keyword) {
                node.name = this.state.type.keyword;
              } else {
                this.unexpected();
              }

              this.next();
              return this.finishNode(node, "JSXIdentifier");
            };

            _proto.jsxParseNamespacedName = function jsxParseNamespacedName() {
              var startPos = this.state.start;
              var startLoc = this.state.startLoc;
              var name = this.jsxParseIdentifier();
              if (!this.eat(types.colon)) return name;
              var node = this.startNodeAt(startPos, startLoc);
              node.namespace = name;
              node.name = this.jsxParseIdentifier();
              return this.finishNode(node, "JSXNamespacedName");
            };

            _proto.jsxParseElementName = function jsxParseElementName() {
              var startPos = this.state.start;
              var startLoc = this.state.startLoc;
              var node = this.jsxParseNamespacedName();

              while (this.eat(types.dot)) {
                var newNode = this.startNodeAt(startPos, startLoc);
                newNode.object = node;
                newNode.property = this.jsxParseIdentifier();
                node = this.finishNode(newNode, "JSXMemberExpression");
              }

              return node;
            };

            _proto.jsxParseAttributeValue = function jsxParseAttributeValue() {
              var node;

              switch (this.state.type) {
                case types.braceL:
                  node = this.jsxParseExpressionContainer();

                  if (node.expression.type === "JSXEmptyExpression") {
                    throw this.raise(
                      node.start,
                      "JSX attributes must only be assigned a non-empty expression"
                    );
                  } else {
                    return node;
                  }

                case types.jsxTagStart:
                case types.string:
                  return this.parseExprAtom();

                default:
                  throw this.raise(
                    this.state.start,
                    "JSX value should be either an expression or a quoted JSX text"
                  );
              }
            };

            _proto.jsxParseEmptyExpression = function jsxParseEmptyExpression() {
              var node = this.startNodeAt(
                this.state.lastTokEnd,
                this.state.lastTokEndLoc
              );
              return this.finishNodeAt(
                node,
                "JSXEmptyExpression",
                this.state.start,
                this.state.startLoc
              );
            };

            _proto.jsxParseSpreadChild = function jsxParseSpreadChild() {
              var node = this.startNode();
              this.expect(types.braceL);
              this.expect(types.ellipsis);
              node.expression = this.parseExpression();
              this.expect(types.braceR);
              return this.finishNode(node, "JSXSpreadChild");
            };

            _proto.jsxParseExpressionContainer = function jsxParseExpressionContainer() {
              var node = this.startNode();
              this.next();

              if (this.match(types.braceR)) {
                node.expression = this.jsxParseEmptyExpression();
              } else {
                node.expression = this.parseExpression();
              }

              this.expect(types.braceR);
              return this.finishNode(node, "JSXExpressionContainer");
            };

            _proto.jsxParseAttribute = function jsxParseAttribute() {
              var node = this.startNode();

              if (this.eat(types.braceL)) {
                this.expect(types.ellipsis);
                node.argument = this.parseMaybeAssign();
                this.expect(types.braceR);
                return this.finishNode(node, "JSXSpreadAttribute");
              }

              node.name = this.jsxParseNamespacedName();
              node.value = this.eat(types.eq)
                ? this.jsxParseAttributeValue()
                : null;
              return this.finishNode(node, "JSXAttribute");
            };

            _proto.jsxParseOpeningElementAt = function jsxParseOpeningElementAt(
              startPos,
              startLoc
            ) {
              var node = this.startNodeAt(startPos, startLoc);

              if (this.match(types.jsxTagEnd)) {
                this.expect(types.jsxTagEnd);
                return this.finishNode(node, "JSXOpeningFragment");
              }

              node.attributes = [];
              node.name = this.jsxParseElementName();

              while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {
                node.attributes.push(this.jsxParseAttribute());
              }

              node.selfClosing = this.eat(types.slash);
              this.expect(types.jsxTagEnd);
              return this.finishNode(node, "JSXOpeningElement");
            };

            _proto.jsxParseClosingElementAt = function jsxParseClosingElementAt(
              startPos,
              startLoc
            ) {
              var node = this.startNodeAt(startPos, startLoc);

              if (this.match(types.jsxTagEnd)) {
                this.expect(types.jsxTagEnd);
                return this.finishNode(node, "JSXClosingFragment");
              }

              node.name = this.jsxParseElementName();
              this.expect(types.jsxTagEnd);
              return this.finishNode(node, "JSXClosingElement");
            };

            _proto.jsxParseElementAt = function jsxParseElementAt(
              startPos,
              startLoc
            ) {
              var node = this.startNodeAt(startPos, startLoc);
              var children = [];
              var openingElement = this.jsxParseOpeningElementAt(
                startPos,
                startLoc
              );
              var closingElement = null;

              if (!openingElement.selfClosing) {
                contents: for (;;) {
                  switch (this.state.type) {
                    case types.jsxTagStart:
                      startPos = this.state.start;
                      startLoc = this.state.startLoc;
                      this.next();

                      if (this.eat(types.slash)) {
                        closingElement = this.jsxParseClosingElementAt(
                          startPos,
                          startLoc
                        );
                        break contents;
                      }

                      children.push(this.jsxParseElementAt(startPos, startLoc));
                      break;

                    case types.jsxText:
                      children.push(this.parseExprAtom());
                      break;

                    case types.braceL:
                      if (this.lookahead().type === types.ellipsis) {
                        children.push(this.jsxParseSpreadChild());
                      } else {
                        children.push(this.jsxParseExpressionContainer());
                      }

                      break;

                    default:
                      throw this.unexpected();
                  }
                }

                if (isFragment(openingElement) && !isFragment(closingElement)) {
                  this.raise(
                    closingElement.start,
                    "Expected corresponding JSX closing tag for <>"
                  );
                } else if (
                  !isFragment(openingElement) &&
                  isFragment(closingElement)
                ) {
                  this.raise(
                    closingElement.start,
                    "Expected corresponding JSX closing tag for <" +
                      getQualifiedJSXName(openingElement.name) +
                      ">"
                  );
                } else if (
                  !isFragment(openingElement) &&
                  !isFragment(closingElement)
                ) {
                  if (
                    getQualifiedJSXName(closingElement.name) !==
                    getQualifiedJSXName(openingElement.name)
                  ) {
                    this.raise(
                      closingElement.start,
                      "Expected corresponding JSX closing tag for <" +
                        getQualifiedJSXName(openingElement.name) +
                        ">"
                    );
                  }
                }
              }

              if (isFragment(openingElement)) {
                node.openingFragment = openingElement;
                node.closingFragment = closingElement;
              } else {
                node.openingElement = openingElement;
                node.closingElement = closingElement;
              }

              node.children = children;

              if (this.match(types.relational) && this.state.value === "<") {
                this.raise(
                  this.state.start,
                  "Adjacent JSX elements must be wrapped in an enclosing tag. " +
                    "Did you want a JSX fragment <>...</>?"
                );
              }

              return isFragment(openingElement)
                ? this.finishNode(node, "JSXFragment")
                : this.finishNode(node, "JSXElement");
            };

            _proto.jsxParseElement = function jsxParseElement() {
              var startPos = this.state.start;
              var startLoc = this.state.startLoc;
              this.next();
              return this.jsxParseElementAt(startPos, startLoc);
            };

            _proto.parseExprAtom = function parseExprAtom(
              refShortHandDefaultPos
            ) {
              if (this.match(types.jsxText)) {
                return this.parseLiteral(this.state.value, "JSXText");
              } else if (this.match(types.jsxTagStart)) {
                return this.jsxParseElement();
              } else {
                return _superClass.prototype.parseExprAtom.call(
                  this,
                  refShortHandDefaultPos
                );
              }
            };

            _proto.readToken = function readToken(code) {
              if (this.state.inPropertyName)
                return _superClass.prototype.readToken.call(this, code);
              var context = this.curContext();

              if (context === types$1.j_expr) {
                return this.jsxReadToken();
              }

              if (context === types$1.j_oTag || context === types$1.j_cTag) {
                if (isIdentifierStart(code)) {
                  return this.jsxReadWord();
                }

                if (code === 62) {
                  ++this.state.pos;
                  return this.finishToken(types.jsxTagEnd);
                }

                if (
                  (code === 34 || code === 39) &&
                  context === types$1.j_oTag
                ) {
                  return this.jsxReadString(code);
                }
              }

              if (code === 60 && this.state.exprAllowed) {
                ++this.state.pos;
                return this.finishToken(types.jsxTagStart);
              }

              return _superClass.prototype.readToken.call(this, code);
            };

            _proto.updateContext = function updateContext(prevType) {
              if (this.match(types.braceL)) {
                var curContext = this.curContext();

                if (curContext === types$1.j_oTag) {
                  this.state.context.push(types$1.braceExpression);
                } else if (curContext === types$1.j_expr) {
                  this.state.context.push(types$1.templateQuasi);
                } else {
                  _superClass.prototype.updateContext.call(this, prevType);
                }

                this.state.exprAllowed = true;
              } else if (
                this.match(types.slash) &&
                prevType === types.jsxTagStart
              ) {
                this.state.context.length -= 2;
                this.state.context.push(types$1.j_cTag);
                this.state.exprAllowed = false;
              } else {
                return _superClass.prototype.updateContext.call(this, prevType);
              }
            };

            return _class;
          })(superClass);
        };

        function nonNull(x) {
          if (x == null) {
            throw new Error("Unexpected " + x + " value.");
          }

          return x;
        }

        function assert(x) {
          if (!x) {
            throw new Error("Assert fail");
          }
        }

        function keywordTypeFromName(value) {
          switch (value) {
            case "any":
              return "TSAnyKeyword";

            case "boolean":
              return "TSBooleanKeyword";

            case "never":
              return "TSNeverKeyword";

            case "number":
              return "TSNumberKeyword";

            case "object":
              return "TSObjectKeyword";

            case "string":
              return "TSStringKeyword";

            case "symbol":
              return "TSSymbolKeyword";

            case "undefined":
              return "TSUndefinedKeyword";

            default:
              return undefined;
          }
        }

        var typescriptPlugin = function typescriptPlugin(superClass) {
          return (function(_superClass) {
            _inheritsLoose(_class, _superClass);

            function _class() {
              return _superClass.apply(this, arguments) || this;
            }

            var _proto = _class.prototype;

            _proto.tsIsIdentifier = function tsIsIdentifier() {
              return this.match(types.name);
            };

            _proto.tsNextTokenCanFollowModifier = function tsNextTokenCanFollowModifier() {
              this.next();
              return (
                !this.hasPrecedingLineBreak() &&
                !this.match(types.parenL) &&
                !this.match(types.colon) &&
                !this.match(types.eq) &&
                !this.match(types.question)
              );
            };

            _proto.tsParseModifier = function tsParseModifier(
              allowedModifiers
            ) {
              if (!this.match(types.name)) {
                return undefined;
              }

              var modifier = this.state.value;

              if (
                allowedModifiers.indexOf(modifier) !== -1 &&
                this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))
              ) {
                return modifier;
              }

              return undefined;
            };

            _proto.tsIsListTerminator = function tsIsListTerminator(kind) {
              switch (kind) {
                case "EnumMembers":
                case "TypeMembers":
                  return this.match(types.braceR);

                case "HeritageClauseElement":
                  return this.match(types.braceL);

                case "TupleElementTypes":
                  return this.match(types.bracketR);

                case "TypeParametersOrArguments":
                  return this.isRelational(">");
              }

              throw new Error("Unreachable");
            };

            _proto.tsParseList = function tsParseList(kind, parseElement) {
              var result = [];

              while (!this.tsIsListTerminator(kind)) {
                result.push(parseElement());
              }

              return result;
            };

            _proto.tsParseDelimitedList = function tsParseDelimitedList(
              kind,
              parseElement
            ) {
              return nonNull(
                this.tsParseDelimitedListWorker(kind, parseElement, true)
              );
            };

            _proto.tsTryParseDelimitedList = function tsTryParseDelimitedList(
              kind,
              parseElement
            ) {
              return this.tsParseDelimitedListWorker(kind, parseElement, false);
            };

            _proto.tsParseDelimitedListWorker = function tsParseDelimitedListWorker(
              kind,
              parseElement,
              expectSuccess
            ) {
              var result = [];

              while (true) {
                if (this.tsIsListTerminator(kind)) {
                  break;
                }

                var element = parseElement();

                if (element == null) {
                  return undefined;
                }

                result.push(element);

                if (this.eat(types.comma)) {
                  continue;
                }

                if (this.tsIsListTerminator(kind)) {
                  break;
                }

                if (expectSuccess) {
                  this.expect(types.comma);
                }

                return undefined;
              }

              return result;
            };

            _proto.tsParseBracketedList = function tsParseBracketedList(
              kind,
              parseElement,
              bracket,
              skipFirstToken
            ) {
              if (!skipFirstToken) {
                if (bracket) {
                  this.expect(types.bracketL);
                } else {
                  this.expectRelational("<");
                }
              }

              var result = this.tsParseDelimitedList(kind, parseElement);

              if (bracket) {
                this.expect(types.bracketR);
              } else {
                this.expectRelational(">");
              }

              return result;
            };

            _proto.tsParseEntityName = function tsParseEntityName(
              allowReservedWords
            ) {
              var entity = this.parseIdentifier();

              while (this.eat(types.dot)) {
                var node = this.startNodeAtNode(entity);
                node.left = entity;
                node.right = this.parseIdentifier(allowReservedWords);
                entity = this.finishNode(node, "TSQualifiedName");
              }

              return entity;
            };

            _proto.tsParseTypeReference = function tsParseTypeReference() {
              var node = this.startNode();
              node.typeName = this.tsParseEntityName(false);

              if (!this.hasPrecedingLineBreak() && this.isRelational("<")) {
                node.typeParameters = this.tsParseTypeArguments();
              }

              return this.finishNode(node, "TSTypeReference");
            };

            _proto.tsParseThisTypePredicate = function tsParseThisTypePredicate(
              lhs
            ) {
              this.next();
              var node = this.startNode();
              node.parameterName = lhs;
              node.typeAnnotation = this.tsParseTypeAnnotation(false);
              return this.finishNode(node, "TSTypePredicate");
            };

            _proto.tsParseThisTypeNode = function tsParseThisTypeNode() {
              var node = this.startNode();
              this.next();
              return this.finishNode(node, "TSThisType");
            };

            _proto.tsParseTypeQuery = function tsParseTypeQuery() {
              var node = this.startNode();
              this.expect(types._typeof);
              node.exprName = this.tsParseEntityName(true);
              return this.finishNode(node, "TSTypeQuery");
            };

            _proto.tsParseTypeParameter = function tsParseTypeParameter() {
              var node = this.startNode();
              node.name = this.parseIdentifierName(node.start);
              node.constraint = this.tsEatThenParseType(types._extends);
              node.default = this.tsEatThenParseType(types.eq);
              return this.finishNode(node, "TSTypeParameter");
            };

            _proto.tsTryParseTypeParameters = function tsTryParseTypeParameters() {
              if (this.isRelational("<")) {
                return this.tsParseTypeParameters();
              }
            };

            _proto.tsParseTypeParameters = function tsParseTypeParameters() {
              var node = this.startNode();

              if (this.isRelational("<") || this.match(types.jsxTagStart)) {
                this.next();
              } else {
                this.unexpected();
              }

              node.params = this.tsParseBracketedList(
                "TypeParametersOrArguments",
                this.tsParseTypeParameter.bind(this),
                false,
                true
              );
              return this.finishNode(node, "TSTypeParameterDeclaration");
            };

            _proto.tsFillSignature = function tsFillSignature(
              returnToken,
              signature
            ) {
              var returnTokenRequired = returnToken === types.arrow;
              signature.typeParameters = this.tsTryParseTypeParameters();
              this.expect(types.parenL);
              signature.parameters = this.tsParseBindingListForSignature();

              if (returnTokenRequired) {
                signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(
                  returnToken
                );
              } else if (this.match(returnToken)) {
                signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(
                  returnToken
                );
              }
            };

            _proto.tsParseBindingListForSignature = function tsParseBindingListForSignature() {
              var _this = this;

              return this.parseBindingList(types.parenR).map(function(pattern) {
                if (
                  pattern.type !== "Identifier" &&
                  pattern.type !== "RestElement"
                ) {
                  throw _this.unexpected(
                    pattern.start,
                    "Name in a signature must be an Identifier."
                  );
                }

                return pattern;
              });
            };

            _proto.tsParseTypeMemberSemicolon = function tsParseTypeMemberSemicolon() {
              if (!this.eat(types.comma)) {
                this.semicolon();
              }
            };

            _proto.tsParseSignatureMember = function tsParseSignatureMember(
              kind
            ) {
              var node = this.startNode();

              if (kind === "TSConstructSignatureDeclaration") {
                this.expect(types._new);
              }

              this.tsFillSignature(types.colon, node);
              this.tsParseTypeMemberSemicolon();
              return this.finishNode(node, kind);
            };

            _proto.tsIsUnambiguouslyIndexSignature = function tsIsUnambiguouslyIndexSignature() {
              this.next();
              return this.eat(types.name) && this.match(types.colon);
            };

            _proto.tsTryParseIndexSignature = function tsTryParseIndexSignature(
              node
            ) {
              if (
                !(
                  this.match(types.bracketL) &&
                  this.tsLookAhead(
                    this.tsIsUnambiguouslyIndexSignature.bind(this)
                  )
                )
              ) {
                return undefined;
              }

              this.expect(types.bracketL);
              var id = this.parseIdentifier();
              this.expect(types.colon);
              id.typeAnnotation = this.tsParseTypeAnnotation(false);
              this.expect(types.bracketR);
              node.parameters = [id];
              var type = this.tsTryParseTypeAnnotation();
              if (type) node.typeAnnotation = type;
              this.tsParseTypeMemberSemicolon();
              return this.finishNode(node, "TSIndexSignature");
            };

            _proto.tsParsePropertyOrMethodSignature = function tsParsePropertyOrMethodSignature(
              node,
              readonly
            ) {
              this.parsePropertyName(node);
              if (this.eat(types.question)) node.optional = true;
              var nodeAny = node;

              if (
                !readonly &&
                (this.match(types.parenL) || this.isRelational("<"))
              ) {
                var method = nodeAny;
                this.tsFillSignature(types.colon, method);
                this.tsParseTypeMemberSemicolon();
                return this.finishNode(method, "TSMethodSignature");
              } else {
                var property = nodeAny;
                if (readonly) property.readonly = true;
                var type = this.tsTryParseTypeAnnotation();
                if (type) property.typeAnnotation = type;
                this.tsParseTypeMemberSemicolon();
                return this.finishNode(property, "TSPropertySignature");
              }
            };

            _proto.tsParseTypeMember = function tsParseTypeMember() {
              if (this.match(types.parenL) || this.isRelational("<")) {
                return this.tsParseSignatureMember(
                  "TSCallSignatureDeclaration"
                );
              }

              if (
                this.match(types._new) &&
                this.tsLookAhead(this.tsIsStartOfConstructSignature.bind(this))
              ) {
                return this.tsParseSignatureMember(
                  "TSConstructSignatureDeclaration"
                );
              }

              var node = this.startNode();
              var readonly = !!this.tsParseModifier(["readonly"]);
              var idx = this.tsTryParseIndexSignature(node);

              if (idx) {
                if (readonly) node.readonly = true;
                return idx;
              }

              return this.tsParsePropertyOrMethodSignature(node, readonly);
            };

            _proto.tsIsStartOfConstructSignature = function tsIsStartOfConstructSignature() {
              this.next();
              return this.match(types.parenL) || this.isRelational("<");
            };

            _proto.tsParseTypeLiteral = function tsParseTypeLiteral() {
              var node = this.startNode();
              node.members = this.tsParseObjectTypeMembers();
              return this.finishNode(node, "TSTypeLiteral");
            };

            _proto.tsParseObjectTypeMembers = function tsParseObjectTypeMembers() {
              this.expect(types.braceL);
              var members = this.tsParseList(
                "TypeMembers",
                this.tsParseTypeMember.bind(this)
              );
              this.expect(types.braceR);
              return members;
            };

            _proto.tsIsStartOfMappedType = function tsIsStartOfMappedType() {
              this.next();

              if (this.eat(types.plusMin)) {
                return this.isContextual("readonly");
              }

              if (this.isContextual("readonly")) {
                this.next();
              }

              if (!this.match(types.bracketL)) {
                return false;
              }

              this.next();

              if (!this.tsIsIdentifier()) {
                return false;
              }

              this.next();
              return this.match(types._in);
            };

            _proto.tsParseMappedTypeParameter = function tsParseMappedTypeParameter() {
              var node = this.startNode();
              node.name = this.parseIdentifierName(node.start);
              node.constraint = this.tsExpectThenParseType(types._in);
              return this.finishNode(node, "TSTypeParameter");
            };

            _proto.tsParseMappedType = function tsParseMappedType() {
              var node = this.startNode();
              this.expect(types.braceL);

              if (this.match(types.plusMin)) {
                node.readonly = this.state.value;
                this.next();
                this.expectContextual("readonly");
              } else if (this.eatContextual("readonly")) {
                node.readonly = true;
              }

              this.expect(types.bracketL);
              node.typeParameter = this.tsParseMappedTypeParameter();
              this.expect(types.bracketR);

              if (this.match(types.plusMin)) {
                node.optional = this.state.value;
                this.next();
                this.expect(types.question);
              } else if (this.eat(types.question)) {
                node.optional = true;
              }

              node.typeAnnotation = this.tsTryParseType();
              this.semicolon();
              this.expect(types.braceR);
              return this.finishNode(node, "TSMappedType");
            };

            _proto.tsParseTupleType = function tsParseTupleType() {
              var node = this.startNode();
              node.elementTypes = this.tsParseBracketedList(
                "TupleElementTypes",
                this.tsParseType.bind(this),
                true,
                false
              );
              return this.finishNode(node, "TSTupleType");
            };

            _proto.tsParseParenthesizedType = function tsParseParenthesizedType() {
              var node = this.startNode();
              this.expect(types.parenL);
              node.typeAnnotation = this.tsParseType();
              this.expect(types.parenR);
              return this.finishNode(node, "TSParenthesizedType");
            };

            _proto.tsParseFunctionOrConstructorType = function tsParseFunctionOrConstructorType(
              type
            ) {
              var node = this.startNode();

              if (type === "TSConstructorType") {
                this.expect(types._new);
              }

              this.tsFillSignature(types.arrow, node);
              return this.finishNode(node, type);
            };

            _proto.tsParseLiteralTypeNode = function tsParseLiteralTypeNode() {
              var _this2 = this;

              var node = this.startNode();

              node.literal = (function() {
                switch (_this2.state.type) {
                  case types.num:
                    return _this2.parseLiteral(
                      _this2.state.value,
                      "NumericLiteral"
                    );

                  case types.string:
                    return _this2.parseLiteral(
                      _this2.state.value,
                      "StringLiteral"
                    );

                  case types._true:
                  case types._false:
                    return _this2.parseBooleanLiteral();

                  default:
                    throw _this2.unexpected();
                }
              })();

              return this.finishNode(node, "TSLiteralType");
            };

            _proto.tsParseNonArrayType = function tsParseNonArrayType() {
              switch (this.state.type) {
                case types.name:
                case types._void:
                case types._null: {
                  var type = this.match(types._void)
                    ? "TSVoidKeyword"
                    : this.match(types._null)
                      ? "TSNullKeyword"
                      : keywordTypeFromName(this.state.value);

                  if (
                    type !== undefined &&
                    this.lookahead().type !== types.dot
                  ) {
                    var node = this.startNode();
                    this.next();
                    return this.finishNode(node, type);
                  }

                  return this.tsParseTypeReference();
                }

                case types.string:
                case types.num:
                case types._true:
                case types._false:
                  return this.tsParseLiteralTypeNode();

                case types.plusMin:
                  if (this.state.value === "-") {
                    var _node = this.startNode();

                    this.next();

                    if (!this.match(types.num)) {
                      throw this.unexpected();
                    }

                    _node.literal = this.parseLiteral(
                      -this.state.value,
                      "NumericLiteral",
                      _node.start,
                      _node.loc.start
                    );
                    return this.finishNode(_node, "TSLiteralType");
                  }

                  break;

                case types._this: {
                  var thisKeyword = this.tsParseThisTypeNode();

                  if (
                    this.isContextual("is") &&
                    !this.hasPrecedingLineBreak()
                  ) {
                    return this.tsParseThisTypePredicate(thisKeyword);
                  } else {
                    return thisKeyword;
                  }
                }

                case types._typeof:
                  return this.tsParseTypeQuery();

                case types.braceL:
                  return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))
                    ? this.tsParseMappedType()
                    : this.tsParseTypeLiteral();

                case types.bracketL:
                  return this.tsParseTupleType();

                case types.parenL:
                  return this.tsParseParenthesizedType();
              }

              throw this.unexpected();
            };

            _proto.tsParseArrayTypeOrHigher = function tsParseArrayTypeOrHigher() {
              var type = this.tsParseNonArrayType();

              while (
                !this.hasPrecedingLineBreak() &&
                this.eat(types.bracketL)
              ) {
                if (this.match(types.bracketR)) {
                  var node = this.startNodeAtNode(type);
                  node.elementType = type;
                  this.expect(types.bracketR);
                  type = this.finishNode(node, "TSArrayType");
                } else {
                  var _node2 = this.startNodeAtNode(type);

                  _node2.objectType = type;
                  _node2.indexType = this.tsParseType();
                  this.expect(types.bracketR);
                  type = this.finishNode(_node2, "TSIndexedAccessType");
                }
              }

              return type;
            };

            _proto.tsParseTypeOperator = function tsParseTypeOperator(
              operator
            ) {
              var node = this.startNode();
              this.expectContextual(operator);
              node.operator = operator;
              node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
              return this.finishNode(node, "TSTypeOperator");
            };

            _proto.tsParseInferType = function tsParseInferType() {
              var node = this.startNode();
              this.expectContextual("infer");
              var typeParameter = this.startNode();
              typeParameter.name = this.parseIdentifierName(
                typeParameter.start
              );
              node.typeParameter = this.finishNode(
                typeParameter,
                "TypeParameter"
              );
              return this.finishNode(node, "TSInferType");
            };

            _proto.tsParseTypeOperatorOrHigher = function tsParseTypeOperatorOrHigher() {
              var _this3 = this;

              var operator = ["keyof", "unique"].find(function(kw) {
                return _this3.isContextual(kw);
              });
              return operator
                ? this.tsParseTypeOperator(operator)
                : this.isContextual("infer")
                  ? this.tsParseInferType()
                  : this.tsParseArrayTypeOrHigher();
            };

            _proto.tsParseUnionOrIntersectionType = function tsParseUnionOrIntersectionType(
              kind,
              parseConstituentType,
              operator
            ) {
              this.eat(operator);
              var type = parseConstituentType();

              if (this.match(operator)) {
                var types$$1 = [type];

                while (this.eat(operator)) {
                  types$$1.push(parseConstituentType());
                }

                var node = this.startNodeAtNode(type);
                node.types = types$$1;
                type = this.finishNode(node, kind);
              }

              return type;
            };

            _proto.tsParseIntersectionTypeOrHigher = function tsParseIntersectionTypeOrHigher() {
              return this.tsParseUnionOrIntersectionType(
                "TSIntersectionType",
                this.tsParseTypeOperatorOrHigher.bind(this),
                types.bitwiseAND
              );
            };

            _proto.tsParseUnionTypeOrHigher = function tsParseUnionTypeOrHigher() {
              return this.tsParseUnionOrIntersectionType(
                "TSUnionType",
                this.tsParseIntersectionTypeOrHigher.bind(this),
                types.bitwiseOR
              );
            };

            _proto.tsIsStartOfFunctionType = function tsIsStartOfFunctionType() {
              if (this.isRelational("<")) {
                return true;
              }

              return (
                this.match(types.parenL) &&
                this.tsLookAhead(
                  this.tsIsUnambiguouslyStartOfFunctionType.bind(this)
                )
              );
            };

            _proto.tsSkipParameterStart = function tsSkipParameterStart() {
              if (this.match(types.name) || this.match(types._this)) {
                this.next();
                return true;
              }

              return false;
            };

            _proto.tsIsUnambiguouslyStartOfFunctionType = function tsIsUnambiguouslyStartOfFunctionType() {
              this.next();

              if (this.match(types.parenR) || this.match(types.ellipsis)) {
                return true;
              }

              if (this.tsSkipParameterStart()) {
                if (
                  this.match(types.colon) ||
                  this.match(types.comma) ||
                  this.match(types.question) ||
                  this.match(types.eq)
                ) {
                  return true;
                }

                if (this.match(types.parenR)) {
                  this.next();

                  if (this.match(types.arrow)) {
                    return true;
                  }
                }
              }

              return false;
            };

            _proto.tsParseTypeOrTypePredicateAnnotation = function tsParseTypeOrTypePredicateAnnotation(
              returnToken
            ) {
              var _this4 = this;

              return this.tsInType(function() {
                var t = _this4.startNode();

                _this4.expect(returnToken);

                var typePredicateVariable =
                  _this4.tsIsIdentifier() &&
                  _this4.tsTryParse(
                    _this4.tsParseTypePredicatePrefix.bind(_this4)
                  );

                if (!typePredicateVariable) {
                  return _this4.tsParseTypeAnnotation(false, t);
                }

                var type = _this4.tsParseTypeAnnotation(false);

                var node = _this4.startNodeAtNode(typePredicateVariable);

                node.parameterName = typePredicateVariable;
                node.typeAnnotation = type;
                t.typeAnnotation = _this4.finishNode(node, "TSTypePredicate");
                return _this4.finishNode(t, "TSTypeAnnotation");
              });
            };

            _proto.tsTryParseTypeOrTypePredicateAnnotation = function tsTryParseTypeOrTypePredicateAnnotation() {
              return this.match(types.colon)
                ? this.tsParseTypeOrTypePredicateAnnotation(types.colon)
                : undefined;
            };

            _proto.tsTryParseTypeAnnotation = function tsTryParseTypeAnnotation() {
              return this.match(types.colon)
                ? this.tsParseTypeAnnotation()
                : undefined;
            };

            _proto.tsTryParseType = function tsTryParseType() {
              return this.tsEatThenParseType(types.colon);
            };

            _proto.tsParseTypePredicatePrefix = function tsParseTypePredicatePrefix() {
              var id = this.parseIdentifier();

              if (this.isContextual("is") && !this.hasPrecedingLineBreak()) {
                this.next();
                return id;
              }
            };

            _proto.tsParseTypeAnnotation = function tsParseTypeAnnotation(
              eatColon,
              t
            ) {
              var _this5 = this;

              if (eatColon === void 0) {
                eatColon = true;
              }

              if (t === void 0) {
                t = this.startNode();
              }

              this.tsInType(function() {
                if (eatColon) _this5.expect(types.colon);
                t.typeAnnotation = _this5.tsParseType();
              });
              return this.finishNode(t, "TSTypeAnnotation");
            };

            _proto.tsParseType = function tsParseType() {
              assert(this.state.inType);
              var type = this.tsParseNonConditionalType();

              if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {
                return type;
              }

              var node = this.startNodeAtNode(type);
              node.checkType = type;
              node.extendsType = this.tsParseNonConditionalType();
              this.expect(types.question);
              node.trueType = this.tsParseType();
              this.expect(types.colon);
              node.falseType = this.tsParseType();
              return this.finishNode(node, "TSConditionalType");
            };

            _proto.tsParseNonConditionalType = function tsParseNonConditionalType() {
              if (this.tsIsStartOfFunctionType()) {
                return this.tsParseFunctionOrConstructorType("TSFunctionType");
              }

              if (this.match(types._new)) {
                return this.tsParseFunctionOrConstructorType(
                  "TSConstructorType"
                );
              }

              return this.tsParseUnionTypeOrHigher();
            };

            _proto.tsParseTypeAssertion = function tsParseTypeAssertion() {
              var _this6 = this;

              var node = this.startNode();
              node.typeAnnotation = this.tsInType(function() {
                return _this6.tsParseType();
              });
              this.expectRelational(">");
              node.expression = this.parseMaybeUnary();
              return this.finishNode(node, "TSTypeAssertion");
            };

            _proto.tsTryParseTypeArgumentsInExpression = function tsTryParseTypeArgumentsInExpression() {
              var _this7 = this;

              return this.tsTryParseAndCatch(function() {
                var res = _this7.tsParseTypeArguments();

                _this7.expect(types.parenL);

                return res;
              });
            };

            _proto.tsParseHeritageClause = function tsParseHeritageClause() {
              return this.tsParseDelimitedList(
                "HeritageClauseElement",
                this.tsParseExpressionWithTypeArguments.bind(this)
              );
            };

            _proto.tsParseExpressionWithTypeArguments = function tsParseExpressionWithTypeArguments() {
              var node = this.startNode();
              node.expression = this.tsParseEntityName(false);

              if (this.isRelational("<")) {
                node.typeParameters = this.tsParseTypeArguments();
              }

              return this.finishNode(node, "TSExpressionWithTypeArguments");
            };

            _proto.tsParseInterfaceDeclaration = function tsParseInterfaceDeclaration(
              node
            ) {
              node.id = this.parseIdentifier();
              node.typeParameters = this.tsTryParseTypeParameters();

              if (this.eat(types._extends)) {
                node.extends = this.tsParseHeritageClause();
              }

              var body = this.startNode();
              body.body = this.tsParseObjectTypeMembers();
              node.body = this.finishNode(body, "TSInterfaceBody");
              return this.finishNode(node, "TSInterfaceDeclaration");
            };

            _proto.tsParseTypeAliasDeclaration = function tsParseTypeAliasDeclaration(
              node
            ) {
              node.id = this.parseIdentifier();
              node.typeParameters = this.tsTryParseTypeParameters();
              node.typeAnnotation = this.tsExpectThenParseType(types.eq);
              this.semicolon();
              return this.finishNode(node, "TSTypeAliasDeclaration");
            };

            _proto.tsInType = function tsInType(cb) {
              var oldInType = this.state.inType;
              this.state.inType = true;

              try {
                return cb();
              } finally {
                this.state.inType = oldInType;
              }
            };

            _proto.tsEatThenParseType = function tsEatThenParseType(token) {
              return !this.match(token)
                ? undefined
                : this.tsNextThenParseType();
            };

            _proto.tsExpectThenParseType = function tsExpectThenParseType(
              token
            ) {
              var _this8 = this;

              return this.tsDoThenParseType(function() {
                return _this8.expect(token);
              });
            };

            _proto.tsNextThenParseType = function tsNextThenParseType() {
              var _this9 = this;

              return this.tsDoThenParseType(function() {
                return _this9.next();
              });
            };

            _proto.tsDoThenParseType = function tsDoThenParseType(cb) {
              var _this10 = this;

              return this.tsInType(function() {
                cb();
                return _this10.tsParseType();
              });
            };

            _proto.tsParseEnumMember = function tsParseEnumMember() {
              var node = this.startNode();
              node.id = this.match(types.string)
                ? this.parseLiteral(this.state.value, "StringLiteral")
                : this.parseIdentifier(true);

              if (this.eat(types.eq)) {
                node.initializer = this.parseMaybeAssign();
              }

              return this.finishNode(node, "TSEnumMember");
            };

            _proto.tsParseEnumDeclaration = function tsParseEnumDeclaration(
              node,
              isConst
            ) {
              if (isConst) node.const = true;
              node.id = this.parseIdentifier();
              this.expect(types.braceL);
              node.members = this.tsParseDelimitedList(
                "EnumMembers",
                this.tsParseEnumMember.bind(this)
              );
              this.expect(types.braceR);
              return this.finishNode(node, "TSEnumDeclaration");
            };

            _proto.tsParseModuleBlock = function tsParseModuleBlock() {
              var node = this.startNode();
              this.expect(types.braceL);
              this.parseBlockOrModuleBlockBody(
                (node.body = []),
                undefined,
                true,
                types.braceR
              );
              return this.finishNode(node, "TSModuleBlock");
            };

            _proto.tsParseModuleOrNamespaceDeclaration = function tsParseModuleOrNamespaceDeclaration(
              node
            ) {
              node.id = this.parseIdentifier();

              if (this.eat(types.dot)) {
                var inner = this.startNode();
                this.tsParseModuleOrNamespaceDeclaration(inner);
                node.body = inner;
              } else {
                node.body = this.tsParseModuleBlock();
              }

              return this.finishNode(node, "TSModuleDeclaration");
            };

            _proto.tsParseAmbientExternalModuleDeclaration = function tsParseAmbientExternalModuleDeclaration(
              node
            ) {
              if (this.isContextual("global")) {
                node.global = true;
                node.id = this.parseIdentifier();
              } else if (this.match(types.string)) {
                node.id = this.parseExprAtom();
              } else {
                this.unexpected();
              }

              if (this.match(types.braceL)) {
                node.body = this.tsParseModuleBlock();
              } else {
                this.semicolon();
              }

              return this.finishNode(node, "TSModuleDeclaration");
            };

            _proto.tsParseImportEqualsDeclaration = function tsParseImportEqualsDeclaration(
              node,
              isExport
            ) {
              node.isExport = isExport || false;
              node.id = this.parseIdentifier();
              this.expect(types.eq);
              node.moduleReference = this.tsParseModuleReference();
              this.semicolon();
              return this.finishNode(node, "TSImportEqualsDeclaration");
            };

            _proto.tsIsExternalModuleReference = function tsIsExternalModuleReference() {
              return (
                this.isContextual("require") &&
                this.lookahead().type === types.parenL
              );
            };

            _proto.tsParseModuleReference = function tsParseModuleReference() {
              return this.tsIsExternalModuleReference()
                ? this.tsParseExternalModuleReference()
                : this.tsParseEntityName(false);
            };

            _proto.tsParseExternalModuleReference = function tsParseExternalModuleReference() {
              var node = this.startNode();
              this.expectContextual("require");
              this.expect(types.parenL);

              if (!this.match(types.string)) {
                throw this.unexpected();
              }

              node.expression = this.parseLiteral(
                this.state.value,
                "StringLiteral"
              );
              this.expect(types.parenR);
              return this.finishNode(node, "TSExternalModuleReference");
            };

            _proto.tsLookAhead = function tsLookAhead(f) {
              var state = this.state.clone();
              var res = f();
              this.state = state;
              return res;
            };

            _proto.tsTryParseAndCatch = function tsTryParseAndCatch(f) {
              var state = this.state.clone();

              try {
                return f();
              } catch (e) {
                if (e instanceof SyntaxError) {
                  this.state = state;
                  return undefined;
                }

                throw e;
              }
            };

            _proto.tsTryParse = function tsTryParse(f) {
              var state = this.state.clone();
              var result = f();

              if (result !== undefined && result !== false) {
                return result;
              } else {
                this.state = state;
                return undefined;
              }
            };

            _proto.nodeWithSamePosition = function nodeWithSamePosition(
              original,
              type
            ) {
              var node = this.startNodeAtNode(original);
              node.type = type;
              node.end = original.end;
              node.loc.end = original.loc.end;

              if (original.leadingComments) {
                node.leadingComments = original.leadingComments;
              }

              if (original.trailingComments) {
                node.trailingComments = original.trailingComments;
              }

              if (original.innerComments)
                node.innerComments = original.innerComments;
              return node;
            };

            _proto.tsTryParseDeclare = function tsTryParseDeclare(nany) {
              switch (this.state.type) {
                case types._function:
                  this.next();
                  return this.parseFunction(nany, true);

                case types._class:
                  return this.parseClass(nany, true, false);

                case types._const:
                  if (
                    this.match(types._const) &&
                    this.isLookaheadContextual("enum")
                  ) {
                    this.expect(types._const);
                    this.expectContextual("enum");
                    return this.tsParseEnumDeclaration(nany, true);
                  }

                case types._var:
                case types._let:
                  return this.parseVarStatement(nany, this.state.type);

                case types.name: {
                  var value = this.state.value;

                  if (value === "global") {
                    return this.tsParseAmbientExternalModuleDeclaration(nany);
                  } else {
                    return this.tsParseDeclaration(nany, value, true);
                  }
                }
              }
            };

            _proto.tsTryParseExportDeclaration = function tsTryParseExportDeclaration() {
              return this.tsParseDeclaration(
                this.startNode(),
                this.state.value,
                true
              );
            };

            _proto.tsParseExpressionStatement = function tsParseExpressionStatement(
              node,
              expr
            ) {
              switch (expr.name) {
                case "declare": {
                  var declaration = this.tsTryParseDeclare(node);

                  if (declaration) {
                    declaration.declare = true;
                    return declaration;
                  }

                  break;
                }

                case "global":
                  if (this.match(types.braceL)) {
                    var mod = node;
                    mod.global = true;
                    mod.id = expr;
                    mod.body = this.tsParseModuleBlock();
                    return this.finishNode(mod, "TSModuleDeclaration");
                  }

                  break;

                default:
                  return this.tsParseDeclaration(node, expr.name, false);
              }
            };

            _proto.tsParseDeclaration = function tsParseDeclaration(
              node,
              value,
              next
            ) {
              switch (value) {
                case "abstract":
                  if (next || this.match(types._class)) {
                    var cls = node;
                    cls.abstract = true;
                    if (next) this.next();
                    return this.parseClass(cls, true, false);
                  }

                  break;

                case "enum":
                  if (next || this.match(types.name)) {
                    if (next) this.next();
                    return this.tsParseEnumDeclaration(node, false);
                  }

                  break;

                case "interface":
                  if (next || this.match(types.name)) {
                    if (next) this.next();
                    return this.tsParseInterfaceDeclaration(node);
                  }

                  break;

                case "module":
                  if (next) this.next();

                  if (this.match(types.string)) {
                    return this.tsParseAmbientExternalModuleDeclaration(node);
                  } else if (next || this.match(types.name)) {
                    return this.tsParseModuleOrNamespaceDeclaration(node);
                  }

                  break;

                case "namespace":
                  if (next || this.match(types.name)) {
                    if (next) this.next();
                    return this.tsParseModuleOrNamespaceDeclaration(node);
                  }

                  break;

                case "type":
                  if (next || this.match(types.name)) {
                    if (next) this.next();
                    return this.tsParseTypeAliasDeclaration(node);
                  }

                  break;
              }
            };

            _proto.tsTryParseGenericAsyncArrowFunction = function tsTryParseGenericAsyncArrowFunction(
              startPos,
              startLoc
            ) {
              var _this11 = this;

              var res = this.tsTryParseAndCatch(function() {
                var node = _this11.startNodeAt(startPos, startLoc);

                node.typeParameters = _this11.tsParseTypeParameters();

                _superClass.prototype.parseFunctionParams.call(_this11, node);

                node.returnType = _this11.tsTryParseTypeOrTypePredicateAnnotation();

                _this11.expect(types.arrow);

                return node;
              });

              if (!res) {
                return undefined;
              }

              res.id = null;
              res.generator = false;
              res.expression = true;
              res.async = true;
              this.parseFunctionBody(res, true);
              return this.finishNode(res, "ArrowFunctionExpression");
            };

            _proto.tsParseTypeArguments = function tsParseTypeArguments() {
              var _this12 = this;

              var node = this.startNode();
              node.params = this.tsInType(function() {
                _this12.expectRelational("<");

                return _this12.tsParseDelimitedList(
                  "TypeParametersOrArguments",
                  _this12.tsParseType.bind(_this12)
                );
              });
              this.expectRelational(">");
              return this.finishNode(node, "TSTypeParameterInstantiation");
            };

            _proto.tsIsDeclarationStart = function tsIsDeclarationStart() {
              if (this.match(types.name)) {
                switch (this.state.value) {
                  case "abstract":
                  case "declare":
                  case "enum":
                  case "interface":
                  case "module":
                  case "namespace":
                  case "type":
                    return true;
                }
              }

              return false;
            };

            _proto.isExportDefaultSpecifier = function isExportDefaultSpecifier() {
              if (this.tsIsDeclarationStart()) return false;
              return _superClass.prototype.isExportDefaultSpecifier.call(this);
            };

            _proto.parseAssignableListItem = function parseAssignableListItem(
              allowModifiers,
              decorators
            ) {
              var accessibility;
              var readonly = false;

              if (allowModifiers) {
                accessibility = this.parseAccessModifier();
                readonly = !!this.tsParseModifier(["readonly"]);
              }

              var left = this.parseMaybeDefault();
              this.parseAssignableListItemTypes(left);
              var elt = this.parseMaybeDefault(
                left.start,
                left.loc.start,
                left
              );

              if (accessibility || readonly) {
                var pp = this.startNodeAtNode(elt);

                if (decorators.length) {
                  pp.decorators = decorators;
                }

                if (accessibility) pp.accessibility = accessibility;
                if (readonly) pp.readonly = readonly;

                if (
                  elt.type !== "Identifier" &&
                  elt.type !== "AssignmentPattern"
                ) {
                  throw this.raise(
                    pp.start,
                    "A parameter property may not be declared using a binding pattern."
                  );
                }

                pp.parameter = elt;
                return this.finishNode(pp, "TSParameterProperty");
              } else {
                if (decorators.length) {
                  left.decorators = decorators;
                }

                return elt;
              }
            };

            _proto.parseFunctionBodyAndFinish = function parseFunctionBodyAndFinish(
              node,
              type,
              allowExpressionBody
            ) {
              if (!allowExpressionBody && this.match(types.colon)) {
                node.returnType = this.tsParseTypeOrTypePredicateAnnotation(
                  types.colon
                );
              }

              var bodilessType =
                type === "FunctionDeclaration"
                  ? "TSDeclareFunction"
                  : type === "ClassMethod" ? "TSDeclareMethod" : undefined;

              if (
                bodilessType &&
                !this.match(types.braceL) &&
                this.isLineTerminator()
              ) {
                this.finishNode(node, bodilessType);
                return;
              }

              _superClass.prototype.parseFunctionBodyAndFinish.call(
                this,
                node,
                type,
                allowExpressionBody
              );
            };

            _proto.parseSubscript = function parseSubscript(
              base,
              startPos,
              startLoc,
              noCalls,
              state
            ) {
              if (!this.hasPrecedingLineBreak() && this.eat(types.bang)) {
                var nonNullExpression = this.startNodeAt(startPos, startLoc);
                nonNullExpression.expression = base;
                return this.finishNode(
                  nonNullExpression,
                  "TSNonNullExpression"
                );
              }

              if (!noCalls && this.isRelational("<")) {
                if (this.atPossibleAsync(base)) {
                  var asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(
                    startPos,
                    startLoc
                  );

                  if (asyncArrowFn) {
                    return asyncArrowFn;
                  }
                }

                var node = this.startNodeAt(startPos, startLoc);
                node.callee = base;
                var typeArguments = this.tsTryParseTypeArgumentsInExpression();

                if (typeArguments) {
                  node.arguments = this.parseCallExpressionArguments(
                    types.parenR,
                    false
                  );
                  node.typeParameters = typeArguments;
                  return this.finishCallExpression(node);
                }
              }

              return _superClass.prototype.parseSubscript.call(
                this,
                base,
                startPos,
                startLoc,
                noCalls,
                state
              );
            };

            _proto.parseNewArguments = function parseNewArguments(node) {
              var _this13 = this;

              if (this.isRelational("<")) {
                var typeParameters = this.tsTryParseAndCatch(function() {
                  var args = _this13.tsParseTypeArguments();

                  if (!_this13.match(types.parenL)) _this13.unexpected();
                  return args;
                });

                if (typeParameters) {
                  node.typeParameters = typeParameters;
                }
              }

              _superClass.prototype.parseNewArguments.call(this, node);
            };

            _proto.parseExprOp = function parseExprOp(
              left,
              leftStartPos,
              leftStartLoc,
              minPrec,
              noIn
            ) {
              if (
                nonNull(types._in.binop) > minPrec &&
                !this.hasPrecedingLineBreak() &&
                this.isContextual("as")
              ) {
                var node = this.startNodeAt(leftStartPos, leftStartLoc);
                node.expression = left;
                node.typeAnnotation = this.tsNextThenParseType();
                this.finishNode(node, "TSAsExpression");
                return this.parseExprOp(
                  node,
                  leftStartPos,
                  leftStartLoc,
                  minPrec,
                  noIn
                );
              }

              return _superClass.prototype.parseExprOp.call(
                this,
                left,
                leftStartPos,
                leftStartLoc,
                minPrec,
                noIn
              );
            };

            _proto.checkReservedWord = function checkReservedWord(
              word,
              startLoc,
              checkKeywords,
              isBinding
            ) {};

            _proto.checkDuplicateExports = function checkDuplicateExports() {};

            _proto.parseImport = function parseImport(node) {
              if (
                this.match(types.name) &&
                this.lookahead().type === types.eq
              ) {
                return this.tsParseImportEqualsDeclaration(node);
              }

              return _superClass.prototype.parseImport.call(this, node);
            };

            _proto.parseExport = function parseExport(node) {
              if (this.match(types._import)) {
                this.expect(types._import);
                return this.tsParseImportEqualsDeclaration(node, true);
              } else if (this.eat(types.eq)) {
                var assign = node;
                assign.expression = this.parseExpression();
                this.semicolon();
                return this.finishNode(assign, "TSExportAssignment");
              } else if (this.eatContextual("as")) {
                var decl = node;
                this.expectContextual("namespace");
                decl.id = this.parseIdentifier();
                this.semicolon();
                return this.finishNode(decl, "TSNamespaceExportDeclaration");
              } else {
                return _superClass.prototype.parseExport.call(this, node);
              }
            };

            _proto.parseExportDefaultExpression = function parseExportDefaultExpression() {
              if (
                this.isContextual("abstract") &&
                this.lookahead().type === types._class
              ) {
                var cls = this.startNode();
                this.next();
                this.parseClass(cls, true, true);
                cls.abstract = true;
                return cls;
              }

              return _superClass.prototype.parseExportDefaultExpression.call(
                this
              );
            };

            _proto.parseStatementContent = function parseStatementContent(
              declaration,
              topLevel
            ) {
              if (this.state.type === types._const) {
                var ahead = this.lookahead();

                if (ahead.type === types.name && ahead.value === "enum") {
                  var node = this.startNode();
                  this.expect(types._const);
                  this.expectContextual("enum");
                  return this.tsParseEnumDeclaration(node, true);
                }
              }

              return _superClass.prototype.parseStatementContent.call(
                this,
                declaration,
                topLevel
              );
            };

            _proto.parseAccessModifier = function parseAccessModifier() {
              return this.tsParseModifier(["public", "protected", "private"]);
            };

            _proto.parseClassMember = function parseClassMember(
              classBody,
              member,
              state
            ) {
              var accessibility = this.parseAccessModifier();
              if (accessibility) member.accessibility = accessibility;

              _superClass.prototype.parseClassMember.call(
                this,
                classBody,
                member,
                state
              );
            };

            _proto.parseClassMemberWithIsStatic = function parseClassMemberWithIsStatic(
              classBody,
              member,
              state,
              isStatic
            ) {
              var methodOrProp = member;
              var prop = member;
              var propOrIdx = member;
              var abstract = false,
                readonly = false;
              var mod = this.tsParseModifier(["abstract", "readonly"]);

              switch (mod) {
                case "readonly":
                  readonly = true;
                  abstract = !!this.tsParseModifier(["abstract"]);
                  break;

                case "abstract":
                  abstract = true;
                  readonly = !!this.tsParseModifier(["readonly"]);
                  break;
              }

              if (abstract) methodOrProp.abstract = true;
              if (readonly) propOrIdx.readonly = true;

              if (!abstract && !isStatic && !methodOrProp.accessibility) {
                var idx = this.tsTryParseIndexSignature(member);

                if (idx) {
                  classBody.body.push(idx);
                  return;
                }
              }

              if (readonly) {
                methodOrProp.static = isStatic;
                this.parseClassPropertyName(prop);
                this.parsePostMemberNameModifiers(methodOrProp);
                this.pushClassProperty(classBody, prop);
                return;
              }

              _superClass.prototype.parseClassMemberWithIsStatic.call(
                this,
                classBody,
                member,
                state,
                isStatic
              );
            };

            _proto.parsePostMemberNameModifiers = function parsePostMemberNameModifiers(
              methodOrProp
            ) {
              var optional = this.eat(types.question);
              if (optional) methodOrProp.optional = true;
            };

            _proto.parseExpressionStatement = function parseExpressionStatement(
              node,
              expr
            ) {
              var decl =
                expr.type === "Identifier"
                  ? this.tsParseExpressionStatement(node, expr)
                  : undefined;
              return (
                decl ||
                _superClass.prototype.parseExpressionStatement.call(
                  this,
                  node,
                  expr
                )
              );
            };

            _proto.shouldParseExportDeclaration = function shouldParseExportDeclaration() {
              if (this.tsIsDeclarationStart()) return true;
              return _superClass.prototype.shouldParseExportDeclaration.call(
                this
              );
            };

            _proto.parseConditional = function parseConditional(
              expr,
              noIn,
              startPos,
              startLoc,
              refNeedsArrowPos
            ) {
              if (!refNeedsArrowPos || !this.match(types.question)) {
                return _superClass.prototype.parseConditional.call(
                  this,
                  expr,
                  noIn,
                  startPos,
                  startLoc,
                  refNeedsArrowPos
                );
              }

              var state = this.state.clone();

              try {
                return _superClass.prototype.parseConditional.call(
                  this,
                  expr,
                  noIn,
                  startPos,
                  startLoc
                );
              } catch (err) {
                if (!(err instanceof SyntaxError)) {
                  throw err;
                }

                this.state = state;
                refNeedsArrowPos.start = err.pos || this.state.start;
                return expr;
              }
            };

            _proto.parseParenItem = function parseParenItem(
              node,
              startPos,
              startLoc
            ) {
              node = _superClass.prototype.parseParenItem.call(
                this,
                node,
                startPos,
                startLoc
              );

              if (this.eat(types.question)) {
                node.optional = true;
              }

              if (this.match(types.colon)) {
                var typeCastNode = this.startNodeAt(startPos, startLoc);
                typeCastNode.expression = node;
                typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
                return this.finishNode(typeCastNode, "TSTypeCastExpression");
              }

              return node;
            };

            _proto.parseExportDeclaration = function parseExportDeclaration(
              node
            ) {
              var isDeclare = this.eatContextual("declare");
              var declaration;

              if (this.match(types.name)) {
                declaration = this.tsTryParseExportDeclaration();
              }

              if (!declaration) {
                declaration = _superClass.prototype.parseExportDeclaration.call(
                  this,
                  node
                );
              }

              if (declaration && isDeclare) {
                declaration.declare = true;
              }

              return declaration;
            };

            _proto.parseClassId = function parseClassId(
              node,
              isStatement,
              optionalId
            ) {
              var _superClass$prototype;

              if (
                (!isStatement || optionalId) &&
                this.isContextual("implements")
              ) {
                return;
              }

              (_superClass$prototype =
                _superClass.prototype.parseClassId).call.apply(
                _superClass$prototype,
                [this].concat(Array.prototype.slice.call(arguments))
              );

              var typeParameters = this.tsTryParseTypeParameters();
              if (typeParameters) node.typeParameters = typeParameters;
            };

            _proto.parseClassProperty = function parseClassProperty(node) {
              if (!node.optional && this.eat(types.bang)) {
                node.definite = true;
              }

              var type = this.tsTryParseTypeAnnotation();
              if (type) node.typeAnnotation = type;
              return _superClass.prototype.parseClassProperty.call(this, node);
            };

            _proto.pushClassMethod = function pushClassMethod(
              classBody,
              method,
              isGenerator,
              isAsync,
              isConstructor
            ) {
              var typeParameters = this.tsTryParseTypeParameters();
              if (typeParameters) method.typeParameters = typeParameters;

              _superClass.prototype.pushClassMethod.call(
                this,
                classBody,
                method,
                isGenerator,
                isAsync,
                isConstructor
              );
            };

            _proto.pushClassPrivateMethod = function pushClassPrivateMethod(
              classBody,
              method,
              isGenerator,
              isAsync
            ) {
              var typeParameters = this.tsTryParseTypeParameters();
              if (typeParameters) method.typeParameters = typeParameters;

              _superClass.prototype.pushClassPrivateMethod.call(
                this,
                classBody,
                method,
                isGenerator,
                isAsync
              );
            };

            _proto.parseClassSuper = function parseClassSuper(node) {
              _superClass.prototype.parseClassSuper.call(this, node);

              if (node.superClass && this.isRelational("<")) {
                node.superTypeParameters = this.tsParseTypeArguments();
              }

              if (this.eatContextual("implements")) {
                node.implements = this.tsParseHeritageClause();
              }
            };

            _proto.parseObjPropValue = function parseObjPropValue(prop) {
              var _superClass$prototype2;

              if (this.isRelational("<")) {
                throw new Error("TODO");
              }

              for (
                var _len = arguments.length,
                  args = new Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key];
              }

              (_superClass$prototype2 =
                _superClass.prototype.parseObjPropValue).call.apply(
                _superClass$prototype2,
                [this, prop].concat(args)
              );
            };

            _proto.parseFunctionParams = function parseFunctionParams(
              node,
              allowModifiers
            ) {
              var typeParameters = this.tsTryParseTypeParameters();
              if (typeParameters) node.typeParameters = typeParameters;

              _superClass.prototype.parseFunctionParams.call(
                this,
                node,
                allowModifiers
              );
            };

            _proto.parseVarHead = function parseVarHead(decl) {
              _superClass.prototype.parseVarHead.call(this, decl);

              if (decl.id.type === "Identifier" && this.eat(types.bang)) {
                decl.definite = true;
              }

              var type = this.tsTryParseTypeAnnotation();

              if (type) {
                decl.id.typeAnnotation = type;
                this.finishNode(decl.id, decl.id.type);
              }
            };

            _proto.parseAsyncArrowFromCallExpression = function parseAsyncArrowFromCallExpression(
              node,
              call
            ) {
              if (this.match(types.colon)) {
                node.returnType = this.tsParseTypeAnnotation();
              }

              return _superClass.prototype.parseAsyncArrowFromCallExpression.call(
                this,
                node,
                call
              );
            };

            _proto.parseMaybeAssign = function parseMaybeAssign() {
              var jsxError;

              for (
                var _len2 = arguments.length,
                  args = new Array(_len2),
                  _key2 = 0;
                _key2 < _len2;
                _key2++
              ) {
                args[_key2] = arguments[_key2];
              }

              if (this.match(types.jsxTagStart)) {
                var context = this.curContext();
                assert(context === types$1.j_oTag);
                assert(
                  this.state.context[this.state.context.length - 2] ===
                    types$1.j_expr
                );

                var _state = this.state.clone();

                try {
                  var _superClass$prototype3;

                  return (_superClass$prototype3 =
                    _superClass.prototype.parseMaybeAssign).call.apply(
                    _superClass$prototype3,
                    [this].concat(args)
                  );
                } catch (err) {
                  if (!(err instanceof SyntaxError)) {
                    throw err;
                  }

                  this.state = _state;
                  assert(this.curContext() === types$1.j_oTag);
                  this.state.context.pop();
                  assert(this.curContext() === types$1.j_expr);
                  this.state.context.pop();
                  jsxError = err;
                }
              }

              if (jsxError === undefined && !this.isRelational("<")) {
                var _superClass$prototype4;

                return (_superClass$prototype4 =
                  _superClass.prototype.parseMaybeAssign).call.apply(
                  _superClass$prototype4,
                  [this].concat(args)
                );
              }

              var arrowExpression;
              var typeParameters;
              var state = this.state.clone();

              try {
                var _superClass$prototype5;

                typeParameters = this.tsParseTypeParameters();
                arrowExpression = (_superClass$prototype5 =
                  _superClass.prototype.parseMaybeAssign).call.apply(
                  _superClass$prototype5,
                  [this].concat(args)
                );

                if (arrowExpression.type !== "ArrowFunctionExpression") {
                  this.unexpected();
                }
              } catch (err) {
                var _superClass$prototype6;

                if (!(err instanceof SyntaxError)) {
                  throw err;
                }

                if (jsxError) {
                  throw jsxError;
                }

                assert(!this.hasPlugin("jsx"));
                this.state = state;
                return (_superClass$prototype6 =
                  _superClass.prototype.parseMaybeAssign).call.apply(
                  _superClass$prototype6,
                  [this].concat(args)
                );
              }

              if (typeParameters && typeParameters.params.length !== 0) {
                this.resetStartLocationFromNode(
                  arrowExpression,
                  typeParameters.params[0]
                );
              }

              arrowExpression.typeParameters = typeParameters;
              return arrowExpression;
            };

            _proto.parseMaybeUnary = function parseMaybeUnary(
              refShorthandDefaultPos
            ) {
              if (!this.hasPlugin("jsx") && this.eatRelational("<")) {
                return this.tsParseTypeAssertion();
              } else {
                return _superClass.prototype.parseMaybeUnary.call(
                  this,
                  refShorthandDefaultPos
                );
              }
            };

            _proto.parseArrow = function parseArrow(node) {
              if (this.match(types.colon)) {
                var state = this.state.clone();

                try {
                  var returnType = this.tsParseTypeOrTypePredicateAnnotation(
                    types.colon
                  );
                  if (this.canInsertSemicolon()) this.unexpected();
                  if (!this.match(types.arrow)) this.unexpected();
                  node.returnType = returnType;
                } catch (err) {
                  if (err instanceof SyntaxError) {
                    this.state = state;
                  } else {
                    throw err;
                  }
                }
              }

              return _superClass.prototype.parseArrow.call(this, node);
            };

            _proto.parseAssignableListItemTypes = function parseAssignableListItemTypes(
              param
            ) {
              if (this.eat(types.question)) {
                if (param.type !== "Identifier") {
                  throw this.raise(
                    param.start,
                    "A binding pattern parameter cannot be optional in an implementation signature."
                  );
                }

                param.optional = true;
              }

              var type = this.tsTryParseTypeAnnotation();
              if (type) param.typeAnnotation = type;
              return this.finishNode(param, param.type);
            };

            _proto.toAssignable = function toAssignable(
              node,
              isBinding,
              contextDescription
            ) {
              switch (node.type) {
                case "TSTypeCastExpression":
                  return _superClass.prototype.toAssignable.call(
                    this,
                    this.typeCastToParameter(node),
                    isBinding,
                    contextDescription
                  );

                case "TSParameterProperty":
                  return _superClass.prototype.toAssignable.call(
                    this,
                    node,
                    isBinding,
                    contextDescription
                  );

                case "TSAsExpression":
                  node.expression = this.toAssignable(
                    node.expression,
                    isBinding,
                    contextDescription
                  );
                  return node;

                default:
                  return _superClass.prototype.toAssignable.call(
                    this,
                    node,
                    isBinding,
                    contextDescription
                  );
              }
            };

            _proto.checkLVal = function checkLVal(
              expr,
              isBinding,
              checkClashes,
              contextDescription
            ) {
              switch (expr.type) {
                case "TSTypeCastExpression":
                  return;

                case "TSParameterProperty":
                  this.checkLVal(
                    expr.parameter,
                    isBinding,
                    checkClashes,
                    "parameter property"
                  );
                  return;

                case "TSAsExpression":
                  this.checkLVal(
                    expr.expression,
                    isBinding,
                    checkClashes,
                    contextDescription
                  );
                  return;

                default:
                  _superClass.prototype.checkLVal.call(
                    this,
                    expr,
                    isBinding,
                    checkClashes,
                    contextDescription
                  );

                  return;
              }
            };

            _proto.parseBindingAtom = function parseBindingAtom() {
              switch (this.state.type) {
                case types._this:
                  return this.parseIdentifier(true);

                default:
                  return _superClass.prototype.parseBindingAtom.call(this);
              }
            };

            _proto.isClassMethod = function isClassMethod() {
              return (
                this.isRelational("<") ||
                _superClass.prototype.isClassMethod.call(this)
              );
            };

            _proto.isClassProperty = function isClassProperty() {
              return (
                this.match(types.bang) ||
                this.match(types.colon) ||
                _superClass.prototype.isClassProperty.call(this)
              );
            };

            _proto.parseMaybeDefault = function parseMaybeDefault() {
              var _superClass$prototype7;

              for (
                var _len3 = arguments.length,
                  args = new Array(_len3),
                  _key3 = 0;
                _key3 < _len3;
                _key3++
              ) {
                args[_key3] = arguments[_key3];
              }

              var node = (_superClass$prototype7 =
                _superClass.prototype.parseMaybeDefault).call.apply(
                _superClass$prototype7,
                [this].concat(args)
              );

              if (
                node.type === "AssignmentPattern" &&
                node.typeAnnotation &&
                node.right.start < node.typeAnnotation.start
              ) {
                this.raise(
                  node.typeAnnotation.start,
                  "Type annotations must come before default assignments, " +
                    "e.g. instead of `age = 25: number` use `age: number = 25`"
                );
              }

              return node;
            };

            _proto.readToken = function readToken(code) {
              if (this.state.inType && (code === 62 || code === 60)) {
                return this.finishOp(types.relational, 1);
              } else {
                return _superClass.prototype.readToken.call(this, code);
              }
            };

            _proto.toAssignableList = function toAssignableList(
              exprList,
              isBinding,
              contextDescription
            ) {
              for (var i = 0; i < exprList.length; i++) {
                var expr = exprList[i];

                if (expr && expr.type === "TSTypeCastExpression") {
                  exprList[i] = this.typeCastToParameter(expr);
                }
              }

              return _superClass.prototype.toAssignableList.call(
                this,
                exprList,
                isBinding,
                contextDescription
              );
            };

            _proto.typeCastToParameter = function typeCastToParameter(node) {
              node.expression.typeAnnotation = node.typeAnnotation;
              return this.finishNodeAt(
                node.expression,
                node.expression.type,
                node.typeAnnotation.end,
                node.typeAnnotation.loc.end
              );
            };

            _proto.toReferencedList = function toReferencedList(exprList) {
              for (var i = 0; i < exprList.length; i++) {
                var expr = exprList[i];

                if (
                  expr &&
                  expr._exprListItem &&
                  expr.type === "TsTypeCastExpression"
                ) {
                  this.raise(
                    expr.start,
                    "Did not expect a type annotation here."
                  );
                }
              }

              return exprList;
            };

            _proto.shouldParseArrow = function shouldParseArrow() {
              return (
                this.match(types.colon) ||
                _superClass.prototype.shouldParseArrow.call(this)
              );
            };

            _proto.shouldParseAsyncArrow = function shouldParseAsyncArrow() {
              return (
                this.match(types.colon) ||
                _superClass.prototype.shouldParseAsyncArrow.call(this)
              );
            };

            return _class;
          })(superClass);
        };

        plugins.estree = estreePlugin;
        plugins.flow = flowPlugin;
        plugins.jsx = jsxPlugin;
        plugins.typescript = typescriptPlugin;

        function parse(input, options) {
          if (options && options.sourceType === "unambiguous") {
            options = Object.assign({}, options);

            try {
              options.sourceType = "module";
              var parser = getParser(options, input);
              var ast = parser.parse();
              if (!parser.sawUnambiguousESM) ast.program.sourceType = "script";
              return ast;
            } catch (moduleError) {
              try {
                options.sourceType = "script";
                return getParser(options, input).parse();
              } catch (scriptError) {}

              throw moduleError;
            }
          } else {
            return getParser(options, input).parse();
          }
        }

        function parseExpression(input, options) {
          var parser = getParser(options, input);

          if (parser.options.strictMode) {
            parser.state.strict = true;
          }

          return parser.getExpression();
        }

        function getParser(options, input) {
          var cls =
            options && options.plugins
              ? getParserClass(options.plugins)
              : Parser;
          return new cls(options, input);
        }

        var parserClassCache = {};

        function getParserClass(pluginsFromOptions) {
          if (
            pluginsFromOptions.indexOf("decorators") >= 0 &&
            pluginsFromOptions.indexOf("decorators2") >= 0
          ) {
            throw new Error(
              "Cannot use decorators and decorators2 plugin together"
            );
          }

          var pluginList = pluginsFromOptions.filter(function(p) {
            return (
              p === "estree" ||
              p === "flow" ||
              p === "jsx" ||
              p === "typescript"
            );
          });

          if (pluginList.indexOf("flow") >= 0) {
            pluginList = pluginList.filter(function(plugin) {
              return plugin !== "flow";
            });
            pluginList.push("flow");
          }

          if (
            pluginList.indexOf("flow") >= 0 &&
            pluginList.indexOf("typescript") >= 0
          ) {
            throw new Error("Cannot combine flow and typescript plugins.");
          }

          if (pluginList.indexOf("typescript") >= 0) {
            pluginList = pluginList.filter(function(plugin) {
              return plugin !== "typescript";
            });
            pluginList.push("typescript");
          }

          if (pluginList.indexOf("estree") >= 0) {
            pluginList = pluginList.filter(function(plugin) {
              return plugin !== "estree";
            });
            pluginList.unshift("estree");
          }

          var key = pluginList.join("/");
          var cls = parserClassCache[key];

          if (!cls) {
            cls = Parser;

            for (
              var _i2 = 0, _pluginList2 = pluginList;
              _i2 < _pluginList2.length;
              _i2++
            ) {
              var plugin = _pluginList2[_i2];
              cls = plugins[plugin](cls);
            }

            parserClassCache[key] = cls;
          }

          return cls;
        }

        exports.parse = parse;
        exports.parseExpression = parseExpression;
        exports.tokTypes = types;

        /***/
      },
      /* 84 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.merge = merge;
        exports.validate = validate;
        exports.normalizeReplacements = normalizeReplacements;

        function _objectWithoutProperties(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;

          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }

          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }

          return target;
        }

        function merge(a, b) {
          var _b$placeholderWhiteli = b.placeholderWhitelist,
            placeholderWhitelist =
              _b$placeholderWhiteli === void 0
                ? a.placeholderWhitelist
                : _b$placeholderWhiteli,
            _b$placeholderPattern = b.placeholderPattern,
            placeholderPattern =
              _b$placeholderPattern === void 0
                ? a.placeholderPattern
                : _b$placeholderPattern,
            _b$preserveComments = b.preserveComments,
            preserveComments =
              _b$preserveComments === void 0
                ? a.preserveComments
                : _b$preserveComments;
          return {
            parser: Object.assign({}, a.parser, b.parser),
            placeholderWhitelist: placeholderWhitelist,
            placeholderPattern: placeholderPattern,
            preserveComments: preserveComments
          };
        }

        function validate(opts) {
          if (opts != null && typeof opts !== "object") {
            throw new Error("Unknown template options.");
          }

          var _ref = opts || {},
            placeholderWhitelist = _ref.placeholderWhitelist,
            placeholderPattern = _ref.placeholderPattern,
            preserveComments = _ref.preserveComments,
            parser = _objectWithoutProperties(_ref, [
              "placeholderWhitelist",
              "placeholderPattern",
              "preserveComments"
            ]);

          if (
            placeholderWhitelist != null &&
            !(placeholderWhitelist instanceof Set)
          ) {
            throw new Error(
              "'.placeholderWhitelist' must be a Set, null, or undefined"
            );
          }

          if (
            placeholderPattern != null &&
            !(placeholderPattern instanceof RegExp) &&
            placeholderPattern !== false
          ) {
            throw new Error(
              "'.placeholderPattern' must be a RegExp, false, null, or undefined"
            );
          }

          if (
            preserveComments != null &&
            typeof preserveComments !== "boolean"
          ) {
            throw new Error(
              "'.preserveComments' must be a boolean, null, or undefined"
            );
          }

          return {
            parser: parser,
            placeholderWhitelist: placeholderWhitelist || undefined,
            placeholderPattern:
              placeholderPattern == null ? undefined : placeholderPattern,
            preserveComments:
              preserveComments == null ? false : preserveComments
          };
        }

        function normalizeReplacements(replacements) {
          if (Array.isArray(replacements)) {
            return replacements.reduce(function(acc, replacement, i) {
              acc["$" + i] = replacement;
              return acc;
            }, {});
          } else if (typeof replacements === "object" || replacements == null) {
            return replacements || undefined;
          }

          throw new Error(
            "Template replacements must be an array, object, null, or undefined"
          );
        }

        /***/
      },
      /* 85 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.findPackageData = findPackageData;
        exports.findRelativeConfig = findRelativeConfig;
        exports.findRootConfig = findRootConfig;
        exports.loadConfig = loadConfig;
        exports.resolvePlugin = resolvePlugin;
        exports.resolvePreset = resolvePreset;
        exports.loadPlugin = loadPlugin;
        exports.loadPreset = loadPreset;

        function findPackageData(filepath) {
          return {
            filepath: filepath,
            directories: [],
            pkg: null,
            isPackage: false
          };
        }

        function findRelativeConfig(pkgData, envName) {
          return {
            pkg: null,
            config: null,
            ignore: null
          };
        }

        function findRootConfig(dirname, envName) {
          return null;
        }

        function loadConfig(name, dirname, envName) {
          throw new Error(
            "Cannot load " + name + " relative to " + dirname + " in a browser"
          );
        }

        function resolvePlugin(name, dirname) {
          return null;
        }

        function resolvePreset(name, dirname) {
          return null;
        }

        function loadPlugin(name, dirname) {
          throw new Error(
            "Cannot load plugin " +
              name +
              " relative to " +
              dirname +
              " in a browser"
          );
        }

        function loadPreset(name, dirname) {
          throw new Error(
            "Cannot load preset " +
              name +
              " relative to " +
              dirname +
              " in a browser"
          );
        }

        /***/
      },
      /* 86 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var Plugin = function Plugin(plugin, options, key) {
          this.key = plugin.name || key;
          this.manipulateOptions = plugin.manipulateOptions;
          this.post = plugin.post;
          this.pre = plugin.pre;
          this.visitor = plugin.visitor || {};
          this.parserOverride = plugin.parserOverride;
          this.generatorOverride = plugin.generatorOverride;
          this.options = options;
        };

        exports.default = Plugin;

        /***/
      },
      /* 87 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.makeStrongCache = makeStrongCache;
        exports.makeWeakCache = makeWeakCache;

        function makeStrongCache(handler) {
          return makeCachedFunction(new Map(), handler);
        }

        function makeWeakCache(handler) {
          return makeCachedFunction(new WeakMap(), handler);
        }

        function makeCachedFunction(callCache, handler) {
          return function cachedFunction(arg, data) {
            var cachedValue = callCache.get(arg);

            if (cachedValue) {
              for (
                var _iterator = cachedValue,
                  _isArray = Array.isArray(_iterator),
                  _i = 0,
                  _iterator = _isArray
                    ? _iterator
                    : _iterator[Symbol.iterator]();
                ;

              ) {
                var _ref2;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref2 = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref2 = _i.value;
                }

                var _ref3 = _ref2;
                var _value = _ref3.value,
                  _valid = _ref3.valid;
                if (_valid(data)) return _value;
              }
            }

            var cache = new CacheConfigurator(data);
            var value = handler(arg, cache);
            if (!cache.configured()) cache.forever();
            cache.deactivate();

            switch (cache.mode()) {
              case "forever":
                cachedValue = [
                  {
                    value: value,
                    valid: function valid() {
                      return true;
                    }
                  }
                ];
                callCache.set(arg, cachedValue);
                break;

              case "invalidate":
                cachedValue = [
                  {
                    value: value,
                    valid: cache.validator()
                  }
                ];
                callCache.set(arg, cachedValue);
                break;

              case "valid":
                if (cachedValue) {
                  cachedValue.push({
                    value: value,
                    valid: cache.validator()
                  });
                } else {
                  cachedValue = [
                    {
                      value: value,
                      valid: cache.validator()
                    }
                  ];
                  callCache.set(arg, cachedValue);
                }
            }

            return value;
          };
        }

        var CacheConfigurator = (function() {
          function CacheConfigurator(data) {
            this._active = true;
            this._never = false;
            this._forever = false;
            this._invalidate = false;
            this._configured = false;
            this._pairs = [];
            this._data = data;
          }

          var _proto = CacheConfigurator.prototype;

          _proto.simple = function simple() {
            return makeSimpleConfigurator(this);
          };

          _proto.mode = function mode() {
            if (this._never) return "never";
            if (this._forever) return "forever";
            if (this._invalidate) return "invalidate";
            return "valid";
          };

          _proto.forever = function forever() {
            if (!this._active) {
              throw new Error(
                "Cannot change caching after evaluation has completed."
              );
            }

            if (this._never) {
              throw new Error(
                "Caching has already been configured with .never()"
              );
            }

            this._forever = true;
            this._configured = true;
          };

          _proto.never = function never() {
            if (!this._active) {
              throw new Error(
                "Cannot change caching after evaluation has completed."
              );
            }

            if (this._forever) {
              throw new Error(
                "Caching has already been configured with .forever()"
              );
            }

            this._never = true;
            this._configured = true;
          };

          _proto.using = function using(handler) {
            if (!this._active) {
              throw new Error(
                "Cannot change caching after evaluation has completed."
              );
            }

            if (this._never || this._forever) {
              throw new Error(
                "Caching has already been configured with .never or .forever()"
              );
            }

            this._configured = true;
            var key = handler(this._data);

            this._pairs.push([key, handler]);

            return key;
          };

          _proto.invalidate = function invalidate(handler) {
            if (!this._active) {
              throw new Error(
                "Cannot change caching after evaluation has completed."
              );
            }

            if (this._never || this._forever) {
              throw new Error(
                "Caching has already been configured with .never or .forever()"
              );
            }

            this._invalidate = true;
            this._configured = true;
            var key = handler(this._data);

            this._pairs.push([key, handler]);

            return key;
          };

          _proto.validator = function validator() {
            var pairs = this._pairs;
            return function(data) {
              return pairs.every(function(_ref4) {
                var key = _ref4[0],
                  fn = _ref4[1];
                return key === fn(data);
              });
            };
          };

          _proto.deactivate = function deactivate() {
            this._active = false;
          };

          _proto.configured = function configured() {
            return this._configured;
          };

          return CacheConfigurator;
        })();

        function makeSimpleConfigurator(cache) {
          function cacheFn(val) {
            if (typeof val === "boolean") {
              if (val) cache.forever();
              else cache.never();
              return;
            }

            return cache.using(val);
          }

          cacheFn.forever = function() {
            return cache.forever();
          };

          cacheFn.never = function() {
            return cache.never();
          };

          cacheFn.using = function(cb) {
            return cache.using(function() {
              return cb();
            });
          };

          cacheFn.invalidate = function(cb) {
            return cache.invalidate(function() {
              return cb();
            });
          };

          return cacheFn;
        }

        /***/
      },
      /* 88 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(process) {
          var win32 = process && process.platform === "win32";

          var path = __webpack_require__(7);

          var fileRe = __webpack_require__(452);

          var utils = module.exports;
          utils.diff = __webpack_require__(453);
          utils.unique = __webpack_require__(455);
          utils.braces = __webpack_require__(456);
          utils.brackets = __webpack_require__(467);
          utils.extglob = __webpack_require__(469);
          utils.isExtglob = __webpack_require__(52);
          utils.isGlob = __webpack_require__(53);
          utils.typeOf = __webpack_require__(89);
          utils.normalize = __webpack_require__(470);
          utils.omit = __webpack_require__(472);
          utils.parseGlob = __webpack_require__(476);
          utils.cache = __webpack_require__(480);

          utils.filename = function filename(fp) {
            var seg = fp.match(fileRe());
            return seg && seg[0];
          };

          utils.isPath = function isPath(pattern, opts) {
            opts = opts || {};
            return function(fp) {
              var unixified = utils.unixify(fp, opts);

              if (opts.nocase) {
                return pattern.toLowerCase() === unixified.toLowerCase();
              }

              return pattern === unixified;
            };
          };

          utils.hasPath = function hasPath(pattern, opts) {
            return function(fp) {
              return utils.unixify(pattern, opts).indexOf(fp) !== -1;
            };
          };

          utils.matchPath = function matchPath(pattern, opts) {
            var fn =
              opts && opts.contains
                ? utils.hasPath(pattern, opts)
                : utils.isPath(pattern, opts);
            return fn;
          };

          utils.hasFilename = function hasFilename(re) {
            return function(fp) {
              var name = utils.filename(fp);
              return name && re.test(name);
            };
          };

          utils.arrayify = function arrayify(val) {
            return !Array.isArray(val) ? [val] : val;
          };

          utils.unixify = function unixify(fp, opts) {
            if (opts && opts.unixify === false) return fp;

            if ((opts && opts.unixify === true) || win32 || path.sep === "\\") {
              return utils.normalize(fp, false);
            }

            if (opts && opts.unescape === true) {
              return fp ? fp.toString().replace(/\\(\w)/g, "$1") : "";
            }

            return fp;
          };

          utils.escapePath = function escapePath(fp) {
            return fp.replace(/[\\.]/g, "\\$&");
          };

          utils.unescapeGlob = function unescapeGlob(fp) {
            return fp.replace(/[\\"']/g, "");
          };

          utils.escapeRe = function escapeRe(str) {
            return str.replace(/[-[\\$*+?.#^\s{}(|)\]]/g, "\\$&");
          };

          module.exports = utils;
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(12)));

        /***/
      },
      /* 89 */
      /***/ function(module, exports, __webpack_require__) {
        var isBuffer = __webpack_require__(161);

        var toString = Object.prototype.toString;

        module.exports = function kindOf(val) {
          if (typeof val === "undefined") {
            return "undefined";
          }

          if (val === null) {
            return "null";
          }

          if (val === true || val === false || val instanceof Boolean) {
            return "boolean";
          }

          if (typeof val === "string" || val instanceof String) {
            return "string";
          }

          if (typeof val === "number" || val instanceof Number) {
            return "number";
          }

          if (typeof val === "function" || val instanceof Function) {
            return "function";
          }

          if (typeof Array.isArray !== "undefined" && Array.isArray(val)) {
            return "array";
          }

          if (val instanceof RegExp) {
            return "regexp";
          }

          if (val instanceof Date) {
            return "date";
          }

          var type = toString.call(val);

          if (type === "[object RegExp]") {
            return "regexp";
          }

          if (type === "[object Date]") {
            return "date";
          }

          if (type === "[object Arguments]") {
            return "arguments";
          }

          if (type === "[object Error]") {
            return "error";
          }

          if (isBuffer(val)) {
            return "buffer";
          }

          if (type === "[object Set]") {
            return "set";
          }

          if (type === "[object WeakSet]") {
            return "weakset";
          }

          if (type === "[object Map]") {
            return "map";
          }

          if (type === "[object WeakMap]") {
            return "weakmap";
          }

          if (type === "[object Symbol]") {
            return "symbol";
          }

          if (type === "[object Int8Array]") {
            return "int8array";
          }

          if (type === "[object Uint8Array]") {
            return "uint8array";
          }

          if (type === "[object Uint8ClampedArray]") {
            return "uint8clampedarray";
          }

          if (type === "[object Int16Array]") {
            return "int16array";
          }

          if (type === "[object Uint16Array]") {
            return "uint16array";
          }

          if (type === "[object Int32Array]") {
            return "int32array";
          }

          if (type === "[object Uint32Array]") {
            return "uint32array";
          }

          if (type === "[object Float32Array]") {
            return "float32array";
          }

          if (type === "[object Float64Array]") {
            return "float64array";
          }

          return "object";
        };

        /***/
      },
      /* 90 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.validate = validate;

        var _plugin = _interopRequireDefault(__webpack_require__(86));

        var _removed = _interopRequireDefault(__webpack_require__(485));

        var _optionAssertions = __webpack_require__(163);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var ROOT_VALIDATORS = {
          cwd: _optionAssertions.assertString,
          root: _optionAssertions.assertString,
          configFile: _optionAssertions.assertConfigFileSearch,
          filename: _optionAssertions.assertString,
          filenameRelative: _optionAssertions.assertString,
          babelrc: _optionAssertions.assertBoolean,
          babelrcRoots: _optionAssertions.assertBabelrcSearch,
          code: _optionAssertions.assertBoolean,
          ast: _optionAssertions.assertBoolean,
          envName: _optionAssertions.assertString
        };
        var NONPRESET_VALIDATORS = {
          extends: _optionAssertions.assertString,
          env: assertEnvSet,
          ignore: _optionAssertions.assertIgnoreList,
          only: _optionAssertions.assertIgnoreList,
          overrides: assertOverridesList,
          test: _optionAssertions.assertConfigApplicableTest,
          include: _optionAssertions.assertConfigApplicableTest,
          exclude: _optionAssertions.assertConfigApplicableTest
        };
        var COMMON_VALIDATORS = {
          inputSourceMap: _optionAssertions.assertInputSourceMap,
          presets: _optionAssertions.assertPluginList,
          plugins: _optionAssertions.assertPluginList,
          passPerPreset: _optionAssertions.assertBoolean,
          retainLines: _optionAssertions.assertBoolean,
          comments: _optionAssertions.assertBoolean,
          shouldPrintComment: _optionAssertions.assertFunction,
          compact: _optionAssertions.assertCompact,
          minified: _optionAssertions.assertBoolean,
          auxiliaryCommentBefore: _optionAssertions.assertString,
          auxiliaryCommentAfter: _optionAssertions.assertString,
          sourceType: _optionAssertions.assertSourceType,
          wrapPluginVisitorMethod: _optionAssertions.assertFunction,
          highlightCode: _optionAssertions.assertBoolean,
          sourceMaps: _optionAssertions.assertSourceMaps,
          sourceMap: _optionAssertions.assertSourceMaps,
          sourceFileName: _optionAssertions.assertString,
          sourceRoot: _optionAssertions.assertString,
          getModuleId: _optionAssertions.assertFunction,
          moduleRoot: _optionAssertions.assertString,
          moduleIds: _optionAssertions.assertBoolean,
          moduleId: _optionAssertions.assertString,
          parserOpts: _optionAssertions.assertObject,
          generatorOpts: _optionAssertions.assertObject
        };

        function validate(type, opts) {
          assertNoDuplicateSourcemap(opts);
          Object.keys(opts).forEach(function(key) {
            if (type === "preset" && NONPRESET_VALIDATORS[key]) {
              throw new Error("." + key + " is not allowed in preset options");
            }

            if (type !== "arguments" && ROOT_VALIDATORS[key]) {
              throw new Error(
                "." + key + " is only allowed in root programmatic options"
              );
            }

            if (type === "env" && key === "env") {
              throw new Error(
                "." + key + " is not allowed inside another env block"
              );
            }

            if (type === "env" && key === "overrides") {
              throw new Error(
                "." + key + " is not allowed inside an env block"
              );
            }

            if (type === "override" && key === "overrides") {
              throw new Error(
                "." + key + " is not allowed inside an overrides block"
              );
            }

            var validator =
              COMMON_VALIDATORS[key] ||
              NONPRESET_VALIDATORS[key] ||
              ROOT_VALIDATORS[key];
            if (validator) validator(key, opts[key]);
            else throw buildUnknownError(key);
          });
          return opts;
        }

        function buildUnknownError(key) {
          if (_removed.default[key]) {
            var _removed$key = _removed.default[key],
              message = _removed$key.message,
              _removed$key$version = _removed$key.version,
              version =
                _removed$key$version === void 0 ? 5 : _removed$key$version;
            throw new ReferenceError(
              "Using removed Babel " +
                version +
                " option: ." +
                key +
                " - " +
                message
            );
          } else {
            var unknownOptErr =
              "Unknown option: ." +
              key +
              ". Check out http://babeljs.io/docs/usage/options/ for more information about options.";
            throw new ReferenceError(unknownOptErr);
          }
        }

        function has(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }

        function assertNoDuplicateSourcemap(opts) {
          if (has(opts, "sourceMap") && has(opts, "sourceMaps")) {
            throw new Error(
              ".sourceMap is an alias for .sourceMaps, cannot use both"
            );
          }
        }

        function assertEnvSet(key, value) {
          var obj = (0, _optionAssertions.assertObject)(key, value);

          if (obj) {
            var _arr = Object.keys(obj);

            for (var _i = 0; _i < _arr.length; _i++) {
              var _key = _arr[_i];

              var _env = (0, _optionAssertions.assertObject)(_key, obj[_key]);

              if (_env) validate("env", _env);
            }
          }

          return obj;
        }

        function assertOverridesList(key, value) {
          var arr = (0, _optionAssertions.assertArray)(key, value);

          if (arr) {
            for (
              var _iterator = arr.entries(),
                _isArray = Array.isArray(_iterator),
                _i2 = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i2 >= _iterator.length) break;
                _ref = _iterator[_i2++];
              } else {
                _i2 = _iterator.next();
                if (_i2.done) break;
                _ref = _i2.value;
              }

              var _ref2 = _ref,
                index = _ref2[0],
                item = _ref2[1];

              var _env2 = (0, _optionAssertions.assertObject)("" + index, item);

              if (!_env2)
                throw new Error(
                  "." + key + "[" + index + "] must be an object"
                );
              validate("override", _env2);
            }
          }

          return arr;
        }

        /***/
      },
      /* 91 */
      /***/ function(module, exports, __webpack_require__) {
        var isArray = __webpack_require__(6),
          isSymbol = __webpack_require__(34);

        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/;

        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }

          var type = typeof value;

          if (
            type == "number" ||
            type == "symbol" ||
            type == "boolean" ||
            value == null ||
            isSymbol(value)
          ) {
            return true;
          }

          return (
            reIsPlainProp.test(value) ||
            !reIsDeepProp.test(value) ||
            (object != null && value in Object(object))
          );
        }

        module.exports = isKey;

        /***/
      },
      /* 92 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("flow");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 93 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("jsx");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 94 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.addDefault = addDefault;
        exports.addNamed = addNamed;
        exports.addNamespace = addNamespace;
        exports.addSideEffect = addSideEffect;
        Object.defineProperty(exports, "ImportInjector", {
          enumerable: true,
          get: function get() {
            return _importInjector.default;
          }
        });
        Object.defineProperty(exports, "isModule", {
          enumerable: true,
          get: function get() {
            return _isModule.default;
          }
        });

        var _importInjector = _interopRequireDefault(__webpack_require__(532));

        var _isModule = _interopRequireDefault(__webpack_require__(195));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function addDefault(path, importedSource, opts) {
          return new _importInjector.default(path).addDefault(
            importedSource,
            opts
          );
        }

        function addNamed(path, name, importedSource, opts) {
          return new _importInjector.default(path).addNamed(
            name,
            importedSource,
            opts
          );
        }

        function addNamespace(path, importedSource, opts) {
          return new _importInjector.default(path).addNamespace(
            importedSource,
            opts
          );
        }

        function addSideEffect(path, importedSource, opts) {
          return new _importInjector.default(path).addSideEffect(
            importedSource,
            opts
          );
        }

        /***/
      },
      /* 95 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = exports.environmentVisitor = void 0;

        function _traverse() {
          var data = _interopRequireDefault(__webpack_require__(8));

          _traverse = function _traverse() {
            return data;
          };

          return data;
        }

        function _helperMemberExpressionToFunctions() {
          var data = _interopRequireDefault(__webpack_require__(537));

          _helperMemberExpressionToFunctions = function _helperMemberExpressionToFunctions() {
            return data;
          };

          return data;
        }

        function _helperOptimiseCallExpression() {
          var data = _interopRequireDefault(__webpack_require__(198));

          _helperOptimiseCallExpression = function _helperOptimiseCallExpression() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);

            if (typeof Object.getOwnPropertySymbols === "function") {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym
                  ).enumerable;
                })
              );
            }

            ownKeys.forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          }

          return target;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        function getPrototypeOfExpression(objectRef, isStatic, file) {
          objectRef = t().cloneNode(objectRef);
          var targetRef = isStatic
            ? objectRef
            : t().memberExpression(objectRef, t().identifier("prototype"));
          return t().callExpression(file.addHelper("getPrototypeOf"), [
            targetRef
          ]);
        }

        function skipAllButComputedKey(path) {
          if (!path.node.computed) {
            path.skip();
            return;
          }

          var keys = t().VISITOR_KEYS[path.type];

          for (
            var _iterator = keys,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var key = _ref;
            if (key !== "key") path.skipKey(key);
          }
        }

        var environmentVisitor = {
          Function: function Function(path) {
            if (path.isMethod()) return;
            if (path.isArrowFunctionExpression()) return;
            path.skip();
          },
          Method: function Method(path) {
            skipAllButComputedKey(path);
          },
          "ClassProperty|ClassPrivateProperty": function ClassPropertyClassPrivateProperty(
            path
          ) {
            if (path.node.static) return;
            skipAllButComputedKey(path);
          }
        };
        exports.environmentVisitor = environmentVisitor;

        var visitor = _traverse().default.visitors.merge([
          environmentVisitor,
          {
            Super: function Super(path, state) {
              var node = path.node,
                parentPath = path.parentPath;
              if (
                !parentPath.isMemberExpression({
                  object: node
                })
              )
                return;
              state.handle(parentPath);
            }
          }
        ]);

        var memoized = new WeakMap();
        var specHandlers = {
          memoize: function memoize(superMember) {
            var scope = superMember.scope,
              node = superMember.node;
            var computed = node.computed,
              property = node.property;

            if (!computed) {
              return;
            }

            var memo = scope.maybeGenerateMemoised(property);

            if (!memo) {
              return;
            }

            memoized.set(property, memo);
          },
          get: function get(superMember) {
            var _superMember$node = superMember.node,
              computed = _superMember$node.computed,
              property = _superMember$node.property;
            var thisExpr = t().thisExpression();
            var prop;

            if (computed && memoized.has(property)) {
              prop = t().cloneNode(memoized.get(property));
            } else {
              prop = computed ? property : t().stringLiteral(property.name);
            }

            return t().callExpression(this.file.addHelper("get"), [
              getPrototypeOfExpression(
                this.getObjectRef(),
                this.isStatic,
                this.file
              ),
              prop,
              thisExpr
            ]);
          },
          set: function set(superMember, value) {
            var _superMember$node2 = superMember.node,
              computed = _superMember$node2.computed,
              property = _superMember$node2.property;
            var prop;

            if (computed && memoized.has(property)) {
              prop = t().assignmentExpression(
                "=",
                t().cloneNode(memoized.get(property)),
                property
              );
            } else {
              prop = computed ? property : t().stringLiteral(property.name);
            }

            return t().callExpression(this.file.addHelper("set"), [
              getPrototypeOfExpression(
                this.getObjectRef(),
                this.isStatic,
                this.file
              ),
              prop,
              value,
              t().thisExpression(),
              t().booleanLiteral(superMember.isInStrictMode())
            ]);
          },
          call: function call(superMember, args) {
            return (0, _helperOptimiseCallExpression().default)(
              this.get(superMember),
              t().thisExpression(),
              args
            );
          }
        };
        var looseHandlers = {
          memoize: specHandlers.memoize,
          call: specHandlers.call,
          get: function get(superMember) {
            var isStatic = this.isStatic,
              superRef = this.superRef;
            var _superMember$node3 = superMember.node,
              property = _superMember$node3.property,
              computed = _superMember$node3.computed;
            var object;

            if (isStatic) {
              object = superRef
                ? t().cloneNode(superRef)
                : t().memberExpression(
                    t().identifier("Function"),
                    t().identifier("prototype")
                  );
            } else {
              object = superRef
                ? t().memberExpression(
                    t().cloneNode(superRef),
                    t().identifier("prototype")
                  )
                : t().memberExpression(
                    t().identifier("Object"),
                    t().identifier("prototype")
                  );
            }

            var prop;

            if (computed && memoized.has(property)) {
              prop = t().cloneNode(memoized.get(property));
            } else {
              prop = property;
            }

            return t().memberExpression(object, prop, computed);
          },
          set: function set(superMember, value) {
            var _superMember$node4 = superMember.node,
              property = _superMember$node4.property,
              computed = _superMember$node4.computed;
            var prop;

            if (computed && memoized.has(property)) {
              prop = t().assignmentExpression(
                "=",
                t().cloneNode(memoized.get(property)),
                property
              );
            } else {
              prop = property;
            }

            return t().assignmentExpression(
              "=",
              t().memberExpression(t().thisExpression(), prop, computed),
              value
            );
          }
        };

        var ReplaceSupers = (function() {
          function ReplaceSupers(opts) {
            var path = opts.methodPath;
            this.methodPath = path;
            this.isStatic =
              path.isClassMethod({
                static: true
              }) || path.isObjectMethod();
            this.file = opts.file;
            this.superRef = opts.superRef;
            this.isLoose = opts.isLoose;
            this.opts = opts;
          }

          var _proto = ReplaceSupers.prototype;

          _proto.getObjectRef = function getObjectRef() {
            return t().cloneNode(
              this.opts.objectRef || this.opts.getObjectRef()
            );
          };

          _proto.replace = function replace() {
            var handler = this.isLoose ? looseHandlers : specHandlers;
            (0, _helperMemberExpressionToFunctions().default)(
              this.methodPath,
              visitor,
              _objectSpread(
                {
                  file: this.file,
                  isStatic: this.isStatic,
                  getObjectRef: this.getObjectRef.bind(this),
                  superRef: this.superRef
                },
                handler
              )
            );
          };

          return ReplaceSupers;
        })();

        exports.default = ReplaceSupers;

        /***/
      },
      /* 96 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var generate = __webpack_require__(548).generate;

        var parse = __webpack_require__(549).parse;

        var regenerate = __webpack_require__(0);

        var unicodeMatchProperty = __webpack_require__(550);

        var unicodeMatchPropertyValue = __webpack_require__(553);

        var iuMappings = __webpack_require__(555);

        var ESCAPE_SETS = __webpack_require__(556);

        var UNICODE_SET = regenerate().addRange(0x0, 0x10ffff);
        var BMP_SET = regenerate().addRange(0x0, 0xffff);
        var DOT_SET_UNICODE = UNICODE_SET.clone().remove(
          0x000a,
          0x000d,
          0x2028,
          0x2029
        );
        var DOT_SET = DOT_SET_UNICODE.clone().intersection(BMP_SET);

        var getCharacterClassEscapeSet = function getCharacterClassEscapeSet(
          character,
          unicode,
          ignoreCase
        ) {
          if (unicode) {
            if (ignoreCase) {
              return ESCAPE_SETS.UNICODE_IGNORE_CASE.get(character);
            }

            return ESCAPE_SETS.UNICODE.get(character);
          }

          return ESCAPE_SETS.REGULAR.get(character);
        };

        var getDotSet = function getDotSet(unicode, dotAll) {
          if (dotAll) {
            return unicode ? UNICODE_SET : BMP_SET;
          }

          return unicode ? DOT_SET_UNICODE : DOT_SET;
        };

        var getUnicodePropertyValueSet = function getUnicodePropertyValueSet(
          property,
          value
        ) {
          var path = value
            ? property + "/" + value
            : "Binary_Property/" + property;

          try {
            return __webpack_require__(557)("./" + path + ".js");
          } catch (exception) {
            throw new Error(
              "Failed to recognize value `" +
                value +
                "` for property " +
                ("`" + property + "`.")
            );
          }
        };

        var handleLoneUnicodePropertyNameOrValue = function handleLoneUnicodePropertyNameOrValue(
          value
        ) {
          try {
            var _property = "General_Category";
            var category = unicodeMatchPropertyValue(_property, value);
            return getUnicodePropertyValueSet(_property, category);
          } catch (exception) {}

          var property = unicodeMatchProperty(value);
          return getUnicodePropertyValueSet(property);
        };

        var getUnicodePropertyEscapeSet = function getUnicodePropertyEscapeSet(
          value,
          isNegative
        ) {
          var parts = value.split("=");
          var firstPart = parts[0];
          var set;

          if (parts.length == 1) {
            set = handleLoneUnicodePropertyNameOrValue(firstPart);
          } else {
            var property = unicodeMatchProperty(firstPart);

            var _value = unicodeMatchPropertyValue(property, parts[1]);

            set = getUnicodePropertyValueSet(property, _value);
          }

          if (isNegative) {
            return UNICODE_SET.clone().remove(set);
          }

          return set.clone();
        };

        regenerate.prototype.iuAddRange = function(min, max) {
          var $this = this;

          do {
            var folded = caseFold(min);

            if (folded) {
              $this.add(folded);
            }
          } while (++min <= max);

          return $this;
        };

        var update = function update(item, pattern) {
          var tree = parse(pattern, config.useUnicodeFlag ? "u" : "");

          switch (tree.type) {
            case "characterClass":
            case "group":
            case "value":
              break;

            default:
              tree = wrap(tree, pattern);
          }

          Object.assign(item, tree);
        };

        var wrap = function wrap(tree, pattern) {
          return {
            type: "group",
            behavior: "ignore",
            body: [tree],
            raw: "(?:" + pattern + ")"
          };
        };

        var caseFold = function caseFold(codePoint) {
          return iuMappings.get(codePoint) || false;
        };

        var processCharacterClass = function processCharacterClass(
          characterClassItem,
          regenerateOptions
        ) {
          var set = regenerate();

          for (
            var _iterator = characterClassItem.body,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var item = _ref;

            switch (item.type) {
              case "value":
                set.add(item.codePoint);

                if (
                  config.ignoreCase &&
                  config.unicode &&
                  !config.useUnicodeFlag
                ) {
                  var folded = caseFold(item.codePoint);

                  if (folded) {
                    set.add(folded);
                  }
                }

                break;

              case "characterClassRange":
                var min = item.min.codePoint;
                var max = item.max.codePoint;
                set.addRange(min, max);

                if (
                  config.ignoreCase &&
                  config.unicode &&
                  !config.useUnicodeFlag
                ) {
                  set.iuAddRange(min, max);
                }

                break;

              case "characterClassEscape":
                set.add(
                  getCharacterClassEscapeSet(
                    item.value,
                    config.unicode,
                    config.ignoreCase
                  )
                );
                break;

              case "unicodePropertyEscape":
                set.add(getUnicodePropertyEscapeSet(item.value, item.negative));
                break;

              default:
                throw new Error("Unknown term type: " + item.type);
            }
          }

          if (characterClassItem.negative) {
            set = (config.unicode ? UNICODE_SET : BMP_SET).clone().remove(set);
          }

          update(characterClassItem, set.toString(regenerateOptions));
          return characterClassItem;
        };

        var processTerm = function processTerm(item, regenerateOptions) {
          switch (item.type) {
            case "dot":
              update(
                item,
                getDotSet(config.unicode, config.dotAll).toString(
                  regenerateOptions
                )
              );
              break;

            case "characterClass":
              item = processCharacterClass(item, regenerateOptions);
              break;

            case "unicodePropertyEscape":
              update(
                item,
                getUnicodePropertyEscapeSet(item.value, item.negative).toString(
                  regenerateOptions
                )
              );
              break;

            case "characterClassEscape":
              update(
                item,
                getCharacterClassEscapeSet(
                  item.value,
                  config.unicode,
                  config.ignoreCase
                ).toString(regenerateOptions)
              );
              break;

            case "alternative":
            case "disjunction":
            case "group":
            case "quantifier":
              item.body = item.body.map(function(term) {
                return processTerm(term, regenerateOptions);
              });
              break;

            case "value":
              var codePoint = item.codePoint;
              var set = regenerate(codePoint);

              if (
                config.ignoreCase &&
                config.unicode &&
                !config.useUnicodeFlag
              ) {
                var folded = caseFold(codePoint);

                if (folded) {
                  set.add(folded);
                }
              }

              update(item, set.toString(regenerateOptions));
              break;

            case "anchor":
            case "empty":
            case "group":
            case "reference":
              break;

            default:
              throw new Error("Unknown term type: " + item.type);
          }

          return item;
        };

        var config = {
          ignoreCase: false,
          unicode: false,
          dotAll: false,
          useUnicodeFlag: false
        };

        var rewritePattern = function rewritePattern(pattern, flags, options) {
          var regjsparserFeatures = {
            unicodePropertyEscape: options && options.unicodePropertyEscape
          };
          config.ignoreCase = flags && flags.includes("i");
          config.unicode = flags && flags.includes("u");
          var supportDotAllFlag = options && options.dotAllFlag;
          config.dotAll = supportDotAllFlag && flags && flags.includes("s");
          config.useUnicodeFlag = options && options.useUnicodeFlag;
          var regenerateOptions = {
            hasUnicodeFlag: config.useUnicodeFlag,
            bmpOnly: !config.unicode
          };
          var tree = parse(pattern, flags, regjsparserFeatures);
          processTerm(tree, regenerateOptions);
          return generate(tree);
        };

        module.exports = rewritePattern;

        /***/
      },
      /* 97 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.rewriteModuleStatementsAndPrepareHeader = rewriteModuleStatementsAndPrepareHeader;
        exports.ensureStatementsHoisted = ensureStatementsHoisted;
        exports.wrapInterop = wrapInterop;
        exports.buildNamespaceInitStatements = buildNamespaceInitStatements;
        Object.defineProperty(exports, "isModule", {
          enumerable: true,
          get: function get() {
            return _helperModuleImports().isModule;
          }
        });
        Object.defineProperty(exports, "hasExports", {
          enumerable: true,
          get: function get() {
            return _normalizeAndLoadMetadata.hasExports;
          }
        });
        Object.defineProperty(exports, "isSideEffectImport", {
          enumerable: true,
          get: function get() {
            return _normalizeAndLoadMetadata.isSideEffectImport;
          }
        });

        function _assert() {
          var data = _interopRequireDefault(__webpack_require__(13));

          _assert = function _assert() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _template() {
          var data = _interopRequireDefault(__webpack_require__(21));

          _template = function _template() {
            return data;
          };

          return data;
        }

        function _chunk() {
          var data = _interopRequireDefault(__webpack_require__(936));

          _chunk = function _chunk() {
            return data;
          };

          return data;
        }

        function _helperModuleImports() {
          var data = __webpack_require__(94);

          _helperModuleImports = function _helperModuleImports() {
            return data;
          };

          return data;
        }

        var _rewriteThis = _interopRequireDefault(__webpack_require__(938));

        var _rewriteLiveReferences = _interopRequireDefault(
          __webpack_require__(939)
        );

        var _normalizeAndLoadMetadata = _interopRequireWildcard(
          __webpack_require__(940)
        );

        var _templateObject = _taggedTemplateLiteralLoose([
            "var NAME = SOURCE;"
          ]),
          _templateObject2 = _taggedTemplateLiteralLoose([
            '\n            Object.defineProperty(EXPORTS, "NAME", {\n              enumerable: true,\n              get: function() {\n                return NAMESPACE;\n              }\n            });\n          '
          ]),
          _templateObject3 = _taggedTemplateLiteralLoose([
            "EXPORTS.NAME = NAMESPACE;"
          ]),
          _templateObject4 = _taggedTemplateLiteralLoose([
            "EXPORTS.EXPORT_NAME = NAMESPACE.IMPORT_NAME;"
          ]),
          _templateObject5 = _taggedTemplateLiteralLoose([
            '\n      Object.defineProperty(EXPORTS, "EXPORT_NAME", {\n        enumerable: true,\n        get: function() {\n          return NAMESPACE.IMPORT_NAME;\n        },\n      });\n    '
          ]),
          _templateObject6 = _taggedTemplateLiteralLoose([
            "\n        EXPORTS.__esModule = true;\n      "
          ]),
          _templateObject7 = _taggedTemplateLiteralLoose([
            '\n        Object.defineProperty(EXPORTS, "__esModule", {\n          value: true,\n        });\n      '
          ]),
          _templateObject8 = _taggedTemplateLiteralLoose([
            '\n        Object.keys(NAMESPACE).forEach(function(key) {\n          if (key === "default" || key === "__esModule") return;\n          VERIFY_NAME_LIST;\n\n          EXPORTS[key] = NAMESPACE[key];\n        });\n      '
          ]),
          _templateObject9 = _taggedTemplateLiteralLoose([
            '\n        Object.keys(NAMESPACE).forEach(function(key) {\n          if (key === "default" || key === "__esModule") return;\n          VERIFY_NAME_LIST;\n\n          Object.defineProperty(EXPORTS, key, {\n            enumerable: true,\n            get: function() {\n              return NAMESPACE[key];\n            },\n          });\n        });\n    '
          ]),
          _templateObject10 = _taggedTemplateLiteralLoose([
            "\n            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;\n          "
          ]),
          _templateObject11 = _taggedTemplateLiteralLoose([
            "EXPORTS.NAME = VALUE"
          ]);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _taggedTemplateLiteralLoose(strings, raw) {
          if (!raw) {
            raw = strings.slice(0);
          }

          strings.raw = raw;
          return strings;
        }

        function rewriteModuleStatementsAndPrepareHeader(path, _ref) {
          var exportName = _ref.exportName,
            strict = _ref.strict,
            allowTopLevelThis = _ref.allowTopLevelThis,
            strictMode = _ref.strictMode,
            loose = _ref.loose,
            noInterop = _ref.noInterop,
            lazy = _ref.lazy,
            esNamespaceOnly = _ref.esNamespaceOnly;
          (0, _assert().default)(
            (0, _helperModuleImports().isModule)(path),
            "Cannot process module statements in a script"
          );
          path.node.sourceType = "script";
          var meta = (0, _normalizeAndLoadMetadata.default)(path, exportName, {
            noInterop: noInterop,
            loose: loose,
            lazy: lazy,
            esNamespaceOnly: esNamespaceOnly
          });

          if (!allowTopLevelThis) {
            (0, _rewriteThis.default)(path);
          }

          (0, _rewriteLiveReferences.default)(path, meta);

          if (strictMode !== false) {
            var hasStrict = path.node.directives.some(function(directive) {
              return directive.value.value === "use strict";
            });

            if (!hasStrict) {
              path.unshiftContainer(
                "directives",
                t().directive(t().directiveLiteral("use strict"))
              );
            }
          }

          var headers = [];

          if ((0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict) {
            headers.push(buildESModuleHeader(meta, loose));
          }

          var nameList = buildExportNameListDeclaration(path, meta);

          if (nameList) {
            meta.exportNameListName = nameList.name;
            headers.push(nameList.statement);
          }

          headers.push.apply(
            headers,
            buildExportInitializationStatements(path, meta, loose)
          );
          return {
            meta: meta,
            headers: headers
          };
        }

        function ensureStatementsHoisted(statements) {
          statements.forEach(function(header) {
            header._blockHoist = 3;
          });
        }

        function wrapInterop(programPath, expr, type) {
          if (type === "none") {
            return null;
          }

          var helper;

          if (type === "default") {
            helper = "interopRequireDefault";
          } else if (type === "namespace") {
            helper = "interopRequireWildcard";
          } else {
            throw new Error("Unknown interop: " + type);
          }

          return t().callExpression(programPath.hub.file.addHelper(helper), [
            expr
          ]);
        }

        function buildNamespaceInitStatements(metadata, sourceMetadata, loose) {
          if (loose === void 0) {
            loose = false;
          }

          var statements = [];
          var srcNamespace = t().identifier(sourceMetadata.name);
          if (sourceMetadata.lazy)
            srcNamespace = t().callExpression(srcNamespace, []);

          for (
            var _iterator = sourceMetadata.importsNamespace,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref2;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref2 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref2 = _i.value;
            }

            var localName = _ref2;
            if (localName === sourceMetadata.name) continue;
            statements.push(
              _template().default.statement(_templateObject)({
                NAME: localName,
                SOURCE: t().cloneNode(srcNamespace)
              })
            );
          }

          if (loose) {
            statements.push.apply(
              statements,
              buildReexportsFromMeta(metadata, sourceMetadata, loose)
            );
          }

          for (
            var _iterator2 = sourceMetadata.reexportNamespace,
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2
                ? _iterator2
                : _iterator2[Symbol.iterator]();
            ;

          ) {
            var _ref3;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref3 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref3 = _i2.value;
            }

            var exportName = _ref3;
            statements.push(
              (sourceMetadata.lazy
                ? _template().default.statement(_templateObject2)
                : _template().default.statement(_templateObject3))({
                EXPORTS: metadata.exportName,
                NAME: exportName,
                NAMESPACE: t().cloneNode(srcNamespace)
              })
            );
          }

          if (sourceMetadata.reexportAll) {
            var statement = buildNamespaceReexport(
              metadata,
              t().cloneNode(srcNamespace),
              loose
            );
            statement.loc = sourceMetadata.reexportAll.loc;
            statements.push(statement);
          }

          return statements;
        }

        var getTemplateForReexport = function getTemplateForReexport(loose) {
          return loose
            ? _template().default.statement(_templateObject4)
            : (0, _template().default)(_templateObject5);
        };

        var buildReexportsFromMeta = function buildReexportsFromMeta(
          meta,
          metadata,
          loose
        ) {
          var namespace = metadata.lazy
            ? t().callExpression(t().identifier(metadata.name), [])
            : t().identifier(metadata.name);
          var templateForCurrentMode = getTemplateForReexport(loose);
          return Array.from(metadata.reexports, function(_ref4) {
            var exportName = _ref4[0],
              importName = _ref4[1];
            return templateForCurrentMode({
              EXPORTS: meta.exportName,
              EXPORT_NAME: exportName,
              NAMESPACE: t().cloneNode(namespace),
              IMPORT_NAME: importName
            });
          });
        };

        function buildESModuleHeader(metadata, enumerable) {
          if (enumerable === void 0) {
            enumerable = false;
          }

          return (enumerable
            ? _template().default.statement(_templateObject6)
            : _template().default.statement(_templateObject7))({
            EXPORTS: metadata.exportName
          });
        }

        function buildNamespaceReexport(metadata, namespace, loose) {
          return (loose
            ? _template().default.statement(_templateObject8)
            : _template().default.statement(_templateObject9))({
            NAMESPACE: namespace,
            EXPORTS: metadata.exportName,
            VERIFY_NAME_LIST: metadata.exportNameListName
              ? (0, _template().default)(_templateObject10)({
                  EXPORTS_LIST: metadata.exportNameListName
                })
              : null
          });
        }

        function buildExportNameListDeclaration(programPath, metadata) {
          var exportedVars = Object.create(null);

          for (
            var _iterator3 = metadata.local.values(),
              _isArray3 = Array.isArray(_iterator3),
              _i3 = 0,
              _iterator3 = _isArray3
                ? _iterator3
                : _iterator3[Symbol.iterator]();
            ;

          ) {
            var _ref5;

            if (_isArray3) {
              if (_i3 >= _iterator3.length) break;
              _ref5 = _iterator3[_i3++];
            } else {
              _i3 = _iterator3.next();
              if (_i3.done) break;
              _ref5 = _i3.value;
            }

            var data = _ref5;

            for (
              var _iterator5 = data.names,
                _isArray5 = Array.isArray(_iterator5),
                _i5 = 0,
                _iterator5 = _isArray5
                  ? _iterator5
                  : _iterator5[Symbol.iterator]();
              ;

            ) {
              var _ref7;

              if (_isArray5) {
                if (_i5 >= _iterator5.length) break;
                _ref7 = _iterator5[_i5++];
              } else {
                _i5 = _iterator5.next();
                if (_i5.done) break;
                _ref7 = _i5.value;
              }

              var _name = _ref7;
              exportedVars[_name] = true;
            }
          }

          var hasReexport = false;

          for (
            var _iterator4 = metadata.source.values(),
              _isArray4 = Array.isArray(_iterator4),
              _i4 = 0,
              _iterator4 = _isArray4
                ? _iterator4
                : _iterator4[Symbol.iterator]();
            ;

          ) {
            var _ref6;

            if (_isArray4) {
              if (_i4 >= _iterator4.length) break;
              _ref6 = _iterator4[_i4++];
            } else {
              _i4 = _iterator4.next();
              if (_i4.done) break;
              _ref6 = _i4.value;
            }

            var _data = _ref6;

            for (
              var _iterator6 = _data.reexports.keys(),
                _isArray6 = Array.isArray(_iterator6),
                _i6 = 0,
                _iterator6 = _isArray6
                  ? _iterator6
                  : _iterator6[Symbol.iterator]();
              ;

            ) {
              var _ref8;

              if (_isArray6) {
                if (_i6 >= _iterator6.length) break;
                _ref8 = _iterator6[_i6++];
              } else {
                _i6 = _iterator6.next();
                if (_i6.done) break;
                _ref8 = _i6.value;
              }

              var exportName = _ref8;
              exportedVars[exportName] = true;
            }

            for (
              var _iterator7 = _data.reexportNamespace,
                _isArray7 = Array.isArray(_iterator7),
                _i7 = 0,
                _iterator7 = _isArray7
                  ? _iterator7
                  : _iterator7[Symbol.iterator]();
              ;

            ) {
              var _ref9;

              if (_isArray7) {
                if (_i7 >= _iterator7.length) break;
                _ref9 = _iterator7[_i7++];
              } else {
                _i7 = _iterator7.next();
                if (_i7.done) break;
                _ref9 = _i7.value;
              }

              var _exportName = _ref9;
              exportedVars[_exportName] = true;
            }

            hasReexport = hasReexport || _data.reexportAll;
          }

          if (!hasReexport || Object.keys(exportedVars).length === 0)
            return null;
          var name = programPath.scope.generateUidIdentifier("exportNames");
          delete exportedVars.default;
          return {
            name: name.name,
            statement: t().variableDeclaration("var", [
              t().variableDeclarator(name, t().valueToNode(exportedVars))
            ])
          };
        }

        function buildExportInitializationStatements(
          programPath,
          metadata,
          loose
        ) {
          if (loose === void 0) {
            loose = false;
          }

          var initStatements = [];
          var exportNames = [];

          for (
            var _iterator8 = metadata.local,
              _isArray8 = Array.isArray(_iterator8),
              _i8 = 0,
              _iterator8 = _isArray8
                ? _iterator8
                : _iterator8[Symbol.iterator]();
            ;

          ) {
            var _ref10;

            if (_isArray8) {
              if (_i8 >= _iterator8.length) break;
              _ref10 = _iterator8[_i8++];
            } else {
              _i8 = _iterator8.next();
              if (_i8.done) break;
              _ref10 = _i8.value;
            }

            var _ref12 = _ref10,
              localName = _ref12[0],
              data = _ref12[1];

            if (data.kind === "import") {
            } else if (data.kind === "hoisted") {
              initStatements.push(
                buildInitStatement(
                  metadata,
                  data.names,
                  t().identifier(localName)
                )
              );
            } else {
              exportNames.push.apply(exportNames, data.names);
            }
          }

          for (
            var _iterator9 = metadata.source.values(),
              _isArray9 = Array.isArray(_iterator9),
              _i9 = 0,
              _iterator9 = _isArray9
                ? _iterator9
                : _iterator9[Symbol.iterator]();
            ;

          ) {
            var _ref11;

            if (_isArray9) {
              if (_i9 >= _iterator9.length) break;
              _ref11 = _iterator9[_i9++];
            } else {
              _i9 = _iterator9.next();
              if (_i9.done) break;
              _ref11 = _i9.value;
            }

            var data = _ref11;

            if (!loose) {
              initStatements.push.apply(
                initStatements,
                buildReexportsFromMeta(metadata, data, loose)
              );
            }

            for (
              var _iterator10 = data.reexportNamespace,
                _isArray10 = Array.isArray(_iterator10),
                _i10 = 0,
                _iterator10 = _isArray10
                  ? _iterator10
                  : _iterator10[Symbol.iterator]();
              ;

            ) {
              var _ref13;

              if (_isArray10) {
                if (_i10 >= _iterator10.length) break;
                _ref13 = _iterator10[_i10++];
              } else {
                _i10 = _iterator10.next();
                if (_i10.done) break;
                _ref13 = _i10.value;
              }

              var exportName = _ref13;
              exportNames.push(exportName);
            }
          }

          initStatements.push.apply(
            initStatements,
            (0, _chunk().default)(exportNames, 100).map(function(members) {
              return buildInitStatement(
                metadata,
                members,
                programPath.scope.buildUndefinedNode()
              );
            })
          );
          return initStatements;
        }

        function buildInitStatement(metadata, exportNames, initExpr) {
          return t().expressionStatement(
            exportNames.reduce(function(acc, exportName) {
              return _template().default.expression(_templateObject11)({
                EXPORTS: metadata.exportName,
                NAME: exportName,
                VALUE: acc
              });
            }, initExpr)
          );
        }

        /***/
      },
      /* 98 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function _esutils() {
          var data = _interopRequireDefault(__webpack_require__(72));

          _esutils = function _esutils() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _default(opts) {
          var visitor = {};

          visitor.JSXNamespacedName = function(path) {
            if (opts.throwIfNamespace) {
              throw path.buildCodeFrameError(
                "Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can turn on the 'throwIfNamespace' flag to bypass this warning."
              );
            }
          };

          visitor.JSXElement = {
            exit: function exit(path, file) {
              var callExpr = buildElementCall(path, file);

              if (callExpr) {
                path.replaceWith(t().inherits(callExpr, path.node));
              }
            }
          };
          visitor.JSXFragment = {
            exit: function exit(path, file) {
              if (opts.compat) {
                throw path.buildCodeFrameError(
                  "Fragment tags are only supported in React 16 and up."
                );
              }

              var callExpr = buildFragmentCall(path, file);

              if (callExpr) {
                path.replaceWith(t().inherits(callExpr, path.node));
              }
            }
          };
          return visitor;

          function convertJSXIdentifier(node, parent) {
            if (t().isJSXIdentifier(node)) {
              if (node.name === "this" && t().isReferenced(node, parent)) {
                return t().thisExpression();
              } else if (
                _esutils().default.keyword.isIdentifierNameES6(node.name)
              ) {
                node.type = "Identifier";
              } else {
                return t().stringLiteral(node.name);
              }
            } else if (t().isJSXMemberExpression(node)) {
              return t().memberExpression(
                convertJSXIdentifier(node.object, node),
                convertJSXIdentifier(node.property, node)
              );
            } else if (t().isJSXNamespacedName(node)) {
              return t().stringLiteral(
                node.namespace.name + ":" + node.name.name
              );
            }

            return node;
          }

          function convertAttributeValue(node) {
            if (t().isJSXExpressionContainer(node)) {
              return node.expression;
            } else {
              return node;
            }
          }

          function convertAttribute(node) {
            var value = convertAttributeValue(
              node.value || t().booleanLiteral(true)
            );

            if (
              t().isStringLiteral(value) &&
              !t().isJSXExpressionContainer(node.value)
            ) {
              value.value = value.value.replace(/\n\s+/g, " ");

              if (value.extra && value.extra.raw) {
                delete value.extra.raw;
              }
            }

            if (t().isValidIdentifier(node.name.name)) {
              node.name.type = "Identifier";
            } else {
              node.name = t().stringLiteral(
                t().isJSXNamespacedName(node.name)
                  ? node.name.namespace.name + ":" + node.name.name.name
                  : node.name.name
              );
            }

            return t().inherits(t().objectProperty(node.name, value), node);
          }

          function buildElementCall(path, file) {
            if (opts.filter && !opts.filter(path.node, file)) return;
            var openingPath = path.get("openingElement");
            openingPath.parent.children = t().react.buildChildren(
              openingPath.parent
            );
            var tagExpr = convertJSXIdentifier(
              openingPath.node.name,
              openingPath.node
            );
            var args = [];
            var tagName;

            if (t().isIdentifier(tagExpr)) {
              tagName = tagExpr.name;
            } else if (t().isLiteral(tagExpr)) {
              tagName = tagExpr.value;
            }

            var state = {
              tagExpr: tagExpr,
              tagName: tagName,
              args: args
            };

            if (opts.pre) {
              opts.pre(state, file);
            }

            var attribs = openingPath.node.attributes;

            if (attribs.length) {
              attribs = buildOpeningElementAttributes(attribs, file);
            } else {
              attribs = t().nullLiteral();
            }

            args.push.apply(args, [attribs].concat(path.node.children));

            if (opts.post) {
              opts.post(state, file);
            }

            return state.call || t().callExpression(state.callee, args);
          }

          function pushProps(_props, objs) {
            if (!_props.length) return _props;
            objs.push(t().objectExpression(_props));
            return [];
          }

          function buildOpeningElementAttributes(attribs, file) {
            var _props = [];
            var objs = [];
            var useBuiltIns = file.opts.useBuiltIns || false;

            if (typeof useBuiltIns !== "boolean") {
              throw new Error(
                "transform-react-jsx currently only accepts a boolean option for " +
                  "useBuiltIns (defaults to false)"
              );
            }

            while (attribs.length) {
              var prop = attribs.shift();

              if (t().isJSXSpreadAttribute(prop)) {
                _props = pushProps(_props, objs);
                objs.push(prop.argument);
              } else {
                _props.push(convertAttribute(prop));
              }
            }

            pushProps(_props, objs);

            if (objs.length === 1) {
              attribs = objs[0];
            } else {
              if (!t().isObjectExpression(objs[0])) {
                objs.unshift(t().objectExpression([]));
              }

              var helper = useBuiltIns
                ? t().memberExpression(
                    t().identifier("Object"),
                    t().identifier("assign")
                  )
                : file.addHelper("extends");
              attribs = t().callExpression(helper, objs);
            }

            return attribs;
          }

          function buildFragmentCall(path, file) {
            if (opts.filter && !opts.filter(path.node, file)) return;
            var openingPath = path.get("openingElement");
            openingPath.parent.children = t().react.buildChildren(
              openingPath.parent
            );
            var args = [];
            var tagName = null;
            var tagExpr = file.get("jsxFragIdentifier")();
            var state = {
              tagExpr: tagExpr,
              tagName: tagName,
              args: args
            };

            if (opts.pre) {
              opts.pre(state, file);
            }

            args.push.apply(
              args,
              [t().nullLiteral()].concat(path.node.children)
            );

            if (opts.post) {
              opts.post(state, file);
            }

            file.set("usedFragment", true);
            return state.call || t().callExpression(state.callee, args);
          }
        }

        /***/
      },
      /* 99 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginTransformTemplateLiterals() {
          var data = _interopRequireDefault(__webpack_require__(228));

          _pluginTransformTemplateLiterals = function _pluginTransformTemplateLiterals() {
            return data;
          };

          return data;
        }

        function _pluginTransformLiterals() {
          var data = _interopRequireDefault(__webpack_require__(216));

          _pluginTransformLiterals = function _pluginTransformLiterals() {
            return data;
          };

          return data;
        }

        function _pluginTransformFunctionName() {
          var data = _interopRequireDefault(__webpack_require__(214));

          _pluginTransformFunctionName = function _pluginTransformFunctionName() {
            return data;
          };

          return data;
        }

        function _pluginTransformArrowFunctions() {
          var data = _interopRequireDefault(__webpack_require__(204));

          _pluginTransformArrowFunctions = function _pluginTransformArrowFunctions() {
            return data;
          };

          return data;
        }

        function _pluginTransformBlockScopedFunctions() {
          var data = _interopRequireDefault(__webpack_require__(205));

          _pluginTransformBlockScopedFunctions = function _pluginTransformBlockScopedFunctions() {
            return data;
          };

          return data;
        }

        function _pluginTransformClasses() {
          var data = _interopRequireDefault(__webpack_require__(207));

          _pluginTransformClasses = function _pluginTransformClasses() {
            return data;
          };

          return data;
        }

        function _pluginTransformObjectSuper() {
          var data = _interopRequireDefault(__webpack_require__(223));

          _pluginTransformObjectSuper = function _pluginTransformObjectSuper() {
            return data;
          };

          return data;
        }

        function _pluginTransformShorthandProperties() {
          var data = _interopRequireDefault(__webpack_require__(225));

          _pluginTransformShorthandProperties = function _pluginTransformShorthandProperties() {
            return data;
          };

          return data;
        }

        function _pluginTransformDuplicateKeys() {
          var data = _interopRequireDefault(__webpack_require__(212));

          _pluginTransformDuplicateKeys = function _pluginTransformDuplicateKeys() {
            return data;
          };

          return data;
        }

        function _pluginTransformComputedProperties() {
          var data = _interopRequireDefault(__webpack_require__(209));

          _pluginTransformComputedProperties = function _pluginTransformComputedProperties() {
            return data;
          };

          return data;
        }

        function _pluginTransformForOf() {
          var data = _interopRequireDefault(__webpack_require__(213));

          _pluginTransformForOf = function _pluginTransformForOf() {
            return data;
          };

          return data;
        }

        function _pluginTransformStickyRegex() {
          var data = _interopRequireDefault(__webpack_require__(227));

          _pluginTransformStickyRegex = function _pluginTransformStickyRegex() {
            return data;
          };

          return data;
        }

        function _pluginTransformUnicodeRegex() {
          var data = _interopRequireDefault(__webpack_require__(231));

          _pluginTransformUnicodeRegex = function _pluginTransformUnicodeRegex() {
            return data;
          };

          return data;
        }

        function _pluginTransformSpread() {
          var data = _interopRequireDefault(__webpack_require__(226));

          _pluginTransformSpread = function _pluginTransformSpread() {
            return data;
          };

          return data;
        }

        function _pluginTransformParameters() {
          var data = _interopRequireDefault(__webpack_require__(224));

          _pluginTransformParameters = function _pluginTransformParameters() {
            return data;
          };

          return data;
        }

        function _pluginTransformDestructuring() {
          var data = _interopRequireDefault(__webpack_require__(210));

          _pluginTransformDestructuring = function _pluginTransformDestructuring() {
            return data;
          };

          return data;
        }

        function _pluginTransformBlockScoping() {
          var data = _interopRequireDefault(__webpack_require__(206));

          _pluginTransformBlockScoping = function _pluginTransformBlockScoping() {
            return data;
          };

          return data;
        }

        function _pluginTransformTypeofSymbol() {
          var data = _interopRequireDefault(__webpack_require__(229));

          _pluginTransformTypeofSymbol = function _pluginTransformTypeofSymbol() {
            return data;
          };

          return data;
        }

        function _pluginTransformModulesCommonjs() {
          var data = _interopRequireDefault(__webpack_require__(219));

          _pluginTransformModulesCommonjs = function _pluginTransformModulesCommonjs() {
            return data;
          };

          return data;
        }

        function _pluginTransformModulesSystemjs() {
          var data = _interopRequireDefault(__webpack_require__(220));

          _pluginTransformModulesSystemjs = function _pluginTransformModulesSystemjs() {
            return data;
          };

          return data;
        }

        function _pluginTransformModulesAmd() {
          var data = _interopRequireDefault(__webpack_require__(217));

          _pluginTransformModulesAmd = function _pluginTransformModulesAmd() {
            return data;
          };

          return data;
        }

        function _pluginTransformModulesUmd() {
          var data = _interopRequireDefault(__webpack_require__(222));

          _pluginTransformModulesUmd = function _pluginTransformModulesUmd() {
            return data;
          };

          return data;
        }

        function _pluginTransformInstanceof() {
          var data = _interopRequireDefault(__webpack_require__(215));

          _pluginTransformInstanceof = function _pluginTransformInstanceof() {
            return data;
          };

          return data;
        }

        function _pluginTransformRegenerator() {
          var data = _interopRequireDefault(__webpack_require__(241));

          _pluginTransformRegenerator = function _pluginTransformRegenerator() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api, opts) {
          api.assertVersion(7);
          var moduleTypes = ["commonjs", "cjs", "amd", "umd", "systemjs"];
          var loose = false;
          var modules = "commonjs";
          var spec = false;

          if (opts !== undefined) {
            if (opts.loose !== undefined) loose = opts.loose;
            if (opts.modules !== undefined) modules = opts.modules;
            if (opts.spec !== undefined) spec = opts.spec;
          }

          if (typeof loose !== "boolean") {
            throw new Error("Preset es2015 'loose' option must be a boolean.");
          }

          if (typeof spec !== "boolean") {
            throw new Error("Preset es2015 'spec' option must be a boolean.");
          }

          if (modules !== false && moduleTypes.indexOf(modules) === -1) {
            throw new Error(
              "Preset es2015 'modules' option must be 'false' to indicate no modules\n" +
                "or a module type which be be one of: 'commonjs' (default), 'amd', 'umd', 'systemjs'"
            );
          }

          var optsLoose = {
            loose: loose
          };
          return {
            plugins: [
              [
                _pluginTransformTemplateLiterals().default,
                {
                  loose: loose,
                  spec: spec
                }
              ],
              _pluginTransformLiterals().default,
              _pluginTransformFunctionName().default,
              [
                _pluginTransformArrowFunctions().default,
                {
                  spec: spec
                }
              ],
              _pluginTransformBlockScopedFunctions().default,
              [_pluginTransformClasses().default, optsLoose],
              _pluginTransformObjectSuper().default,
              _pluginTransformShorthandProperties().default,
              _pluginTransformDuplicateKeys().default,
              [_pluginTransformComputedProperties().default, optsLoose],
              [_pluginTransformForOf().default, optsLoose],
              _pluginTransformStickyRegex().default,
              _pluginTransformUnicodeRegex().default,
              [_pluginTransformSpread().default, optsLoose],
              [_pluginTransformParameters().default, optsLoose],
              [_pluginTransformDestructuring().default, optsLoose],
              _pluginTransformBlockScoping().default,
              _pluginTransformTypeofSymbol().default,
              _pluginTransformInstanceof().default,
              (modules === "commonjs" || modules === "cjs") && [
                _pluginTransformModulesCommonjs().default,
                optsLoose
              ],
              modules === "systemjs" && [
                _pluginTransformModulesSystemjs().default,
                optsLoose
              ],
              modules === "amd" && [
                _pluginTransformModulesAmd().default,
                optsLoose
              ],
              modules === "umd" && [
                _pluginTransformModulesUmd().default,
                optsLoose
              ],
              [
                _pluginTransformRegenerator().default,
                {
                  async: false,
                  asyncGenerators: false
                }
              ]
            ].filter(Boolean)
          };
        });

        exports.default = _default;

        /***/
      },
      /* 100 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function helpers() {
          var data = _interopRequireWildcard(__webpack_require__(101));

          helpers = function helpers() {
            return data;
          };

          return data;
        }

        function _traverse() {
          var data = _interopRequireWildcard(__webpack_require__(8));

          _traverse = function _traverse() {
            return data;
          };

          return data;
        }

        function _codeFrame() {
          var data = __webpack_require__(50);

          _codeFrame = function _codeFrame() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var errorVisitor = {
          enter: function enter(path, state) {
            var loc = path.node.loc;

            if (loc) {
              state.loc = loc;
              path.stop();
            }
          }
        };

        var File = (function() {
          function File(options, _ref) {
            var code = _ref.code,
              ast = _ref.ast,
              shebang = _ref.shebang,
              inputMap = _ref.inputMap;
            this._map = new Map();
            this.declarations = {};
            this.path = null;
            this.ast = {};
            this.metadata = {};
            this.hub = new (_traverse()).Hub(this);
            this.code = "";
            this.shebang = "";
            this.inputMap = null;
            this.opts = options;
            this.code = code;
            this.ast = ast;
            this.shebang = shebang;
            this.inputMap = inputMap;
            this.path = _traverse()
              .NodePath.get({
                hub: this.hub,
                parentPath: null,
                parent: this.ast,
                container: this.ast,
                key: "program"
              })
              .setContext();
            this.scope = this.path.scope;
          }

          var _proto = File.prototype;

          _proto.set = function set(key, val) {
            this._map.set(key, val);
          };

          _proto.get = function get(key) {
            return this._map.get(key);
          };

          _proto.has = function has(key) {
            return this._map.has(key);
          };

          _proto.getModuleName = function getModuleName() {
            var _opts = this.opts,
              filename = _opts.filename,
              _opts$filenameRelativ = _opts.filenameRelative,
              filenameRelative =
                _opts$filenameRelativ === void 0
                  ? filename
                  : _opts$filenameRelativ,
              moduleId = _opts.moduleId,
              _opts$moduleIds = _opts.moduleIds,
              moduleIds =
                _opts$moduleIds === void 0 ? !!moduleId : _opts$moduleIds,
              getModuleId = _opts.getModuleId,
              sourceRootTmp = _opts.sourceRoot,
              _opts$moduleRoot = _opts.moduleRoot,
              moduleRoot =
                _opts$moduleRoot === void 0 ? sourceRootTmp : _opts$moduleRoot,
              _opts$sourceRoot = _opts.sourceRoot,
              sourceRoot =
                _opts$sourceRoot === void 0 ? moduleRoot : _opts$sourceRoot;
            if (!moduleIds) return null;

            if (moduleId != null && !getModuleId) {
              return moduleId;
            }

            var moduleName = moduleRoot != null ? moduleRoot + "/" : "";

            if (filenameRelative) {
              var sourceRootReplacer =
                sourceRoot != null ? new RegExp("^" + sourceRoot + "/?") : "";
              moduleName += filenameRelative
                .replace(sourceRootReplacer, "")
                .replace(/\.(\w*?)$/, "");
            }

            moduleName = moduleName.replace(/\\/g, "/");

            if (getModuleId) {
              return getModuleId(moduleName) || moduleName;
            } else {
              return moduleName;
            }
          };

          _proto.resolveModuleSource = function resolveModuleSource(source) {
            return source;
          };

          _proto.addImport = function addImport() {
            throw new Error(
              "This API has been removed. If you're looking for this " +
                "functionality in Babel 7, you should import the " +
                "'@babel/helper-module-imports' module and use the functions exposed " +
                " from that module, such as 'addNamed' or 'addDefault'."
            );
          };

          _proto.addHelper = function addHelper(name) {
            var _this = this;

            var declar = this.declarations[name];
            if (declar) return t().cloneNode(declar);
            var generator = this.get("helperGenerator");
            var runtime = this.get("helpersNamespace");

            if (generator) {
              var res = generator(name);
              if (res) return res;
            } else if (runtime) {
              return t().memberExpression(
                t().cloneNode(runtime),
                t().identifier(name)
              );
            }

            var uid = (this.declarations[
              name
            ] = this.scope.generateUidIdentifier(name));
            var dependencies = {};

            for (
              var _iterator = helpers().getDependencies(name),
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref2;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref2 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref2 = _i.value;
              }

              var dep = _ref2;
              dependencies[dep] = this.addHelper(dep);
            }

            var _helpers$get = helpers().get(
                name,
                function(dep) {
                  return dependencies[dep];
                },
                uid,
                Object.keys(this.scope.getAllBindings())
              ),
              nodes = _helpers$get.nodes,
              globals = _helpers$get.globals;

            globals.forEach(function(name) {
              if (_this.path.scope.hasBinding(name, true)) {
                _this.path.scope.rename(name);
              }
            });
            nodes.forEach(function(node) {
              node._compact = true;
            });
            this.path.unshiftContainer("body", nodes);
            this.path.get("body").forEach(function(path) {
              if (nodes.indexOf(path.node) === -1) return;
              if (path.isVariableDeclaration())
                _this.scope.registerDeclaration(path);
            });
            return uid;
          };

          _proto.addTemplateObject = function addTemplateObject() {
            throw new Error(
              "This function has been moved into the template literal transform itself."
            );
          };

          _proto.buildCodeFrameError = function buildCodeFrameError(
            node,
            msg,
            Error
          ) {
            if (Error === void 0) {
              Error = SyntaxError;
            }

            var loc = node && (node.loc || node._loc);
            msg = this.opts.filename + ": " + msg;

            if (!loc && node) {
              var state = {
                loc: null
              };
              (0, _traverse().default)(node, errorVisitor, this.scope, state);
              loc = state.loc;
              var txt =
                "This is an error on an internal node. Probably an internal error.";
              if (loc) txt += " Location has been estimated.";
              msg += " (" + txt + ")";
            }

            if (loc) {
              var _opts$highlightCode = this.opts.highlightCode,
                highlightCode =
                  _opts$highlightCode === void 0 ? true : _opts$highlightCode;
              msg +=
                "\n" +
                (0, _codeFrame().codeFrameColumns)(
                  this.code,
                  {
                    start: {
                      line: loc.start.line,
                      column: loc.start.column + 1
                    }
                  },
                  {
                    highlightCode: highlightCode
                  }
                );
            }

            return new Error(msg);
          };

          return File;
        })();

        exports.default = File;

        /***/
      },
      /* 101 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.get = get;
        exports.getDependencies = getDependencies;
        exports.default = exports.list = void 0;

        function _traverse() {
          var data = _interopRequireDefault(__webpack_require__(8));

          _traverse = function _traverse() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var _helpers = _interopRequireDefault(__webpack_require__(446));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function makePath(path) {
          var parts = [];

          for (; path.parentPath; path = path.parentPath) {
            parts.push(path.key);
            if (path.inList) parts.push(path.listKey);
          }

          return parts.reverse().join(".");
        }

        function getHelperMetadata(file) {
          var globals = new Set();
          var localBindingNames = new Set();
          var dependencies = new Map();
          var exportName;
          var exportPath;
          var exportBindingAssignments = [];
          var importPaths = [];
          var importBindingsReferences = [];
          (0, _traverse().default)(file, {
            ImportDeclaration: function ImportDeclaration(child) {
              var name = child.node.source.value;

              if (!_helpers.default[name]) {
                throw child.buildCodeFrameError("Unknown helper " + name);
              }

              if (
                child.get("specifiers").length !== 1 ||
                !child.get("specifiers.0").isImportDefaultSpecifier()
              ) {
                throw child.buildCodeFrameError(
                  "Helpers can only import a default value"
                );
              }

              var bindingIdentifier = child.node.specifiers[0].local;
              dependencies.set(bindingIdentifier, name);
              importPaths.push(makePath(child));
            },
            ExportDefaultDeclaration: function ExportDefaultDeclaration(child) {
              var decl = child.get("declaration");

              if (decl.isFunctionDeclaration()) {
                if (!decl.node.id) {
                  throw decl.buildCodeFrameError(
                    "Helpers should give names to their exported func declaration"
                  );
                }

                exportName = decl.node.id.name;
              }

              exportPath = makePath(child);
            },
            ExportAllDeclaration: function ExportAllDeclaration(child) {
              throw child.buildCodeFrameError(
                "Helpers can only export default"
              );
            },
            ExportNamedDeclaration: function ExportNamedDeclaration(child) {
              throw child.buildCodeFrameError(
                "Helpers can only export default"
              );
            },
            Statement: function Statement(child) {
              if (child.isModuleDeclaration()) return;
              child.skip();
            }
          });
          (0, _traverse().default)(file, {
            Program: function Program(path) {
              var bindings = path.scope.getAllBindings();
              Object.keys(bindings).forEach(function(name) {
                if (name === exportName) return;
                if (dependencies.has(bindings[name].identifier)) return;
                localBindingNames.add(name);
              });
            },
            ReferencedIdentifier: function ReferencedIdentifier(child) {
              var name = child.node.name;
              var binding = child.scope.getBinding(name, true);

              if (!binding) {
                globals.add(name);
              } else if (dependencies.has(binding.identifier)) {
                importBindingsReferences.push(makePath(child));
              }
            },
            AssignmentExpression: function AssignmentExpression(child) {
              var left = child.get("left");
              if (!(exportName in left.getBindingIdentifiers())) return;

              if (!left.isIdentifier()) {
                throw left.buildCodeFrameError(
                  "Only simple assignments to exports are allowed in helpers"
                );
              }

              var binding = child.scope.getBinding(exportName);

              if (binding && binding.scope.path.isProgram()) {
                exportBindingAssignments.push(makePath(child));
              }
            }
          });
          if (!exportPath)
            throw new Error("Helpers must default-export something.");
          exportBindingAssignments.reverse();
          return {
            globals: Array.from(globals),
            localBindingNames: Array.from(localBindingNames),
            dependencies: dependencies,
            exportBindingAssignments: exportBindingAssignments,
            exportPath: exportPath,
            exportName: exportName,
            importBindingsReferences: importBindingsReferences,
            importPaths: importPaths
          };
        }

        function permuteHelperAST(
          file,
          metadata,
          id,
          localBindings,
          getDependency
        ) {
          if (localBindings && !id) {
            throw new Error(
              "Unexpected local bindings for module-based helpers."
            );
          }

          if (!id) return;
          var localBindingNames = metadata.localBindingNames,
            dependencies = metadata.dependencies,
            exportBindingAssignments = metadata.exportBindingAssignments,
            exportPath = metadata.exportPath,
            exportName = metadata.exportName,
            importBindingsReferences = metadata.importBindingsReferences,
            importPaths = metadata.importPaths;
          var dependenciesRefs = {};
          dependencies.forEach(function(name, id) {
            dependenciesRefs[id.name] =
              (typeof getDependency === "function" && getDependency(name)) ||
              id;
          });
          var toRename = {};
          var bindings = new Set(localBindings || []);
          localBindingNames.forEach(function(name) {
            var newName = name;

            while (bindings.has(newName)) {
              newName = "_" + newName;
            }

            if (newName !== name) toRename[name] = newName;
          });

          if (id.type === "Identifier" && exportName !== id.name) {
            toRename[exportName] = id.name;
          }

          (0, _traverse().default)(file, {
            Program: function Program(path) {
              var exp = path.get(exportPath);
              var imps = importPaths.map(function(p) {
                return path.get(p);
              });
              var impsBindingRefs = importBindingsReferences.map(function(p) {
                return path.get(p);
              });
              var decl = exp.get("declaration");

              if (id.type === "Identifier") {
                if (decl.isFunctionDeclaration()) {
                  exp.replaceWith(decl);
                } else {
                  exp.replaceWith(
                    t().variableDeclaration("var", [
                      t().variableDeclarator(id, decl.node)
                    ])
                  );
                }
              } else if (id.type === "MemberExpression") {
                if (decl.isFunctionDeclaration()) {
                  exportBindingAssignments.forEach(function(assignPath) {
                    var assign = path.get(assignPath);
                    assign.replaceWith(
                      t().assignmentExpression("=", id, assign.node)
                    );
                  });
                  exp.replaceWith(decl);
                  path.pushContainer(
                    "body",
                    t().expressionStatement(
                      t().assignmentExpression(
                        "=",
                        id,
                        t().identifier(exportName)
                      )
                    )
                  );
                } else {
                  exp.replaceWith(
                    t().expressionStatement(
                      t().assignmentExpression("=", id, decl.node)
                    )
                  );
                }
              } else {
                throw new Error("Unexpected helper format.");
              }

              Object.keys(toRename).forEach(function(name) {
                path.scope.rename(name, toRename[name]);
              });

              for (
                var _iterator = imps,
                  _isArray = Array.isArray(_iterator),
                  _i = 0,
                  _iterator = _isArray
                    ? _iterator
                    : _iterator[Symbol.iterator]();
                ;

              ) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var _path = _ref;

                _path.remove();
              }

              for (
                var _iterator2 = impsBindingRefs,
                  _isArray2 = Array.isArray(_iterator2),
                  _i2 = 0,
                  _iterator2 = _isArray2
                    ? _iterator2
                    : _iterator2[Symbol.iterator]();
                ;

              ) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var _path2 = _ref2;
                var node = t().cloneNode(dependenciesRefs[_path2.node.name]);

                _path2.replaceWith(node);
              }

              path.stop();
            }
          });
        }

        var helperData = {};

        function loadHelper(name) {
          if (!helperData[name]) {
            if (!_helpers.default[name])
              throw new ReferenceError("Unknown helper " + name);

            var fn = function fn() {
              return t().file(_helpers.default[name]());
            };

            var metadata = getHelperMetadata(fn());
            helperData[name] = {
              build: function build(getDependency, id, localBindings) {
                var file = fn();
                permuteHelperAST(
                  file,
                  metadata,
                  id,
                  localBindings,
                  getDependency
                );
                return {
                  nodes: file.program.body,
                  globals: metadata.globals
                };
              },
              dependencies: metadata.dependencies
            };
          }

          return helperData[name];
        }

        function get(name, getDependency, id, localBindings) {
          return loadHelper(name).build(getDependency, id, localBindings);
        }

        function getDependencies(name) {
          return Array.from(loadHelper(name).dependencies.values());
        }

        var list = Object.keys(_helpers.default)
          .map(function(name) {
            return name.replace(/^_/, "");
          })
          .filter(function(name) {
            return name !== "__esModule";
          });
        exports.list = list;
        var _default = get;
        exports.default = _default;

        /***/
      },
      /* 102 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ForAwaitStatement = exports.NumericLiteralTypeAnnotation = exports.ExistentialTypeParam = exports.SpreadProperty = exports.RestProperty = exports.Flow = exports.Pure = exports.Generated = exports.User = exports.Var = exports.BlockScoped = exports.Referenced = exports.Scope = exports.Expression = exports.Statement = exports.BindingIdentifier = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = void 0;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var ReferencedIdentifier = {
          types: ["Identifier", "JSXIdentifier"],
          checkPath: function checkPath(_ref, opts) {
            var node = _ref.node,
              parent = _ref.parent;

            if (
              !t().isIdentifier(node, opts) &&
              !t().isJSXMemberExpression(parent, opts)
            ) {
              if (t().isJSXIdentifier(node, opts)) {
                if (t().react.isCompatTag(node.name)) return false;
              } else {
                return false;
              }
            }

            return t().isReferenced(node, parent);
          }
        };
        exports.ReferencedIdentifier = ReferencedIdentifier;
        var ReferencedMemberExpression = {
          types: ["MemberExpression"],
          checkPath: function checkPath(_ref2) {
            var node = _ref2.node,
              parent = _ref2.parent;
            return (
              t().isMemberExpression(node) && t().isReferenced(node, parent)
            );
          }
        };
        exports.ReferencedMemberExpression = ReferencedMemberExpression;
        var BindingIdentifier = {
          types: ["Identifier"],
          checkPath: function checkPath(_ref3) {
            var node = _ref3.node,
              parent = _ref3.parent;
            return t().isIdentifier(node) && t().isBinding(node, parent);
          }
        };
        exports.BindingIdentifier = BindingIdentifier;
        var Statement = {
          types: ["Statement"],
          checkPath: function checkPath(_ref4) {
            var node = _ref4.node,
              parent = _ref4.parent;

            if (t().isStatement(node)) {
              if (t().isVariableDeclaration(node)) {
                if (
                  t().isForXStatement(parent, {
                    left: node
                  })
                )
                  return false;
                if (
                  t().isForStatement(parent, {
                    init: node
                  })
                )
                  return false;
              }

              return true;
            } else {
              return false;
            }
          }
        };
        exports.Statement = Statement;
        var Expression = {
          types: ["Expression"],
          checkPath: function checkPath(path) {
            if (path.isIdentifier()) {
              return path.isReferencedIdentifier();
            } else {
              return t().isExpression(path.node);
            }
          }
        };
        exports.Expression = Expression;
        var Scope = {
          types: ["Scopable"],
          checkPath: function checkPath(path) {
            return t().isScope(path.node, path.parent);
          }
        };
        exports.Scope = Scope;
        var Referenced = {
          checkPath: function checkPath(path) {
            return t().isReferenced(path.node, path.parent);
          }
        };
        exports.Referenced = Referenced;
        var BlockScoped = {
          checkPath: function checkPath(path) {
            return t().isBlockScoped(path.node);
          }
        };
        exports.BlockScoped = BlockScoped;
        var Var = {
          types: ["VariableDeclaration"],
          checkPath: function checkPath(path) {
            return t().isVar(path.node);
          }
        };
        exports.Var = Var;
        var User = {
          checkPath: function checkPath(path) {
            return path.node && !!path.node.loc;
          }
        };
        exports.User = User;
        var Generated = {
          checkPath: function checkPath(path) {
            return !path.isUser();
          }
        };
        exports.Generated = Generated;
        var Pure = {
          checkPath: function checkPath(path, opts) {
            return path.scope.isPure(path.node, opts);
          }
        };
        exports.Pure = Pure;
        var Flow = {
          types: [
            "Flow",
            "ImportDeclaration",
            "ExportDeclaration",
            "ImportSpecifier"
          ],
          checkPath: function checkPath(_ref5) {
            var node = _ref5.node;

            if (t().isFlow(node)) {
              return true;
            } else if (t().isImportDeclaration(node)) {
              return node.importKind === "type" || node.importKind === "typeof";
            } else if (t().isExportDeclaration(node)) {
              return node.exportKind === "type";
            } else if (t().isImportSpecifier(node)) {
              return node.importKind === "type" || node.importKind === "typeof";
            } else {
              return false;
            }
          }
        };
        exports.Flow = Flow;
        var RestProperty = {
          types: ["RestElement"],
          checkPath: function checkPath(path) {
            return path.parentPath && path.parentPath.isObjectPattern();
          }
        };
        exports.RestProperty = RestProperty;
        var SpreadProperty = {
          types: ["RestElement"],
          checkPath: function checkPath(path) {
            return path.parentPath && path.parentPath.isObjectExpression();
          }
        };
        exports.SpreadProperty = SpreadProperty;
        var ExistentialTypeParam = {
          types: ["ExistsTypeAnnotation"]
        };
        exports.ExistentialTypeParam = ExistentialTypeParam;
        var NumericLiteralTypeAnnotation = {
          types: ["NumberLiteralTypeAnnotation"]
        };
        exports.NumericLiteralTypeAnnotation = NumericLiteralTypeAnnotation;
        var ForAwaitStatement = {
          types: ["ForOfStatement"],
          checkPath: function checkPath(_ref6) {
            var node = _ref6.node;
            return node.await === true;
          }
        };
        exports.ForAwaitStatement = ForAwaitStatement;

        /***/
      },
      /* 103 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = buildMatchMemberExpression;

        var _matchesPattern = _interopRequireDefault(__webpack_require__(104));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function buildMatchMemberExpression(match, allowPartial) {
          var parts = match.split(".");
          return function(member) {
            return (0, _matchesPattern.default)(member, parts, allowPartial);
          };
        }

        /***/
      },
      /* 104 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = matchesPattern;

        var _generated = __webpack_require__(4);

        function matchesPattern(member, match, allowPartial) {
          if (!(0, _generated.isMemberExpression)(member)) return false;
          var parts = Array.isArray(match) ? match : match.split(".");
          var nodes = [];
          var node;

          for (
            node = member;
            (0, _generated.isMemberExpression)(node);
            node = node.object
          ) {
            nodes.push(node.property);
          }

          nodes.push(node);
          if (nodes.length < parts.length) return false;
          if (!allowPartial && nodes.length > parts.length) return false;

          for (var i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
            var _node = nodes[j];
            var value = void 0;

            if ((0, _generated.isIdentifier)(_node)) {
              value = _node.name;
            } else if ((0, _generated.isStringLiteral)(_node)) {
              value = _node.value;
            } else {
              return false;
            }

            if (parts[i] !== value) return false;
          }

          return true;
        }

        /***/
      },
      /* 105 */
      /***/ function(module, exports, __webpack_require__) {
        var baseClone = __webpack_require__(255);

        var CLONE_SYMBOLS_FLAG = 4;

        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }

        module.exports = clone;

        /***/
      },
      /* 106 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGetTag = __webpack_require__(14),
          isObject = __webpack_require__(15);

        var asyncTag = "[object AsyncFunction]",
          funcTag = "[object Function]",
          genTag = "[object GeneratorFunction]",
          proxyTag = "[object Proxy]";

        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }

          var tag = baseGetTag(value);
          return (
            tag == funcTag ||
            tag == genTag ||
            tag == asyncTag ||
            tag == proxyTag
          );
        }

        module.exports = isFunction;

        /***/
      },
      /* 107 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global) {
          var freeGlobal =
            typeof global == "object" &&
            global &&
            global.Object === Object &&
            global;
          module.exports = freeGlobal;
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(18)));

        /***/
      },
      /* 108 */
      /***/ function(module, exports) {
        var funcProto = Function.prototype;
        var funcToString = funcProto.toString;

        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}

            try {
              return func + "";
            } catch (e) {}
          }

          return "";
        }

        module.exports = toSource;

        /***/
      },
      /* 109 */
      /***/ function(module, exports, __webpack_require__) {
        var baseAssignValue = __webpack_require__(110),
          eq = __webpack_require__(30);

        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;

        function assignValue(object, key, value) {
          var objValue = object[key];

          if (
            !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined && !(key in object))
          ) {
            baseAssignValue(object, key, value);
          }
        }

        module.exports = assignValue;

        /***/
      },
      /* 110 */
      /***/ function(module, exports, __webpack_require__) {
        var defineProperty = __webpack_require__(111);

        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              configurable: true,
              enumerable: true,
              value: value,
              writable: true
            });
          } else {
            object[key] = value;
          }
        }

        module.exports = baseAssignValue;

        /***/
      },
      /* 111 */
      /***/ function(module, exports, __webpack_require__) {
        var getNative = __webpack_require__(17);

        var defineProperty = (function() {
          try {
            var func = getNative(Object, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {}
        })();

        module.exports = defineProperty;

        /***/
      },
      /* 112 */
      /***/ function(module, exports, __webpack_require__) {
        var baseTimes = __webpack_require__(286),
          isArguments = __webpack_require__(62),
          isArray = __webpack_require__(6),
          isBuffer = __webpack_require__(63),
          isIndex = __webpack_require__(64),
          isTypedArray = __webpack_require__(113);

        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;

        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

          for (var key in value) {
            if (
              (inherited || hasOwnProperty.call(value, key)) &&
              !(
                skipIndexes &&
                (key == "length" ||
                  (isBuff && (key == "offset" || key == "parent")) ||
                  (isType &&
                    (key == "buffer" ||
                      key == "byteLength" ||
                      key == "byteOffset")) ||
                  isIndex(key, length))
              )
            ) {
              result.push(key);
            }
          }

          return result;
        }

        module.exports = arrayLikeKeys;

        /***/
      },
      /* 113 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIsTypedArray = __webpack_require__(289),
          baseUnary = __webpack_require__(27),
          nodeUtil = __webpack_require__(41);

        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        var isTypedArray = nodeIsTypedArray
          ? baseUnary(nodeIsTypedArray)
          : baseIsTypedArray;
        module.exports = isTypedArray;

        /***/
      },
      /* 114 */
      /***/ function(module, exports) {
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }

        module.exports = overArg;

        /***/
      },
      /* 115 */
      /***/ function(module, exports) {
        function copyArray(source, array) {
          var index = -1,
            length = source.length;
          array || (array = Array(length));

          while (++index < length) {
            array[index] = source[index];
          }

          return array;
        }

        module.exports = copyArray;

        /***/
      },
      /* 116 */
      /***/ function(module, exports) {
        function stubArray() {
          return [];
        }

        module.exports = stubArray;

        /***/
      },
      /* 117 */
      /***/ function(module, exports, __webpack_require__) {
        var arrayPush = __webpack_require__(68),
          getPrototype = __webpack_require__(69),
          getSymbols = __webpack_require__(67),
          stubArray = __webpack_require__(116);

        var nativeGetSymbols = Object.getOwnPropertySymbols;
        var getSymbolsIn = !nativeGetSymbols
          ? stubArray
          : function(object) {
              var result = [];

              while (object) {
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
              }

              return result;
            };
        module.exports = getSymbolsIn;

        /***/
      },
      /* 118 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGetAllKeys = __webpack_require__(119),
          getSymbols = __webpack_require__(67),
          keys = __webpack_require__(25);

        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }

        module.exports = getAllKeys;

        /***/
      },
      /* 119 */
      /***/ function(module, exports, __webpack_require__) {
        var arrayPush = __webpack_require__(68),
          isArray = __webpack_require__(6);

        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray(object)
            ? result
            : arrayPush(result, symbolsFunc(object));
        }

        module.exports = baseGetAllKeys;

        /***/
      },
      /* 120 */
      /***/ function(module, exports, __webpack_require__) {
        var getNative = __webpack_require__(17),
          root = __webpack_require__(9);

        var Set = getNative(root, "Set");
        module.exports = Set;

        /***/
      },
      /* 121 */
      /***/ function(module, exports, __webpack_require__) {
        var root = __webpack_require__(9);

        var Uint8Array = root.Uint8Array;
        module.exports = Uint8Array;

        /***/
      },
      /* 122 */
      /***/ function(module, exports) {
        (function() {
          "use strict";

          var ES6Regex,
            ES5Regex,
            NON_ASCII_WHITESPACES,
            IDENTIFIER_START,
            IDENTIFIER_PART,
            ch;
          ES5Regex = {
            NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
            NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
          };
          ES6Regex = {
            NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
            NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
          };

          function isDecimalDigit(ch) {
            return 0x30 <= ch && ch <= 0x39;
          }

          function isHexDigit(ch) {
            return (
              (0x30 <= ch && ch <= 0x39) ||
              (0x61 <= ch && ch <= 0x66) ||
              (0x41 <= ch && ch <= 0x46)
            );
          }

          function isOctalDigit(ch) {
            return ch >= 0x30 && ch <= 0x37;
          }

          NON_ASCII_WHITESPACES = [
            0x1680,
            0x180e,
            0x2000,
            0x2001,
            0x2002,
            0x2003,
            0x2004,
            0x2005,
            0x2006,
            0x2007,
            0x2008,
            0x2009,
            0x200a,
            0x202f,
            0x205f,
            0x3000,
            0xfeff
          ];

          function isWhiteSpace(ch) {
            return (
              ch === 0x20 ||
              ch === 0x09 ||
              ch === 0x0b ||
              ch === 0x0c ||
              ch === 0xa0 ||
              (ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0)
            );
          }

          function isLineTerminator(ch) {
            return ch === 0x0a || ch === 0x0d || ch === 0x2028 || ch === 0x2029;
          }

          function fromCodePoint(cp) {
            if (cp <= 0xffff) {
              return String.fromCharCode(cp);
            }

            var cu1 = String.fromCharCode(
              Math.floor((cp - 0x10000) / 0x400) + 0xd800
            );
            var cu2 = String.fromCharCode((cp - 0x10000) % 0x400 + 0xdc00);
            return cu1 + cu2;
          }

          IDENTIFIER_START = new Array(0x80);

          for (ch = 0; ch < 0x80; ++ch) {
            IDENTIFIER_START[ch] =
              (ch >= 0x61 && ch <= 0x7a) ||
              (ch >= 0x41 && ch <= 0x5a) ||
              ch === 0x24 ||
              ch === 0x5f;
          }

          IDENTIFIER_PART = new Array(0x80);

          for (ch = 0; ch < 0x80; ++ch) {
            IDENTIFIER_PART[ch] =
              (ch >= 0x61 && ch <= 0x7a) ||
              (ch >= 0x41 && ch <= 0x5a) ||
              (ch >= 0x30 && ch <= 0x39) ||
              ch === 0x24 ||
              ch === 0x5f;
          }

          function isIdentifierStartES5(ch) {
            return ch < 0x80
              ? IDENTIFIER_START[ch]
              : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
          }

          function isIdentifierPartES5(ch) {
            return ch < 0x80
              ? IDENTIFIER_PART[ch]
              : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
          }

          function isIdentifierStartES6(ch) {
            return ch < 0x80
              ? IDENTIFIER_START[ch]
              : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
          }

          function isIdentifierPartES6(ch) {
            return ch < 0x80
              ? IDENTIFIER_PART[ch]
              : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
          }

          module.exports = {
            isDecimalDigit: isDecimalDigit,
            isHexDigit: isHexDigit,
            isOctalDigit: isOctalDigit,
            isWhiteSpace: isWhiteSpace,
            isLineTerminator: isLineTerminator,
            isIdentifierStartES5: isIdentifierStartES5,
            isIdentifierPartES5: isIdentifierPartES5,
            isIdentifierStartES6: isIdentifierStartES6,
            isIdentifierPartES6: isIdentifierPartES6
          };
        })();

        /***/
      },
      /* 123 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = validate;

        var _definitions = __webpack_require__(11);

        function validate(node, key, val) {
          if (!node) return;
          var fields = _definitions.NODE_FIELDS[node.type];
          if (!fields) return;
          var field = fields[key];
          if (!field || !field.validate) return;
          if (field.optional && val == null) return;
          field.validate(node, key, val);
        }

        /***/
      },
      /* 124 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isNode;

        var _definitions = __webpack_require__(11);

        function isNode(node) {
          return !!(node && _definitions.VISITOR_KEYS[node.type]);
        }

        /***/
      },
      /* 125 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = removeTypeDuplicates;

        var _generated = __webpack_require__(4);

        function removeTypeDuplicates(nodes) {
          var generics = {};
          var bases = {};
          var typeGroups = [];
          var types = [];

          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (!node) continue;

            if (types.indexOf(node) >= 0) {
              continue;
            }

            if ((0, _generated.isAnyTypeAnnotation)(node)) {
              return [node];
            }

            if ((0, _generated.isFlowBaseAnnotation)(node)) {
              bases[node.type] = node;
              continue;
            }

            if ((0, _generated.isUnionTypeAnnotation)(node)) {
              if (typeGroups.indexOf(node.types) < 0) {
                nodes = nodes.concat(node.types);
                typeGroups.push(node.types);
              }

              continue;
            }

            if ((0, _generated.isGenericTypeAnnotation)(node)) {
              var name = node.id.name;

              if (generics[name]) {
                var existing = generics[name];

                if (existing.typeParameters) {
                  if (node.typeParameters) {
                    existing.typeParameters.params = removeTypeDuplicates(
                      existing.typeParameters.params.concat(
                        node.typeParameters.params
                      )
                    );
                  }
                } else {
                  existing = node.typeParameters;
                }
              } else {
                generics[name] = node;
              }

              continue;
            }

            types.push(node);
          }

          for (var type in bases) {
            types.push(bases[type]);
          }

          for (var _name in generics) {
            types.push(generics[_name]);
          }

          return types;
        }

        /***/
      },
      /* 126 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = clone;

        var _cloneNode = _interopRequireDefault(__webpack_require__(33));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function clone(node) {
          return (0, _cloneNode.default)(node, false);
        }

        /***/
      },
      /* 127 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = addComments;

        function addComments(node, type, comments) {
          if (!comments || !node) return node;
          var key = type + "Comments";

          if (node[key]) {
            if (type === "leading") {
              node[key] = comments.concat(node[key]);
            } else {
              node[key] = node[key].concat(comments);
            }
          } else {
            node[key] = comments;
          }

          return node;
        }

        /***/
      },
      /* 128 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = inheritInnerComments;

        var _inherit = _interopRequireDefault(__webpack_require__(76));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function inheritInnerComments(child, parent) {
          (0, _inherit.default)("innerComments", child, parent);
        }

        /***/
      },
      /* 129 */
      /***/ function(module, exports, __webpack_require__) {
        var MapCache = __webpack_require__(61),
          setCacheAdd = __webpack_require__(332),
          setCacheHas = __webpack_require__(333);

        function SetCache(values) {
          var index = -1,
            length = values == null ? 0 : values.length;
          this.__data__ = new MapCache();

          while (++index < length) {
            this.add(values[index]);
          }
        }

        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        module.exports = SetCache;

        /***/
      },
      /* 130 */
      /***/ function(module, exports) {
        function cacheHas(cache, key) {
          return cache.has(key);
        }

        module.exports = cacheHas;

        /***/
      },
      /* 131 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = inheritLeadingComments;

        var _inherit = _interopRequireDefault(__webpack_require__(76));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function inheritLeadingComments(child, parent) {
          (0, _inherit.default)("leadingComments", child, parent);
        }

        /***/
      },
      /* 132 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = inheritsComments;

        var _inheritTrailingComments = _interopRequireDefault(
          __webpack_require__(133)
        );

        var _inheritLeadingComments = _interopRequireDefault(
          __webpack_require__(131)
        );

        var _inheritInnerComments = _interopRequireDefault(
          __webpack_require__(128)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function inheritsComments(child, parent) {
          (0, _inheritTrailingComments.default)(child, parent);
          (0, _inheritLeadingComments.default)(child, parent);
          (0, _inheritInnerComments.default)(child, parent);
          return child;
        }

        /***/
      },
      /* 133 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = inheritTrailingComments;

        var _inherit = _interopRequireDefault(__webpack_require__(76));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function inheritTrailingComments(child, parent) {
          (0, _inherit.default)("trailingComments", child, parent);
        }

        /***/
      },
      /* 134 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = toBlock;

        var _generated = __webpack_require__(4);

        var _generated2 = __webpack_require__(5);

        function toBlock(node, parent) {
          if ((0, _generated.isBlockStatement)(node)) {
            return node;
          }

          var blockNodes = [];

          if ((0, _generated.isEmptyStatement)(node)) {
            blockNodes = [];
          } else {
            if (!(0, _generated.isStatement)(node)) {
              if ((0, _generated.isFunction)(parent)) {
                node = (0, _generated2.returnStatement)(node);
              } else {
                node = (0, _generated2.expressionStatement)(node);
              }
            }

            blockNodes = [node];
          }

          return (0, _generated2.blockStatement)(blockNodes);
        }

        /***/
      },
      /* 135 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = toIdentifier;

        var _isValidIdentifier = _interopRequireDefault(
          __webpack_require__(32)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function toIdentifier(name) {
          name = name + "";
          name = name.replace(/[^a-zA-Z0-9$_]/g, "-");
          name = name.replace(/^[-0-9]+/, "");
          name = name.replace(/[-\s]+(.)?/g, function(match, c) {
            return c ? c.toUpperCase() : "";
          });

          if (!(0, _isValidIdentifier.default)(name)) {
            name = "_" + name;
          }

          return name || "_";
        }

        /***/
      },
      /* 136 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = removePropertiesDeep;

        var _traverseFast = _interopRequireDefault(__webpack_require__(137));

        var _removeProperties = _interopRequireDefault(
          __webpack_require__(138)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function removePropertiesDeep(tree, opts) {
          (0, _traverseFast.default)(tree, _removeProperties.default, opts);
          return tree;
        }

        /***/
      },
      /* 137 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = traverseFast;

        var _definitions = __webpack_require__(11);

        function traverseFast(node, enter, opts) {
          if (!node) return;
          var keys = _definitions.VISITOR_KEYS[node.type];
          if (!keys) return;
          opts = opts || {};
          enter(node, opts);

          for (
            var _iterator = keys,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var key = _ref;
            var subNode = node[key];

            if (Array.isArray(subNode)) {
              for (
                var _iterator2 = subNode,
                  _isArray2 = Array.isArray(_iterator2),
                  _i2 = 0,
                  _iterator2 = _isArray2
                    ? _iterator2
                    : _iterator2[Symbol.iterator]();
                ;

              ) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var _node = _ref2;
                traverseFast(_node, enter, opts);
              }
            } else {
              traverseFast(subNode, enter, opts);
            }
          }
        }

        /***/
      },
      /* 138 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = removeProperties;

        var _constants = __webpack_require__(19);

        var CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];

        var CLEAR_KEYS_PLUS_COMMENTS = _constants.COMMENT_KEYS.concat([
          "comments"
        ]).concat(CLEAR_KEYS);

        function removeProperties(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          var map = opts.preserveComments
            ? CLEAR_KEYS
            : CLEAR_KEYS_PLUS_COMMENTS;

          for (
            var _iterator = map,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var _key = _ref;
            if (node[_key] != null) node[_key] = undefined;
          }

          for (var key in node) {
            if (key[0] === "_" && node[key] != null) node[key] = undefined;
          }

          var symbols = Object.getOwnPropertySymbols(node);

          for (
            var _iterator2 = symbols,
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2
                ? _iterator2
                : _iterator2[Symbol.iterator]();
            ;

          ) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var sym = _ref2;
            node[sym] = null;
          }
        }

        /***/
      },
      /* 139 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isLet;

        var _generated = __webpack_require__(4);

        var _constants = __webpack_require__(19);

        function isLet(node) {
          return (
            (0, _generated.isVariableDeclaration)(node) &&
            (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL])
          );
        }

        /***/
      },
      /* 140 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process) {
          exports = module.exports = __webpack_require__(369);
          exports.log = log;
          exports.formatArgs = formatArgs;
          exports.save = save;
          exports.load = load;
          exports.useColors = useColors;
          exports.storage =
            "undefined" != typeof chrome && "undefined" != typeof chrome.storage
              ? chrome.storage.local
              : localstorage();
          exports.colors = [
            "#0000CC",
            "#0000FF",
            "#0033CC",
            "#0033FF",
            "#0066CC",
            "#0066FF",
            "#0099CC",
            "#0099FF",
            "#00CC00",
            "#00CC33",
            "#00CC66",
            "#00CC99",
            "#00CCCC",
            "#00CCFF",
            "#3300CC",
            "#3300FF",
            "#3333CC",
            "#3333FF",
            "#3366CC",
            "#3366FF",
            "#3399CC",
            "#3399FF",
            "#33CC00",
            "#33CC33",
            "#33CC66",
            "#33CC99",
            "#33CCCC",
            "#33CCFF",
            "#6600CC",
            "#6600FF",
            "#6633CC",
            "#6633FF",
            "#66CC00",
            "#66CC33",
            "#9900CC",
            "#9900FF",
            "#9933CC",
            "#9933FF",
            "#99CC00",
            "#99CC33",
            "#CC0000",
            "#CC0033",
            "#CC0066",
            "#CC0099",
            "#CC00CC",
            "#CC00FF",
            "#CC3300",
            "#CC3333",
            "#CC3366",
            "#CC3399",
            "#CC33CC",
            "#CC33FF",
            "#CC6600",
            "#CC6633",
            "#CC9900",
            "#CC9933",
            "#CCCC00",
            "#CCCC33",
            "#FF0000",
            "#FF0033",
            "#FF0066",
            "#FF0099",
            "#FF00CC",
            "#FF00FF",
            "#FF3300",
            "#FF3333",
            "#FF3366",
            "#FF3399",
            "#FF33CC",
            "#FF33FF",
            "#FF6600",
            "#FF6633",
            "#FF9900",
            "#FF9933",
            "#FFCC00",
            "#FFCC33"
          ];

          function useColors() {
            if (
              typeof window !== "undefined" &&
              window.process &&
              window.process.type === "renderer"
            ) {
              return true;
            }

            if (
              typeof navigator !== "undefined" &&
              navigator.userAgent &&
              navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
            ) {
              return false;
            }

            return (
              (typeof document !== "undefined" &&
                document.documentElement &&
                document.documentElement.style &&
                document.documentElement.style.WebkitAppearance) ||
              (typeof window !== "undefined" &&
                window.console &&
                (window.console.firebug ||
                  (window.console.exception && window.console.table))) ||
              (typeof navigator !== "undefined" &&
                navigator.userAgent &&
                navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
                parseInt(RegExp.$1, 10) >= 31) ||
              (typeof navigator !== "undefined" &&
                navigator.userAgent &&
                navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
            );
          }

          exports.formatters.j = function(v) {
            try {
              return JSON.stringify(v);
            } catch (err) {
              return "[UnexpectedJSONParseError]: " + err.message;
            }
          };

          function formatArgs(args) {
            var useColors = this.useColors;
            args[0] =
              (useColors ? "%c" : "") +
              this.namespace +
              (useColors ? " %c" : " ") +
              args[0] +
              (useColors ? "%c " : " ") +
              "+" +
              exports.humanize(this.diff);
            if (!useColors) return;
            var c = "color: " + this.color;
            args.splice(1, 0, c, "color: inherit");
            var index = 0;
            var lastC = 0;
            args[0].replace(/%[a-zA-Z%]/g, function(match) {
              if ("%%" === match) return;
              index++;

              if ("%c" === match) {
                lastC = index;
              }
            });
            args.splice(lastC, 0, c);
          }

          function log() {
            return (
              "object" === typeof console &&
              console.log &&
              Function.prototype.apply.call(console.log, console, arguments)
            );
          }

          function save(namespaces) {
            try {
              if (null == namespaces) {
                exports.storage.removeItem("debug");
              } else {
                exports.storage.debug = namespaces;
              }
            } catch (e) {}
          }

          function load() {
            var r;

            try {
              r = exports.storage.debug;
            } catch (e) {}

            if (!r && typeof process !== "undefined" && "env" in process) {
              r = { NODE_ENV: "production" }.DEBUG;
            }

            return r;
          }

          exports.enable(load());

          function localstorage() {
            try {
              return window.localStorage;
            } catch (e) {}
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(12)));

        /***/
      },
      /* 141 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _includes() {
          var data = _interopRequireDefault(__webpack_require__(79));

          _includes = function _includes() {
            return data;
          };

          return data;
        }

        function _repeat() {
          var data = _interopRequireDefault(__webpack_require__(143));

          _repeat = function _repeat() {
            return data;
          };

          return data;
        }

        var _renamer = _interopRequireDefault(__webpack_require__(378));

        var _index = _interopRequireDefault(__webpack_require__(8));

        function _defaults() {
          var data = _interopRequireDefault(__webpack_require__(379));

          _defaults = function _defaults() {
            return data;
          };

          return data;
        }

        var _binding2 = _interopRequireDefault(__webpack_require__(145));

        function _globals() {
          var data = _interopRequireDefault(__webpack_require__(146));

          _globals = function _globals() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var _cache = __webpack_require__(49);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function gatherNodeParts(node, parts) {
          if (t().isModuleDeclaration(node)) {
            if (node.source) {
              gatherNodeParts(node.source, parts);
            } else if (node.specifiers && node.specifiers.length) {
              var _arr = node.specifiers;

              for (var _i = 0; _i < _arr.length; _i++) {
                var specifier = _arr[_i];
                gatherNodeParts(specifier, parts);
              }
            } else if (node.declaration) {
              gatherNodeParts(node.declaration, parts);
            }
          } else if (t().isModuleSpecifier(node)) {
            gatherNodeParts(node.local, parts);
          } else if (t().isMemberExpression(node)) {
            gatherNodeParts(node.object, parts);
            gatherNodeParts(node.property, parts);
          } else if (t().isIdentifier(node)) {
            parts.push(node.name);
          } else if (t().isLiteral(node)) {
            parts.push(node.value);
          } else if (t().isCallExpression(node)) {
            gatherNodeParts(node.callee, parts);
          } else if (
            t().isObjectExpression(node) ||
            t().isObjectPattern(node)
          ) {
            var _arr2 = node.properties;

            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
              var prop = _arr2[_i2];
              gatherNodeParts(prop.key || prop.argument, parts);
            }
          } else if (t().isPrivateName(node)) {
            gatherNodeParts(node.id, parts);
          } else if (t().isThisExpression(node)) {
            parts.push("this");
          } else if (t().isSuper(node)) {
            parts.push("super");
          }
        }

        var collectorVisitor = {
          For: function For(path) {
            var _arr3 = t().FOR_INIT_KEYS;

            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
              var key = _arr3[_i3];
              var declar = path.get(key);

              if (declar.isVar()) {
                var parentScope =
                  path.scope.getFunctionParent() ||
                  path.scope.getProgramParent();
                parentScope.registerBinding("var", declar);
              }
            }
          },
          Declaration: function Declaration(path) {
            if (path.isBlockScoped()) return;

            if (
              path.isExportDeclaration() &&
              path.get("declaration").isDeclaration()
            ) {
              return;
            }

            var parent =
              path.scope.getFunctionParent() || path.scope.getProgramParent();
            parent.registerDeclaration(path);
          },
          ReferencedIdentifier: function ReferencedIdentifier(path, state) {
            state.references.push(path);
          },
          ForXStatement: function ForXStatement(path, state) {
            var left = path.get("left");

            if (left.isPattern() || left.isIdentifier()) {
              state.constantViolations.push(path);
            }
          },
          ExportDeclaration: {
            exit: function exit(path) {
              var node = path.node,
                scope = path.scope;
              var declar = node.declaration;

              if (
                t().isClassDeclaration(declar) ||
                t().isFunctionDeclaration(declar)
              ) {
                var _id = declar.id;
                if (!_id) return;
                var binding = scope.getBinding(_id.name);
                if (binding) binding.reference(path);
              } else if (t().isVariableDeclaration(declar)) {
                var _arr4 = declar.declarations;

                for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
                  var decl = _arr4[_i4];
                  var ids = t().getBindingIdentifiers(decl);

                  for (var name in ids) {
                    var _binding = scope.getBinding(name);

                    if (_binding) _binding.reference(path);
                  }
                }
              }
            }
          },
          LabeledStatement: function LabeledStatement(path) {
            path.scope.getProgramParent().addGlobal(path.node);
            path.scope.getBlockParent().registerDeclaration(path);
          },
          AssignmentExpression: function AssignmentExpression(path, state) {
            state.assignments.push(path);
          },
          UpdateExpression: function UpdateExpression(path, state) {
            state.constantViolations.push(path);
          },
          UnaryExpression: function UnaryExpression(path, state) {
            if (path.node.operator === "delete") {
              state.constantViolations.push(path);
            }
          },
          BlockScoped: function BlockScoped(path) {
            var scope = path.scope;
            if (scope.path === path) scope = scope.parent;
            scope.getBlockParent().registerDeclaration(path);
          },
          ClassDeclaration: function ClassDeclaration(path) {
            var id = path.node.id;
            if (!id) return;
            var name = id.name;
            path.scope.bindings[name] = path.scope.getBinding(name);
          },
          Block: function Block(path) {
            var paths = path.get("body");
            var _arr5 = paths;

            for (var _i5 = 0; _i5 < _arr5.length; _i5++) {
              var bodyPath = _arr5[_i5];

              if (bodyPath.isFunctionDeclaration()) {
                path.scope.getBlockParent().registerDeclaration(bodyPath);
              }
            }
          }
        };
        var uid = 0;

        var Scope = (function() {
          function Scope(path) {
            var node = path.node;

            var cached = _cache.scope.get(node);

            if (cached && cached.path === path) {
              return cached;
            }

            _cache.scope.set(node, this);

            this.uid = uid++;
            this.block = node;
            this.path = path;
            this.labels = new Map();
          }

          var _proto = Scope.prototype;

          _proto.traverse = function traverse(node, opts, state) {
            (0, _index.default)(node, opts, this, state, this.path);
          };

          _proto.generateDeclaredUidIdentifier = function generateDeclaredUidIdentifier(
            name
          ) {
            var id = this.generateUidIdentifier(name);
            this.push({
              id: id
            });
            return t().cloneNode(id);
          };

          _proto.generateUidIdentifier = function generateUidIdentifier(name) {
            return t().identifier(this.generateUid(name));
          };

          _proto.generateUid = function generateUid(name) {
            if (name === void 0) {
              name = "temp";
            }

            name = t()
              .toIdentifier(name)
              .replace(/^_+/, "")
              .replace(/[0-9]+$/g, "");
            var uid;
            var i = 0;

            do {
              uid = this._generateUid(name, i);
              i++;
            } while (
              this.hasLabel(uid) ||
              this.hasBinding(uid) ||
              this.hasGlobal(uid) ||
              this.hasReference(uid)
            );

            var program = this.getProgramParent();
            program.references[uid] = true;
            program.uids[uid] = true;
            return uid;
          };

          _proto._generateUid = function _generateUid(name, i) {
            var id = name;
            if (i > 1) id += i;
            return "_" + id;
          };

          _proto.generateUidBasedOnNode = function generateUidBasedOnNode(
            parent,
            defaultName
          ) {
            var node = parent;

            if (t().isAssignmentExpression(parent)) {
              node = parent.left;
            } else if (t().isVariableDeclarator(parent)) {
              node = parent.id;
            } else if (t().isObjectProperty(node) || t().isObjectMethod(node)) {
              node = node.key;
            }

            var parts = [];
            gatherNodeParts(node, parts);
            var id = parts.join("$");
            id = id.replace(/^_/, "") || defaultName || "ref";
            return this.generateUid(id.slice(0, 20));
          };

          _proto.generateUidIdentifierBasedOnNode = function generateUidIdentifierBasedOnNode(
            parent,
            defaultName
          ) {
            return t().identifier(
              this.generateUidBasedOnNode(parent, defaultName)
            );
          };

          _proto.isStatic = function isStatic(node) {
            if (t().isThisExpression(node) || t().isSuper(node)) {
              return true;
            }

            if (t().isIdentifier(node)) {
              var binding = this.getBinding(node.name);

              if (binding) {
                return binding.constant;
              } else {
                return this.hasBinding(node.name);
              }
            }

            return false;
          };

          _proto.maybeGenerateMemoised = function maybeGenerateMemoised(
            node,
            dontPush
          ) {
            if (this.isStatic(node)) {
              return null;
            } else {
              var _id2 = this.generateUidIdentifierBasedOnNode(node);

              if (!dontPush) {
                this.push({
                  id: _id2
                });
                return t().cloneNode(_id2);
              }

              return _id2;
            }
          };

          _proto.checkBlockScopedCollisions = function checkBlockScopedCollisions(
            local,
            kind,
            name,
            id
          ) {
            if (kind === "param") return;
            if (local.kind === "local") return;
            if (kind === "hoisted" && local.kind === "let") return;
            var duplicate =
              kind === "let" ||
              local.kind === "let" ||
              local.kind === "const" ||
              local.kind === "module" ||
              (local.kind === "param" && (kind === "let" || kind === "const"));

            if (duplicate) {
              throw this.hub.file.buildCodeFrameError(
                id,
                'Duplicate declaration "' + name + '"',
                TypeError
              );
            }
          };

          _proto.rename = function rename(oldName, newName, block) {
            var binding = this.getBinding(oldName);

            if (binding) {
              newName = newName || this.generateUidIdentifier(oldName).name;
              return new _renamer.default(binding, oldName, newName).rename(
                block
              );
            }
          };

          _proto._renameFromMap = function _renameFromMap(
            map,
            oldName,
            newName,
            value
          ) {
            if (map[oldName]) {
              map[newName] = value;
              map[oldName] = null;
            }
          };

          _proto.dump = function dump() {
            var sep = (0, _repeat().default)("-", 60);
            console.log(sep);
            var scope = this;

            do {
              console.log("#", scope.block.type);

              for (var name in scope.bindings) {
                var binding = scope.bindings[name];
                console.log(" -", name, {
                  constant: binding.constant,
                  references: binding.references,
                  violations: binding.constantViolations.length,
                  kind: binding.kind
                });
              }
            } while ((scope = scope.parent));

            console.log(sep);
          };

          _proto.toArray = function toArray(node, i) {
            var file = this.hub.file;

            if (t().isIdentifier(node)) {
              var binding = this.getBinding(node.name);

              if (
                binding &&
                binding.constant &&
                binding.path.isGenericType("Array")
              ) {
                return node;
              }
            }

            if (t().isArrayExpression(node)) {
              return node;
            }

            if (
              t().isIdentifier(node, {
                name: "arguments"
              })
            ) {
              return t().callExpression(
                t().memberExpression(
                  t().memberExpression(
                    t().memberExpression(
                      t().identifier("Array"),
                      t().identifier("prototype")
                    ),
                    t().identifier("slice")
                  ),
                  t().identifier("call")
                ),
                [node]
              );
            }

            var helperName;
            var args = [node];

            if (i === true) {
              helperName = "toConsumableArray";
            } else if (i) {
              args.push(t().numericLiteral(i));
              helperName = "slicedToArray";
            } else {
              helperName = "toArray";
            }

            return t().callExpression(file.addHelper(helperName), args);
          };

          _proto.hasLabel = function hasLabel(name) {
            return !!this.getLabel(name);
          };

          _proto.getLabel = function getLabel(name) {
            return this.labels.get(name);
          };

          _proto.registerLabel = function registerLabel(path) {
            this.labels.set(path.node.label.name, path);
          };

          _proto.registerDeclaration = function registerDeclaration(path) {
            if (path.isFlow()) return;

            if (path.isLabeledStatement()) {
              this.registerLabel(path);
            } else if (path.isFunctionDeclaration()) {
              this.registerBinding("hoisted", path.get("id"), path);
            } else if (path.isVariableDeclaration()) {
              var declarations = path.get("declarations");
              var _arr6 = declarations;

              for (var _i6 = 0; _i6 < _arr6.length; _i6++) {
                var declar = _arr6[_i6];
                this.registerBinding(path.node.kind, declar);
              }
            } else if (path.isClassDeclaration()) {
              this.registerBinding("let", path);
            } else if (path.isImportDeclaration()) {
              var specifiers = path.get("specifiers");
              var _arr7 = specifiers;

              for (var _i7 = 0; _i7 < _arr7.length; _i7++) {
                var specifier = _arr7[_i7];
                this.registerBinding("module", specifier);
              }
            } else if (path.isExportDeclaration()) {
              var _declar = path.get("declaration");

              if (
                _declar.isClassDeclaration() ||
                _declar.isFunctionDeclaration() ||
                _declar.isVariableDeclaration()
              ) {
                this.registerDeclaration(_declar);
              }
            } else {
              this.registerBinding("unknown", path);
            }
          };

          _proto.buildUndefinedNode = function buildUndefinedNode() {
            if (this.hasBinding("undefined")) {
              return t().unaryExpression("void", t().numericLiteral(0), true);
            } else {
              return t().identifier("undefined");
            }
          };

          _proto.registerConstantViolation = function registerConstantViolation(
            path
          ) {
            var ids = path.getBindingIdentifiers();

            for (var name in ids) {
              var binding = this.getBinding(name);
              if (binding) binding.reassign(path);
            }
          };

          _proto.registerBinding = function registerBinding(
            kind,
            path,
            bindingPath
          ) {
            if (bindingPath === void 0) {
              bindingPath = path;
            }

            if (!kind) throw new ReferenceError("no `kind`");

            if (path.isVariableDeclaration()) {
              var declarators = path.get("declarations");

              for (
                var _iterator = declarators,
                  _isArray = Array.isArray(_iterator),
                  _i8 = 0,
                  _iterator = _isArray
                    ? _iterator
                    : _iterator[Symbol.iterator]();
                ;

              ) {
                var _ref;

                if (_isArray) {
                  if (_i8 >= _iterator.length) break;
                  _ref = _iterator[_i8++];
                } else {
                  _i8 = _iterator.next();
                  if (_i8.done) break;
                  _ref = _i8.value;
                }

                var declar = _ref;
                this.registerBinding(kind, declar);
              }

              return;
            }

            var parent = this.getProgramParent();
            var ids = path.getBindingIdentifiers(true);

            for (var name in ids) {
              var _arr8 = ids[name];

              for (var _i9 = 0; _i9 < _arr8.length; _i9++) {
                var _id3 = _arr8[_i9];
                var local = this.getOwnBinding(name);

                if (local) {
                  if (local.identifier === _id3) continue;
                  this.checkBlockScopedCollisions(local, kind, name, _id3);
                }

                parent.references[name] = true;

                if (local) {
                  this.registerConstantViolation(bindingPath);
                } else {
                  this.bindings[name] = new _binding2.default({
                    identifier: _id3,
                    scope: this,
                    path: bindingPath,
                    kind: kind
                  });
                }
              }
            }
          };

          _proto.addGlobal = function addGlobal(node) {
            this.globals[node.name] = node;
          };

          _proto.hasUid = function hasUid(name) {
            var scope = this;

            do {
              if (scope.uids[name]) return true;
            } while ((scope = scope.parent));

            return false;
          };

          _proto.hasGlobal = function hasGlobal(name) {
            var scope = this;

            do {
              if (scope.globals[name]) return true;
            } while ((scope = scope.parent));

            return false;
          };

          _proto.hasReference = function hasReference(name) {
            var scope = this;

            do {
              if (scope.references[name]) return true;
            } while ((scope = scope.parent));

            return false;
          };

          _proto.isPure = function isPure(node, constantsOnly) {
            if (t().isIdentifier(node)) {
              var binding = this.getBinding(node.name);
              if (!binding) return false;
              if (constantsOnly) return binding.constant;
              return true;
            } else if (t().isClass(node)) {
              if (
                node.superClass &&
                !this.isPure(node.superClass, constantsOnly)
              ) {
                return false;
              }

              return this.isPure(node.body, constantsOnly);
            } else if (t().isClassBody(node)) {
              for (
                var _iterator2 = node.body,
                  _isArray2 = Array.isArray(_iterator2),
                  _i10 = 0,
                  _iterator2 = _isArray2
                    ? _iterator2
                    : _iterator2[Symbol.iterator]();
                ;

              ) {
                var _ref2;

                if (_isArray2) {
                  if (_i10 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i10++];
                } else {
                  _i10 = _iterator2.next();
                  if (_i10.done) break;
                  _ref2 = _i10.value;
                }

                var method = _ref2;
                if (!this.isPure(method, constantsOnly)) return false;
              }

              return true;
            } else if (t().isBinary(node)) {
              return (
                this.isPure(node.left, constantsOnly) &&
                this.isPure(node.right, constantsOnly)
              );
            } else if (t().isArrayExpression(node)) {
              var _arr9 = node.elements;

              for (var _i11 = 0; _i11 < _arr9.length; _i11++) {
                var elem = _arr9[_i11];
                if (!this.isPure(elem, constantsOnly)) return false;
              }

              return true;
            } else if (t().isObjectExpression(node)) {
              var _arr10 = node.properties;

              for (var _i12 = 0; _i12 < _arr10.length; _i12++) {
                var prop = _arr10[_i12];
                if (!this.isPure(prop, constantsOnly)) return false;
              }

              return true;
            } else if (t().isClassMethod(node)) {
              if (node.computed && !this.isPure(node.key, constantsOnly))
                return false;
              if (node.kind === "get" || node.kind === "set") return false;
              return true;
            } else if (t().isProperty(node)) {
              if (node.computed && !this.isPure(node.key, constantsOnly))
                return false;
              return this.isPure(node.value, constantsOnly);
            } else if (t().isUnaryExpression(node)) {
              return this.isPure(node.argument, constantsOnly);
            } else if (t().isTaggedTemplateExpression(node)) {
              return (
                t().matchesPattern(node.tag, "String.raw") &&
                !this.hasBinding("String", true) &&
                this.isPure(node.quasi, constantsOnly)
              );
            } else if (t().isTemplateLiteral(node)) {
              var _arr11 = node.expressions;

              for (var _i13 = 0; _i13 < _arr11.length; _i13++) {
                var expression = _arr11[_i13];
                if (!this.isPure(expression, constantsOnly)) return false;
              }

              return true;
            } else {
              return t().isPureish(node);
            }
          };

          _proto.setData = function setData(key, val) {
            return (this.data[key] = val);
          };

          _proto.getData = function getData(key) {
            var scope = this;

            do {
              var data = scope.data[key];
              if (data != null) return data;
            } while ((scope = scope.parent));
          };

          _proto.removeData = function removeData(key) {
            var scope = this;

            do {
              var data = scope.data[key];
              if (data != null) scope.data[key] = null;
            } while ((scope = scope.parent));
          };

          _proto.init = function init() {
            if (!this.references) this.crawl();
          };

          _proto.crawl = function crawl() {
            var path = this.path;
            this.references = Object.create(null);
            this.bindings = Object.create(null);
            this.globals = Object.create(null);
            this.uids = Object.create(null);
            this.data = Object.create(null);

            if (path.isLoop()) {
              var _arr12 = t().FOR_INIT_KEYS;

              for (var _i14 = 0; _i14 < _arr12.length; _i14++) {
                var key = _arr12[_i14];
                var node = path.get(key);
                if (node.isBlockScoped())
                  this.registerBinding(node.node.kind, node);
              }
            }

            if (path.isFunctionExpression() && path.has("id")) {
              if (!path.get("id").node[t().NOT_LOCAL_BINDING]) {
                this.registerBinding("local", path.get("id"), path);
              }
            }

            if (path.isClassExpression() && path.has("id")) {
              if (!path.get("id").node[t().NOT_LOCAL_BINDING]) {
                this.registerBinding("local", path);
              }
            }

            if (path.isFunction()) {
              var params = path.get("params");

              for (
                var _iterator3 = params,
                  _isArray3 = Array.isArray(_iterator3),
                  _i15 = 0,
                  _iterator3 = _isArray3
                    ? _iterator3
                    : _iterator3[Symbol.iterator]();
                ;

              ) {
                var _ref3;

                if (_isArray3) {
                  if (_i15 >= _iterator3.length) break;
                  _ref3 = _iterator3[_i15++];
                } else {
                  _i15 = _iterator3.next();
                  if (_i15.done) break;
                  _ref3 = _i15.value;
                }

                var param = _ref3;
                this.registerBinding("param", param);
              }
            }

            if (path.isCatchClause()) {
              this.registerBinding("let", path);
            }

            var parent = this.getProgramParent();
            if (parent.crawling) return;
            var state = {
              references: [],
              constantViolations: [],
              assignments: []
            };
            this.crawling = true;
            path.traverse(collectorVisitor, state);
            this.crawling = false;

            for (
              var _iterator4 = state.assignments,
                _isArray4 = Array.isArray(_iterator4),
                _i16 = 0,
                _iterator4 = _isArray4
                  ? _iterator4
                  : _iterator4[Symbol.iterator]();
              ;

            ) {
              var _ref4;

              if (_isArray4) {
                if (_i16 >= _iterator4.length) break;
                _ref4 = _iterator4[_i16++];
              } else {
                _i16 = _iterator4.next();
                if (_i16.done) break;
                _ref4 = _i16.value;
              }

              var _path = _ref4;

              var ids = _path.getBindingIdentifiers();

              var programParent = void 0;

              for (var name in ids) {
                if (_path.scope.getBinding(name)) continue;
                programParent = programParent || _path.scope.getProgramParent();
                programParent.addGlobal(ids[name]);
              }

              _path.scope.registerConstantViolation(_path);
            }

            for (
              var _iterator5 = state.references,
                _isArray5 = Array.isArray(_iterator5),
                _i17 = 0,
                _iterator5 = _isArray5
                  ? _iterator5
                  : _iterator5[Symbol.iterator]();
              ;

            ) {
              var _ref5;

              if (_isArray5) {
                if (_i17 >= _iterator5.length) break;
                _ref5 = _iterator5[_i17++];
              } else {
                _i17 = _iterator5.next();
                if (_i17.done) break;
                _ref5 = _i17.value;
              }

              var ref = _ref5;
              var binding = ref.scope.getBinding(ref.node.name);

              if (binding) {
                binding.reference(ref);
              } else {
                ref.scope.getProgramParent().addGlobal(ref.node);
              }
            }

            for (
              var _iterator6 = state.constantViolations,
                _isArray6 = Array.isArray(_iterator6),
                _i18 = 0,
                _iterator6 = _isArray6
                  ? _iterator6
                  : _iterator6[Symbol.iterator]();
              ;

            ) {
              var _ref6;

              if (_isArray6) {
                if (_i18 >= _iterator6.length) break;
                _ref6 = _iterator6[_i18++];
              } else {
                _i18 = _iterator6.next();
                if (_i18.done) break;
                _ref6 = _i18.value;
              }

              var _path2 = _ref6;

              _path2.scope.registerConstantViolation(_path2);
            }
          };

          _proto.push = function push(opts) {
            var path = this.path;

            if (!path.isBlockStatement() && !path.isProgram()) {
              path = this.getBlockParent().path;
            }

            if (path.isSwitchStatement()) {
              path = (this.getFunctionParent() || this.getProgramParent()).path;
            }

            if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
              path.ensureBlock();
              path = path.get("body");
            }

            var unique = opts.unique;
            var kind = opts.kind || "var";
            var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
            var dataKey = "declaration:" + kind + ":" + blockHoist;
            var declarPath = !unique && path.getData(dataKey);

            if (!declarPath) {
              var declar = t().variableDeclaration(kind, []);
              declar._blockHoist = blockHoist;

              var _path$unshiftContaine = path.unshiftContainer("body", [
                declar
              ]);

              declarPath = _path$unshiftContaine[0];
              if (!unique) path.setData(dataKey, declarPath);
            }

            var declarator = t().variableDeclarator(opts.id, opts.init);
            declarPath.node.declarations.push(declarator);
            this.registerBinding(kind, declarPath.get("declarations").pop());
          };

          _proto.getProgramParent = function getProgramParent() {
            var scope = this;

            do {
              if (scope.path.isProgram()) {
                return scope;
              }
            } while ((scope = scope.parent));

            throw new Error("Couldn't find a Program");
          };

          _proto.getFunctionParent = function getFunctionParent() {
            var scope = this;

            do {
              if (scope.path.isFunctionParent()) {
                return scope;
              }
            } while ((scope = scope.parent));

            return null;
          };

          _proto.getBlockParent = function getBlockParent() {
            var scope = this;

            do {
              if (scope.path.isBlockParent()) {
                return scope;
              }
            } while ((scope = scope.parent));

            throw new Error(
              "We couldn't find a BlockStatement, For, Switch, Function, Loop or Program..."
            );
          };

          _proto.getAllBindings = function getAllBindings() {
            var ids = Object.create(null);
            var scope = this;

            do {
              (0, _defaults().default)(ids, scope.bindings);
              scope = scope.parent;
            } while (scope);

            return ids;
          };

          _proto.getAllBindingsOfKind = function getAllBindingsOfKind() {
            var ids = Object.create(null);
            var _arr13 = arguments;

            for (var _i19 = 0; _i19 < _arr13.length; _i19++) {
              var kind = _arr13[_i19];
              var scope = this;

              do {
                for (var name in scope.bindings) {
                  var binding = scope.bindings[name];
                  if (binding.kind === kind) ids[name] = binding;
                }

                scope = scope.parent;
              } while (scope);
            }

            return ids;
          };

          _proto.bindingIdentifierEquals = function bindingIdentifierEquals(
            name,
            node
          ) {
            return this.getBindingIdentifier(name) === node;
          };

          _proto.getBinding = function getBinding(name) {
            var scope = this;

            do {
              var binding = scope.getOwnBinding(name);
              if (binding) return binding;
            } while ((scope = scope.parent));
          };

          _proto.getOwnBinding = function getOwnBinding(name) {
            return this.bindings[name];
          };

          _proto.getBindingIdentifier = function getBindingIdentifier(name) {
            var info = this.getBinding(name);
            return info && info.identifier;
          };

          _proto.getOwnBindingIdentifier = function getOwnBindingIdentifier(
            name
          ) {
            var binding = this.bindings[name];
            return binding && binding.identifier;
          };

          _proto.hasOwnBinding = function hasOwnBinding(name) {
            return !!this.getOwnBinding(name);
          };

          _proto.hasBinding = function hasBinding(name, noGlobals) {
            if (!name) return false;
            if (this.hasOwnBinding(name)) return true;
            if (this.parentHasBinding(name, noGlobals)) return true;
            if (this.hasUid(name)) return true;
            if (!noGlobals && (0, _includes().default)(Scope.globals, name))
              return true;
            if (
              !noGlobals &&
              (0, _includes().default)(Scope.contextVariables, name)
            )
              return true;
            return false;
          };

          _proto.parentHasBinding = function parentHasBinding(name, noGlobals) {
            return this.parent && this.parent.hasBinding(name, noGlobals);
          };

          _proto.moveBindingTo = function moveBindingTo(name, scope) {
            var info = this.getBinding(name);

            if (info) {
              info.scope.removeOwnBinding(name);
              info.scope = scope;
              scope.bindings[name] = info;
            }
          };

          _proto.removeOwnBinding = function removeOwnBinding(name) {
            delete this.bindings[name];
          };

          _proto.removeBinding = function removeBinding(name) {
            var info = this.getBinding(name);

            if (info) {
              info.scope.removeOwnBinding(name);
            }

            var scope = this;

            do {
              if (scope.uids[name]) {
                scope.uids[name] = false;
              }
            } while ((scope = scope.parent));
          };

          _createClass(Scope, [
            {
              key: "parent",
              get: function get() {
                var parent = this.path.findParent(function(p) {
                  return p.isScope();
                });
                return parent && parent.scope;
              }
            },
            {
              key: "parentBlock",
              get: function get() {
                return this.path.parent;
              }
            },
            {
              key: "hub",
              get: function get() {
                return this.path.hub;
              }
            }
          ]);

          return Scope;
        })();

        exports.default = Scope;
        Scope.globals = Object.keys(_globals().default.builtin);
        Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];

        /***/
      },
      /* 142 */
      /***/ function(module, exports, __webpack_require__) {
        var baseValues = __webpack_require__(375),
          keys = __webpack_require__(25);

        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }

        module.exports = values;

        /***/
      },
      /* 143 */
      /***/ function(module, exports, __webpack_require__) {
        var baseRepeat = __webpack_require__(376),
          isIterateeCall = __webpack_require__(35),
          toInteger = __webpack_require__(45),
          toString = __webpack_require__(144);

        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
            n = 1;
          } else {
            n = toInteger(n);
          }

          return baseRepeat(toString(string), n);
        }

        module.exports = repeat;

        /***/
      },
      /* 144 */
      /***/ function(module, exports, __webpack_require__) {
        var baseToString = __webpack_require__(377);

        function toString(value) {
          return value == null ? "" : baseToString(value);
        }

        module.exports = toString;

        /***/
      },
      /* 145 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var Binding = (function() {
          function Binding(_ref) {
            var identifier = _ref.identifier,
              scope = _ref.scope,
              path = _ref.path,
              kind = _ref.kind;
            this.identifier = identifier;
            this.scope = scope;
            this.path = path;
            this.kind = kind;
            this.constantViolations = [];
            this.constant = true;
            this.referencePaths = [];
            this.referenced = false;
            this.references = 0;
            this.clearValue();
          }

          var _proto = Binding.prototype;

          _proto.deoptValue = function deoptValue() {
            this.clearValue();
            this.hasDeoptedValue = true;
          };

          _proto.setValue = function setValue(value) {
            if (this.hasDeoptedValue) return;
            this.hasValue = true;
            this.value = value;
          };

          _proto.clearValue = function clearValue() {
            this.hasDeoptedValue = false;
            this.hasValue = false;
            this.value = null;
          };

          _proto.reassign = function reassign(path) {
            this.constant = false;

            if (this.constantViolations.indexOf(path) !== -1) {
              return;
            }

            this.constantViolations.push(path);
          };

          _proto.reference = function reference(path) {
            if (this.referencePaths.indexOf(path) !== -1) {
              return;
            }

            this.referenced = true;
            this.references++;
            this.referencePaths.push(path);
          };

          _proto.dereference = function dereference() {
            this.references--;
            this.referenced = !!this.references;
          };

          return Binding;
        })();

        exports.default = Binding;

        /***/
      },
      /* 146 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = __webpack_require__(386);

        /***/
      },
      /* 147 */
      /***/ function(module, exports, __webpack_require__) {
        exports.SourceMapGenerator = __webpack_require__(
          148
        ).SourceMapGenerator;
        exports.SourceMapConsumer = __webpack_require__(390).SourceMapConsumer;
        exports.SourceNode = __webpack_require__(393).SourceNode;

        /***/
      },
      /* 148 */
      /***/ function(module, exports, __webpack_require__) {
        var base64VLQ = __webpack_require__(149);

        var util = __webpack_require__(36);

        var ArraySet = __webpack_require__(150).ArraySet;

        var MappingList = __webpack_require__(389).MappingList;

        function SourceMapGenerator(aArgs) {
          if (!aArgs) {
            aArgs = {};
          }

          this._file = util.getArg(aArgs, "file", null);
          this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
          this._skipValidation = util.getArg(aArgs, "skipValidation", false);
          this._sources = new ArraySet();
          this._names = new ArraySet();
          this._mappings = new MappingList();
          this._sourcesContents = null;
        }

        SourceMapGenerator.prototype._version = 3;

        SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(
          aSourceMapConsumer
        ) {
          var sourceRoot = aSourceMapConsumer.sourceRoot;
          var generator = new SourceMapGenerator({
            file: aSourceMapConsumer.file,
            sourceRoot: sourceRoot
          });
          aSourceMapConsumer.eachMapping(function(mapping) {
            var newMapping = {
              generated: {
                line: mapping.generatedLine,
                column: mapping.generatedColumn
              }
            };

            if (mapping.source != null) {
              newMapping.source = mapping.source;

              if (sourceRoot != null) {
                newMapping.source = util.relative(
                  sourceRoot,
                  newMapping.source
                );
              }

              newMapping.original = {
                line: mapping.originalLine,
                column: mapping.originalColumn
              };

              if (mapping.name != null) {
                newMapping.name = mapping.name;
              }
            }

            generator.addMapping(newMapping);
          });
          aSourceMapConsumer.sources.forEach(function(sourceFile) {
            var content = aSourceMapConsumer.sourceContentFor(sourceFile);

            if (content != null) {
              generator.setSourceContent(sourceFile, content);
            }
          });
          return generator;
        };

        SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(
          aArgs
        ) {
          var generated = util.getArg(aArgs, "generated");
          var original = util.getArg(aArgs, "original", null);
          var source = util.getArg(aArgs, "source", null);
          var name = util.getArg(aArgs, "name", null);

          if (!this._skipValidation) {
            this._validateMapping(generated, original, source, name);
          }

          if (source != null) {
            source = String(source);

            if (!this._sources.has(source)) {
              this._sources.add(source);
            }
          }

          if (name != null) {
            name = String(name);

            if (!this._names.has(name)) {
              this._names.add(name);
            }
          }

          this._mappings.add({
            generatedLine: generated.line,
            generatedColumn: generated.column,
            originalLine: original != null && original.line,
            originalColumn: original != null && original.column,
            source: source,
            name: name
          });
        };

        SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(
          aSourceFile,
          aSourceContent
        ) {
          var source = aSourceFile;

          if (this._sourceRoot != null) {
            source = util.relative(this._sourceRoot, source);
          }

          if (aSourceContent != null) {
            if (!this._sourcesContents) {
              this._sourcesContents = Object.create(null);
            }

            this._sourcesContents[util.toSetString(source)] = aSourceContent;
          } else if (this._sourcesContents) {
            delete this._sourcesContents[util.toSetString(source)];

            if (Object.keys(this._sourcesContents).length === 0) {
              this._sourcesContents = null;
            }
          }
        };

        SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(
          aSourceMapConsumer,
          aSourceFile,
          aSourceMapPath
        ) {
          var sourceFile = aSourceFile;

          if (aSourceFile == null) {
            if (aSourceMapConsumer.file == null) {
              throw new Error(
                "SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, " +
                  'or the source map\'s "file" property. Both were omitted.'
              );
            }

            sourceFile = aSourceMapConsumer.file;
          }

          var sourceRoot = this._sourceRoot;

          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }

          var newSources = new ArraySet();
          var newNames = new ArraySet();

          this._mappings.unsortedForEach(function(mapping) {
            if (mapping.source === sourceFile && mapping.originalLine != null) {
              var original = aSourceMapConsumer.originalPositionFor({
                line: mapping.originalLine,
                column: mapping.originalColumn
              });

              if (original.source != null) {
                mapping.source = original.source;

                if (aSourceMapPath != null) {
                  mapping.source = util.join(aSourceMapPath, mapping.source);
                }

                if (sourceRoot != null) {
                  mapping.source = util.relative(sourceRoot, mapping.source);
                }

                mapping.originalLine = original.line;
                mapping.originalColumn = original.column;

                if (original.name != null) {
                  mapping.name = original.name;
                }
              }
            }

            var source = mapping.source;

            if (source != null && !newSources.has(source)) {
              newSources.add(source);
            }

            var name = mapping.name;

            if (name != null && !newNames.has(name)) {
              newNames.add(name);
            }
          }, this);

          this._sources = newSources;
          this._names = newNames;
          aSourceMapConsumer.sources.forEach(function(sourceFile) {
            var content = aSourceMapConsumer.sourceContentFor(sourceFile);

            if (content != null) {
              if (aSourceMapPath != null) {
                sourceFile = util.join(aSourceMapPath, sourceFile);
              }

              if (sourceRoot != null) {
                sourceFile = util.relative(sourceRoot, sourceFile);
              }

              this.setSourceContent(sourceFile, content);
            }
          }, this);
        };

        SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(
          aGenerated,
          aOriginal,
          aSource,
          aName
        ) {
          if (
            aOriginal &&
            typeof aOriginal.line !== "number" &&
            typeof aOriginal.column !== "number"
          ) {
            throw new Error(
              "original.line and original.column are not numbers -- you probably meant to omit " +
                "the original mapping entirely and only map the generated position. If so, pass " +
                "null for the original mapping instead of an object with empty or null values."
            );
          }

          if (
            aGenerated &&
            "line" in aGenerated &&
            "column" in aGenerated &&
            aGenerated.line > 0 &&
            aGenerated.column >= 0 &&
            !aOriginal &&
            !aSource &&
            !aName
          ) {
            return;
          } else if (
            aGenerated &&
            "line" in aGenerated &&
            "column" in aGenerated &&
            aOriginal &&
            "line" in aOriginal &&
            "column" in aOriginal &&
            aGenerated.line > 0 &&
            aGenerated.column >= 0 &&
            aOriginal.line > 0 &&
            aOriginal.column >= 0 &&
            aSource
          ) {
            return;
          } else {
            throw new Error(
              "Invalid mapping: " +
                JSON.stringify({
                  generated: aGenerated,
                  source: aSource,
                  original: aOriginal,
                  name: aName
                })
            );
          }
        };

        SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
          var previousGeneratedColumn = 0;
          var previousGeneratedLine = 1;
          var previousOriginalColumn = 0;
          var previousOriginalLine = 0;
          var previousName = 0;
          var previousSource = 0;
          var result = "";
          var next;
          var mapping;
          var nameIdx;
          var sourceIdx;

          var mappings = this._mappings.toArray();

          for (var i = 0, len = mappings.length; i < len; i++) {
            mapping = mappings[i];
            next = "";

            if (mapping.generatedLine !== previousGeneratedLine) {
              previousGeneratedColumn = 0;

              while (mapping.generatedLine !== previousGeneratedLine) {
                next += ";";
                previousGeneratedLine++;
              }
            } else {
              if (i > 0) {
                if (
                  !util.compareByGeneratedPositionsInflated(
                    mapping,
                    mappings[i - 1]
                  )
                ) {
                  continue;
                }

                next += ",";
              }
            }

            next += base64VLQ.encode(
              mapping.generatedColumn - previousGeneratedColumn
            );
            previousGeneratedColumn = mapping.generatedColumn;

            if (mapping.source != null) {
              sourceIdx = this._sources.indexOf(mapping.source);
              next += base64VLQ.encode(sourceIdx - previousSource);
              previousSource = sourceIdx;
              next += base64VLQ.encode(
                mapping.originalLine - 1 - previousOriginalLine
              );
              previousOriginalLine = mapping.originalLine - 1;
              next += base64VLQ.encode(
                mapping.originalColumn - previousOriginalColumn
              );
              previousOriginalColumn = mapping.originalColumn;

              if (mapping.name != null) {
                nameIdx = this._names.indexOf(mapping.name);
                next += base64VLQ.encode(nameIdx - previousName);
                previousName = nameIdx;
              }
            }

            result += next;
          }

          return result;
        };

        SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(
          aSources,
          aSourceRoot
        ) {
          return aSources.map(function(source) {
            if (!this._sourcesContents) {
              return null;
            }

            if (aSourceRoot != null) {
              source = util.relative(aSourceRoot, source);
            }

            var key = util.toSetString(source);
            return Object.prototype.hasOwnProperty.call(
              this._sourcesContents,
              key
            )
              ? this._sourcesContents[key]
              : null;
          }, this);
        };

        SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
          var map = {
            version: this._version,
            sources: this._sources.toArray(),
            names: this._names.toArray(),
            mappings: this._serializeMappings()
          };

          if (this._file != null) {
            map.file = this._file;
          }

          if (this._sourceRoot != null) {
            map.sourceRoot = this._sourceRoot;
          }

          if (this._sourcesContents) {
            map.sourcesContent = this._generateSourcesContent(
              map.sources,
              map.sourceRoot
            );
          }

          return map;
        };

        SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
          return JSON.stringify(this.toJSON());
        };

        exports.SourceMapGenerator = SourceMapGenerator;

        /***/
      },
      /* 149 */
      /***/ function(module, exports, __webpack_require__) {
        var base64 = __webpack_require__(388);

        var VLQ_BASE_SHIFT = 5;
        var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
        var VLQ_BASE_MASK = VLQ_BASE - 1;
        var VLQ_CONTINUATION_BIT = VLQ_BASE;

        function toVLQSigned(aValue) {
          return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
        }

        function fromVLQSigned(aValue) {
          var isNegative = (aValue & 1) === 1;
          var shifted = aValue >> 1;
          return isNegative ? -shifted : shifted;
        }

        exports.encode = function base64VLQ_encode(aValue) {
          var encoded = "";
          var digit;
          var vlq = toVLQSigned(aValue);

          do {
            digit = vlq & VLQ_BASE_MASK;
            vlq >>>= VLQ_BASE_SHIFT;

            if (vlq > 0) {
              digit |= VLQ_CONTINUATION_BIT;
            }

            encoded += base64.encode(digit);
          } while (vlq > 0);

          return encoded;
        };

        exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
          var strLen = aStr.length;
          var result = 0;
          var shift = 0;
          var continuation, digit;

          do {
            if (aIndex >= strLen) {
              throw new Error("Expected more digits in base 64 VLQ value.");
            }

            digit = base64.decode(aStr.charCodeAt(aIndex++));

            if (digit === -1) {
              throw new Error(
                "Invalid base64 digit: " + aStr.charAt(aIndex - 1)
              );
            }

            continuation = !!(digit & VLQ_CONTINUATION_BIT);
            digit &= VLQ_BASE_MASK;
            result = result + (digit << shift);
            shift += VLQ_BASE_SHIFT;
          } while (continuation);

          aOutParam.value = fromVLQSigned(result);
          aOutParam.rest = aIndex;
        };

        /***/
      },
      /* 150 */
      /***/ function(module, exports, __webpack_require__) {
        var util = __webpack_require__(36);

        var has = Object.prototype.hasOwnProperty;
        var hasNativeMap = typeof Map !== "undefined";

        function ArraySet() {
          this._array = [];
          this._set = hasNativeMap ? new Map() : Object.create(null);
        }

        ArraySet.fromArray = function ArraySet_fromArray(
          aArray,
          aAllowDuplicates
        ) {
          var set = new ArraySet();

          for (var i = 0, len = aArray.length; i < len; i++) {
            set.add(aArray[i], aAllowDuplicates);
          }

          return set;
        };

        ArraySet.prototype.size = function ArraySet_size() {
          return hasNativeMap
            ? this._set.size
            : Object.getOwnPropertyNames(this._set).length;
        };

        ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
          var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
          var isDuplicate = hasNativeMap
            ? this.has(aStr)
            : has.call(this._set, sStr);
          var idx = this._array.length;

          if (!isDuplicate || aAllowDuplicates) {
            this._array.push(aStr);
          }

          if (!isDuplicate) {
            if (hasNativeMap) {
              this._set.set(aStr, idx);
            } else {
              this._set[sStr] = idx;
            }
          }
        };

        ArraySet.prototype.has = function ArraySet_has(aStr) {
          if (hasNativeMap) {
            return this._set.has(aStr);
          } else {
            var sStr = util.toSetString(aStr);
            return has.call(this._set, sStr);
          }
        };

        ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
          if (hasNativeMap) {
            var idx = this._set.get(aStr);

            if (idx >= 0) {
              return idx;
            }
          } else {
            var sStr = util.toSetString(aStr);

            if (has.call(this._set, sStr)) {
              return this._set[sStr];
            }
          }

          throw new Error('"' + aStr + '" is not in the set.');
        };

        ArraySet.prototype.at = function ArraySet_at(aIdx) {
          if (aIdx >= 0 && aIdx < this._array.length) {
            return this._array[aIdx];
          }

          throw new Error("No element indexed by " + aIdx);
        };

        ArraySet.prototype.toArray = function ArraySet_toArray() {
          return this._array.slice();
        };

        exports.ArraySet = ArraySet;

        /***/
      },
      /* 151 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.needsWhitespace = needsWhitespace;
        exports.needsWhitespaceBefore = needsWhitespaceBefore;
        exports.needsWhitespaceAfter = needsWhitespaceAfter;
        exports.needsParens = needsParens;

        var whitespace = _interopRequireWildcard(__webpack_require__(398));

        var parens = _interopRequireWildcard(__webpack_require__(399));

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function expandAliases(obj) {
          var newObj = {};

          function add(type, func) {
            var fn = newObj[type];
            newObj[type] = fn
              ? function(node, parent, stack) {
                  var result = fn(node, parent, stack);
                  return result == null ? func(node, parent, stack) : result;
                }
              : func;
          }

          var _arr = Object.keys(obj);

          for (var _i = 0; _i < _arr.length; _i++) {
            var type = _arr[_i];
            var aliases = t().FLIPPED_ALIAS_KEYS[type];

            if (aliases) {
              for (
                var _iterator = aliases,
                  _isArray = Array.isArray(_iterator),
                  _i2 = 0,
                  _iterator = _isArray
                    ? _iterator
                    : _iterator[Symbol.iterator]();
                ;

              ) {
                var _ref;

                if (_isArray) {
                  if (_i2 >= _iterator.length) break;
                  _ref = _iterator[_i2++];
                } else {
                  _i2 = _iterator.next();
                  if (_i2.done) break;
                  _ref = _i2.value;
                }

                var alias = _ref;
                add(alias, obj[type]);
              }
            } else {
              add(type, obj[type]);
            }
          }

          return newObj;
        }

        var expandedParens = expandAliases(parens);
        var expandedWhitespaceNodes = expandAliases(whitespace.nodes);
        var expandedWhitespaceList = expandAliases(whitespace.list);

        function find(obj, node, parent, printStack) {
          var fn = obj[node.type];
          return fn ? fn(node, parent, printStack) : null;
        }

        function isOrHasCallExpression(node) {
          if (t().isCallExpression(node)) {
            return true;
          }

          if (t().isMemberExpression(node)) {
            return (
              isOrHasCallExpression(node.object) ||
              (!node.computed && isOrHasCallExpression(node.property))
            );
          } else {
            return false;
          }
        }

        function needsWhitespace(node, parent, type) {
          if (!node) return 0;

          if (t().isExpressionStatement(node)) {
            node = node.expression;
          }

          var linesInfo = find(expandedWhitespaceNodes, node, parent);

          if (!linesInfo) {
            var items = find(expandedWhitespaceList, node, parent);

            if (items) {
              for (var i = 0; i < items.length; i++) {
                linesInfo = needsWhitespace(items[i], node, type);
                if (linesInfo) break;
              }
            }
          }

          if (typeof linesInfo === "object" && linesInfo !== null) {
            return linesInfo[type] || 0;
          }

          return 0;
        }

        function needsWhitespaceBefore(node, parent) {
          return needsWhitespace(node, parent, "before");
        }

        function needsWhitespaceAfter(node, parent) {
          return needsWhitespace(node, parent, "after");
        }

        function needsParens(node, parent, printStack) {
          if (!parent) return false;

          if (t().isNewExpression(parent) && parent.callee === node) {
            if (isOrHasCallExpression(node)) return true;
          }

          return find(expandedParens, node, parent, printStack);
        }

        /***/
      },
      /* 152 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ImportSpecifier = ImportSpecifier;
        exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
        exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
        exports.ExportSpecifier = ExportSpecifier;
        exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
        exports.ExportAllDeclaration = ExportAllDeclaration;
        exports.ExportNamedDeclaration = ExportNamedDeclaration;
        exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
        exports.ImportDeclaration = ImportDeclaration;
        exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function ImportSpecifier(node) {
          if (node.importKind === "type" || node.importKind === "typeof") {
            this.word(node.importKind);
            this.space();
          }

          this.print(node.imported, node);

          if (node.local && node.local.name !== node.imported.name) {
            this.space();
            this.word("as");
            this.space();
            this.print(node.local, node);
          }
        }

        function ImportDefaultSpecifier(node) {
          this.print(node.local, node);
        }

        function ExportDefaultSpecifier(node) {
          this.print(node.exported, node);
        }

        function ExportSpecifier(node) {
          this.print(node.local, node);

          if (node.exported && node.local.name !== node.exported.name) {
            this.space();
            this.word("as");
            this.space();
            this.print(node.exported, node);
          }
        }

        function ExportNamespaceSpecifier(node) {
          this.token("*");
          this.space();
          this.word("as");
          this.space();
          this.print(node.exported, node);
        }

        function ExportAllDeclaration(node) {
          this.word("export");
          this.space();

          if (node.exportKind === "type") {
            this.word("type");
            this.space();
          }

          this.token("*");
          this.space();
          this.word("from");
          this.space();
          this.print(node.source, node);
          this.semicolon();
        }

        function ExportNamedDeclaration(node) {
          if (t().isClassDeclaration(node.declaration)) {
            this.printJoin(node.declaration.decorators, node);
          }

          this.word("export");
          this.space();
          ExportDeclaration.apply(this, arguments);
        }

        function ExportDefaultDeclaration(node) {
          if (t().isClassDeclaration(node.declaration)) {
            this.printJoin(node.declaration.decorators, node);
          }

          this.word("export");
          this.space();
          this.word("default");
          this.space();
          ExportDeclaration.apply(this, arguments);
        }

        function ExportDeclaration(node) {
          if (node.declaration) {
            var declar = node.declaration;
            this.print(declar, node);
            if (!t().isStatement(declar)) this.semicolon();
          } else {
            if (node.exportKind === "type") {
              this.word("type");
              this.space();
            }

            var specifiers = node.specifiers.slice(0);
            var hasSpecial = false;

            while (true) {
              var first = specifiers[0];

              if (
                t().isExportDefaultSpecifier(first) ||
                t().isExportNamespaceSpecifier(first)
              ) {
                hasSpecial = true;
                this.print(specifiers.shift(), node);

                if (specifiers.length) {
                  this.token(",");
                  this.space();
                }
              } else {
                break;
              }
            }

            if (specifiers.length || (!specifiers.length && !hasSpecial)) {
              this.token("{");

              if (specifiers.length) {
                this.space();
                this.printList(specifiers, node);
                this.space();
              }

              this.token("}");
            }

            if (node.source) {
              this.space();
              this.word("from");
              this.space();
              this.print(node.source, node);
            }

            this.semicolon();
          }
        }

        function ImportDeclaration(node) {
          this.word("import");
          this.space();

          if (node.importKind === "type" || node.importKind === "typeof") {
            this.word(node.importKind);
            this.space();
          }

          var specifiers = node.specifiers.slice(0);

          if (specifiers && specifiers.length) {
            while (true) {
              var first = specifiers[0];

              if (
                t().isImportDefaultSpecifier(first) ||
                t().isImportNamespaceSpecifier(first)
              ) {
                this.print(specifiers.shift(), node);

                if (specifiers.length) {
                  this.token(",");
                  this.space();
                }
              } else {
                break;
              }
            }

            if (specifiers.length) {
              this.token("{");
              this.space();
              this.printList(specifiers, node);
              this.space();
              this.token("}");
            }

            this.space();
            this.word("from");
            this.space();
          }

          this.print(node.source, node);
          this.semicolon();
        }

        function ImportNamespaceSpecifier(node) {
          this.token("*");
          this.space();
          this.word("as");
          this.space();
          this.print(node.local, node);
        }

        /***/
      },
      /* 153 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(global) {
          /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

          var base64 = __webpack_require__(407);

          var ieee754 = __webpack_require__(408);

          var isArray = __webpack_require__(409);

          exports.Buffer = Buffer;
          exports.SlowBuffer = SlowBuffer;
          exports.INSPECT_MAX_BYTES = 50;
          Buffer.TYPED_ARRAY_SUPPORT =
            global.TYPED_ARRAY_SUPPORT !== undefined
              ? global.TYPED_ARRAY_SUPPORT
              : typedArraySupport();
          exports.kMaxLength = kMaxLength();

          function typedArraySupport() {
            try {
              var arr = new Uint8Array(1);
              arr.__proto__ = {
                __proto__: Uint8Array.prototype,
                foo: function foo() {
                  return 42;
                }
              };
              return (
                arr.foo() === 42 &&
                typeof arr.subarray === "function" &&
                arr.subarray(1, 1).byteLength === 0
              );
            } catch (e) {
              return false;
            }
          }

          function kMaxLength() {
            return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
          }

          function createBuffer(that, length) {
            if (kMaxLength() < length) {
              throw new RangeError("Invalid typed array length");
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              that = new Uint8Array(length);
              that.__proto__ = Buffer.prototype;
            } else {
              if (that === null) {
                that = new Buffer(length);
              }

              that.length = length;
            }

            return that;
          }

          function Buffer(arg, encodingOrOffset, length) {
            if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
              return new Buffer(arg, encodingOrOffset, length);
            }

            if (typeof arg === "number") {
              if (typeof encodingOrOffset === "string") {
                throw new Error(
                  "If encoding is specified then the first argument must be a string"
                );
              }

              return allocUnsafe(this, arg);
            }

            return from(this, arg, encodingOrOffset, length);
          }

          Buffer.poolSize = 8192;

          Buffer._augment = function(arr) {
            arr.__proto__ = Buffer.prototype;
            return arr;
          };

          function from(that, value, encodingOrOffset, length) {
            if (typeof value === "number") {
              throw new TypeError('"value" argument must not be a number');
            }

            if (
              typeof ArrayBuffer !== "undefined" &&
              value instanceof ArrayBuffer
            ) {
              return fromArrayBuffer(that, value, encodingOrOffset, length);
            }

            if (typeof value === "string") {
              return fromString(that, value, encodingOrOffset);
            }

            return fromObject(that, value);
          }

          Buffer.from = function(value, encodingOrOffset, length) {
            return from(null, value, encodingOrOffset, length);
          };

          if (Buffer.TYPED_ARRAY_SUPPORT) {
            Buffer.prototype.__proto__ = Uint8Array.prototype;
            Buffer.__proto__ = Uint8Array;

            if (
              typeof Symbol !== "undefined" &&
              Symbol.species &&
              Buffer[Symbol.species] === Buffer
            ) {
              Object.defineProperty(Buffer, Symbol.species, {
                value: null,
                configurable: true
              });
            }
          }

          function assertSize(size) {
            if (typeof size !== "number") {
              throw new TypeError('"size" argument must be a number');
            } else if (size < 0) {
              throw new RangeError('"size" argument must not be negative');
            }
          }

          function alloc(that, size, fill, encoding) {
            assertSize(size);

            if (size <= 0) {
              return createBuffer(that, size);
            }

            if (fill !== undefined) {
              return typeof encoding === "string"
                ? createBuffer(that, size).fill(fill, encoding)
                : createBuffer(that, size).fill(fill);
            }

            return createBuffer(that, size);
          }

          Buffer.alloc = function(size, fill, encoding) {
            return alloc(null, size, fill, encoding);
          };

          function allocUnsafe(that, size) {
            assertSize(size);
            that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

            if (!Buffer.TYPED_ARRAY_SUPPORT) {
              for (var i = 0; i < size; ++i) {
                that[i] = 0;
              }
            }

            return that;
          }

          Buffer.allocUnsafe = function(size) {
            return allocUnsafe(null, size);
          };

          Buffer.allocUnsafeSlow = function(size) {
            return allocUnsafe(null, size);
          };

          function fromString(that, string, encoding) {
            if (typeof encoding !== "string" || encoding === "") {
              encoding = "utf8";
            }

            if (!Buffer.isEncoding(encoding)) {
              throw new TypeError('"encoding" must be a valid string encoding');
            }

            var length = byteLength(string, encoding) | 0;
            that = createBuffer(that, length);
            var actual = that.write(string, encoding);

            if (actual !== length) {
              that = that.slice(0, actual);
            }

            return that;
          }

          function fromArrayLike(that, array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0;
            that = createBuffer(that, length);

            for (var i = 0; i < length; i += 1) {
              that[i] = array[i] & 255;
            }

            return that;
          }

          function fromArrayBuffer(that, array, byteOffset, length) {
            array.byteLength;

            if (byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError("'offset' is out of bounds");
            }

            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError("'length' is out of bounds");
            }

            if (byteOffset === undefined && length === undefined) {
              array = new Uint8Array(array);
            } else if (length === undefined) {
              array = new Uint8Array(array, byteOffset);
            } else {
              array = new Uint8Array(array, byteOffset, length);
            }

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              that = array;
              that.__proto__ = Buffer.prototype;
            } else {
              that = fromArrayLike(that, array);
            }

            return that;
          }

          function fromObject(that, obj) {
            if (Buffer.isBuffer(obj)) {
              var len = checked(obj.length) | 0;
              that = createBuffer(that, len);

              if (that.length === 0) {
                return that;
              }

              obj.copy(that, 0, 0, len);
              return that;
            }

            if (obj) {
              if (
                (typeof ArrayBuffer !== "undefined" &&
                  obj.buffer instanceof ArrayBuffer) ||
                "length" in obj
              ) {
                if (typeof obj.length !== "number" || isnan(obj.length)) {
                  return createBuffer(that, 0);
                }

                return fromArrayLike(that, obj);
              }

              if (obj.type === "Buffer" && isArray(obj.data)) {
                return fromArrayLike(that, obj.data);
              }
            }

            throw new TypeError(
              "First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
            );
          }

          function checked(length) {
            if (length >= kMaxLength()) {
              throw new RangeError(
                "Attempt to allocate Buffer larger than maximum " +
                  "size: 0x" +
                  kMaxLength().toString(16) +
                  " bytes"
              );
            }

            return length | 0;
          }

          function SlowBuffer(length) {
            if (+length != length) {
              length = 0;
            }

            return Buffer.alloc(+length);
          }

          Buffer.isBuffer = function isBuffer(b) {
            return !!(b != null && b._isBuffer);
          };

          Buffer.compare = function compare(a, b) {
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
              throw new TypeError("Arguments must be Buffers");
            }

            if (a === b) return 0;
            var x = a.length;
            var y = b.length;

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i];
                y = b[i];
                break;
              }
            }

            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          };

          Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "latin1":
              case "binary":
              case "base64":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;

              default:
                return false;
            }
          };

          Buffer.concat = function concat(list, length) {
            if (!isArray(list)) {
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            }

            if (list.length === 0) {
              return Buffer.alloc(0);
            }

            var i;

            if (length === undefined) {
              length = 0;

              for (i = 0; i < list.length; ++i) {
                length += list[i].length;
              }
            }

            var buffer = Buffer.allocUnsafe(length);
            var pos = 0;

            for (i = 0; i < list.length; ++i) {
              var buf = list[i];

              if (!Buffer.isBuffer(buf)) {
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                );
              }

              buf.copy(buffer, pos);
              pos += buf.length;
            }

            return buffer;
          };

          function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) {
              return string.length;
            }

            if (
              typeof ArrayBuffer !== "undefined" &&
              typeof ArrayBuffer.isView === "function" &&
              (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
            ) {
              return string.byteLength;
            }

            if (typeof string !== "string") {
              string = "" + string;
            }

            var len = string.length;
            if (len === 0) return 0;
            var loweredCase = false;

            for (;;) {
              switch (encoding) {
                case "ascii":
                case "latin1":
                case "binary":
                  return len;

                case "utf8":
                case "utf-8":
                case undefined:
                  return utf8ToBytes(string).length;

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return len * 2;

                case "hex":
                  return len >>> 1;

                case "base64":
                  return base64ToBytes(string).length;

                default:
                  if (loweredCase) return utf8ToBytes(string).length;
                  encoding = ("" + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          }

          Buffer.byteLength = byteLength;

          function slowToString(encoding, start, end) {
            var loweredCase = false;

            if (start === undefined || start < 0) {
              start = 0;
            }

            if (start > this.length) {
              return "";
            }

            if (end === undefined || end > this.length) {
              end = this.length;
            }

            if (end <= 0) {
              return "";
            }

            end >>>= 0;
            start >>>= 0;

            if (end <= start) {
              return "";
            }

            if (!encoding) encoding = "utf8";

            while (true) {
              switch (encoding) {
                case "hex":
                  return hexSlice(this, start, end);

                case "utf8":
                case "utf-8":
                  return utf8Slice(this, start, end);

                case "ascii":
                  return asciiSlice(this, start, end);

                case "latin1":
                case "binary":
                  return latin1Slice(this, start, end);

                case "base64":
                  return base64Slice(this, start, end);

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return utf16leSlice(this, start, end);

                default:
                  if (loweredCase)
                    throw new TypeError("Unknown encoding: " + encoding);
                  encoding = (encoding + "").toLowerCase();
                  loweredCase = true;
              }
            }
          }

          Buffer.prototype._isBuffer = true;

          function swap(b, n, m) {
            var i = b[n];
            b[n] = b[m];
            b[m] = i;
          }

          Buffer.prototype.swap16 = function swap16() {
            var len = this.length;

            if (len % 2 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 16-bits");
            }

            for (var i = 0; i < len; i += 2) {
              swap(this, i, i + 1);
            }

            return this;
          };

          Buffer.prototype.swap32 = function swap32() {
            var len = this.length;

            if (len % 4 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 32-bits");
            }

            for (var i = 0; i < len; i += 4) {
              swap(this, i, i + 3);
              swap(this, i + 1, i + 2);
            }

            return this;
          };

          Buffer.prototype.swap64 = function swap64() {
            var len = this.length;

            if (len % 8 !== 0) {
              throw new RangeError("Buffer size must be a multiple of 64-bits");
            }

            for (var i = 0; i < len; i += 8) {
              swap(this, i, i + 7);
              swap(this, i + 1, i + 6);
              swap(this, i + 2, i + 5);
              swap(this, i + 3, i + 4);
            }

            return this;
          };

          Buffer.prototype.toString = function toString() {
            var length = this.length | 0;
            if (length === 0) return "";
            if (arguments.length === 0) return utf8Slice(this, 0, length);
            return slowToString.apply(this, arguments);
          };

          Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b))
              throw new TypeError("Argument must be a Buffer");
            if (this === b) return true;
            return Buffer.compare(this, b) === 0;
          };

          Buffer.prototype.inspect = function inspect() {
            var str = "";
            var max = exports.INSPECT_MAX_BYTES;

            if (this.length > 0) {
              str = this.toString("hex", 0, max)
                .match(/.{2}/g)
                .join(" ");
              if (this.length > max) str += " ... ";
            }

            return "<Buffer " + str + ">";
          };

          Buffer.prototype.compare = function compare(
            target,
            start,
            end,
            thisStart,
            thisEnd
          ) {
            if (!Buffer.isBuffer(target)) {
              throw new TypeError("Argument must be a Buffer");
            }

            if (start === undefined) {
              start = 0;
            }

            if (end === undefined) {
              end = target ? target.length : 0;
            }

            if (thisStart === undefined) {
              thisStart = 0;
            }

            if (thisEnd === undefined) {
              thisEnd = this.length;
            }

            if (
              start < 0 ||
              end > target.length ||
              thisStart < 0 ||
              thisEnd > this.length
            ) {
              throw new RangeError("out of range index");
            }

            if (thisStart >= thisEnd && start >= end) {
              return 0;
            }

            if (thisStart >= thisEnd) {
              return -1;
            }

            if (start >= end) {
              return 1;
            }

            start >>>= 0;
            end >>>= 0;
            thisStart >>>= 0;
            thisEnd >>>= 0;
            if (this === target) return 0;
            var x = thisEnd - thisStart;
            var y = end - start;
            var len = Math.min(x, y);
            var thisCopy = this.slice(thisStart, thisEnd);
            var targetCopy = target.slice(start, end);

            for (var i = 0; i < len; ++i) {
              if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i];
                y = targetCopy[i];
                break;
              }
            }

            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          };

          function bidirectionalIndexOf(
            buffer,
            val,
            byteOffset,
            encoding,
            dir
          ) {
            if (buffer.length === 0) return -1;

            if (typeof byteOffset === "string") {
              encoding = byteOffset;
              byteOffset = 0;
            } else if (byteOffset > 0x7fffffff) {
              byteOffset = 0x7fffffff;
            } else if (byteOffset < -0x80000000) {
              byteOffset = -0x80000000;
            }

            byteOffset = +byteOffset;

            if (isNaN(byteOffset)) {
              byteOffset = dir ? 0 : buffer.length - 1;
            }

            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

            if (byteOffset >= buffer.length) {
              if (dir) return -1;
              else byteOffset = buffer.length - 1;
            } else if (byteOffset < 0) {
              if (dir) byteOffset = 0;
              else return -1;
            }

            if (typeof val === "string") {
              val = Buffer.from(val, encoding);
            }

            if (Buffer.isBuffer(val)) {
              if (val.length === 0) {
                return -1;
              }

              return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
            } else if (typeof val === "number") {
              val = val & 0xff;

              if (
                Buffer.TYPED_ARRAY_SUPPORT &&
                typeof Uint8Array.prototype.indexOf === "function"
              ) {
                if (dir) {
                  return Uint8Array.prototype.indexOf.call(
                    buffer,
                    val,
                    byteOffset
                  );
                } else {
                  return Uint8Array.prototype.lastIndexOf.call(
                    buffer,
                    val,
                    byteOffset
                  );
                }
              }

              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
            }

            throw new TypeError("val must be string, number or Buffer");
          }

          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1;
            var arrLength = arr.length;
            var valLength = val.length;

            if (encoding !== undefined) {
              encoding = String(encoding).toLowerCase();

              if (
                encoding === "ucs2" ||
                encoding === "ucs-2" ||
                encoding === "utf16le" ||
                encoding === "utf-16le"
              ) {
                if (arr.length < 2 || val.length < 2) {
                  return -1;
                }

                indexSize = 2;
                arrLength /= 2;
                valLength /= 2;
                byteOffset /= 2;
              }
            }

            function read(buf, i) {
              if (indexSize === 1) {
                return buf[i];
              } else {
                return buf.readUInt16BE(i * indexSize);
              }
            }

            var i;

            if (dir) {
              var foundIndex = -1;

              for (i = byteOffset; i < arrLength; i++) {
                if (
                  read(arr, i) ===
                  read(val, foundIndex === -1 ? 0 : i - foundIndex)
                ) {
                  if (foundIndex === -1) foundIndex = i;
                  if (i - foundIndex + 1 === valLength)
                    return foundIndex * indexSize;
                } else {
                  if (foundIndex !== -1) i -= i - foundIndex;
                  foundIndex = -1;
                }
              }
            } else {
              if (byteOffset + valLength > arrLength)
                byteOffset = arrLength - valLength;

              for (i = byteOffset; i >= 0; i--) {
                var found = true;

                for (var j = 0; j < valLength; j++) {
                  if (read(arr, i + j) !== read(val, j)) {
                    found = false;
                    break;
                  }
                }

                if (found) return i;
              }
            }

            return -1;
          }

          Buffer.prototype.includes = function includes(
            val,
            byteOffset,
            encoding
          ) {
            return this.indexOf(val, byteOffset, encoding) !== -1;
          };

          Buffer.prototype.indexOf = function indexOf(
            val,
            byteOffset,
            encoding
          ) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
          };

          Buffer.prototype.lastIndexOf = function lastIndexOf(
            val,
            byteOffset,
            encoding
          ) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
          };

          function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0;
            var remaining = buf.length - offset;

            if (!length) {
              length = remaining;
            } else {
              length = Number(length);

              if (length > remaining) {
                length = remaining;
              }
            }

            var strLen = string.length;
            if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");

            if (length > strLen / 2) {
              length = strLen / 2;
            }

            for (var i = 0; i < length; ++i) {
              var parsed = parseInt(string.substr(i * 2, 2), 16);
              if (isNaN(parsed)) return i;
              buf[offset + i] = parsed;
            }

            return i;
          }

          function utf8Write(buf, string, offset, length) {
            return blitBuffer(
              utf8ToBytes(string, buf.length - offset),
              buf,
              offset,
              length
            );
          }

          function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length);
          }

          function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length);
          }

          function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length);
          }

          function ucs2Write(buf, string, offset, length) {
            return blitBuffer(
              utf16leToBytes(string, buf.length - offset),
              buf,
              offset,
              length
            );
          }

          Buffer.prototype.write = function write(
            string,
            offset,
            length,
            encoding
          ) {
            if (offset === undefined) {
              encoding = "utf8";
              length = this.length;
              offset = 0;
            } else if (length === undefined && typeof offset === "string") {
              encoding = offset;
              length = this.length;
              offset = 0;
            } else if (isFinite(offset)) {
              offset = offset | 0;

              if (isFinite(length)) {
                length = length | 0;
                if (encoding === undefined) encoding = "utf8";
              } else {
                encoding = length;
                length = undefined;
              }
            } else {
              throw new Error(
                "Buffer.write(string, encoding, offset[, length]) is no longer supported"
              );
            }

            var remaining = this.length - offset;
            if (length === undefined || length > remaining) length = remaining;

            if (
              (string.length > 0 && (length < 0 || offset < 0)) ||
              offset > this.length
            ) {
              throw new RangeError("Attempt to write outside buffer bounds");
            }

            if (!encoding) encoding = "utf8";
            var loweredCase = false;

            for (;;) {
              switch (encoding) {
                case "hex":
                  return hexWrite(this, string, offset, length);

                case "utf8":
                case "utf-8":
                  return utf8Write(this, string, offset, length);

                case "ascii":
                  return asciiWrite(this, string, offset, length);

                case "latin1":
                case "binary":
                  return latin1Write(this, string, offset, length);

                case "base64":
                  return base64Write(this, string, offset, length);

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return ucs2Write(this, string, offset, length);

                default:
                  if (loweredCase)
                    throw new TypeError("Unknown encoding: " + encoding);
                  encoding = ("" + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          };

          Buffer.prototype.toJSON = function toJSON() {
            return {
              type: "Buffer",
              data: Array.prototype.slice.call(this._arr || this, 0)
            };
          };

          function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
              return base64.fromByteArray(buf);
            } else {
              return base64.fromByteArray(buf.slice(start, end));
            }
          }

          function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end);
            var res = [];
            var i = start;

            while (i < end) {
              var firstByte = buf[i];
              var codePoint = null;
              var bytesPerSequence =
                firstByte > 0xef
                  ? 4
                  : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;

              if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint;

                switch (bytesPerSequence) {
                  case 1:
                    if (firstByte < 0x80) {
                      codePoint = firstByte;
                    }

                    break;

                  case 2:
                    secondByte = buf[i + 1];

                    if ((secondByte & 0xc0) === 0x80) {
                      tempCodePoint =
                        ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);

                      if (tempCodePoint > 0x7f) {
                        codePoint = tempCodePoint;
                      }
                    }

                    break;

                  case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];

                    if (
                      (secondByte & 0xc0) === 0x80 &&
                      (thirdByte & 0xc0) === 0x80
                    ) {
                      tempCodePoint =
                        ((firstByte & 0xf) << 0xc) |
                        ((secondByte & 0x3f) << 0x6) |
                        (thirdByte & 0x3f);

                      if (
                        tempCodePoint > 0x7ff &&
                        (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
                      ) {
                        codePoint = tempCodePoint;
                      }
                    }

                    break;

                  case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];

                    if (
                      (secondByte & 0xc0) === 0x80 &&
                      (thirdByte & 0xc0) === 0x80 &&
                      (fourthByte & 0xc0) === 0x80
                    ) {
                      tempCodePoint =
                        ((firstByte & 0xf) << 0x12) |
                        ((secondByte & 0x3f) << 0xc) |
                        ((thirdByte & 0x3f) << 0x6) |
                        (fourthByte & 0x3f);

                      if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                        codePoint = tempCodePoint;
                      }
                    }
                }
              }

              if (codePoint === null) {
                codePoint = 0xfffd;
                bytesPerSequence = 1;
              } else if (codePoint > 0xffff) {
                codePoint -= 0x10000;
                res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
                codePoint = 0xdc00 | (codePoint & 0x3ff);
              }

              res.push(codePoint);
              i += bytesPerSequence;
            }

            return decodeCodePointsArray(res);
          }

          var MAX_ARGUMENTS_LENGTH = 0x1000;

          function decodeCodePointsArray(codePoints) {
            var len = codePoints.length;

            if (len <= MAX_ARGUMENTS_LENGTH) {
              return String.fromCharCode.apply(String, codePoints);
            }

            var res = "";
            var i = 0;

            while (i < len) {
              res += String.fromCharCode.apply(
                String,
                codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
              );
            }

            return res;
          }

          function asciiSlice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i] & 0x7f);
            }

            return ret;
          }

          function latin1Slice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i]);
            }

            return ret;
          }

          function hexSlice(buf, start, end) {
            var len = buf.length;
            if (!start || start < 0) start = 0;
            if (!end || end < 0 || end > len) end = len;
            var out = "";

            for (var i = start; i < end; ++i) {
              out += toHex(buf[i]);
            }

            return out;
          }

          function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end);
            var res = "";

            for (var i = 0; i < bytes.length; i += 2) {
              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
            }

            return res;
          }

          Buffer.prototype.slice = function slice(start, end) {
            var len = this.length;
            start = ~~start;
            end = end === undefined ? len : ~~end;

            if (start < 0) {
              start += len;
              if (start < 0) start = 0;
            } else if (start > len) {
              start = len;
            }

            if (end < 0) {
              end += len;
              if (end < 0) end = 0;
            } else if (end > len) {
              end = len;
            }

            if (end < start) end = start;
            var newBuf;

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              newBuf = this.subarray(start, end);
              newBuf.__proto__ = Buffer.prototype;
            } else {
              var sliceLen = end - start;
              newBuf = new Buffer(sliceLen, undefined);

              for (var i = 0; i < sliceLen; ++i) {
                newBuf[i] = this[i + start];
              }
            }

            return newBuf;
          };

          function checkOffset(offset, ext, length) {
            if (offset % 1 !== 0 || offset < 0)
              throw new RangeError("offset is not uint");
            if (offset + ext > length)
              throw new RangeError("Trying to access beyond buffer length");
          }

          Buffer.prototype.readUIntLE = function readUIntLE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;

            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }

            return val;
          };

          Buffer.prototype.readUIntBE = function readUIntBE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;

            if (!noAssert) {
              checkOffset(offset, byteLength, this.length);
            }

            var val = this[offset + --byteLength];
            var mul = 1;

            while (byteLength > 0 && (mul *= 0x100)) {
              val += this[offset + --byteLength] * mul;
            }

            return val;
          };

          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length);
            return this[offset];
          };

          Buffer.prototype.readUInt16LE = function readUInt16LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] | (this[offset + 1] << 8);
          };

          Buffer.prototype.readUInt16BE = function readUInt16BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            return (this[offset] << 8) | this[offset + 1];
          };

          Buffer.prototype.readUInt32LE = function readUInt32LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (
              (this[offset] |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16)) +
              this[offset + 3] * 0x1000000
            );
          };

          Buffer.prototype.readUInt32BE = function readUInt32BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (
              this[offset] * 0x1000000 +
              ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
            );
          };

          Buffer.prototype.readIntLE = function readIntLE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;

            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }

            mul *= 0x80;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val;
          };

          Buffer.prototype.readIntBE = function readIntBE(
            offset,
            byteLength,
            noAssert
          ) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var i = byteLength;
            var mul = 1;
            var val = this[offset + --i];

            while (i > 0 && (mul *= 0x100)) {
              val += this[offset + --i] * mul;
            }

            mul *= 0x80;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val;
          };

          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length);
            if (!(this[offset] & 0x80)) return this[offset];
            return (0xff - this[offset] + 1) * -1;
          };

          Buffer.prototype.readInt16LE = function readInt16LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset] | (this[offset + 1] << 8);
            return val & 0x8000 ? val | 0xffff0000 : val;
          };

          Buffer.prototype.readInt16BE = function readInt16BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset + 1] | (this[offset] << 8);
            return val & 0x8000 ? val | 0xffff0000 : val;
          };

          Buffer.prototype.readInt32LE = function readInt32LE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (
              this[offset] |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16) |
              (this[offset + 3] << 24)
            );
          };

          Buffer.prototype.readInt32BE = function readInt32BE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (
              (this[offset] << 24) |
              (this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3]
            );
          };

          Buffer.prototype.readFloatLE = function readFloatLE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, true, 23, 4);
          };

          Buffer.prototype.readFloatBE = function readFloatBE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, false, 23, 4);
          };

          Buffer.prototype.readDoubleLE = function readDoubleLE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, true, 52, 8);
          };

          Buffer.prototype.readDoubleBE = function readDoubleBE(
            offset,
            noAssert
          ) {
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, false, 52, 8);
          };

          function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf))
              throw new TypeError(
                '"buffer" argument must be a Buffer instance'
              );
            if (value > max || value < min)
              throw new RangeError('"value" argument is out of bounds');
            if (offset + ext > buf.length)
              throw new RangeError("Index out of range");
          }

          Buffer.prototype.writeUIntLE = function writeUIntLE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            byteLength = byteLength | 0;

            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            var mul = 1;
            var i = 0;
            this[offset] = value & 0xff;

            while (++i < byteLength && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeUIntBE = function writeUIntBE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            byteLength = byteLength | 0;

            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            var i = byteLength - 1;
            var mul = 1;
            this[offset + i] = value & 0xff;

            while (--i >= 0 && (mul *= 0x100)) {
              this[offset + i] = (value / mul) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeUInt8 = function writeUInt8(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
            this[offset] = value & 0xff;
            return offset + 1;
          };

          function objectWriteUInt16(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffff + value + 1;

            for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
              buf[offset + i] =
                (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                ((littleEndian ? i : 1 - i) * 8);
            }
          }

          Buffer.prototype.writeUInt16LE = function writeUInt16LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
            } else {
              objectWriteUInt16(this, value, offset, true);
            }

            return offset + 2;
          };

          Buffer.prototype.writeUInt16BE = function writeUInt16BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
            } else {
              objectWriteUInt16(this, value, offset, false);
            }

            return offset + 2;
          };

          function objectWriteUInt32(buf, value, offset, littleEndian) {
            if (value < 0) value = 0xffffffff + value + 1;

            for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
              buf[offset + i] =
                (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff;
            }
          }

          Buffer.prototype.writeUInt32LE = function writeUInt32LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, true);
            }

            return offset + 4;
          };

          Buffer.prototype.writeUInt32BE = function writeUInt32BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, false);
            }

            return offset + 4;
          };

          Buffer.prototype.writeIntLE = function writeIntLE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;

            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);
              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }

            var i = 0;
            var mul = 1;
            var sub = 0;
            this[offset] = value & 0xff;

            while (++i < byteLength && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1;
              }

              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeIntBE = function writeIntBE(
            value,
            offset,
            byteLength,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;

            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);
              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }

            var i = byteLength - 1;
            var mul = 1;
            var sub = 0;
            this[offset + i] = value & 0xff;

            while (--i >= 0 && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1;
              }

              this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeInt8 = function writeInt8(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
            if (value < 0) value = 0xff + value + 1;
            this[offset] = value & 0xff;
            return offset + 1;
          };

          Buffer.prototype.writeInt16LE = function writeInt16LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
            } else {
              objectWriteUInt16(this, value, offset, true);
            }

            return offset + 2;
          };

          Buffer.prototype.writeInt16BE = function writeInt16BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 8;
              this[offset + 1] = value & 0xff;
            } else {
              objectWriteUInt16(this, value, offset, false);
            }

            return offset + 2;
          };

          Buffer.prototype.writeInt32LE = function writeInt32LE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert)
              checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value & 0xff;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
            } else {
              objectWriteUInt32(this, value, offset, true);
            }

            return offset + 4;
          };

          Buffer.prototype.writeInt32BE = function writeInt32BE(
            value,
            offset,
            noAssert
          ) {
            value = +value;
            offset = offset | 0;
            if (!noAssert)
              checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
            if (value < 0) value = 0xffffffff + value + 1;

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 0xff;
            } else {
              objectWriteUInt32(this, value, offset, false);
            }

            return offset + 4;
          };

          function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length)
              throw new RangeError("Index out of range");
            if (offset < 0) throw new RangeError("Index out of range");
          }

          function writeFloat(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(
                buf,
                value,
                offset,
                4,
                3.4028234663852886e38,
                -3.4028234663852886e38
              );
            }

            ieee754.write(buf, value, offset, littleEndian, 23, 4);
            return offset + 4;
          }

          Buffer.prototype.writeFloatLE = function writeFloatLE(
            value,
            offset,
            noAssert
          ) {
            return writeFloat(this, value, offset, true, noAssert);
          };

          Buffer.prototype.writeFloatBE = function writeFloatBE(
            value,
            offset,
            noAssert
          ) {
            return writeFloat(this, value, offset, false, noAssert);
          };

          function writeDouble(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
              checkIEEE754(
                buf,
                value,
                offset,
                8,
                1.7976931348623157e308,
                -1.7976931348623157e308
              );
            }

            ieee754.write(buf, value, offset, littleEndian, 52, 8);
            return offset + 8;
          }

          Buffer.prototype.writeDoubleLE = function writeDoubleLE(
            value,
            offset,
            noAssert
          ) {
            return writeDouble(this, value, offset, true, noAssert);
          };

          Buffer.prototype.writeDoubleBE = function writeDoubleBE(
            value,
            offset,
            noAssert
          ) {
            return writeDouble(this, value, offset, false, noAssert);
          };

          Buffer.prototype.copy = function copy(
            target,
            targetStart,
            start,
            end
          ) {
            if (!start) start = 0;
            if (!end && end !== 0) end = this.length;
            if (targetStart >= target.length) targetStart = target.length;
            if (!targetStart) targetStart = 0;
            if (end > 0 && end < start) end = start;
            if (end === start) return 0;
            if (target.length === 0 || this.length === 0) return 0;

            if (targetStart < 0) {
              throw new RangeError("targetStart out of bounds");
            }

            if (start < 0 || start >= this.length)
              throw new RangeError("sourceStart out of bounds");
            if (end < 0) throw new RangeError("sourceEnd out of bounds");
            if (end > this.length) end = this.length;

            if (target.length - targetStart < end - start) {
              end = target.length - targetStart + start;
            }

            var len = end - start;
            var i;

            if (this === target && start < targetStart && targetStart < end) {
              for (i = len - 1; i >= 0; --i) {
                target[i + targetStart] = this[i + start];
              }
            } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
              for (i = 0; i < len; ++i) {
                target[i + targetStart] = this[i + start];
              }
            } else {
              Uint8Array.prototype.set.call(
                target,
                this.subarray(start, start + len),
                targetStart
              );
            }

            return len;
          };

          Buffer.prototype.fill = function fill(val, start, end, encoding) {
            if (typeof val === "string") {
              if (typeof start === "string") {
                encoding = start;
                start = 0;
                end = this.length;
              } else if (typeof end === "string") {
                encoding = end;
                end = this.length;
              }

              if (val.length === 1) {
                var code = val.charCodeAt(0);

                if (code < 256) {
                  val = code;
                }
              }

              if (encoding !== undefined && typeof encoding !== "string") {
                throw new TypeError("encoding must be a string");
              }

              if (
                typeof encoding === "string" &&
                !Buffer.isEncoding(encoding)
              ) {
                throw new TypeError("Unknown encoding: " + encoding);
              }
            } else if (typeof val === "number") {
              val = val & 255;
            }

            if (start < 0 || this.length < start || this.length < end) {
              throw new RangeError("Out of range index");
            }

            if (end <= start) {
              return this;
            }

            start = start >>> 0;
            end = end === undefined ? this.length : end >>> 0;
            if (!val) val = 0;
            var i;

            if (typeof val === "number") {
              for (i = start; i < end; ++i) {
                this[i] = val;
              }
            } else {
              var bytes = Buffer.isBuffer(val)
                ? val
                : utf8ToBytes(new Buffer(val, encoding).toString());
              var len = bytes.length;

              for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len];
              }
            }

            return this;
          };

          var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

          function base64clean(str) {
            str = stringtrim(str).replace(INVALID_BASE64_RE, "");
            if (str.length < 2) return "";

            while (str.length % 4 !== 0) {
              str = str + "=";
            }

            return str;
          }

          function stringtrim(str) {
            if (str.trim) return str.trim();
            return str.replace(/^\s+|\s+$/g, "");
          }

          function toHex(n) {
            if (n < 16) return "0" + n.toString(16);
            return n.toString(16);
          }

          function utf8ToBytes(string, units) {
            units = units || Infinity;
            var codePoint;
            var length = string.length;
            var leadSurrogate = null;
            var bytes = [];

            for (var i = 0; i < length; ++i) {
              codePoint = string.charCodeAt(i);

              if (codePoint > 0xd7ff && codePoint < 0xe000) {
                if (!leadSurrogate) {
                  if (codePoint > 0xdbff) {
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    continue;
                  } else if (i + 1 === length) {
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    continue;
                  }

                  leadSurrogate = codePoint;
                  continue;
                }

                if (codePoint < 0xdc00) {
                  if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                  leadSurrogate = codePoint;
                  continue;
                }

                codePoint =
                  (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +
                  0x10000;
              } else if (leadSurrogate) {
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
              }

              leadSurrogate = null;

              if (codePoint < 0x80) {
                if ((units -= 1) < 0) break;
                bytes.push(codePoint);
              } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break;
                bytes.push(
                  (codePoint >> 0x6) | 0xc0,
                  (codePoint & 0x3f) | 0x80
                );
              } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break;
                bytes.push(
                  (codePoint >> 0xc) | 0xe0,
                  ((codePoint >> 0x6) & 0x3f) | 0x80,
                  (codePoint & 0x3f) | 0x80
                );
              } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break;
                bytes.push(
                  (codePoint >> 0x12) | 0xf0,
                  ((codePoint >> 0xc) & 0x3f) | 0x80,
                  ((codePoint >> 0x6) & 0x3f) | 0x80,
                  (codePoint & 0x3f) | 0x80
                );
              } else {
                throw new Error("Invalid code point");
              }
            }

            return bytes;
          }

          function asciiToBytes(str) {
            var byteArray = [];

            for (var i = 0; i < str.length; ++i) {
              byteArray.push(str.charCodeAt(i) & 0xff);
            }

            return byteArray;
          }

          function utf16leToBytes(str, units) {
            var c, hi, lo;
            var byteArray = [];

            for (var i = 0; i < str.length; ++i) {
              if ((units -= 2) < 0) break;
              c = str.charCodeAt(i);
              hi = c >> 8;
              lo = c % 256;
              byteArray.push(lo);
              byteArray.push(hi);
            }

            return byteArray;
          }

          function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str));
          }

          function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
              if (i + offset >= dst.length || i >= src.length) break;
              dst[i + offset] = src[i];
            }

            return i;
          }

          function isnan(val) {
            return val !== val;
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(18)));

        /***/
      },
      /* 154 */
      /***/ function(module, exports, __webpack_require__) {
        var cssKeywords = __webpack_require__(425);

        var reverseKeywords = {};

        for (var key in cssKeywords) {
          if (cssKeywords.hasOwnProperty(key)) {
            reverseKeywords[cssKeywords[key]] = key;
          }
        }

        var convert = (module.exports = {
          rgb: {
            channels: 3,
            labels: "rgb"
          },
          hsl: {
            channels: 3,
            labels: "hsl"
          },
          hsv: {
            channels: 3,
            labels: "hsv"
          },
          hwb: {
            channels: 3,
            labels: "hwb"
          },
          cmyk: {
            channels: 4,
            labels: "cmyk"
          },
          xyz: {
            channels: 3,
            labels: "xyz"
          },
          lab: {
            channels: 3,
            labels: "lab"
          },
          lch: {
            channels: 3,
            labels: "lch"
          },
          hex: {
            channels: 1,
            labels: ["hex"]
          },
          keyword: {
            channels: 1,
            labels: ["keyword"]
          },
          ansi16: {
            channels: 1,
            labels: ["ansi16"]
          },
          ansi256: {
            channels: 1,
            labels: ["ansi256"]
          },
          hcg: {
            channels: 3,
            labels: ["h", "c", "g"]
          },
          apple: {
            channels: 3,
            labels: ["r16", "g16", "b16"]
          },
          gray: {
            channels: 1,
            labels: ["gray"]
          }
        });

        for (var model in convert) {
          if (convert.hasOwnProperty(model)) {
            if (!("channels" in convert[model])) {
              throw new Error("missing channels property: " + model);
            }

            if (!("labels" in convert[model])) {
              throw new Error("missing channel labels property: " + model);
            }

            if (convert[model].labels.length !== convert[model].channels) {
              throw new Error("channel and label counts mismatch: " + model);
            }

            var channels = convert[model].channels;
            var labels = convert[model].labels;
            delete convert[model].channels;
            delete convert[model].labels;
            Object.defineProperty(convert[model], "channels", {
              value: channels
            });
            Object.defineProperty(convert[model], "labels", {
              value: labels
            });
          }
        }

        convert.rgb.hsl = function(rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var min = Math.min(r, g, b);
          var max = Math.max(r, g, b);
          var delta = max - min;
          var h;
          var s;
          var l;

          if (max === min) {
            h = 0;
          } else if (r === max) {
            h = (g - b) / delta;
          } else if (g === max) {
            h = 2 + (b - r) / delta;
          } else if (b === max) {
            h = 4 + (r - g) / delta;
          }

          h = Math.min(h * 60, 360);

          if (h < 0) {
            h += 360;
          }

          l = (min + max) / 2;

          if (max === min) {
            s = 0;
          } else if (l <= 0.5) {
            s = delta / (max + min);
          } else {
            s = delta / (2 - max - min);
          }

          return [h, s * 100, l * 100];
        };

        convert.rgb.hsv = function(rgb) {
          var r = rgb[0];
          var g = rgb[1];
          var b = rgb[2];
          var min = Math.min(r, g, b);
          var max = Math.max(r, g, b);
          var delta = max - min;
          var h;
          var s;
          var v;

          if (max === 0) {
            s = 0;
          } else {
            s = delta / max * 1000 / 10;
          }

          if (max === min) {
            h = 0;
          } else if (r === max) {
            h = (g - b) / delta;
          } else if (g === max) {
            h = 2 + (b - r) / delta;
          } else if (b === max) {
            h = 4 + (r - g) / delta;
          }

          h = Math.min(h * 60, 360);

          if (h < 0) {
            h += 360;
          }

          v = max / 255 * 1000 / 10;
          return [h, s, v];
        };

        convert.rgb.hwb = function(rgb) {
          var r = rgb[0];
          var g = rgb[1];
          var b = rgb[2];
          var h = convert.rgb.hsl(rgb)[0];
          var w = 1 / 255 * Math.min(r, Math.min(g, b));
          b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
          return [h, w * 100, b * 100];
        };

        convert.rgb.cmyk = function(rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var c;
          var m;
          var y;
          var k;
          k = Math.min(1 - r, 1 - g, 1 - b);
          c = (1 - r - k) / (1 - k) || 0;
          m = (1 - g - k) / (1 - k) || 0;
          y = (1 - b - k) / (1 - k) || 0;
          return [c * 100, m * 100, y * 100, k * 100];
        };

        function comparativeDistance(x, y) {
          return (
            Math.pow(x[0] - y[0], 2) +
            Math.pow(x[1] - y[1], 2) +
            Math.pow(x[2] - y[2], 2)
          );
        }

        convert.rgb.keyword = function(rgb) {
          var reversed = reverseKeywords[rgb];

          if (reversed) {
            return reversed;
          }

          var currentClosestDistance = Infinity;
          var currentClosestKeyword;

          for (var keyword in cssKeywords) {
            if (cssKeywords.hasOwnProperty(keyword)) {
              var value = cssKeywords[keyword];
              var distance = comparativeDistance(rgb, value);

              if (distance < currentClosestDistance) {
                currentClosestDistance = distance;
                currentClosestKeyword = keyword;
              }
            }
          }

          return currentClosestKeyword;
        };

        convert.keyword.rgb = function(keyword) {
          return cssKeywords[keyword];
        };

        convert.rgb.xyz = function(rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
          g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
          b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
          var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
          var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
          var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
          return [x * 100, y * 100, z * 100];
        };

        convert.rgb.lab = function(rgb) {
          var xyz = convert.rgb.xyz(rgb);
          var x = xyz[0];
          var y = xyz[1];
          var z = xyz[2];
          var l;
          var a;
          var b;
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
          y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
          z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
          l = 116 * y - 16;
          a = 500 * (x - y);
          b = 200 * (y - z);
          return [l, a, b];
        };

        convert.hsl.rgb = function(hsl) {
          var h = hsl[0] / 360;
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var t1;
          var t2;
          var t3;
          var rgb;
          var val;

          if (s === 0) {
            val = l * 255;
            return [val, val, val];
          }

          if (l < 0.5) {
            t2 = l * (1 + s);
          } else {
            t2 = l + s - l * s;
          }

          t1 = 2 * l - t2;
          rgb = [0, 0, 0];

          for (var i = 0; i < 3; i++) {
            t3 = h + 1 / 3 * -(i - 1);

            if (t3 < 0) {
              t3++;
            }

            if (t3 > 1) {
              t3--;
            }

            if (6 * t3 < 1) {
              val = t1 + (t2 - t1) * 6 * t3;
            } else if (2 * t3 < 1) {
              val = t2;
            } else if (3 * t3 < 2) {
              val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
            } else {
              val = t1;
            }

            rgb[i] = val * 255;
          }

          return rgb;
        };

        convert.hsl.hsv = function(hsl) {
          var h = hsl[0];
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var smin = s;
          var lmin = Math.max(l, 0.01);
          var sv;
          var v;
          l *= 2;
          s *= l <= 1 ? l : 2 - l;
          smin *= lmin <= 1 ? lmin : 2 - lmin;
          v = (l + s) / 2;
          sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
          return [h, sv * 100, v * 100];
        };

        convert.hsv.rgb = function(hsv) {
          var h = hsv[0] / 60;
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var hi = Math.floor(h) % 6;
          var f = h - Math.floor(h);
          var p = 255 * v * (1 - s);
          var q = 255 * v * (1 - s * f);
          var t = 255 * v * (1 - s * (1 - f));
          v *= 255;

          switch (hi) {
            case 0:
              return [v, t, p];

            case 1:
              return [q, v, p];

            case 2:
              return [p, v, t];

            case 3:
              return [p, q, v];

            case 4:
              return [t, p, v];

            case 5:
              return [v, p, q];
          }
        };

        convert.hsv.hsl = function(hsv) {
          var h = hsv[0];
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var vmin = Math.max(v, 0.01);
          var lmin;
          var sl;
          var l;
          l = (2 - s) * v;
          lmin = (2 - s) * vmin;
          sl = s * vmin;
          sl /= lmin <= 1 ? lmin : 2 - lmin;
          sl = sl || 0;
          l /= 2;
          return [h, sl * 100, l * 100];
        };

        convert.hwb.rgb = function(hwb) {
          var h = hwb[0] / 360;
          var wh = hwb[1] / 100;
          var bl = hwb[2] / 100;
          var ratio = wh + bl;
          var i;
          var v;
          var f;
          var n;

          if (ratio > 1) {
            wh /= ratio;
            bl /= ratio;
          }

          i = Math.floor(6 * h);
          v = 1 - bl;
          f = 6 * h - i;

          if ((i & 0x01) !== 0) {
            f = 1 - f;
          }

          n = wh + f * (v - wh);
          var r;
          var g;
          var b;

          switch (i) {
            default:
            case 6:
            case 0:
              r = v;
              g = n;
              b = wh;
              break;

            case 1:
              r = n;
              g = v;
              b = wh;
              break;

            case 2:
              r = wh;
              g = v;
              b = n;
              break;

            case 3:
              r = wh;
              g = n;
              b = v;
              break;

            case 4:
              r = n;
              g = wh;
              b = v;
              break;

            case 5:
              r = v;
              g = wh;
              b = n;
              break;
          }

          return [r * 255, g * 255, b * 255];
        };

        convert.cmyk.rgb = function(cmyk) {
          var c = cmyk[0] / 100;
          var m = cmyk[1] / 100;
          var y = cmyk[2] / 100;
          var k = cmyk[3] / 100;
          var r;
          var g;
          var b;
          r = 1 - Math.min(1, c * (1 - k) + k);
          g = 1 - Math.min(1, m * (1 - k) + k);
          b = 1 - Math.min(1, y * (1 - k) + k);
          return [r * 255, g * 255, b * 255];
        };

        convert.xyz.rgb = function(xyz) {
          var x = xyz[0] / 100;
          var y = xyz[1] / 100;
          var z = xyz[2] / 100;
          var r;
          var g;
          var b;
          r = x * 3.2406 + y * -1.5372 + z * -0.4986;
          g = x * -0.9689 + y * 1.8758 + z * 0.0415;
          b = x * 0.0557 + y * -0.204 + z * 1.057;
          r =
            r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
          g =
            g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
          b =
            b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
          r = Math.min(Math.max(0, r), 1);
          g = Math.min(Math.max(0, g), 1);
          b = Math.min(Math.max(0, b), 1);
          return [r * 255, g * 255, b * 255];
        };

        convert.xyz.lab = function(xyz) {
          var x = xyz[0];
          var y = xyz[1];
          var z = xyz[2];
          var l;
          var a;
          var b;
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
          y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
          z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
          l = 116 * y - 16;
          a = 500 * (x - y);
          b = 200 * (y - z);
          return [l, a, b];
        };

        convert.lab.xyz = function(lab) {
          var l = lab[0];
          var a = lab[1];
          var b = lab[2];
          var x;
          var y;
          var z;
          y = (l + 16) / 116;
          x = a / 500 + y;
          z = y - b / 200;
          var y2 = Math.pow(y, 3);
          var x2 = Math.pow(x, 3);
          var z2 = Math.pow(z, 3);
          y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
          x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
          z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
          x *= 95.047;
          y *= 100;
          z *= 108.883;
          return [x, y, z];
        };

        convert.lab.lch = function(lab) {
          var l = lab[0];
          var a = lab[1];
          var b = lab[2];
          var hr;
          var h;
          var c;
          hr = Math.atan2(b, a);
          h = hr * 360 / 2 / Math.PI;

          if (h < 0) {
            h += 360;
          }

          c = Math.sqrt(a * a + b * b);
          return [l, c, h];
        };

        convert.lch.lab = function(lch) {
          var l = lch[0];
          var c = lch[1];
          var h = lch[2];
          var a;
          var b;
          var hr;
          hr = h / 360 * 2 * Math.PI;
          a = c * Math.cos(hr);
          b = c * Math.sin(hr);
          return [l, a, b];
        };

        convert.rgb.ansi16 = function(args) {
          var r = args[0];
          var g = args[1];
          var b = args[2];
          var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
          value = Math.round(value / 50);

          if (value === 0) {
            return 30;
          }

          var ansi =
            30 +
            ((Math.round(b / 255) << 2) |
              (Math.round(g / 255) << 1) |
              Math.round(r / 255));

          if (value === 2) {
            ansi += 60;
          }

          return ansi;
        };

        convert.hsv.ansi16 = function(args) {
          return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
        };

        convert.rgb.ansi256 = function(args) {
          var r = args[0];
          var g = args[1];
          var b = args[2];

          if (r === g && g === b) {
            if (r < 8) {
              return 16;
            }

            if (r > 248) {
              return 231;
            }

            return Math.round((r - 8) / 247 * 24) + 232;
          }

          var ansi =
            16 +
            36 * Math.round(r / 255 * 5) +
            6 * Math.round(g / 255 * 5) +
            Math.round(b / 255 * 5);
          return ansi;
        };

        convert.ansi16.rgb = function(args) {
          var color = args % 10;

          if (color === 0 || color === 7) {
            if (args > 50) {
              color += 3.5;
            }

            color = color / 10.5 * 255;
            return [color, color, color];
          }

          var mult = (~~(args > 50) + 1) * 0.5;
          var r = (color & 1) * mult * 255;
          var g = ((color >> 1) & 1) * mult * 255;
          var b = ((color >> 2) & 1) * mult * 255;
          return [r, g, b];
        };

        convert.ansi256.rgb = function(args) {
          if (args >= 232) {
            var c = (args - 232) * 10 + 8;
            return [c, c, c];
          }

          args -= 16;
          var rem;
          var r = Math.floor(args / 36) / 5 * 255;
          var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
          var b = (rem % 6) / 5 * 255;
          return [r, g, b];
        };

        convert.rgb.hex = function(args) {
          var integer =
            ((Math.round(args[0]) & 0xff) << 16) +
            ((Math.round(args[1]) & 0xff) << 8) +
            (Math.round(args[2]) & 0xff);
          var string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };

        convert.hex.rgb = function(args) {
          var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

          if (!match) {
            return [0, 0, 0];
          }

          var colorString = match[0];

          if (match[0].length === 3) {
            colorString = colorString
              .split("")
              .map(function(char) {
                return char + char;
              })
              .join("");
          }

          var integer = parseInt(colorString, 16);
          var r = (integer >> 16) & 0xff;
          var g = (integer >> 8) & 0xff;
          var b = integer & 0xff;
          return [r, g, b];
        };

        convert.rgb.hcg = function(rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var max = Math.max(Math.max(r, g), b);
          var min = Math.min(Math.min(r, g), b);
          var chroma = max - min;
          var grayscale;
          var hue;

          if (chroma < 1) {
            grayscale = min / (1 - chroma);
          } else {
            grayscale = 0;
          }

          if (chroma <= 0) {
            hue = 0;
          } else if (max === r) {
            hue = ((g - b) / chroma) % 6;
          } else if (max === g) {
            hue = 2 + (b - r) / chroma;
          } else {
            hue = 4 + (r - g) / chroma + 4;
          }

          hue /= 6;
          hue %= 1;
          return [hue * 360, chroma * 100, grayscale * 100];
        };

        convert.hsl.hcg = function(hsl) {
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var c = 1;
          var f = 0;

          if (l < 0.5) {
            c = 2.0 * s * l;
          } else {
            c = 2.0 * s * (1.0 - l);
          }

          if (c < 1.0) {
            f = (l - 0.5 * c) / (1.0 - c);
          }

          return [hsl[0], c * 100, f * 100];
        };

        convert.hsv.hcg = function(hsv) {
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var c = s * v;
          var f = 0;

          if (c < 1.0) {
            f = (v - c) / (1 - c);
          }

          return [hsv[0], c * 100, f * 100];
        };

        convert.hcg.rgb = function(hcg) {
          var h = hcg[0] / 360;
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;

          if (c === 0.0) {
            return [g * 255, g * 255, g * 255];
          }

          var pure = [0, 0, 0];
          var hi = (h % 1) * 6;
          var v = hi % 1;
          var w = 1 - v;
          var mg = 0;

          switch (Math.floor(hi)) {
            case 0:
              pure[0] = 1;
              pure[1] = v;
              pure[2] = 0;
              break;

            case 1:
              pure[0] = w;
              pure[1] = 1;
              pure[2] = 0;
              break;

            case 2:
              pure[0] = 0;
              pure[1] = 1;
              pure[2] = v;
              break;

            case 3:
              pure[0] = 0;
              pure[1] = w;
              pure[2] = 1;
              break;

            case 4:
              pure[0] = v;
              pure[1] = 0;
              pure[2] = 1;
              break;

            default:
              pure[0] = 1;
              pure[1] = 0;
              pure[2] = w;
          }

          mg = (1.0 - c) * g;
          return [
            (c * pure[0] + mg) * 255,
            (c * pure[1] + mg) * 255,
            (c * pure[2] + mg) * 255
          ];
        };

        convert.hcg.hsv = function(hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          var v = c + g * (1.0 - c);
          var f = 0;

          if (v > 0.0) {
            f = c / v;
          }

          return [hcg[0], f * 100, v * 100];
        };

        convert.hcg.hsl = function(hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          var l = g * (1.0 - c) + 0.5 * c;
          var s = 0;

          if (l > 0.0 && l < 0.5) {
            s = c / (2 * l);
          } else if (l >= 0.5 && l < 1.0) {
            s = c / (2 * (1 - l));
          }

          return [hcg[0], s * 100, l * 100];
        };

        convert.hcg.hwb = function(hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          var v = c + g * (1.0 - c);
          return [hcg[0], (v - c) * 100, (1 - v) * 100];
        };

        convert.hwb.hcg = function(hwb) {
          var w = hwb[1] / 100;
          var b = hwb[2] / 100;
          var v = 1 - b;
          var c = v - w;
          var g = 0;

          if (c < 1) {
            g = (v - c) / (1 - c);
          }

          return [hwb[0], c * 100, g * 100];
        };

        convert.apple.rgb = function(apple) {
          return [
            apple[0] / 65535 * 255,
            apple[1] / 65535 * 255,
            apple[2] / 65535 * 255
          ];
        };

        convert.rgb.apple = function(rgb) {
          return [
            rgb[0] / 255 * 65535,
            rgb[1] / 255 * 65535,
            rgb[2] / 255 * 65535
          ];
        };

        convert.gray.rgb = function(args) {
          return [
            args[0] / 100 * 255,
            args[0] / 100 * 255,
            args[0] / 100 * 255
          ];
        };

        convert.gray.hsl = convert.gray.hsv = function(args) {
          return [0, 0, args[0]];
        };

        convert.gray.hwb = function(gray) {
          return [0, 100, gray[0]];
        };

        convert.gray.cmyk = function(gray) {
          return [0, 0, 0, gray[0]];
        };

        convert.gray.lab = function(gray) {
          return [gray[0], 0, 0];
        };

        convert.gray.hex = function(gray) {
          var val = Math.round(gray[0] / 100 * 255) & 0xff;
          var integer = (val << 16) + (val << 8) + val;
          var string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };

        convert.rgb.gray = function(rgb) {
          var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
          return [val / 255 * 100];
        };

        /***/
      },
      /* 155 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = parseAndBuildMetadata;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _babylon() {
          var data = __webpack_require__(83);

          _babylon = function _babylon() {
            return data;
          };

          return data;
        }

        function _codeFrame() {
          var data = __webpack_require__(50);

          _codeFrame = function _codeFrame() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var PATTERN = /^[_$A-Z0-9]+$/;

        function parseAndBuildMetadata(formatter, code, opts) {
          var ast = parseWithCodeFrame(code, opts.parser);
          var placeholderWhitelist = opts.placeholderWhitelist,
            _opts$placeholderPatt = opts.placeholderPattern,
            placeholderPattern =
              _opts$placeholderPatt === void 0
                ? PATTERN
                : _opts$placeholderPatt,
            preserveComments = opts.preserveComments;
          t().removePropertiesDeep(ast, {
            preserveComments: preserveComments
          });
          formatter.validate(ast);
          var placeholders = [];
          var placeholderNames = new Set();
          t().traverse(ast, placeholderVisitorHandler, {
            placeholders: placeholders,
            placeholderNames: placeholderNames,
            placeholderWhitelist: placeholderWhitelist,
            placeholderPattern: placeholderPattern
          });
          return {
            ast: ast,
            placeholders: placeholders,
            placeholderNames: placeholderNames
          };
        }

        function placeholderVisitorHandler(node, ancestors, state) {
          var name;

          if (t().isIdentifier(node) || t().isJSXIdentifier(node)) {
            name = node.name;
          } else if (t().isStringLiteral(node)) {
            name = node.value;
          } else {
            return;
          }

          if (
            (!state.placeholderPattern ||
              !state.placeholderPattern.test(name)) &&
            (!state.placeholderWhitelist ||
              !state.placeholderWhitelist.has(name))
          ) {
            return;
          }

          ancestors = ancestors.slice();
          var _ancestors = ancestors[ancestors.length - 1],
            parent = _ancestors.node,
            key = _ancestors.key;
          var type;

          if (t().isStringLiteral(node)) {
            type = "string";
          } else if (
            (t().isNewExpression(parent) && key === "arguments") ||
            (t().isCallExpression(parent) && key === "arguments") ||
            (t().isFunction(parent) && key === "params")
          ) {
            type = "param";
          } else if (t().isExpressionStatement(parent)) {
            type = "statement";
            ancestors = ancestors.slice(0, -1);
          } else {
            type = "other";
          }

          state.placeholders.push({
            name: name,
            type: type,
            resolve: function resolve(ast) {
              return resolveAncestors(ast, ancestors);
            },
            isDuplicate: state.placeholderNames.has(name)
          });
          state.placeholderNames.add(name);
        }

        function resolveAncestors(ast, ancestors) {
          var parent = ast;

          for (var i = 0; i < ancestors.length - 1; i++) {
            var _ancestors$i = ancestors[i],
              _key = _ancestors$i.key,
              _index = _ancestors$i.index;

            if (_index === undefined) {
              parent = parent[_key];
            } else {
              parent = parent[_key][_index];
            }
          }

          var _ancestors2 = ancestors[ancestors.length - 1],
            key = _ancestors2.key,
            index = _ancestors2.index;
          return {
            parent: parent,
            key: key,
            index: index
          };
        }

        function parseWithCodeFrame(code, parserOpts) {
          parserOpts = Object.assign(
            {
              allowReturnOutsideFunction: true,
              allowSuperOutsideMethod: true,
              sourceType: "module"
            },
            parserOpts
          );

          try {
            return (0, _babylon().parse)(code, parserOpts);
          } catch (err) {
            var loc = err.loc;

            if (loc) {
              err.message +=
                "\n" +
                (0, _codeFrame().codeFrameColumns)(code, {
                  start: loc
                });
              err.code = "BABEL_TEMPLATE_PARSE_ERROR";
            }

            throw err;
          }
        }

        /***/
      },
      /* 156 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = populatePlaceholders;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function populatePlaceholders(metadata, replacements) {
          var ast = t().cloneNode(metadata.ast);

          if (replacements) {
            metadata.placeholders.forEach(function(placeholder) {
              if (
                !Object.prototype.hasOwnProperty.call(
                  replacements,
                  placeholder.name
                )
              ) {
                var placeholderName = placeholder.name;
                throw new Error(
                  'Error: No substitution given for "' +
                    placeholderName +
                    "\". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['" +
                    placeholderName +
                    "'])}\n            - { placeholderPattern: /^" +
                    placeholderName +
                    "$/ }"
                );
              }
            });
            Object.keys(replacements).forEach(function(key) {
              if (!metadata.placeholderNames.has(key)) {
                throw new Error('Unknown substitution "' + key + '" given');
              }
            });
          }

          metadata.placeholders
            .slice()
            .reverse()
            .forEach(function(placeholder) {
              try {
                applyReplacement(
                  placeholder,
                  ast,
                  (replacements && replacements[placeholder.name]) || null
                );
              } catch (e) {
                e.message =
                  '@babel/template placeholder "' +
                  placeholder.name +
                  '": ' +
                  e.message;
                throw e;
              }
            });
          return ast;
        }

        function applyReplacement(placeholder, ast, replacement) {
          if (placeholder.isDuplicate) {
            if (Array.isArray(replacement)) {
              replacement = replacement.map(function(node) {
                return t().cloneNode(node);
              });
            } else if (typeof replacement === "object") {
              replacement = t().cloneNode(replacement);
            }
          }

          var _placeholder$resolve = placeholder.resolve(ast),
            parent = _placeholder$resolve.parent,
            key = _placeholder$resolve.key,
            index = _placeholder$resolve.index;

          if (placeholder.type === "string") {
            if (typeof replacement === "string") {
              replacement = t().stringLiteral(replacement);
            }

            if (!replacement || !t().isStringLiteral(replacement)) {
              throw new Error("Expected string substitution");
            }
          } else if (placeholder.type === "statement") {
            if (index === undefined) {
              if (!replacement) {
                replacement = t().emptyStatement();
              } else if (Array.isArray(replacement)) {
                replacement = t().blockStatement(replacement);
              } else if (typeof replacement === "string") {
                replacement = t().expressionStatement(
                  t().identifier(replacement)
                );
              } else if (!t().isStatement(replacement)) {
                replacement = t().expressionStatement(replacement);
              }
            } else {
              if (replacement && !Array.isArray(replacement)) {
                if (typeof replacement === "string") {
                  replacement = t().identifier(replacement);
                }

                if (!t().isStatement(replacement)) {
                  replacement = t().expressionStatement(replacement);
                }
              }
            }
          } else if (placeholder.type === "param") {
            if (typeof replacement === "string") {
              replacement = t().identifier(replacement);
            }

            if (index === undefined) throw new Error("Assertion failure.");
          } else {
            if (typeof replacement === "string") {
              replacement = t().identifier(replacement);
            }

            if (Array.isArray(replacement)) {
              throw new Error(
                "Cannot replace single expression with an array."
              );
            }
          }

          if (index === undefined) {
            t().validate(parent, key, replacement);
            parent[key] = replacement;
          } else {
            var items = parent[key].slice();

            if (
              placeholder.type === "statement" ||
              placeholder.type === "param"
            ) {
              if (replacement == null) {
                items.splice(index, 1);
              } else if (Array.isArray(replacement)) {
                items.splice.apply(items, [index, 1].concat(replacement));
              } else {
                items[index] = replacement;
              }
            } else {
              items[index] = replacement;
            }

            t().validate(parent, key, items);
            parent[key] = items;
          }
        }

        /***/
      },
      /* 157 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getEnv = getEnv;

        function getEnv(defaultValue) {
          if (defaultValue === void 0) {
            defaultValue = "development";
          }

          return (
            { NODE_ENV: "production" }.BABEL_ENV || "production" || defaultValue
          );
        }

        /***/
      },
      /* 158 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.mergeOptions = mergeOptions;

        function mergeOptions(target, source) {
          var _arr = Object.keys(source);

          for (var _i = 0; _i < _arr.length; _i++) {
            var k = _arr[_i];

            if (k === "parserOpts" && source.parserOpts) {
              var parserOpts = source.parserOpts;
              var targetObj = (target.parserOpts = target.parserOpts || {});
              mergeDefaultFields(targetObj, parserOpts);
            } else if (k === "generatorOpts" && source.generatorOpts) {
              var generatorOpts = source.generatorOpts;

              var _targetObj = (target.generatorOpts =
                target.generatorOpts || {});

              mergeDefaultFields(_targetObj, generatorOpts);
            } else {
              var val = source[k];
              if (val !== undefined) target[k] = val;
            }
          }
        }

        function mergeDefaultFields(target, source) {
          var _arr2 = Object.keys(source);

          for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
            var k = _arr2[_i2];
            var val = source[k];
            if (val !== undefined) target[k] = val;
          }
        }

        /***/
      },
      /* 159 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createCachedDescriptors = createCachedDescriptors;
        exports.createUncachedDescriptors = createUncachedDescriptors;
        exports.createDescriptor = createDescriptor;

        var _files = __webpack_require__(85);

        var _item = __webpack_require__(51);

        var _caching = __webpack_require__(87);

        function createCachedDescriptors(dirname, options, alias) {
          var plugins = options.plugins,
            presets = options.presets,
            passPerPreset = options.passPerPreset;
          return {
            options: options,
            plugins: plugins
              ? function() {
                  return createCachedPluginDescriptors(plugins, dirname)(alias);
                }
              : function() {
                  return [];
                },
            presets: presets
              ? function() {
                  return createCachedPresetDescriptors(presets, dirname)(alias)(
                    !!passPerPreset
                  );
                }
              : function() {
                  return [];
                }
          };
        }

        function createUncachedDescriptors(dirname, options, alias) {
          var plugins;
          var presets;
          return {
            options: options,
            plugins: (function(_plugins) {
              function plugins() {
                return _plugins.apply(this, arguments);
              }

              plugins.toString = function() {
                return _plugins.toString();
              };

              return plugins;
            })(function() {
              if (!plugins) {
                plugins = createPluginDescriptors(
                  options.plugins || [],
                  dirname,
                  alias
                );
              }

              return plugins;
            }),
            presets: (function(_presets) {
              function presets() {
                return _presets.apply(this, arguments);
              }

              presets.toString = function() {
                return _presets.toString();
              };

              return presets;
            })(function() {
              if (!presets) {
                presets = createPresetDescriptors(
                  options.presets || [],
                  dirname,
                  alias,
                  !!options.passPerPreset
                );
              }

              return presets;
            })
          };
        }

        var createCachedPresetDescriptors = (0, _caching.makeWeakCache)(
          function(items, cache) {
            var dirname = cache.using(function(dir) {
              return dir;
            });
            return (0, _caching.makeStrongCache)(function(alias) {
              return (0, _caching.makeStrongCache)(function(passPerPreset) {
                return createPresetDescriptors(
                  items,
                  dirname,
                  alias,
                  passPerPreset
                );
              });
            });
          }
        );
        var createCachedPluginDescriptors = (0, _caching.makeWeakCache)(
          function(items, cache) {
            var dirname = cache.using(function(dir) {
              return dir;
            });
            return (0, _caching.makeStrongCache)(function(alias) {
              return createPluginDescriptors(items, dirname, alias);
            });
          }
        );

        function createPresetDescriptors(items, dirname, alias, passPerPreset) {
          return createDescriptors(
            "preset",
            items,
            dirname,
            alias,
            passPerPreset
          );
        }

        function createPluginDescriptors(items, dirname, alias) {
          return createDescriptors("plugin", items, dirname, alias);
        }

        function createDescriptors(type, items, dirname, alias, ownPass) {
          var descriptors = items.map(function(item, index) {
            return createDescriptor(item, dirname, {
              type: type,
              alias: alias + "$" + index,
              ownPass: !!ownPass
            });
          });
          assertNoDuplicates(descriptors);
          return descriptors;
        }

        function createDescriptor(pair, dirname, _ref) {
          var type = _ref.type,
            alias = _ref.alias,
            ownPass = _ref.ownPass;
          var desc = (0, _item.getItemDescriptor)(pair);

          if (desc) {
            return desc;
          }

          var name;
          var options;
          var value = pair;

          if (Array.isArray(value)) {
            if (value.length === 3) {
              var _value = value;
              value = _value[0];
              options = _value[1];
              name = _value[2];
            } else {
              var _value2 = value;
              value = _value2[0];
              options = _value2[1];
            }
          }

          var file = undefined;
          var filepath = null;

          if (typeof value === "string") {
            if (typeof type !== "string") {
              throw new Error(
                "To resolve a string-based item, the type of item must be given"
              );
            }

            var resolver =
              type === "plugin" ? _files.loadPlugin : _files.loadPreset;
            var _request = value;

            var _resolver = resolver(value, dirname);

            filepath = _resolver.filepath;
            value = _resolver.value;
            file = {
              request: _request,
              resolved: filepath
            };
          }

          if (!value) {
            throw new Error("Unexpected falsy value: " + String(value));
          }

          if (typeof value === "object" && value.__esModule) {
            if (value.default) {
              value = value.default;
            } else {
              throw new Error(
                "Must export a default export when using ES6 modules."
              );
            }
          }

          if (typeof value !== "object" && typeof value !== "function") {
            throw new Error(
              "Unsupported format: " +
                typeof value +
                ". Expected an object or a function."
            );
          }

          if (filepath !== null && typeof value === "object" && value) {
            throw new Error(
              "Plugin/Preset files are not allowed to export objects, only functions. In " +
                filepath
            );
          }

          return {
            name: name,
            alias: filepath || alias,
            value: value,
            options: options,
            dirname: dirname,
            ownPass: ownPass,
            file: file
          };
        }

        function assertNoDuplicates(items) {
          var map = new Map();

          for (
            var _iterator = items,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref2;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref2 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref2 = _i.value;
            }

            var item = _ref2;
            if (typeof item.value !== "function") continue;
            var nameMap = map.get(item.value);

            if (!nameMap) {
              nameMap = new Set();
              map.set(item.value, nameMap);
            }

            if (nameMap.has(item.name)) {
              throw new Error(
                [
                  "Duplicate plugin/preset detected.",
                  "If you'd like to use two separate instances of a plugin,",
                  "they neen separate names, e.g.",
                  "",
                  "  plugins: [",
                  "    ['some-plugin', {}],",
                  "    ['some-plugin', {}, 'some unique name'],",
                  "  ]"
                ].join("\n")
              );
            }

            nameMap.add(item.name);
          }
        }

        /***/
      },
      /* 160 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.buildRootChain = buildRootChain;
        exports.buildPresetChain = void 0;

        function _path() {
          var data = _interopRequireDefault(__webpack_require__(7));

          _path = function _path() {
            return data;
          };

          return data;
        }

        function _micromatch() {
          var data = _interopRequireDefault(__webpack_require__(450));

          _micromatch = function _micromatch() {
            return data;
          };

          return data;
        }

        function _debug() {
          var data = _interopRequireDefault(__webpack_require__(140));

          _debug = function _debug() {
            return data;
          };

          return data;
        }

        var _options = __webpack_require__(90);

        var _files = __webpack_require__(85);

        var _caching = __webpack_require__(87);

        var _configDescriptors = __webpack_require__(159);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var debug = (0, _debug().default)("babel:config:config-chain");
        var buildPresetChain = makeChainWalker({
          init: function init(arg) {
            return arg;
          },
          root: function root(preset) {
            return loadPresetDescriptors(preset);
          },
          env: function env(preset, envName) {
            return loadPresetEnvDescriptors(preset)(envName);
          },
          overrides: function overrides(preset, index) {
            return loadPresetOverridesDescriptors(preset)(index);
          },
          overridesEnv: function overridesEnv(preset, index, envName) {
            return loadPresetOverridesEnvDescriptors(preset)(index)(envName);
          }
        });
        exports.buildPresetChain = buildPresetChain;
        var loadPresetDescriptors = (0, _caching.makeWeakCache)(function(
          preset
        ) {
          return buildRootDescriptors(
            preset,
            preset.alias,
            _configDescriptors.createUncachedDescriptors
          );
        });
        var loadPresetEnvDescriptors = (0, _caching.makeWeakCache)(function(
          preset
        ) {
          return (0, _caching.makeStrongCache)(function(envName) {
            return buildEnvDescriptors(
              preset,
              preset.alias,
              _configDescriptors.createUncachedDescriptors,
              envName
            );
          });
        });
        var loadPresetOverridesDescriptors = (0, _caching.makeWeakCache)(
          function(preset) {
            return (0, _caching.makeStrongCache)(function(index) {
              return buildOverrideDescriptors(
                preset,
                preset.alias,
                _configDescriptors.createUncachedDescriptors,
                index
              );
            });
          }
        );
        var loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCache)(
          function(preset) {
            return (0, _caching.makeStrongCache)(function(index) {
              return (0, _caching.makeStrongCache)(function(envName) {
                return buildOverrideEnvDescriptors(
                  preset,
                  preset.alias,
                  _configDescriptors.createUncachedDescriptors,
                  index,
                  envName
                );
              });
            });
          }
        );

        function buildRootChain(opts, context) {
          var programmaticChain = loadProgrammaticChain(
            {
              options: opts,
              dirname: context.cwd
            },
            context
          );
          if (!programmaticChain) return null;
          var _opts$root = opts.root,
            rootDir = _opts$root === void 0 ? "." : _opts$root,
            _opts$babelrc = opts.babelrc,
            babelrc = _opts$babelrc === void 0 ? true : _opts$babelrc,
            babelrcRoots = opts.babelrcRoots,
            _opts$configFile = opts.configFile,
            configFileName =
              _opts$configFile === void 0 ? true : _opts$configFile;

          var absoluteRoot = _path().default.resolve(context.cwd, rootDir);

          var configFile;

          if (typeof configFileName === "string") {
            configFile = (0, _files.loadConfig)(
              configFileName,
              context.cwd,
              context.envName
            );
          } else if (configFileName === true) {
            configFile = (0, _files.findRootConfig)(
              absoluteRoot,
              context.envName
            );
          }

          var configFileChain = emptyChain();

          if (configFile) {
            var result = loadFileChain(configFile, context);
            if (!result) return null;
            mergeChain(configFileChain, result);
          }

          var pkgData =
            typeof context.filename === "string"
              ? (0, _files.findPackageData)(context.filename)
              : null;
          var ignoreFile, babelrcFile;
          var fileChain = emptyChain();

          if (
            babelrc &&
            pkgData &&
            babelrcLoadEnabled(context, pkgData, babelrcRoots, absoluteRoot)
          ) {
            var _findRelativeConfig = (0, _files.findRelativeConfig)(
              pkgData,
              context.envName
            );

            ignoreFile = _findRelativeConfig.ignore;
            babelrcFile = _findRelativeConfig.config;

            if (
              ignoreFile &&
              shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname)
            ) {
              return null;
            }

            if (babelrcFile) {
              var _result = loadFileChain(babelrcFile, context);

              if (!_result) return null;
              mergeChain(fileChain, _result);
            }
          }

          var chain = mergeChain(
            mergeChain(mergeChain(emptyChain(), configFileChain), fileChain),
            programmaticChain
          );
          return {
            plugins: dedupDescriptors(chain.plugins),
            presets: dedupDescriptors(chain.presets),
            options: chain.options.map(function(o) {
              return normalizeOptions(o);
            }),
            ignore: ignoreFile || undefined,
            babelrc: babelrcFile || undefined,
            config: configFile || undefined
          };
        }

        function babelrcLoadEnabled(
          context,
          pkgData,
          babelrcRoots,
          absoluteRoot
        ) {
          if (typeof babelrcRoots === "boolean") return babelrcRoots;

          if (babelrcRoots === undefined) {
            return pkgData.directories.indexOf(absoluteRoot) !== -1;
          }

          var babelrcPatterns = babelrcRoots;
          if (!Array.isArray(babelrcPatterns))
            babelrcPatterns = [babelrcPatterns];
          babelrcPatterns = babelrcPatterns.map(function(pat) {
            return _path().default.resolve(context.cwd, pat);
          });

          if (
            babelrcPatterns.length === 1 &&
            babelrcPatterns[0] === absoluteRoot
          ) {
            return pkgData.directories.indexOf(absoluteRoot) !== -1;
          }

          return (
            (0, _micromatch().default)(pkgData.directories, babelrcPatterns)
              .length > 0
          );
        }

        var loadProgrammaticChain = makeChainWalker({
          init: function init(arg) {
            return arg;
          },
          root: function root(input) {
            return buildRootDescriptors(
              input,
              "base",
              _configDescriptors.createCachedDescriptors
            );
          },
          env: function env(input, envName) {
            return buildEnvDescriptors(
              input,
              "base",
              _configDescriptors.createCachedDescriptors,
              envName
            );
          },
          overrides: function overrides(input, index) {
            return buildOverrideDescriptors(
              input,
              "base",
              _configDescriptors.createCachedDescriptors,
              index
            );
          },
          overridesEnv: function overridesEnv(input, index, envName) {
            return buildOverrideEnvDescriptors(
              input,
              "base",
              _configDescriptors.createCachedDescriptors,
              index,
              envName
            );
          }
        });
        var loadFileChain = makeChainWalker({
          init: function init(input) {
            return validateFile(input);
          },
          root: function root(file) {
            return loadFileDescriptors(file);
          },
          env: function env(file, envName) {
            return loadFileEnvDescriptors(file)(envName);
          },
          overrides: function overrides(file, index) {
            return loadFileOverridesDescriptors(file)(index);
          },
          overridesEnv: function overridesEnv(file, index, envName) {
            return loadFileOverridesEnvDescriptors(file)(index)(envName);
          }
        });
        var validateFile = (0, _caching.makeWeakCache)(function(file) {
          return {
            filepath: file.filepath,
            dirname: file.dirname,
            options: (0, _options.validate)("file", file.options)
          };
        });
        var loadFileDescriptors = (0, _caching.makeWeakCache)(function(file) {
          return buildRootDescriptors(
            file,
            file.filepath,
            _configDescriptors.createUncachedDescriptors
          );
        });
        var loadFileEnvDescriptors = (0, _caching.makeWeakCache)(function(
          file
        ) {
          return (0, _caching.makeStrongCache)(function(envName) {
            return buildEnvDescriptors(
              file,
              file.filepath,
              _configDescriptors.createUncachedDescriptors,
              envName
            );
          });
        });
        var loadFileOverridesDescriptors = (0, _caching.makeWeakCache)(function(
          file
        ) {
          return (0, _caching.makeStrongCache)(function(index) {
            return buildOverrideDescriptors(
              file,
              file.filepath,
              _configDescriptors.createUncachedDescriptors,
              index
            );
          });
        });
        var loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCache)(
          function(file) {
            return (0, _caching.makeStrongCache)(function(index) {
              return (0, _caching.makeStrongCache)(function(envName) {
                return buildOverrideEnvDescriptors(
                  file,
                  file.filepath,
                  _configDescriptors.createUncachedDescriptors,
                  index,
                  envName
                );
              });
            });
          }
        );

        function buildRootDescriptors(_ref, alias, descriptors) {
          var dirname = _ref.dirname,
            options = _ref.options;
          return descriptors(dirname, options, alias);
        }

        function buildEnvDescriptors(_ref2, alias, descriptors, envName) {
          var dirname = _ref2.dirname,
            options = _ref2.options;
          var opts = options.env && options.env[envName];
          return opts
            ? descriptors(dirname, opts, alias + '.env["' + envName + '"]')
            : null;
        }

        function buildOverrideDescriptors(_ref3, alias, descriptors, index) {
          var dirname = _ref3.dirname,
            options = _ref3.options;
          var opts = options.overrides && options.overrides[index];
          if (!opts) throw new Error("Assertion failure - missing override");
          return descriptors(
            dirname,
            opts,
            alias + ".overrides[" + index + "]"
          );
        }

        function buildOverrideEnvDescriptors(
          _ref4,
          alias,
          descriptors,
          index,
          envName
        ) {
          var dirname = _ref4.dirname,
            options = _ref4.options;
          var override = options.overrides && options.overrides[index];
          if (!override)
            throw new Error("Assertion failure - missing override");
          var opts = override.env && override.env[envName];
          return opts
            ? descriptors(
                dirname,
                opts,
                alias + ".overrides[" + index + '].env["' + envName + '"]'
              )
            : null;
        }

        function makeChainWalker(_ref5) {
          var init = _ref5.init,
            root = _ref5.root,
            env = _ref5.env,
            overrides = _ref5.overrides,
            overridesEnv = _ref5.overridesEnv;
          return function(arg, context, files) {
            if (files === void 0) {
              files = new Set();
            }

            var input = init(arg);
            var dirname = input.dirname;
            var flattenedConfigs = [];
            var rootOpts = root(input);

            if (configIsApplicable(rootOpts, dirname, context)) {
              flattenedConfigs.push(rootOpts);
              var envOpts = env(input, context.envName);

              if (envOpts && configIsApplicable(envOpts, dirname, context)) {
                flattenedConfigs.push(envOpts);
              }

              (rootOpts.options.overrides || []).forEach(function(_, index) {
                var overrideOps = overrides(input, index);

                if (configIsApplicable(overrideOps, dirname, context)) {
                  flattenedConfigs.push(overrideOps);
                  var overrideEnvOpts = overridesEnv(
                    input,
                    index,
                    context.envName
                  );

                  if (
                    overrideEnvOpts &&
                    configIsApplicable(overrideEnvOpts, dirname, context)
                  ) {
                    flattenedConfigs.push(overrideEnvOpts);
                  }
                }
              });
            }

            if (
              flattenedConfigs.some(function(_ref6) {
                var _ref6$options = _ref6.options,
                  ignore = _ref6$options.ignore,
                  only = _ref6$options.only;
                return shouldIgnore(context, ignore, only, dirname);
              })
            ) {
              return null;
            }

            var chain = emptyChain();

            for (var _i = 0; _i < flattenedConfigs.length; _i++) {
              var op = flattenedConfigs[_i];

              if (
                !mergeExtendsChain(chain, op.options, dirname, context, files)
              ) {
                return null;
              }

              mergeChainOpts(chain, op);
            }

            return chain;
          };
        }

        function mergeExtendsChain(chain, opts, dirname, context, files) {
          if (opts.extends === undefined) return true;
          var file = (0, _files.loadConfig)(
            opts.extends,
            dirname,
            context.envName
          );

          if (files.has(file)) {
            throw new Error(
              "Configuration cycle detected loading " +
                file.filepath +
                ".\n" +
                "File already loaded following the config chain:\n" +
                Array.from(files, function(file) {
                  return " - " + file.filepath;
                }).join("\n")
            );
          }

          files.add(file);
          var fileChain = loadFileChain(file, context, files);
          files.delete(file);
          if (!fileChain) return false;
          mergeChain(chain, fileChain);
          return true;
        }

        function mergeChain(target, source) {
          var _target$options, _target$plugins, _target$presets;

          (_target$options = target.options).push.apply(
            _target$options,
            source.options
          );

          (_target$plugins = target.plugins).push.apply(
            _target$plugins,
            source.plugins
          );

          (_target$presets = target.presets).push.apply(
            _target$presets,
            source.presets
          );

          return target;
        }

        function mergeChainOpts(target, _ref7) {
          var _target$plugins2, _target$presets2;

          var options = _ref7.options,
            plugins = _ref7.plugins,
            presets = _ref7.presets;
          target.options.push(options);

          (_target$plugins2 = target.plugins).push.apply(
            _target$plugins2,
            plugins()
          );

          (_target$presets2 = target.presets).push.apply(
            _target$presets2,
            presets()
          );

          return target;
        }

        function emptyChain() {
          return {
            options: [],
            presets: [],
            plugins: []
          };
        }

        function normalizeOptions(opts) {
          var options = Object.assign({}, opts);
          delete options.extends;
          delete options.env;
          delete options.plugins;
          delete options.presets;
          delete options.passPerPreset;
          delete options.ignore;
          delete options.only;

          if (options.sourceMap) {
            options.sourceMaps = options.sourceMap;
            delete options.sourceMap;
          }

          return options;
        }

        function dedupDescriptors(items) {
          var map = new Map();
          var descriptors = [];

          for (
            var _iterator = items,
              _isArray = Array.isArray(_iterator),
              _i2 = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref8;

            if (_isArray) {
              if (_i2 >= _iterator.length) break;
              _ref8 = _iterator[_i2++];
            } else {
              _i2 = _iterator.next();
              if (_i2.done) break;
              _ref8 = _i2.value;
            }

            var item = _ref8;

            if (typeof item.value === "function") {
              var fnKey = item.value;
              var nameMap = map.get(fnKey);

              if (!nameMap) {
                nameMap = new Map();
                map.set(fnKey, nameMap);
              }

              var desc = nameMap.get(item.name);

              if (!desc) {
                desc = {
                  value: null
                };
                descriptors.push(desc);
                if (!item.ownPass) nameMap.set(item.name, desc);
              }

              if (item.options === false) {
                desc.value = null;
              } else {
                desc.value = item;
              }
            } else {
              descriptors.push({
                value: item
              });
            }
          }

          return descriptors.reduce(function(acc, desc) {
            if (desc.value) acc.push(desc.value);
            return acc;
          }, []);
        }

        function configIsApplicable(_ref9, dirname, context) {
          var options = _ref9.options;
          return (
            (options.test === undefined ||
              configFieldIsApplicable(context, options.test, dirname)) &&
            (options.include === undefined ||
              configFieldIsApplicable(context, options.include, dirname)) &&
            (options.exclude === undefined ||
              !configFieldIsApplicable(context, options.exclude, dirname))
          );
        }

        function configFieldIsApplicable(context, test, dirname) {
          if (context.filename === null) {
            throw new Error(
              "Configuration contains explicit test/include/exclude checks, but no filename was passed to Babel"
            );
          }

          var ctx = context;
          var patterns = Array.isArray(test) ? test : [test];
          return matchesPatterns(ctx, patterns, dirname, false);
        }

        function shouldIgnore(context, ignore, only, dirname) {
          if (ignore) {
            if (context.filename === null) {
              throw new Error(
                "Configuration contains ignore checks, but no filename was passed to Babel"
              );
            }

            var ctx = context;

            if (matchesPatterns(ctx, ignore, dirname)) {
              debug(
                "Ignored %o because it matched one of %O from %o",
                context.filename,
                ignore,
                dirname
              );
              return true;
            }
          }

          if (only) {
            if (context.filename === null) {
              throw new Error(
                "Configuration contains ignore checks, but no filename was passed to Babel"
              );
            }

            var _ctx = context;

            if (!matchesPatterns(_ctx, only, dirname)) {
              debug(
                "Ignored %o because it failed to match one of %O from %o",
                context.filename,
                only,
                dirname
              );
              return true;
            }
          }

          return false;
        }

        function matchesPatterns(context, patterns, dirname, allowNegation) {
          if (allowNegation === void 0) {
            allowNegation = true;
          }

          var res = [];
          var strings = [];
          var fns = [];
          patterns.forEach(function(pattern) {
            if (typeof pattern === "string") strings.push(pattern);
            else if (typeof pattern === "function") fns.push(pattern);
            else res.push(pattern);
          });
          var filename = context.filename;
          if (
            res.some(function(re) {
              return re.test(context.filename);
            })
          )
            return true;
          if (
            fns.some(function(fn) {
              return fn(filename);
            })
          )
            return true;

          if (strings.length > 0) {
            var possibleDirs = getPossibleDirs(context);
            var absolutePatterns = strings.map(function(pattern) {
              var negate = pattern[0] === "!";

              if (negate && !allowNegation) {
                throw new Error("Negation of file paths is not supported.");
              }

              if (negate) pattern = pattern.slice(1);
              return (
                (negate ? "!" : "") + _path().default.resolve(dirname, pattern)
              );
            });

            if (
              (0, _micromatch().default)(possibleDirs, absolutePatterns, {
                nocase: true,
                nonegate: !allowNegation
              }).length > 0
            ) {
              return true;
            }
          }

          return false;
        }

        var getPossibleDirs = (0, _caching.makeWeakCache)(function(context) {
          var current = context.filename;
          if (current === null) return [];
          var possibleDirs = [current];

          while (true) {
            var previous = current;
            current = _path().default.dirname(current);
            if (previous === current) break;
            possibleDirs.push(current);
          }

          return possibleDirs;
        });

        /***/
      },
      /* 161 */
      /***/ function(module, exports) {
        /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
        module.exports = function(obj) {
          return (
            obj != null &&
            (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
          );
        };

        function isBuffer(obj) {
          return (
            !!obj.constructor &&
            typeof obj.constructor.isBuffer === "function" &&
            obj.constructor.isBuffer(obj)
          );
        }

        function isSlowBuffer(obj) {
          return (
            typeof obj.readFloatLE === "function" &&
            typeof obj.slice === "function" &&
            isBuffer(obj.slice(0, 0))
          );
        }

        /***/
      },
      /* 162 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = function repeat(ele, num) {
          var arr = new Array(num);

          for (var i = 0; i < num; i++) {
            arr[i] = ele;
          }

          return arr;
        };

        /***/
      },
      /* 163 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.assertSourceMaps = assertSourceMaps;
        exports.assertCompact = assertCompact;
        exports.assertSourceType = assertSourceType;
        exports.assertInputSourceMap = assertInputSourceMap;
        exports.assertString = assertString;
        exports.assertFunction = assertFunction;
        exports.assertBoolean = assertBoolean;
        exports.assertObject = assertObject;
        exports.assertArray = assertArray;
        exports.assertIgnoreList = assertIgnoreList;
        exports.assertConfigApplicableTest = assertConfigApplicableTest;
        exports.assertConfigFileSearch = assertConfigFileSearch;
        exports.assertBabelrcSearch = assertBabelrcSearch;
        exports.assertPluginList = assertPluginList;

        function assertSourceMaps(key, value) {
          if (
            value !== undefined &&
            typeof value !== "boolean" &&
            value !== "inline" &&
            value !== "both"
          ) {
            throw new Error(
              "." + key + ' must be a boolean, "inline", "both", or undefined'
            );
          }

          return value;
        }

        function assertCompact(key, value) {
          if (
            value !== undefined &&
            typeof value !== "boolean" &&
            value !== "auto"
          ) {
            throw new Error(
              "." + key + ' must be a boolean, "auto", or undefined'
            );
          }

          return value;
        }

        function assertSourceType(key, value) {
          if (
            value !== undefined &&
            value !== "module" &&
            value !== "script" &&
            value !== "unambiguous"
          ) {
            throw new Error(
              "." +
                key +
                ' must be "module", "script", "unambiguous", or undefined'
            );
          }

          return value;
        }

        function assertInputSourceMap(key, value) {
          if (
            value !== undefined &&
            typeof value !== "boolean" &&
            (typeof value !== "object" || !value)
          ) {
            throw new Error(
              ".inputSourceMap must be a boolean, object, or undefined"
            );
          }

          return value;
        }

        function assertString(key, value) {
          if (value !== undefined && typeof value !== "string") {
            throw new Error("." + key + " must be a string, or undefined");
          }

          return value;
        }

        function assertFunction(key, value) {
          if (value !== undefined && typeof value !== "function") {
            throw new Error("." + key + " must be a function, or undefined");
          }

          return value;
        }

        function assertBoolean(key, value) {
          if (value !== undefined && typeof value !== "boolean") {
            throw new Error("." + key + " must be a boolean, or undefined");
          }

          return value;
        }

        function assertObject(key, value) {
          if (
            value !== undefined &&
            (typeof value !== "object" || Array.isArray(value) || !value)
          ) {
            throw new Error("." + key + " must be an object, or undefined");
          }

          return value;
        }

        function assertArray(key, value) {
          if (value != null && !Array.isArray(value)) {
            throw new Error("." + key + " must be an array, or undefined");
          }

          return value;
        }

        function assertIgnoreList(key, value) {
          var arr = assertArray(key, value);

          if (arr) {
            arr.forEach(function(item, i) {
              return assertIgnoreItem(key, i, item);
            });
          }

          return arr;
        }

        function assertIgnoreItem(key, index, value) {
          if (
            typeof value !== "string" &&
            typeof value !== "function" &&
            !(value instanceof RegExp)
          ) {
            throw new Error(
              "." +
                key +
                "[" +
                index +
                "] must be an array of string/Funtion/RegExp values, or undefined"
            );
          }

          return value;
        }

        function assertConfigApplicableTest(key, value) {
          if (value === undefined) return value;

          if (Array.isArray(value)) {
            value.forEach(function(item, i) {
              if (!checkValidTest(item)) {
                throw new Error(
                  "." + key + "[" + i + "] must be a string/Function/RegExp."
                );
              }
            });
          } else if (!checkValidTest(value)) {
            throw new Error(
              "." +
                key +
                " must be a string/Function/RegExp, or an array of those"
            );
          }

          return value;
        }

        function checkValidTest(value) {
          return (
            typeof value === "string" ||
            typeof value === "function" ||
            value instanceof RegExp
          );
        }

        function assertConfigFileSearch(key, value) {
          if (
            value !== undefined &&
            typeof value !== "boolean" &&
            typeof value !== "string"
          ) {
            throw new Error(
              "." +
                key +
                " must be a undefined, a boolean, a string, " +
                ("got " + JSON.stringify(value))
            );
          }

          return value;
        }

        function assertBabelrcSearch(key, value) {
          if (value === undefined || typeof value === "boolean") return value;

          if (Array.isArray(value)) {
            value.forEach(function(item, i) {
              if (typeof item !== "string") {
                throw new Error("." + key + "[" + i + "] must be a string.");
              }
            });
          } else if (typeof value !== "string") {
            throw new Error(
              "." +
                key +
                " must be a undefined, a boolean, a string, " +
                ("or an array of strings, got " + JSON.stringify(value))
            );
          }

          return value;
        }

        function assertPluginList(key, value) {
          var arr = assertArray(key, value);

          if (arr) {
            arr.forEach(function(item, i) {
              return assertPluginItem(key, i, item);
            });
          }

          return arr;
        }

        function assertPluginItem(key, index, value) {
          if (Array.isArray(value)) {
            if (value.length === 0) {
              throw new Error(
                "." + key + "[" + index + "] must include an object"
              );
            }

            if (value.length > 3) {
              throw new Error(
                "." +
                  key +
                  "[" +
                  index +
                  "] may only be a two-tuple or three-tuple"
              );
            }

            assertPluginTarget(key, index, true, value[0]);

            if (value.length > 1) {
              var opts = value[1];

              if (
                opts !== undefined &&
                opts !== false &&
                (typeof opts !== "object" || Array.isArray(opts))
              ) {
                throw new Error(
                  "." +
                    key +
                    "[" +
                    index +
                    "][1] must be an object, false, or undefined"
                );
              }
            }

            if (value.length === 3) {
              var name = value[2];

              if (name !== undefined && typeof name !== "string") {
                throw new Error(
                  "." +
                    key +
                    "[" +
                    index +
                    "][2] must be a string, or undefined"
                );
              }
            }
          } else {
            assertPluginTarget(key, index, false, value);
          }

          return value;
        }

        function assertPluginTarget(key, index, inArray, value) {
          if (
            (typeof value !== "object" || !value) &&
            typeof value !== "string" &&
            typeof value !== "function"
          ) {
            throw new Error(
              "." +
                key +
                "[" +
                index +
                "]" +
                (inArray ? "[0]" : "") +
                " must be a string, object, function"
            );
          }

          return value;
        }

        /***/
      },
      /* 164 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = loadPrivatePartialConfig;
        exports.loadPartialConfig = loadPartialConfig;

        function _path() {
          var data = _interopRequireDefault(__webpack_require__(7));

          _path = function _path() {
            return data;
          };

          return data;
        }

        var _plugin = _interopRequireDefault(__webpack_require__(86));

        var _util = __webpack_require__(158);

        var _item = __webpack_require__(51);

        var _configChain = __webpack_require__(160);

        var _environment = __webpack_require__(157);

        var _options = __webpack_require__(90);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function loadPrivatePartialConfig(inputOpts) {
          if (
            inputOpts != null &&
            (typeof inputOpts !== "object" || Array.isArray(inputOpts))
          ) {
            throw new Error(
              "Babel options must be an object, null, or undefined"
            );
          }

          var args = inputOpts
            ? (0, _options.validate)("arguments", inputOpts)
            : {};
          var _args$envName = args.envName,
            envName =
              _args$envName === void 0
                ? (0, _environment.getEnv)()
                : _args$envName,
            _args$cwd = args.cwd,
            cwd = _args$cwd === void 0 ? "." : _args$cwd;

          var absoluteCwd = _path().default.resolve(cwd);

          var context = {
            filename: args.filename
              ? _path().default.resolve(cwd, args.filename)
              : null,
            cwd: absoluteCwd,
            envName: envName
          };
          var configChain = (0, _configChain.buildRootChain)(args, context);
          if (!configChain) return null;
          var options = {};
          configChain.options.forEach(function(opts) {
            (0, _util.mergeOptions)(options, opts);
          });
          options.babelrc = false;
          options.envName = envName;
          options.cwd = absoluteCwd;
          options.passPerPreset = false;
          options.plugins = configChain.plugins.map(function(descriptor) {
            return (0, _item.createItemFromDescriptor)(descriptor);
          });
          options.presets = configChain.presets.map(function(descriptor) {
            return (0, _item.createItemFromDescriptor)(descriptor);
          });
          return {
            options: options,
            context: context,
            ignore: configChain.ignore,
            babelrc: configChain.babelrc,
            config: configChain.config
          };
        }

        function loadPartialConfig(inputOpts) {
          var result = loadPrivatePartialConfig(inputOpts);
          if (!result) return null;
          var options = result.options,
            babelrc = result.babelrc,
            ignore = result.ignore,
            config = result.config;
          (options.plugins || []).forEach(function(item) {
            if (item.value instanceof _plugin.default) {
              throw new Error(
                "Passing cached plugin instances is not supported in " +
                  "babel.loadPartialConfig()"
              );
            }
          });
          return new PartialConfig(
            options,
            babelrc ? babelrc.filepath : undefined,
            ignore ? ignore.filepath : undefined,
            config ? config.filepath : undefined
          );
        }

        var PartialConfig = (function() {
          function PartialConfig(options, babelrc, ignore, config) {
            this.options = options;
            this.babelignore = ignore;
            this.babelrc = babelrc;
            this.config = config;
            Object.freeze(this);
          }

          var _proto = PartialConfig.prototype;

          _proto.hasFilesystemConfig = function hasFilesystemConfig() {
            return this.babelrc !== undefined || this.config !== undefined;
          };

          return PartialConfig;
        })();

        Object.freeze(PartialConfig.prototype);

        /***/
      },
      /* 165 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIsEqualDeep = __webpack_require__(499),
          isObjectLike = __webpack_require__(10);

        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }

          if (
            value == null ||
            other == null ||
            (!isObjectLike(value) && !isObjectLike(other))
          ) {
            return value !== value && other !== other;
          }

          return baseIsEqualDeep(
            value,
            other,
            bitmask,
            customizer,
            baseIsEqual,
            stack
          );
        }

        module.exports = baseIsEqual;

        /***/
      },
      /* 166 */
      /***/ function(module, exports, __webpack_require__) {
        var SetCache = __webpack_require__(129),
          arraySome = __webpack_require__(500),
          cacheHas = __webpack_require__(130);

        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        function equalArrays(
          array,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }

          var stacked = stack.get(array);

          if (stacked && stack.get(other)) {
            return stacked == other;
          }

          var index = -1,
            result = true,
            seen =
              bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
          stack.set(array, other);
          stack.set(other, array);

          while (++index < arrLength) {
            var arrValue = array[index],
              othValue = other[index];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }

            if (compared !== undefined) {
              if (compared) {
                continue;
              }

              result = false;
              break;
            }

            if (seen) {
              if (
                !arraySome(other, function(othValue, othIndex) {
                  if (
                    !cacheHas(seen, othIndex) &&
                    (arrValue === othValue ||
                      equalFunc(arrValue, othValue, bitmask, customizer, stack))
                  ) {
                    return seen.push(othIndex);
                  }
                })
              ) {
                result = false;
                break;
              }
            } else if (
              !(
                arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )
            ) {
              result = false;
              break;
            }
          }

          stack["delete"](array);
          stack["delete"](other);
          return result;
        }

        module.exports = equalArrays;

        /***/
      },
      /* 167 */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(15);

        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }

        module.exports = isStrictComparable;

        /***/
      },
      /* 168 */
      /***/ function(module, exports) {
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }

            return (
              object[key] === srcValue &&
              (srcValue !== undefined || key in Object(object))
            );
          };
        }

        module.exports = matchesStrictComparable;

        /***/
      },
      /* 169 */
      /***/ function(module, exports, __webpack_require__) {
        var castPath = __webpack_require__(170),
          toKey = __webpack_require__(55);

        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0,
            length = path.length;

          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }

          return index && index == length ? object : undefined;
        }

        module.exports = baseGet;

        /***/
      },
      /* 170 */
      /***/ function(module, exports, __webpack_require__) {
        var isArray = __webpack_require__(6),
          isKey = __webpack_require__(91),
          stringToPath = __webpack_require__(507),
          toString = __webpack_require__(144);

        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }

          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }

        module.exports = castPath;

        /***/
      },
      /* 171 */
      /***/ function(module, exports, __webpack_require__) {
        var castPath = __webpack_require__(170),
          isArguments = __webpack_require__(62),
          isArray = __webpack_require__(6),
          isIndex = __webpack_require__(64),
          isLength = __webpack_require__(65),
          toKey = __webpack_require__(55);

        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1,
            length = path.length,
            result = false;

          while (++index < length) {
            var key = toKey(path[index]);

            if (!(result = object != null && hasFunc(object, key))) {
              break;
            }

            object = object[key];
          }

          if (result || ++index != length) {
            return result;
          }

          length = object == null ? 0 : object.length;
          return (
            !!length &&
            isLength(length) &&
            isIndex(key, length) &&
            (isArray(object) || isArguments(object))
          );
        }

        module.exports = hasPath;

        /***/
      },
      /* 172 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = normalizeOptions;

        function _path() {
          var data = _interopRequireDefault(__webpack_require__(7));

          _path = function _path() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function normalizeOptions(config) {
          var _config$options = config.options,
            filename = _config$options.filename,
            _config$options$filen = _config$options.filenameRelative,
            filenameRelative =
              _config$options$filen === void 0
                ? filename || "unknown"
                : _config$options$filen,
            _config$options$sourc = _config$options.sourceType,
            sourceType =
              _config$options$sourc === void 0
                ? "module"
                : _config$options$sourc,
            inputSourceMap = _config$options.inputSourceMap,
            _config$options$sourc2 = _config$options.sourceMaps,
            sourceMaps =
              _config$options$sourc2 === void 0
                ? !!inputSourceMap
                : _config$options$sourc2,
            moduleRoot = _config$options.moduleRoot,
            _config$options$sourc3 = _config$options.sourceRoot,
            sourceRoot =
              _config$options$sourc3 === void 0
                ? moduleRoot
                : _config$options$sourc3,
            _config$options$sourc4 = _config$options.sourceFileName,
            sourceFileName =
              _config$options$sourc4 === void 0
                ? filenameRelative
                : _config$options$sourc4,
            _config$options$comme = _config$options.comments,
            comments =
              _config$options$comme === void 0 ? true : _config$options$comme,
            _config$options$compa = _config$options.compact,
            compact =
              _config$options$compa === void 0 ? "auto" : _config$options$compa;
          var opts = config.options;
          var options = Object.assign({}, opts, {
            parserOpts: Object.assign(
              {
                sourceType:
                  _path().default.extname(filenameRelative) === ".mjs"
                    ? "module"
                    : sourceType,
                sourceFileName: filename,
                plugins: []
              },
              opts.parserOpts
            ),
            generatorOpts: Object.assign(
              {
                filename: filename,
                auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
                auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
                retainLines: opts.retainLines,
                comments: comments,
                shouldPrintComment: opts.shouldPrintComment,
                compact: compact,
                minified: opts.minified,
                sourceMaps: sourceMaps,
                sourceRoot: sourceRoot,
                sourceFileName: sourceFileName
              },
              opts.generatorOpts
            )
          });

          for (
            var _iterator = config.passes,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var plugins = _ref;

            for (
              var _iterator2 = plugins,
                _isArray2 = Array.isArray(_iterator2),
                _i2 = 0,
                _iterator2 = _isArray2
                  ? _iterator2
                  : _iterator2[Symbol.iterator]();
              ;

            ) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var plugin = _ref2;

              if (plugin.manipulateOptions) {
                plugin.manipulateOptions(options, options.parserOpts);
              }
            }
          }

          return options;
        }

        /***/
      },
      /* 173 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = normalizeFile;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _convertSourceMap() {
          var data = _interopRequireDefault(__webpack_require__(174));

          _convertSourceMap = function _convertSourceMap() {
            return data;
          };

          return data;
        }

        function _babylon() {
          var data = __webpack_require__(83);

          _babylon = function _babylon() {
            return data;
          };

          return data;
        }

        function _codeFrame() {
          var data = __webpack_require__(50);

          _codeFrame = function _codeFrame() {
            return data;
          };

          return data;
        }

        var _file = _interopRequireDefault(__webpack_require__(100));

        var _missingPluginHelper = _interopRequireDefault(
          __webpack_require__(525)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var shebangRegex = /^#!.*/;

        function normalizeFile(pluginPasses, options, code, ast) {
          code = "" + (code || "");
          var shebang = null;
          var inputMap = null;

          if (options.inputSourceMap !== false) {
            inputMap = _convertSourceMap().default.fromSource(code);

            if (inputMap) {
              code = _convertSourceMap().default.removeComments(code);
            } else if (typeof options.inputSourceMap === "object") {
              inputMap = _convertSourceMap().default.fromObject(
                options.inputSourceMap
              );
            }
          }

          var shebangMatch = shebangRegex.exec(code);

          if (shebangMatch) {
            shebang = shebangMatch[0];
            code = code.replace(shebangRegex, "");
          }

          if (ast) {
            if (ast.type === "Program") {
              ast = t().file(ast, [], []);
            } else if (ast.type !== "File") {
              throw new Error("AST root must be a Program or File node");
            }
          } else {
            ast = parser(pluginPasses, options, code);
          }

          return new _file.default(options, {
            code: code,
            ast: ast,
            shebang: shebang,
            inputMap: inputMap
          });
        }

        function parser(pluginPasses, options, code) {
          try {
            var results = [];

            for (
              var _iterator = pluginPasses,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var plugins = _ref;

              for (
                var _iterator2 = plugins,
                  _isArray2 = Array.isArray(_iterator2),
                  _i2 = 0,
                  _iterator2 = _isArray2
                    ? _iterator2
                    : _iterator2[Symbol.iterator]();
                ;

              ) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var plugin = _ref2;
                var parserOverride = plugin.parserOverride;

                if (parserOverride) {
                  var _ast = parserOverride(
                    code,
                    options.parserOpts,
                    _babylon().parse
                  );

                  if (_ast !== undefined) results.push(_ast);
                }
              }
            }

            if (results.length === 0) {
              return (0, _babylon().parse)(code, options.parserOpts);
            } else if (results.length === 1) {
              if (typeof results[0].then === "function") {
                throw new Error(
                  "You appear to be using an async codegen plugin, " +
                    "which your current version of Babel does not support. " +
                    "If you're using a published plugin, you may need to upgrade " +
                    "your @babel/core version."
                );
              }

              return results[0];
            }

            throw new Error(
              "More than one plugin attempted to override parsing."
            );
          } catch (err) {
            if (err.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED") {
              err.message +=
                "\nConsider renaming the file to '.mjs', or setting sourceType:module " +
                "or sourceType:unambiguous in your Babel config for this file.";
            }

            var loc = err.loc,
              missingPlugin = err.missingPlugin;

            if (loc) {
              var codeFrame = (0, _codeFrame().codeFrameColumns)(
                code,
                {
                  start: {
                    line: loc.line,
                    column: loc.column + 1
                  }
                },
                options
              );

              if (missingPlugin) {
                err.message =
                  (options.filename || "unknown") +
                  ": " +
                  (0, _missingPluginHelper.default)(
                    missingPlugin[0],
                    loc,
                    codeFrame
                  );
              } else {
                err.message =
                  (options.filename || "unknown") +
                  ": " +
                  err.message +
                  "\n\n" +
                  codeFrame;
              }

              err.code = "BABEL_PARSE_ERROR";
            }

            throw err;
          }
        }

        /***/
      },
      /* 174 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var fs = __webpack_require__(524);

          var path = __webpack_require__(7);

          Object.defineProperty(exports, "commentRegex", {
            get: function getCommentRegex() {
              return /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/gm;
            }
          });
          Object.defineProperty(exports, "mapFileCommentRegex", {
            get: function getMapFileCommentRegex() {
              return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"`]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/gm;
            }
          });

          function decodeBase64(base64) {
            return new Buffer(base64, "base64").toString();
          }

          function stripComment(sm) {
            return sm.split(",").pop();
          }

          function readFromFileMap(sm, dir) {
            var r = exports.mapFileCommentRegex.exec(sm);
            var filename = r[1] || r[2];
            var filepath = path.resolve(dir, filename);

            try {
              return fs.readFileSync(filepath, "utf8");
            } catch (e) {
              throw new Error(
                "An error occurred while trying to read the map file at " +
                  filepath +
                  "\n" +
                  e
              );
            }
          }

          function Converter(sm, opts) {
            opts = opts || {};
            if (opts.isFileComment)
              sm = readFromFileMap(sm, opts.commentFileDir);
            if (opts.hasComment) sm = stripComment(sm);
            if (opts.isEncoded) sm = decodeBase64(sm);
            if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);
            this.sourcemap = sm;
          }

          Converter.prototype.toJSON = function(space) {
            return JSON.stringify(this.sourcemap, null, space);
          };

          Converter.prototype.toBase64 = function() {
            var json = this.toJSON();
            return new Buffer(json).toString("base64");
          };

          Converter.prototype.toComment = function(options) {
            var base64 = this.toBase64();
            var data =
              "sourceMappingURL=data:application/json;charset=utf-8;base64," +
              base64;
            return options && options.multiline
              ? "/*# " + data + " */"
              : "//# " + data;
          };

          Converter.prototype.toObject = function() {
            return JSON.parse(this.toJSON());
          };

          Converter.prototype.addProperty = function(key, value) {
            if (this.sourcemap.hasOwnProperty(key))
              throw new Error(
                'property "' +
                  key +
                  '" already exists on the sourcemap, use set property instead'
              );
            return this.setProperty(key, value);
          };

          Converter.prototype.setProperty = function(key, value) {
            this.sourcemap[key] = value;
            return this;
          };

          Converter.prototype.getProperty = function(key) {
            return this.sourcemap[key];
          };

          exports.fromObject = function(obj) {
            return new Converter(obj);
          };

          exports.fromJSON = function(json) {
            return new Converter(json, {
              isJSON: true
            });
          };

          exports.fromBase64 = function(base64) {
            return new Converter(base64, {
              isEncoded: true
            });
          };

          exports.fromComment = function(comment) {
            comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, "");
            return new Converter(comment, {
              isEncoded: true,
              hasComment: true
            });
          };

          exports.fromMapFileComment = function(comment, dir) {
            return new Converter(comment, {
              commentFileDir: dir,
              isFileComment: true,
              isJSON: true
            });
          };

          exports.fromSource = function(content) {
            var m = content.match(exports.commentRegex);
            return m ? exports.fromComment(m.pop()) : null;
          };

          exports.fromMapFileSource = function(content, dir) {
            var m = content.match(exports.mapFileCommentRegex);
            return m ? exports.fromMapFileComment(m.pop(), dir) : null;
          };

          exports.removeComments = function(src) {
            return src.replace(exports.commentRegex, "");
          };

          exports.removeMapFileComments = function(src) {
            return src.replace(exports.mapFileCommentRegex, "");
          };

          exports.generateMapFileComment = function(file, options) {
            var data = "sourceMappingURL=" + file;
            return options && options.multiline
              ? "/*# " + data + " */"
              : "//# " + data;
          };
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(153).Buffer));

        /***/
      },
      /* 175 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = transformSync;

        var _config = _interopRequireDefault(__webpack_require__(22));

        var _transformation = __webpack_require__(54);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function transformSync(code, opts) {
          var config = (0, _config.default)(opts);
          if (config === null) return null;
          return (0, _transformation.runSync)(config, code);
        }

        /***/
      },
      /* 176 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = transformFromAstSync;

        var _config = _interopRequireDefault(__webpack_require__(22));

        var _transformation = __webpack_require__(54);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function transformFromAstSync(ast, code, opts) {
          var config = (0, _config.default)(opts);
          if (config === null) return null;
          if (!ast) throw new Error("No AST given");
          return (0, _transformation.runSync)(config, code, ast);
        }

        /***/
      },
      /* 177 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("asyncGenerators");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 178 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push(
                "classProperties",
                "classPrivateProperties"
              );
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 179 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var _options$legacy = options.legacy,
            legacy = _options$legacy === void 0 ? false : _options$legacy;

          if (typeof legacy !== "boolean") {
            throw new Error("'legacy' must be a boolean.");
          }

          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push(legacy ? "decorators" : "decorators2");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 180 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("doExpressions");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 181 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("dynamicImport");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 182 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("exportDefaultFrom");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 183 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("exportNamespaceFrom");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 184 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("functionBind");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 185 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("functionSent");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 186 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("importMeta");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 187 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("objectRestSpread");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 188 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("optionalCatchBinding");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 189 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("pipelineOperator");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 190 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push(
                "typescript",
                "objectRestSpread",
                "classProperties"
              );
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 191 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperRemapAsyncToGenerator() {
          var data = _interopRequireDefault(__webpack_require__(192));

          _helperRemapAsyncToGenerator = function _helperRemapAsyncToGenerator() {
            return data;
          };

          return data;
        }

        function _helperModuleImports() {
          var data = __webpack_require__(94);

          _helperModuleImports = function _helperModuleImports() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var method = options.method,
            module = options.module;

          if (method && module) {
            return {
              visitor: {
                Function: function Function(path, state) {
                  if (!path.node.async || path.node.generator) return;
                  var wrapAsync = state.methodWrapper;

                  if (wrapAsync) {
                    wrapAsync = _core().types.cloneNode(wrapAsync);
                  } else {
                    wrapAsync = state.methodWrapper = (0,
                    _helperModuleImports().addNamed)(path, method, module);
                  }

                  (0, _helperRemapAsyncToGenerator().default)(path, {
                    wrapAsync: wrapAsync
                  });
                }
              }
            };
          }

          return {
            visitor: {
              Function: function Function(path, state) {
                if (!path.node.async || path.node.generator) return;
                (0, _helperRemapAsyncToGenerator().default)(path, {
                  wrapAsync: state.addHelper("asyncToGenerator")
                });
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 192 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function _helperWrapFunction() {
          var data = _interopRequireDefault(__webpack_require__(193));

          _helperWrapFunction = function _helperWrapFunction() {
            return data;
          };

          return data;
        }

        function _helperAnnotateAsPure() {
          var data = _interopRequireDefault(__webpack_require__(56));

          _helperAnnotateAsPure = function _helperAnnotateAsPure() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var awaitVisitor = {
          Function: function Function(path) {
            path.skip();
          },
          AwaitExpression: function AwaitExpression(path, _ref) {
            var wrapAwait = _ref.wrapAwait;
            var argument = path.get("argument");

            if (path.parentPath.isYieldExpression()) {
              path.replaceWith(argument.node);
              return;
            }

            path.replaceWith(
              t().yieldExpression(
                wrapAwait
                  ? t().callExpression(t().cloneNode(wrapAwait), [
                      argument.node
                    ])
                  : argument.node
              )
            );
          }
        };

        function _default(path, helpers) {
          path.traverse(awaitVisitor, {
            wrapAwait: helpers.wrapAwait
          });
          var isIIFE = checkIsIIFE(path);
          path.node.async = false;
          path.node.generator = true;
          (0, _helperWrapFunction().default)(
            path,
            t().cloneNode(helpers.wrapAsync)
          );
          var isProperty =
            path.isObjectMethod() ||
            path.isClassMethod() ||
            path.parentPath.isObjectProperty() ||
            path.parentPath.isClassProperty();

          if (!isProperty && !isIIFE && path.isExpression()) {
            (0, _helperAnnotateAsPure().default)(path);
          }

          function checkIsIIFE(path) {
            if (
              path.parentPath.isCallExpression({
                callee: path.node
              })
            ) {
              return true;
            }

            var parentPath = path.parentPath;

            if (
              parentPath.isMemberExpression() &&
              t().isIdentifier(parentPath.node.property, {
                name: "bind"
              })
            ) {
              var bindCall = parentPath.parentPath;
              return (
                bindCall.isCallExpression() &&
                bindCall.node.arguments.length === 1 &&
                t().isThisExpression(bindCall.node.arguments[0]) &&
                bindCall.parentPath.isCallExpression({
                  callee: bindCall.node
                })
              );
            }

            return false;
          }
        }

        /***/
      },
      /* 193 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = wrapFunction;

        function _helperFunctionName() {
          var data = _interopRequireDefault(__webpack_require__(20));

          _helperFunctionName = function _helperFunctionName() {
            return data;
          };

          return data;
        }

        function _template() {
          var data = _interopRequireDefault(__webpack_require__(21));

          _template = function _template() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var buildExpressionWrapper = _template().default.expression(
          "\n  (function () {\n    var REF = FUNCTION;\n    return function NAME(PARAMS) {\n      return REF.apply(this, arguments);\n    };\n  })()\n"
        );

        var buildDeclarationWrapper = (0, _template().default)(
          "\n  function NAME(PARAMS) { return REF.apply(this, arguments); }\n  function REF() {\n    REF = FUNCTION;\n    return REF.apply(this, arguments);\n  }\n"
        );

        function classOrObjectMethod(path, callId) {
          var node = path.node;
          var body = node.body;
          var container = t().functionExpression(
            null,
            [],
            t().blockStatement(body.body),
            true
          );
          body.body = [
            t().returnStatement(
              t().callExpression(t().callExpression(callId, [container]), [])
            )
          ];
          node.async = false;
          node.generator = false;
          path
            .get("body.body.0.argument.callee.arguments.0")
            .unwrapFunctionEnvironment();
        }

        function plainFunction(path, callId) {
          var node = path.node;
          var isDeclaration = path.isFunctionDeclaration();
          var functionId = node.id;
          var wrapper = isDeclaration
            ? buildDeclarationWrapper
            : buildExpressionWrapper;

          if (path.isArrowFunctionExpression()) {
            path.arrowFunctionToExpression();
          }

          node.id = null;

          if (isDeclaration) {
            node.type = "FunctionExpression";
          }

          var built = t().callExpression(callId, [node]);
          var container = wrapper({
            NAME: functionId || null,
            REF: path.scope.generateUidIdentifier(
              functionId ? functionId.name : "ref"
            ),
            FUNCTION: built,
            PARAMS: node.params.reduce(
              function(acc, param) {
                acc.done =
                  acc.done ||
                  t().isAssignmentPattern(param) ||
                  t().isRestElement(param);

                if (!acc.done) {
                  acc.params.push(path.scope.generateUidIdentifier("x"));
                }

                return acc;
              },
              {
                params: [],
                done: false
              }
            ).params
          });

          if (isDeclaration) {
            path.replaceWith(container[0]);
            path.insertAfter(container[1]);
          } else {
            var retFunction = container.callee.body.body[1].argument;

            if (!functionId) {
              (0, _helperFunctionName().default)({
                node: retFunction,
                parent: path.parent,
                scope: path.scope
              });
            }

            if (!retFunction || retFunction.id || node.params.length) {
              path.replaceWith(container);
            } else {
              path.replaceWith(built);
            }
          }
        }

        function wrapFunction(path, callId) {
          if (path.isClassMethod() || path.isObjectMethod()) {
            classOrObjectMethod(path, callId);
          } else {
            plainFunction(path, callId);
          }
        }

        /***/
      },
      /* 194 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(global, process) {
          var formatRegExp = /%[sdj%]/g;

          exports.format = function(f) {
            if (!isString(f)) {
              var objects = [];

              for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
              }

              return objects.join(" ");
            }

            var i = 1;
            var args = arguments;
            var len = args.length;
            var str = String(f).replace(formatRegExp, function(x) {
              if (x === "%%") return "%";
              if (i >= len) return x;

              switch (x) {
                case "%s":
                  return String(args[i++]);

                case "%d":
                  return Number(args[i++]);

                case "%j":
                  try {
                    return JSON.stringify(args[i++]);
                  } catch (_) {
                    return "[Circular]";
                  }

                default:
                  return x;
              }
            });

            for (var x = args[i]; i < len; x = args[++i]) {
              if (isNull(x) || !isObject(x)) {
                str += " " + x;
              } else {
                str += " " + inspect(x);
              }
            }

            return str;
          };

          exports.deprecate = function(fn, msg) {
            if (isUndefined(global.process)) {
              return function() {
                return exports.deprecate(fn, msg).apply(this, arguments);
              };
            }

            if (process.noDeprecation === true) {
              return fn;
            }

            var warned = false;

            function deprecated() {
              if (!warned) {
                if (process.throwDeprecation) {
                  throw new Error(msg);
                } else if (process.traceDeprecation) {
                  console.trace(msg);
                } else {
                  console.error(msg);
                }

                warned = true;
              }

              return fn.apply(this, arguments);
            }

            return deprecated;
          };

          var debugs = {};
          var debugEnviron;

          exports.debuglog = function(set) {
            if (isUndefined(debugEnviron))
              debugEnviron = { NODE_ENV: "production" }.NODE_DEBUG || "";
            set = set.toUpperCase();

            if (!debugs[set]) {
              if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
                var pid = process.pid;

                debugs[set] = function() {
                  var msg = exports.format.apply(exports, arguments);
                  console.error("%s %d: %s", set, pid, msg);
                };
              } else {
                debugs[set] = function() {};
              }
            }

            return debugs[set];
          };

          function inspect(obj, opts) {
            var ctx = {
              seen: [],
              stylize: stylizeNoColor
            };
            if (arguments.length >= 3) ctx.depth = arguments[2];
            if (arguments.length >= 4) ctx.colors = arguments[3];

            if (isBoolean(opts)) {
              ctx.showHidden = opts;
            } else if (opts) {
              exports._extend(ctx, opts);
            }

            if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
            if (isUndefined(ctx.depth)) ctx.depth = 2;
            if (isUndefined(ctx.colors)) ctx.colors = false;
            if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
            if (ctx.colors) ctx.stylize = stylizeWithColor;
            return formatValue(ctx, obj, ctx.depth);
          }

          exports.inspect = inspect;
          inspect.colors = {
            bold: [1, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            white: [37, 39],
            grey: [90, 39],
            black: [30, 39],
            blue: [34, 39],
            cyan: [36, 39],
            green: [32, 39],
            magenta: [35, 39],
            red: [31, 39],
            yellow: [33, 39]
          };
          inspect.styles = {
            special: "cyan",
            number: "yellow",
            boolean: "yellow",
            undefined: "grey",
            null: "bold",
            string: "green",
            date: "magenta",
            regexp: "red"
          };

          function stylizeWithColor(str, styleType) {
            var style = inspect.styles[styleType];

            if (style) {
              return (
                "\x1B[" +
                inspect.colors[style][0] +
                "m" +
                str +
                "\x1B[" +
                inspect.colors[style][1] +
                "m"
              );
            } else {
              return str;
            }
          }

          function stylizeNoColor(str, styleType) {
            return str;
          }

          function arrayToHash(array) {
            var hash = {};
            array.forEach(function(val, idx) {
              hash[val] = true;
            });
            return hash;
          }

          function formatValue(ctx, value, recurseTimes) {
            if (
              ctx.customInspect &&
              value &&
              isFunction(value.inspect) &&
              value.inspect !== exports.inspect &&
              !(value.constructor && value.constructor.prototype === value)
            ) {
              var ret = value.inspect(recurseTimes, ctx);

              if (!isString(ret)) {
                ret = formatValue(ctx, ret, recurseTimes);
              }

              return ret;
            }

            var primitive = formatPrimitive(ctx, value);

            if (primitive) {
              return primitive;
            }

            var keys = Object.keys(value);
            var visibleKeys = arrayToHash(keys);

            if (ctx.showHidden) {
              keys = Object.getOwnPropertyNames(value);
            }

            if (
              isError(value) &&
              (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)
            ) {
              return formatError(value);
            }

            if (keys.length === 0) {
              if (isFunction(value)) {
                var name = value.name ? ": " + value.name : "";
                return ctx.stylize("[Function" + name + "]", "special");
              }

              if (isRegExp(value)) {
                return ctx.stylize(
                  RegExp.prototype.toString.call(value),
                  "regexp"
                );
              }

              if (isDate(value)) {
                return ctx.stylize(Date.prototype.toString.call(value), "date");
              }

              if (isError(value)) {
                return formatError(value);
              }
            }

            var base = "",
              array = false,
              braces = ["{", "}"];

            if (isArray(value)) {
              array = true;
              braces = ["[", "]"];
            }

            if (isFunction(value)) {
              var n = value.name ? ": " + value.name : "";
              base = " [Function" + n + "]";
            }

            if (isRegExp(value)) {
              base = " " + RegExp.prototype.toString.call(value);
            }

            if (isDate(value)) {
              base = " " + Date.prototype.toUTCString.call(value);
            }

            if (isError(value)) {
              base = " " + formatError(value);
            }

            if (keys.length === 0 && (!array || value.length == 0)) {
              return braces[0] + base + braces[1];
            }

            if (recurseTimes < 0) {
              if (isRegExp(value)) {
                return ctx.stylize(
                  RegExp.prototype.toString.call(value),
                  "regexp"
                );
              } else {
                return ctx.stylize("[Object]", "special");
              }
            }

            ctx.seen.push(value);
            var output;

            if (array) {
              output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
            } else {
              output = keys.map(function(key) {
                return formatProperty(
                  ctx,
                  value,
                  recurseTimes,
                  visibleKeys,
                  key,
                  array
                );
              });
            }

            ctx.seen.pop();
            return reduceToSingleString(output, base, braces);
          }

          function formatPrimitive(ctx, value) {
            if (isUndefined(value))
              return ctx.stylize("undefined", "undefined");

            if (isString(value)) {
              var simple =
                "'" +
                JSON.stringify(value)
                  .replace(/^"|"$/g, "")
                  .replace(/'/g, "\\'")
                  .replace(/\\"/g, '"') +
                "'";
              return ctx.stylize(simple, "string");
            }

            if (isNumber(value)) return ctx.stylize("" + value, "number");
            if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
            if (isNull(value)) return ctx.stylize("null", "null");
          }

          function formatError(value) {
            return "[" + Error.prototype.toString.call(value) + "]";
          }

          function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
            var output = [];

            for (var i = 0, l = value.length; i < l; ++i) {
              if (hasOwnProperty(value, String(i))) {
                output.push(
                  formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    String(i),
                    true
                  )
                );
              } else {
                output.push("");
              }
            }

            keys.forEach(function(key) {
              if (!key.match(/^\d+$/)) {
                output.push(
                  formatProperty(
                    ctx,
                    value,
                    recurseTimes,
                    visibleKeys,
                    key,
                    true
                  )
                );
              }
            });
            return output;
          }

          function formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            array
          ) {
            var name, str, desc;
            desc = Object.getOwnPropertyDescriptor(value, key) || {
              value: value[key]
            };

            if (desc.get) {
              if (desc.set) {
                str = ctx.stylize("[Getter/Setter]", "special");
              } else {
                str = ctx.stylize("[Getter]", "special");
              }
            } else {
              if (desc.set) {
                str = ctx.stylize("[Setter]", "special");
              }
            }

            if (!hasOwnProperty(visibleKeys, key)) {
              name = "[" + key + "]";
            }

            if (!str) {
              if (ctx.seen.indexOf(desc.value) < 0) {
                if (isNull(recurseTimes)) {
                  str = formatValue(ctx, desc.value, null);
                } else {
                  str = formatValue(ctx, desc.value, recurseTimes - 1);
                }

                if (str.indexOf("\n") > -1) {
                  if (array) {
                    str = str
                      .split("\n")
                      .map(function(line) {
                        return "  " + line;
                      })
                      .join("\n")
                      .substr(2);
                  } else {
                    str =
                      "\n" +
                      str
                        .split("\n")
                        .map(function(line) {
                          return "   " + line;
                        })
                        .join("\n");
                  }
                }
              } else {
                str = ctx.stylize("[Circular]", "special");
              }
            }

            if (isUndefined(name)) {
              if (array && key.match(/^\d+$/)) {
                return str;
              }

              name = JSON.stringify("" + key);

              if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                name = name.substr(1, name.length - 2);
                name = ctx.stylize(name, "name");
              } else {
                name = name
                  .replace(/'/g, "\\'")
                  .replace(/\\"/g, '"')
                  .replace(/(^"|"$)/g, "'");
                name = ctx.stylize(name, "string");
              }
            }

            return name + ": " + str;
          }

          function reduceToSingleString(output, base, braces) {
            var numLinesEst = 0;
            var length = output.reduce(function(prev, cur) {
              numLinesEst++;
              if (cur.indexOf("\n") >= 0) numLinesEst++;
              return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
            }, 0);

            if (length > 60) {
              return (
                braces[0] +
                (base === "" ? "" : base + "\n ") +
                " " +
                output.join(",\n  ") +
                " " +
                braces[1]
              );
            }

            return braces[0] + base + " " + output.join(", ") + " " + braces[1];
          }

          function isArray(ar) {
            return Array.isArray(ar);
          }

          exports.isArray = isArray;

          function isBoolean(arg) {
            return typeof arg === "boolean";
          }

          exports.isBoolean = isBoolean;

          function isNull(arg) {
            return arg === null;
          }

          exports.isNull = isNull;

          function isNullOrUndefined(arg) {
            return arg == null;
          }

          exports.isNullOrUndefined = isNullOrUndefined;

          function isNumber(arg) {
            return typeof arg === "number";
          }

          exports.isNumber = isNumber;

          function isString(arg) {
            return typeof arg === "string";
          }

          exports.isString = isString;

          function isSymbol(arg) {
            return typeof arg === "symbol";
          }

          exports.isSymbol = isSymbol;

          function isUndefined(arg) {
            return arg === void 0;
          }

          exports.isUndefined = isUndefined;

          function isRegExp(re) {
            return isObject(re) && objectToString(re) === "[object RegExp]";
          }

          exports.isRegExp = isRegExp;

          function isObject(arg) {
            return typeof arg === "object" && arg !== null;
          }

          exports.isObject = isObject;

          function isDate(d) {
            return isObject(d) && objectToString(d) === "[object Date]";
          }

          exports.isDate = isDate;

          function isError(e) {
            return (
              isObject(e) &&
              (objectToString(e) === "[object Error]" || e instanceof Error)
            );
          }

          exports.isError = isError;

          function isFunction(arg) {
            return typeof arg === "function";
          }

          exports.isFunction = isFunction;

          function isPrimitive(arg) {
            return (
              arg === null ||
              typeof arg === "boolean" ||
              typeof arg === "number" ||
              typeof arg === "string" ||
              typeof arg === "symbol" ||
              typeof arg === "undefined"
            );
          }

          exports.isPrimitive = isPrimitive;
          exports.isBuffer = __webpack_require__(533);

          function objectToString(o) {
            return Object.prototype.toString.call(o);
          }

          function pad(n) {
            return n < 10 ? "0" + n.toString(10) : n.toString(10);
          }

          var months = [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec"
          ];

          function timestamp() {
            var d = new Date();
            var time = [
              pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())
            ].join(":");
            return [d.getDate(), months[d.getMonth()], time].join(" ");
          }

          exports.log = function() {
            console.log(
              "%s - %s",
              timestamp(),
              exports.format.apply(exports, arguments)
            );
          };

          exports.inherits = __webpack_require__(534);

          exports._extend = function(origin, add) {
            if (!add || !isObject(add)) return origin;
            var keys = Object.keys(add);
            var i = keys.length;

            while (i--) {
              origin[keys[i]] = add[keys[i]];
            }

            return origin;
          };

          function hasOwnProperty(obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(18), __webpack_require__(12)));

        /***/
      },
      /* 195 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isModule;

        function isModule(path) {
          var sourceType = path.node.sourceType;

          if (sourceType !== "module" && sourceType !== "script") {
            throw path.buildCodeFrameError(
              'Unknown sourceType "' + sourceType + '", cannot transform.'
            );
          }

          return path.node.sourceType === "module";
        }

        /***/
      },
      /* 196 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperRemapAsyncToGenerator() {
          var data = _interopRequireDefault(__webpack_require__(192));

          _helperRemapAsyncToGenerator = function _helperRemapAsyncToGenerator() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxAsyncGenerators() {
          var data = _interopRequireDefault(__webpack_require__(177));

          _pluginSyntaxAsyncGenerators = function _pluginSyntaxAsyncGenerators() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _forAwait = _interopRequireDefault(__webpack_require__(536));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          var yieldStarVisitor = {
            Function: function Function(path) {
              path.skip();
            },
            YieldExpression: function YieldExpression(_ref, state) {
              var node = _ref.node;
              if (!node.delegate) return;
              var callee = state.addHelper("asyncGeneratorDelegate");
              node.argument = _core().types.callExpression(callee, [
                _core().types.callExpression(state.addHelper("asyncIterator"), [
                  node.argument
                ]),
                state.addHelper("awaitAsyncGenerator")
              ]);
            }
          };
          var forAwaitVisitor = {
            Function: function Function(path) {
              path.skip();
            },
            ForOfStatement: function ForOfStatement(path, _ref2) {
              var file = _ref2.file;
              var node = path.node;
              if (!node.await) return;
              var build = (0, _forAwait.default)(path, {
                getAsyncIterator: file.addHelper("asyncIterator")
              });
              var declar = build.declar,
                loop = build.loop;
              var block = loop.body;
              path.ensureBlock();

              if (declar) {
                block.body.push(declar);
              }

              block.body = block.body.concat(node.body.body);

              _core().types.inherits(loop, node);

              _core().types.inherits(loop.body, node.body);

              if (build.replaceParent) {
                path.parentPath.replaceWithMultiple(build.node);
              } else {
                path.replaceWithMultiple(build.node);
              }
            }
          };
          var visitor = {
            Function: function Function(path, state) {
              if (!path.node.async) return;
              path.traverse(forAwaitVisitor, state);
              if (!path.node.generator) return;
              path.traverse(yieldStarVisitor, state);
              (0, _helperRemapAsyncToGenerator().default)(path, {
                wrapAsync: state.addHelper("wrapAsyncGenerator"),
                wrapAwait: state.addHelper("awaitAsyncGenerator")
              });
            }
          };
          return {
            inherits: _pluginSyntaxAsyncGenerators().default,
            visitor: {
              Program: function Program(path, state) {
                path.traverse(visitor, state);
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 197 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperFunctionName() {
          var data = _interopRequireDefault(__webpack_require__(20));

          _helperFunctionName = function _helperFunctionName() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxClassProperties() {
          var data = _interopRequireDefault(__webpack_require__(178));

          _pluginSyntaxClassProperties = function _pluginSyntaxClassProperties() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _helperReplaceSupers() {
          var data = __webpack_require__(95);

          _helperReplaceSupers = function _helperReplaceSupers() {
            return data;
          };

          return data;
        }

        var _templateObject = _taggedTemplateLiteralLoose(["MEMBER = VALUE"]);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _taggedTemplateLiteralLoose(strings, raw) {
          if (!raw) {
            raw = strings.slice(0);
          }

          strings.raw = raw;
          return strings;
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var loose = options.loose;

          var findBareSupers = _core().traverse.visitors.merge([
            {
              Super: function Super(path) {
                var node = path.node,
                  parentPath = path.parentPath;

                if (
                  parentPath.isCallExpression({
                    callee: node
                  })
                ) {
                  this.push(parentPath);
                }
              }
            },
            _helperReplaceSupers().environmentVisitor
          ]);

          var referenceVisitor = {
            "TSTypeAnnotation|TypeAnnotation": function TSTypeAnnotationTypeAnnotation(
              path
            ) {
              path.skip();
            },
            ReferencedIdentifier: function ReferencedIdentifier(path) {
              if (this.scope.hasOwnBinding(path.node.name)) {
                this.scope.rename(path.node.name);
                path.skip();
              }
            }
          };

          var classFieldDefinitionEvaluationTDZVisitor = _core().traverse.visitors.merge(
            [
              {
                ReferencedIdentifier: function ReferencedIdentifier(path) {
                  if (this.classRef === path.scope.getBinding(path.node.name)) {
                    var classNameTDZError = this.file.addHelper(
                      "classNameTDZError"
                    );

                    var throwNode = _core().types.callExpression(
                      classNameTDZError,
                      [_core().types.stringLiteral(path.node.name)]
                    );

                    path.replaceWith(
                      _core().types.sequenceExpression([throwNode, path.node])
                    );
                    path.skip();
                  }
                }
              },
              _helperReplaceSupers().environmentVisitor
            ]
          );

          var foldDefinePropertyCalls = function foldDefinePropertyCalls(
            nodes
          ) {
            return _core().types.expressionStatement(
              nodes.reduce(function(folded, node) {
                node.arguments[0] = folded;
                return node;
              })
            );
          };

          var buildClassPropertySpec = function buildClassPropertySpec(
            ref,
            _ref,
            scope,
            state
          ) {
            var key = _ref.key,
              value = _ref.value,
              computed = _ref.computed;
            return _core().types.callExpression(
              state.addHelper("defineProperty"),
              [
                ref,
                _core().types.isIdentifier(key) && !computed
                  ? _core().types.stringLiteral(key.name)
                  : key,
                value || scope.buildUndefinedNode()
              ]
            );
          };

          var buildClassPropertyLoose = function buildClassPropertyLoose(
            ref,
            _ref2,
            scope
          ) {
            var key = _ref2.key,
              value = _ref2.value,
              computed = _ref2.computed;
            return _core().template.statement(_templateObject)({
              MEMBER: _core().types.memberExpression(
                _core().types.cloneNode(ref),
                key,
                computed || _core().types.isLiteral(key)
              ),
              VALUE: value || scope.buildUndefinedNode()
            });
          };

          var buildClassProperty = loose
            ? buildClassPropertyLoose
            : buildClassPropertySpec;
          return {
            inherits: _pluginSyntaxClassProperties().default,
            visitor: {
              Class: function Class(path, state) {
                var isDerived = !!path.node.superClass;
                var constructor;
                var props = [];
                var computedPaths = [];
                var body = path.get("body");

                for (
                  var _iterator = body.get("body"),
                    _isArray = Array.isArray(_iterator),
                    _i = 0,
                    _iterator = _isArray
                      ? _iterator
                      : _iterator[Symbol.iterator]();
                  ;

                ) {
                  var _ref3;

                  if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref3 = _iterator[_i++];
                  } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref3 = _i.value;
                  }

                  var _path = _ref3;

                  if (_path.node.computed) {
                    computedPaths.push(_path);
                  }

                  if (_path.isClassProperty()) {
                    props.push(_path);
                  } else if (
                    _path.isClassMethod({
                      kind: "constructor"
                    })
                  ) {
                    constructor = _path;
                  }
                }

                if (!props.length) return;
                var ref;

                if (path.isClassExpression() || !path.node.id) {
                  (0, _helperFunctionName().default)(path);
                  ref = path.scope.generateUidIdentifier("class");
                } else {
                  ref = path.node.id;
                }

                var computedNodes = [];
                var staticNodes = [];
                var instanceBody = [];

                for (var _i2 = 0; _i2 < computedPaths.length; _i2++) {
                  var computedPath = computedPaths[_i2];
                  var computedNode = computedPath.node;

                  if (!computedPath.get("key").isConstantExpression()) {
                    computedPath.traverse(
                      classFieldDefinitionEvaluationTDZVisitor,
                      {
                        classRef: path.scope.getBinding(ref.name),
                        file: this.file
                      }
                    );
                    var ident = path.scope.generateUidIdentifierBasedOnNode(
                      computedNode.key
                    );
                    computedNodes.push(
                      _core().types.variableDeclaration("var", [
                        _core().types.variableDeclarator(
                          ident,
                          computedNode.key
                        )
                      ])
                    );
                    computedNode.key = _core().types.cloneNode(ident);
                  }
                }

                for (var _i3 = 0; _i3 < props.length; _i3++) {
                  var _prop = props[_i3];
                  var propNode = _prop.node;
                  if (propNode.decorators && propNode.decorators.length > 0)
                    continue;

                  if (propNode.static) {
                    staticNodes.push(
                      buildClassProperty(ref, propNode, path.scope, state)
                    );
                  } else {
                    instanceBody.push(
                      buildClassProperty(
                        _core().types.thisExpression(),
                        propNode,
                        path.scope,
                        state
                      )
                    );
                  }
                }

                var afterNodes =
                  !loose && staticNodes.length
                    ? foldDefinePropertyCalls(staticNodes)
                    : staticNodes;

                if (instanceBody.length) {
                  var assignments = loose
                    ? instanceBody
                    : foldDefinePropertyCalls(instanceBody);

                  if (!constructor) {
                    var newConstructor = _core().types.classMethod(
                      "constructor",
                      _core().types.identifier("constructor"),
                      [],
                      _core().types.blockStatement([])
                    );

                    if (isDerived) {
                      newConstructor.params = [
                        _core().types.restElement(
                          _core().types.identifier("args")
                        )
                      ];
                      newConstructor.body.body.push(
                        _core().types.returnStatement(
                          _core().types.callExpression(_core().types.super(), [
                            _core().types.spreadElement(
                              _core().types.identifier("args")
                            )
                          ])
                        )
                      );
                    }

                    var _body$unshiftContaine = body.unshiftContainer(
                      "body",
                      newConstructor
                    );

                    constructor = _body$unshiftContaine[0];
                  }

                  var _state = {
                    scope: constructor.scope
                  };

                  for (var _i4 = 0; _i4 < props.length; _i4++) {
                    var prop = props[_i4];
                    prop.traverse(referenceVisitor, _state);
                  }

                  if (isDerived) {
                    var bareSupers = [];
                    constructor.traverse(findBareSupers, bareSupers);

                    for (var _i5 = 0; _i5 < bareSupers.length; _i5++) {
                      var bareSuper = bareSupers[_i5];
                      bareSuper.insertAfter(assignments);
                    }
                  } else {
                    constructor
                      .get("body")
                      .unshiftContainer("body", assignments);
                  }
                }

                for (var _i6 = 0; _i6 < props.length; _i6++) {
                  var _prop2 = props[_i6];

                  _prop2.remove();
                }

                if (computedNodes.length === 0 && afterNodes.length === 0)
                  return;

                if (path.isClassExpression()) {
                  path.scope.push({
                    id: ref
                  });
                  path.replaceWith(
                    _core().types.assignmentExpression(
                      "=",
                      _core().types.cloneNode(ref),
                      path.node
                    )
                  );
                } else if (!path.node.id) {
                  path.node.id = ref;
                }

                path.insertBefore(computedNodes);
                path.insertAfter(afterNodes);
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 198 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _default(callee, thisNode, args) {
          if (
            args.length === 1 &&
            t().isSpreadElement(args[0]) &&
            t().isIdentifier(args[0].argument, {
              name: "arguments"
            })
          ) {
            return t().callExpression(
              t().memberExpression(callee, t().identifier("apply")),
              [thisNode, args[0].argument]
            );
          } else {
            return t().callExpression(
              t().memberExpression(callee, t().identifier("call")),
              [thisNode].concat(args)
            );
          }
        }

        /***/
      },
      /* 199 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxDecorators() {
          var data = _interopRequireDefault(__webpack_require__(179));

          _pluginSyntaxDecorators = function _pluginSyntaxDecorators() {
            return data;
          };

          return data;
        }

        var _transformer = _interopRequireDefault(__webpack_require__(538));

        var _transformerLegacy = _interopRequireDefault(
          __webpack_require__(539)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var _options$legacy = options.legacy,
            legacy = _options$legacy === void 0 ? false : _options$legacy;

          if (typeof legacy !== "boolean") {
            throw new Error("'legacy' must be a boolean.");
          }

          if (legacy !== true) {
            throw new Error(
              "The new decorators proposal is not supported yet." +
                ' You must pass the `"legacy": true` option to' +
                " @babel/plugin-proposal-decorators"
            );
          }

          return {
            inherits: _pluginSyntaxDecorators().default,
            visitor: legacy ? _transformerLegacy.default : _transformer.default
          };
        });

        exports.default = _default;

        /***/
      },
      /* 200 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxDoExpressions() {
          var data = _interopRequireDefault(__webpack_require__(180));

          _pluginSyntaxDoExpressions = function _pluginSyntaxDoExpressions() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            inherits: _pluginSyntaxDoExpressions().default,
            visitor: {
              DoExpression: {
                exit: function exit(path) {
                  var body = path.node.body.body;

                  if (body.length) {
                    path.replaceExpressionWithStatements(body);
                  } else {
                    path.replaceWith(path.scope.buildUndefinedNode());
                  }
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 201 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxExportDefaultFrom() {
          var data = _interopRequireDefault(__webpack_require__(182));

          _pluginSyntaxExportDefaultFrom = function _pluginSyntaxExportDefaultFrom() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            inherits: _pluginSyntaxExportDefaultFrom().default,
            visitor: {
              ExportNamedDeclaration: function ExportNamedDeclaration(path) {
                var node = path.node,
                  scope = path.scope;
                var specifiers = node.specifiers;
                if (!_core().types.isExportDefaultSpecifier(specifiers[0]))
                  return;
                var specifier = specifiers.shift();
                var exported = specifier.exported;
                var uid = scope.generateUidIdentifier(exported.name);
                var nodes = [
                  _core().types.importDeclaration(
                    [_core().types.importDefaultSpecifier(uid)],
                    _core().types.cloneNode(node.source)
                  ),
                  _core().types.exportNamedDeclaration(null, [
                    _core().types.exportSpecifier(
                      _core().types.cloneNode(uid),
                      exported
                    )
                  ])
                ];

                if (specifiers.length >= 1) {
                  nodes.push(node);
                }

                path.replaceWithMultiple(nodes);
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 202 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxExportNamespaceFrom() {
          var data = _interopRequireDefault(__webpack_require__(183));

          _pluginSyntaxExportNamespaceFrom = function _pluginSyntaxExportNamespaceFrom() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            inherits: _pluginSyntaxExportNamespaceFrom().default,
            visitor: {
              ExportNamedDeclaration: function ExportNamedDeclaration(path) {
                var node = path.node,
                  scope = path.scope;
                var specifiers = node.specifiers;
                var index = _core().types.isExportDefaultSpecifier(
                  specifiers[0]
                )
                  ? 1
                  : 0;
                if (
                  !_core().types.isExportNamespaceSpecifier(specifiers[index])
                )
                  return;
                var nodes = [];

                if (index === 1) {
                  nodes.push(
                    _core().types.exportNamedDeclaration(
                      null,
                      [specifiers.shift()],
                      node.source
                    )
                  );
                }

                var specifier = specifiers.shift();
                var exported = specifier.exported;
                var uid = scope.generateUidIdentifier(exported.name);
                nodes.push(
                  _core().types.importDeclaration(
                    [_core().types.importNamespaceSpecifier(uid)],
                    _core().types.cloneNode(node.source)
                  ),
                  _core().types.exportNamedDeclaration(null, [
                    _core().types.exportSpecifier(
                      _core().types.cloneNode(uid),
                      exported
                    )
                  ])
                );

                if (node.specifiers.length >= 1) {
                  nodes.push(node);
                }

                path.replaceWithMultiple(nodes);
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 203 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxPipelineOperator() {
          var data = _interopRequireDefault(__webpack_require__(189));

          _pluginSyntaxPipelineOperator = function _pluginSyntaxPipelineOperator() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            inherits: _pluginSyntaxPipelineOperator().default,
            visitor: {
              BinaryExpression: function BinaryExpression(path) {
                var scope = path.scope;
                var node = path.node;
                var operator = node.operator,
                  left = node.left;
                var right = node.right;
                if (operator !== "|>") return;
                var optimizeArrow =
                  _core().types.isArrowFunctionExpression(right) &&
                  _core().types.isExpression(right.body) &&
                  !right.async &&
                  !right.generator;
                var param;

                if (optimizeArrow) {
                  var _right = right,
                    params = _right.params;

                  if (
                    params.length === 1 &&
                    _core().types.isIdentifier(params[0])
                  ) {
                    param = params[0];
                  } else if (params.length > 0) {
                    optimizeArrow = false;
                  }
                } else if (
                  _core().types.isIdentifier(right, {
                    name: "eval"
                  })
                ) {
                  right = _core().types.sequenceExpression([
                    _core().types.numericLiteral(0),
                    right
                  ]);
                }

                if (optimizeArrow && !param) {
                  path.replaceWith(
                    _core().types.sequenceExpression([left, right.body])
                  );
                  return;
                }

                var placeholder = scope.generateUidIdentifierBasedOnNode(
                  param || left
                );
                scope.push({
                  id: placeholder
                });

                if (param) {
                  path.get("right").scope.rename(param.name, placeholder.name);
                }

                var call = optimizeArrow
                  ? right.body
                  : _core().types.callExpression(right, [
                      _core().types.cloneNode(placeholder)
                    ]);
                path.replaceWith(
                  _core().types.sequenceExpression([
                    _core().types.assignmentExpression(
                      "=",
                      _core().types.cloneNode(placeholder),
                      left
                    ),
                    call
                  ])
                );
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 204 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var spec = options.spec;
          return {
            visitor: {
              ArrowFunctionExpression: function ArrowFunctionExpression(path) {
                if (!path.isArrowFunctionExpression()) return;
                path.arrowFunctionToExpression({
                  allowInsertArrow: false,
                  specCompliant: !!spec
                });
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 205 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);

          function statementList(key, path) {
            var paths = path.get(key);

            for (
              var _iterator = paths,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var _path = _ref;
              var func = _path.node;
              if (!_path.isFunctionDeclaration()) continue;

              var declar = _core().types.variableDeclaration("let", [
                _core().types.variableDeclarator(
                  func.id,
                  _core().types.toExpression(func)
                )
              ]);

              declar._blockHoist = 2;
              func.id = null;

              _path.replaceWith(declar);
            }
          }

          return {
            visitor: {
              BlockStatement: function BlockStatement(path) {
                var node = path.node,
                  parent = path.parent;

                if (
                  _core().types.isFunction(parent, {
                    body: node
                  }) ||
                  _core().types.isExportDeclaration(parent)
                ) {
                  return;
                }

                statementList("body", path);
              },
              SwitchCase: function SwitchCase(path) {
                statementList("consequent", path);
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 206 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _tdz = __webpack_require__(540);

        function _values() {
          var data = _interopRequireDefault(__webpack_require__(142));

          _values = function _values() {
            return data;
          };

          return data;
        }

        function _extend() {
          var data = _interopRequireDefault(__webpack_require__(541));

          _extend = function _extend() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var DONE = new WeakSet();

        var _default = (0, _helperPluginUtils().declare)(function(api, opts) {
          api.assertVersion(7);
          var _opts$throwIfClosureR = opts.throwIfClosureRequired,
            throwIfClosureRequired =
              _opts$throwIfClosureR === void 0 ? false : _opts$throwIfClosureR,
            _opts$tdz = opts.tdz,
            tdzEnabled = _opts$tdz === void 0 ? false : _opts$tdz;

          if (typeof throwIfClosureRequired !== "boolean") {
            throw new Error(
              ".throwIfClosureRequired must be a boolean, or undefined"
            );
          }

          if (typeof tdzEnabled !== "boolean") {
            throw new Error(
              ".throwIfClosureRequired must be a boolean, or undefined"
            );
          }

          return {
            visitor: {
              VariableDeclaration: function VariableDeclaration(path) {
                var node = path.node,
                  parent = path.parent,
                  scope = path.scope;
                if (!isBlockScoped(node)) return;
                convertBlockScopedToVar(path, null, parent, scope, true);

                if (node._tdzThis) {
                  var nodes = [node];

                  for (var i = 0; i < node.declarations.length; i++) {
                    var decl = node.declarations[i];

                    if (decl.init) {
                      var assign = _core().types.assignmentExpression(
                        "=",
                        decl.id,
                        decl.init
                      );

                      assign._ignoreBlockScopingTDZ = true;
                      nodes.push(_core().types.expressionStatement(assign));
                    }

                    decl.init = this.addHelper("temporalUndefined");
                  }

                  node._blockHoist = 2;

                  if (path.isCompletionRecord()) {
                    nodes.push(
                      _core().types.expressionStatement(
                        scope.buildUndefinedNode()
                      )
                    );
                  }

                  path.replaceWithMultiple(nodes);
                }
              },
              Loop: function Loop(path, state) {
                var parent = path.parent,
                  scope = path.scope;
                path.ensureBlock();
                var blockScoping = new BlockScoping(
                  path,
                  path.get("body"),
                  parent,
                  scope,
                  throwIfClosureRequired,
                  tdzEnabled,
                  state
                );
                var replace = blockScoping.run();
                if (replace) path.replaceWith(replace);
              },
              CatchClause: function CatchClause(path, state) {
                var parent = path.parent,
                  scope = path.scope;
                var blockScoping = new BlockScoping(
                  null,
                  path.get("body"),
                  parent,
                  scope,
                  throwIfClosureRequired,
                  tdzEnabled,
                  state
                );
                blockScoping.run();
              },
              "BlockStatement|SwitchStatement|Program": function BlockStatementSwitchStatementProgram(
                path,
                state
              ) {
                if (!ignoreBlock(path)) {
                  var blockScoping = new BlockScoping(
                    null,
                    path,
                    path.parent,
                    path.scope,
                    throwIfClosureRequired,
                    tdzEnabled,
                    state
                  );
                  blockScoping.run();
                }
              }
            }
          };
        });

        exports.default = _default;

        function ignoreBlock(path) {
          return (
            _core().types.isLoop(path.parent) ||
            _core().types.isCatchClause(path.parent)
          );
        }

        var buildRetCheck = (0, _core().template)(
          '\n  if (typeof RETURN === "object") return RETURN.v;\n'
        );

        function isBlockScoped(node) {
          if (!_core().types.isVariableDeclaration(node)) return false;
          if (node[_core().types.BLOCK_SCOPED_SYMBOL]) return true;
          if (node.kind !== "let" && node.kind !== "const") return false;
          return true;
        }

        function isInLoop(path) {
          var loopOrFunctionParent = path.find(function(path) {
            return path.isLoop() || path.isFunction();
          });
          return loopOrFunctionParent && loopOrFunctionParent.isLoop();
        }

        function convertBlockScopedToVar(
          path,
          node,
          parent,
          scope,
          moveBindingsToParent
        ) {
          if (moveBindingsToParent === void 0) {
            moveBindingsToParent = false;
          }

          if (!node) {
            node = path.node;
          }

          if (isInLoop(path) && !_core().types.isFor(parent)) {
            for (var i = 0; i < node.declarations.length; i++) {
              var declar = node.declarations[i];
              declar.init = declar.init || scope.buildUndefinedNode();
            }
          }

          node[_core().types.BLOCK_SCOPED_SYMBOL] = true;
          node.kind = "var";

          if (moveBindingsToParent) {
            var parentScope =
              scope.getFunctionParent() || scope.getProgramParent();
            var ids = path.getBindingIdentifiers();

            for (var name in ids) {
              var binding = scope.getOwnBinding(name);
              if (binding) binding.kind = "var";
              scope.moveBindingTo(name, parentScope);
            }
          }
        }

        function isVar(node) {
          return (
            _core().types.isVariableDeclaration(node, {
              kind: "var"
            }) && !isBlockScoped(node)
          );
        }

        var letReferenceBlockVisitor = _core().traverse.visitors.merge([
          {
            Loop: {
              enter: function enter(path, state) {
                state.loopDepth++;
              },
              exit: function exit(path, state) {
                state.loopDepth--;
              }
            },
            Function: function Function(path, state) {
              if (state.loopDepth > 0) {
                path.traverse(letReferenceFunctionVisitor, state);
              }

              return path.skip();
            }
          },
          _tdz.visitor
        ]);

        var letReferenceFunctionVisitor = _core().traverse.visitors.merge([
          {
            ReferencedIdentifier: function ReferencedIdentifier(path, state) {
              var ref = state.letReferences[path.node.name];
              if (!ref) return;
              var localBinding = path.scope.getBindingIdentifier(
                path.node.name
              );
              if (localBinding && localBinding !== ref) return;
              state.closurify = true;
            }
          },
          _tdz.visitor
        ]);

        var hoistVarDeclarationsVisitor = {
          enter: function enter(path, self) {
            var node = path.node,
              parent = path.parent;

            if (path.isForStatement()) {
              if (isVar(node.init, node)) {
                var nodes = self.pushDeclar(node.init);

                if (nodes.length === 1) {
                  node.init = nodes[0];
                } else {
                  node.init = _core().types.sequenceExpression(nodes);
                }
              }
            } else if (path.isFor()) {
              if (isVar(node.left, node)) {
                self.pushDeclar(node.left);
                node.left = node.left.declarations[0].id;
              }
            } else if (isVar(node, parent)) {
              path.replaceWithMultiple(
                self.pushDeclar(node).map(function(expr) {
                  return _core().types.expressionStatement(expr);
                })
              );
            } else if (path.isFunction()) {
              return path.skip();
            }
          }
        };
        var loopLabelVisitor = {
          LabeledStatement: function LabeledStatement(_ref, state) {
            var node = _ref.node;
            state.innerLabels.push(node.label.name);
          }
        };
        var continuationVisitor = {
          enter: function enter(path, state) {
            if (path.isAssignmentExpression() || path.isUpdateExpression()) {
              var bindings = path.getBindingIdentifiers();

              for (var name in bindings) {
                if (
                  state.outsideReferences[name] !==
                  path.scope.getBindingIdentifier(name)
                ) {
                  continue;
                }

                state.reassignments[name] = true;
              }
            } else if (path.isReturnStatement()) {
              state.returnStatements.push(path);
            }
          }
        };

        function loopNodeTo(node) {
          if (_core().types.isBreakStatement(node)) {
            return "break";
          } else if (_core().types.isContinueStatement(node)) {
            return "continue";
          }
        }

        var loopVisitor = {
          Loop: function Loop(path, state) {
            var oldIgnoreLabeless = state.ignoreLabeless;
            state.ignoreLabeless = true;
            path.traverse(loopVisitor, state);
            state.ignoreLabeless = oldIgnoreLabeless;
            path.skip();
          },
          Function: function Function(path) {
            path.skip();
          },
          SwitchCase: function SwitchCase(path, state) {
            var oldInSwitchCase = state.inSwitchCase;
            state.inSwitchCase = true;
            path.traverse(loopVisitor, state);
            state.inSwitchCase = oldInSwitchCase;
            path.skip();
          },
          "BreakStatement|ContinueStatement|ReturnStatement": function BreakStatementContinueStatementReturnStatement(
            path,
            state
          ) {
            var node = path.node,
              parent = path.parent,
              scope = path.scope;
            if (node[this.LOOP_IGNORE]) return;
            var replace;
            var loopText = loopNodeTo(node);

            if (loopText) {
              if (node.label) {
                if (state.innerLabels.indexOf(node.label.name) >= 0) {
                  return;
                }

                loopText = loopText + "|" + node.label.name;
              } else {
                if (state.ignoreLabeless) return;
                if (
                  _core().types.isBreakStatement(node) &&
                  _core().types.isSwitchCase(parent)
                )
                  return;
              }

              state.hasBreakContinue = true;
              state.map[loopText] = node;
              replace = _core().types.stringLiteral(loopText);
            }

            if (path.isReturnStatement()) {
              state.hasReturn = true;
              replace = _core().types.objectExpression([
                _core().types.objectProperty(
                  _core().types.identifier("v"),
                  node.argument || scope.buildUndefinedNode()
                )
              ]);
            }

            if (replace) {
              replace = _core().types.returnStatement(replace);
              replace[this.LOOP_IGNORE] = true;
              path.skip();
              path.replaceWith(_core().types.inherits(replace, node));
            }
          }
        };

        var BlockScoping = (function() {
          function BlockScoping(
            loopPath,
            blockPath,
            parent,
            scope,
            throwIfClosureRequired,
            tdzEnabled,
            state
          ) {
            this.parent = parent;
            this.scope = scope;
            this.state = state;
            this.throwIfClosureRequired = throwIfClosureRequired;
            this.tdzEnabled = tdzEnabled;
            this.blockPath = blockPath;
            this.block = blockPath.node;
            this.outsideLetReferences = Object.create(null);
            this.hasLetReferences = false;
            this.letReferences = Object.create(null);
            this.body = [];

            if (loopPath) {
              this.loopParent = loopPath.parent;
              this.loopLabel =
                _core().types.isLabeledStatement(this.loopParent) &&
                this.loopParent.label;
              this.loopPath = loopPath;
              this.loop = loopPath.node;
            }
          }

          var _proto = BlockScoping.prototype;

          _proto.run = function run() {
            var block = this.block;
            if (DONE.has(block)) return;
            DONE.add(block);
            var needsClosure = this.getLetReferences();
            this.checkConstants();

            if (
              _core().types.isFunction(this.parent) ||
              _core().types.isProgram(this.block)
            ) {
              this.updateScopeInfo();
              return;
            }

            if (!this.hasLetReferences) return;

            if (needsClosure) {
              this.wrapClosure();
            } else {
              this.remap();
            }

            this.updateScopeInfo(needsClosure);

            if (
              this.loopLabel &&
              !_core().types.isLabeledStatement(this.loopParent)
            ) {
              return _core().types.labeledStatement(this.loopLabel, this.loop);
            }
          };

          _proto.checkConstants = function checkConstants() {
            var scope = this.scope;
            var state = this.state;

            for (var name in scope.bindings) {
              var binding = scope.bindings[name];
              if (binding.kind !== "const") continue;
              var _arr = binding.constantViolations;

              for (var _i = 0; _i < _arr.length; _i++) {
                var violation = _arr[_i];
                var readOnlyError = state.addHelper("readOnlyError");

                var throwNode = _core().types.callExpression(readOnlyError, [
                  _core().types.stringLiteral(name)
                ]);

                if (violation.isAssignmentExpression()) {
                  violation
                    .get("right")
                    .replaceWith(
                      _core().types.sequenceExpression([
                        throwNode,
                        violation.get("right").node
                      ])
                    );
                } else if (violation.isUpdateExpression()) {
                  violation.replaceWith(
                    _core().types.sequenceExpression([
                      throwNode,
                      violation.node
                    ])
                  );
                } else if (violation.isForXStatement()) {
                  violation.ensureBlock();
                  violation.node.body.body.unshift(
                    _core().types.expressionStatement(throwNode)
                  );
                }
              }
            }
          };

          _proto.updateScopeInfo = function updateScopeInfo(wrappedInClosure) {
            var scope = this.scope;
            var parentScope =
              scope.getFunctionParent() || scope.getProgramParent();
            var letRefs = this.letReferences;

            for (var key in letRefs) {
              var ref = letRefs[key];
              var binding = scope.getBinding(ref.name);
              if (!binding) continue;

              if (binding.kind === "let" || binding.kind === "const") {
                binding.kind = "var";

                if (wrappedInClosure) {
                  scope.removeBinding(ref.name);
                } else {
                  scope.moveBindingTo(ref.name, parentScope);
                }
              }
            }
          };

          _proto.remap = function remap() {
            var letRefs = this.letReferences;
            var scope = this.scope;

            for (var key in letRefs) {
              var ref = letRefs[key];

              if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {
                if (scope.hasOwnBinding(key)) {
                  scope.rename(ref.name);
                }

                if (this.blockPath.scope.hasOwnBinding(key)) {
                  this.blockPath.scope.rename(ref.name);
                }
              }
            }
          };

          _proto.wrapClosure = function wrapClosure() {
            if (this.throwIfClosureRequired) {
              throw this.blockPath.buildCodeFrameError(
                "Compiling let/const in this block would add a closure " +
                  "(throwIfClosureRequired)."
              );
            }

            var block = this.block;
            var outsideRefs = this.outsideLetReferences;

            if (this.loop) {
              for (var name in outsideRefs) {
                var id = outsideRefs[name];

                if (
                  this.scope.hasGlobal(id.name) ||
                  this.scope.parentHasBinding(id.name)
                ) {
                  delete outsideRefs[id.name];
                  delete this.letReferences[id.name];
                  this.scope.rename(id.name);
                  this.letReferences[id.name] = id;
                  outsideRefs[id.name] = id;
                }
              }
            }

            this.has = this.checkLoop();
            this.hoistVarDeclarations();
            var args = (0, _values().default)(outsideRefs).map(function(id) {
              return _core().types.cloneNode(id);
            });
            var params = args.map(function(id) {
              return _core().types.cloneNode(id);
            });
            var isSwitch = this.blockPath.isSwitchStatement();

            var fn = _core().types.functionExpression(
              null,
              params,
              _core().types.blockStatement(isSwitch ? [block] : block.body)
            );

            this.addContinuations(fn);

            var call = _core().types.callExpression(
              _core().types.nullLiteral(),
              args
            );

            var basePath = ".callee";

            var hasYield = _core().traverse.hasType(
              fn.body,
              "YieldExpression",
              _core().types.FUNCTION_TYPES
            );

            if (hasYield) {
              fn.generator = true;
              call = _core().types.yieldExpression(call, true);
              basePath = ".argument" + basePath;
            }

            var hasAsync = _core().traverse.hasType(
              fn.body,
              "AwaitExpression",
              _core().types.FUNCTION_TYPES
            );

            if (hasAsync) {
              fn.async = true;
              call = _core().types.awaitExpression(call);
              basePath = ".argument" + basePath;
            }

            var placeholderPath;
            var index;

            if (this.has.hasReturn || this.has.hasBreakContinue) {
              var ret = this.scope.generateUid("ret");
              this.body.push(
                _core().types.variableDeclaration("var", [
                  _core().types.variableDeclarator(
                    _core().types.identifier(ret),
                    call
                  )
                ])
              );
              placeholderPath = "declarations.0.init" + basePath;
              index = this.body.length - 1;
              this.buildHas(ret);
            } else {
              this.body.push(_core().types.expressionStatement(call));
              placeholderPath = "expression" + basePath;
              index = this.body.length - 1;
            }

            var callPath;

            if (isSwitch) {
              var _blockPath = this.blockPath,
                parentPath = _blockPath.parentPath,
                listKey = _blockPath.listKey,
                key = _blockPath.key;
              this.blockPath.replaceWithMultiple(this.body);
              callPath = parentPath.get(listKey)[key + index];
            } else {
              block.body = this.body;
              callPath = this.blockPath.get("body")[index];
            }

            var placeholder = callPath.get(placeholderPath);
            var fnPath;

            if (this.loop) {
              var loopId = this.scope.generateUid("loop");
              var p = this.loopPath.insertBefore(
                _core().types.variableDeclaration("var", [
                  _core().types.variableDeclarator(
                    _core().types.identifier(loopId),
                    fn
                  )
                ])
              );
              placeholder.replaceWith(_core().types.identifier(loopId));
              fnPath = p[0].get("declarations.0.init");
            } else {
              placeholder.replaceWith(fn);
              fnPath = placeholder;
            }

            fnPath.unwrapFunctionEnvironment();
          };

          _proto.addContinuations = function addContinuations(fn) {
            var _this = this;

            var state = {
              reassignments: {},
              returnStatements: [],
              outsideReferences: this.outsideLetReferences
            };
            this.scope.traverse(fn, continuationVisitor, state);

            var _loop = function _loop(i) {
              var param = fn.params[i];
              if (!state.reassignments[param.name]) return "continue";
              var paramName = param.name;

              var newParamName = _this.scope.generateUid(param.name);

              fn.params[i] = _core().types.identifier(newParamName);

              _this.scope.rename(paramName, newParamName, fn);

              state.returnStatements.forEach(function(returnStatement) {
                returnStatement.insertBefore(
                  _core().types.expressionStatement(
                    _core().types.assignmentExpression(
                      "=",
                      _core().types.identifier(paramName),
                      _core().types.identifier(newParamName)
                    )
                  )
                );
              });
              fn.body.body.push(
                _core().types.expressionStatement(
                  _core().types.assignmentExpression(
                    "=",
                    _core().types.identifier(paramName),
                    _core().types.identifier(newParamName)
                  )
                )
              );
            };

            for (var i = 0; i < fn.params.length; i++) {
              var _ret = _loop(i);

              if (_ret === "continue") continue;
            }
          };

          _proto.getLetReferences = function getLetReferences() {
            var _this2 = this;

            var block = this.block;
            var declarators = [];

            if (this.loop) {
              var init = this.loop.left || this.loop.init;

              if (isBlockScoped(init)) {
                declarators.push(init);
                (0, _extend().default)(
                  this.outsideLetReferences,
                  _core().types.getBindingIdentifiers(init)
                );
              }
            }

            var addDeclarationsFromChild = function addDeclarationsFromChild(
              path,
              node
            ) {
              node = node || path.node;

              if (
                _core().types.isClassDeclaration(node) ||
                _core().types.isFunctionDeclaration(node) ||
                isBlockScoped(node)
              ) {
                if (isBlockScoped(node)) {
                  convertBlockScopedToVar(path, node, block, _this2.scope);
                }

                declarators = declarators.concat(node.declarations || node);
              }

              if (_core().types.isLabeledStatement(node)) {
                addDeclarationsFromChild(path.get("body"), node.body);
              }
            };

            if (block.body) {
              var declarPaths = this.blockPath.get("body");

              for (var i = 0; i < block.body.length; i++) {
                addDeclarationsFromChild(declarPaths[i]);
              }
            }

            if (block.cases) {
              var _declarPaths = this.blockPath.get("cases");

              for (var _i2 = 0; _i2 < block.cases.length; _i2++) {
                var consequents = block.cases[_i2].consequent;

                for (var j = 0; j < consequents.length; j++) {
                  var declar = consequents[j];
                  addDeclarationsFromChild(_declarPaths[_i2], declar);
                }
              }
            }

            for (var _i3 = 0; _i3 < declarators.length; _i3++) {
              var _declar = declarators[_i3];

              var keys = _core().types.getBindingIdentifiers(
                _declar,
                false,
                true
              );

              (0, _extend().default)(this.letReferences, keys);
              this.hasLetReferences = true;
            }

            if (!this.hasLetReferences) return;
            var state = {
              letReferences: this.letReferences,
              closurify: false,
              loopDepth: 0,
              tdzEnabled: this.tdzEnabled,
              addHelper: function addHelper(name) {
                return _this2.addHelper(name);
              }
            };

            if (isInLoop(this.blockPath)) {
              state.loopDepth++;
            }

            this.blockPath.traverse(letReferenceBlockVisitor, state);
            return state.closurify;
          };

          _proto.checkLoop = function checkLoop() {
            var state = {
              hasBreakContinue: false,
              ignoreLabeless: false,
              inSwitchCase: false,
              innerLabels: [],
              hasReturn: false,
              isLoop: !!this.loop,
              map: {},
              LOOP_IGNORE: Symbol()
            };
            this.blockPath.traverse(loopLabelVisitor, state);
            this.blockPath.traverse(loopVisitor, state);
            return state;
          };

          _proto.hoistVarDeclarations = function hoistVarDeclarations() {
            this.blockPath.traverse(hoistVarDeclarationsVisitor, this);
          };

          _proto.pushDeclar = function pushDeclar(node) {
            var declars = [];

            var names = _core().types.getBindingIdentifiers(node);

            for (var name in names) {
              declars.push(_core().types.variableDeclarator(names[name]));
            }

            this.body.push(
              _core().types.variableDeclaration(node.kind, declars)
            );
            var replace = [];

            for (var i = 0; i < node.declarations.length; i++) {
              var declar = node.declarations[i];
              if (!declar.init) continue;

              var expr = _core().types.assignmentExpression(
                "=",
                _core().types.cloneNode(declar.id),
                _core().types.cloneNode(declar.init)
              );

              replace.push(_core().types.inherits(expr, declar));
            }

            return replace;
          };

          _proto.buildHas = function buildHas(ret) {
            var body = this.body;
            var retCheck;
            var has = this.has;
            var cases = [];

            if (has.hasReturn) {
              retCheck = buildRetCheck({
                RETURN: _core().types.identifier(ret)
              });
            }

            if (has.hasBreakContinue) {
              for (var key in has.map) {
                cases.push(
                  _core().types.switchCase(_core().types.stringLiteral(key), [
                    has.map[key]
                  ])
                );
              }

              if (has.hasReturn) {
                cases.push(_core().types.switchCase(null, [retCheck]));
              }

              if (cases.length === 1) {
                var single = cases[0];
                body.push(
                  _core().types.ifStatement(
                    _core().types.binaryExpression(
                      "===",
                      _core().types.identifier(ret),
                      single.test
                    ),
                    single.consequent[0]
                  )
                );
              } else {
                if (this.loop) {
                  for (var i = 0; i < cases.length; i++) {
                    var caseConsequent = cases[i].consequent[0];

                    if (
                      _core().types.isBreakStatement(caseConsequent) &&
                      !caseConsequent.label
                    ) {
                      if (!this.loopLabel) {
                        this.loopLabel = this.scope.generateUidIdentifier(
                          "loop"
                        );
                      }

                      caseConsequent.label = _core().types.cloneNode(
                        this.loopLabel
                      );
                    }
                  }
                }

                body.push(
                  _core().types.switchStatement(
                    _core().types.identifier(ret),
                    cases
                  )
                );
              }
            } else {
              if (has.hasReturn) {
                body.push(retCheck);
              }
            }
          };

          return BlockScoping;
        })();

        /***/
      },
      /* 207 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperAnnotateAsPure() {
          var data = _interopRequireDefault(__webpack_require__(56));

          _helperAnnotateAsPure = function _helperAnnotateAsPure() {
            return data;
          };

          return data;
        }

        function _helperFunctionName() {
          var data = _interopRequireDefault(__webpack_require__(20));

          _helperFunctionName = function _helperFunctionName() {
            return data;
          };

          return data;
        }

        function _helperSplitExportDeclaration() {
          var data = _interopRequireDefault(__webpack_require__(80));

          _helperSplitExportDeclaration = function _helperSplitExportDeclaration() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _globals() {
          var data = _interopRequireDefault(__webpack_require__(146));

          _globals = function _globals() {
            return data;
          };

          return data;
        }

        var _transformClass = _interopRequireDefault(__webpack_require__(544));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var getBuiltinClasses = function getBuiltinClasses(category) {
          return Object.keys(_globals().default[category]).filter(function(
            name
          ) {
            return /^[A-Z]/.test(name);
          });
        };

        var builtinClasses = new Set(
          getBuiltinClasses("builtin").concat(getBuiltinClasses("browser"))
        );

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var loose = options.loose;
          var VISITED = Symbol();
          return {
            visitor: {
              ExportDefaultDeclaration: function ExportDefaultDeclaration(
                path
              ) {
                if (!path.get("declaration").isClassDeclaration()) return;
                (0, _helperSplitExportDeclaration().default)(path);
              },
              ClassDeclaration: function ClassDeclaration(path) {
                var node = path.node;
                var ref = node.id || path.scope.generateUidIdentifier("class");
                path.replaceWith(
                  _core().types.variableDeclaration("let", [
                    _core().types.variableDeclarator(
                      ref,
                      _core().types.toExpression(node)
                    )
                  ])
                );
              },
              ClassExpression: function ClassExpression(path, state) {
                var node = path.node;
                if (node[VISITED]) return;
                var inferred = (0, _helperFunctionName().default)(path);

                if (inferred && inferred !== node) {
                  path.replaceWith(inferred);
                  return;
                }

                node[VISITED] = true;
                path.replaceWith(
                  (0, _transformClass.default)(
                    path,
                    state.file,
                    builtinClasses,
                    loose
                  )
                );

                if (path.isCallExpression()) {
                  (0, _helperAnnotateAsPure().default)(path);

                  if (path.get("callee").isArrowFunctionExpression()) {
                    path.get("callee").arrowFunctionToExpression();
                  }
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 208 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.push = push;
        exports.hasComputed = hasComputed;
        exports.toComputedObjectFromClass = toComputedObjectFromClass;
        exports.toClassObject = toClassObject;
        exports.toDefineObject = toDefineObject;

        function _helperFunctionName() {
          var data = _interopRequireDefault(__webpack_require__(20));

          _helperFunctionName = function _helperFunctionName() {
            return data;
          };

          return data;
        }

        function _has() {
          var data = _interopRequireDefault(__webpack_require__(545));

          _has = function _has() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function toKind(node) {
          if (t().isClassMethod(node) || t().isObjectMethod(node)) {
            if (node.kind === "get" || node.kind === "set") {
              return node.kind;
            }
          }

          return "value";
        }

        function push(mutatorMap, node, kind, file, scope) {
          var alias = t().toKeyAlias(node);
          var map = {};
          if ((0, _has().default)(mutatorMap, alias)) map = mutatorMap[alias];
          mutatorMap[alias] = map;
          map._inherits = map._inherits || [];

          map._inherits.push(node);

          map._key = node.key;

          if (node.computed) {
            map._computed = true;
          }

          if (node.decorators) {
            var decorators = (map.decorators =
              map.decorators || t().arrayExpression([]));
            decorators.elements = decorators.elements.concat(
              node.decorators
                .map(function(dec) {
                  return dec.expression;
                })
                .reverse()
            );
          }

          if (map.value || map.initializer) {
            throw file.buildCodeFrameError(
              node,
              "Key conflict with sibling node"
            );
          }

          var key, value;

          if (
            t().isObjectProperty(node) ||
            t().isObjectMethod(node) ||
            t().isClassMethod(node)
          ) {
            key = t().toComputedKey(node, node.key);
          }

          if (t().isProperty(node)) {
            value = node.value;
          } else if (t().isObjectMethod(node) || t().isClassMethod(node)) {
            value = t().functionExpression(
              null,
              node.params,
              node.body,
              node.generator,
              node.async
            );
            value.returnType = node.returnType;
          }

          var inheritedKind = toKind(node);

          if (!kind || inheritedKind !== "value") {
            kind = inheritedKind;
          }

          if (
            scope &&
            t().isStringLiteral(key) &&
            (kind === "value" || kind === "initializer") &&
            t().isFunctionExpression(value)
          ) {
            value = (0, _helperFunctionName().default)({
              id: key,
              node: value,
              scope: scope
            });
          }

          if (value) {
            t().inheritsComments(value, node);
            map[kind] = value;
          }

          return map;
        }

        function hasComputed(mutatorMap) {
          for (var key in mutatorMap) {
            if (mutatorMap[key]._computed) {
              return true;
            }
          }

          return false;
        }

        function toComputedObjectFromClass(obj) {
          var objExpr = t().arrayExpression([]);

          for (var i = 0; i < obj.properties.length; i++) {
            var prop = obj.properties[i];
            var val = prop.value;
            val.properties.unshift(
              t().objectProperty(t().identifier("key"), t().toComputedKey(prop))
            );
            objExpr.elements.push(val);
          }

          return objExpr;
        }

        function toClassObject(mutatorMap) {
          var objExpr = t().objectExpression([]);
          Object.keys(mutatorMap).forEach(function(mutatorMapKey) {
            var map = mutatorMap[mutatorMapKey];
            var mapNode = t().objectExpression([]);
            var propNode = t().objectProperty(map._key, mapNode, map._computed);
            Object.keys(map).forEach(function(key) {
              var node = map[key];
              if (key[0] === "_") return;
              var prop = t().objectProperty(t().identifier(key), node);
              t().inheritsComments(prop, node);
              t().removeComments(node);
              mapNode.properties.push(prop);
            });
            objExpr.properties.push(propNode);
          });
          return objExpr;
        }

        function toDefineObject(mutatorMap) {
          Object.keys(mutatorMap).forEach(function(key) {
            var map = mutatorMap[key];
            if (map.value) map.writable = t().booleanLiteral(true);
            map.configurable = t().booleanLiteral(true);
            map.enumerable = t().booleanLiteral(true);
          });
          return toClassObject(mutatorMap);
        }

        /***/
      },
      /* 209 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var loose = options.loose;
          var pushComputedProps = loose
            ? pushComputedPropsLoose
            : pushComputedPropsSpec;
          var buildMutatorMapAssign = (0, _core().template)(
            "\n    MUTATOR_MAP_REF[KEY] = MUTATOR_MAP_REF[KEY] || {};\n    MUTATOR_MAP_REF[KEY].KIND = VALUE;\n  "
          );

          function getValue(prop) {
            if (_core().types.isObjectProperty(prop)) {
              return prop.value;
            } else if (_core().types.isObjectMethod(prop)) {
              return _core().types.functionExpression(
                null,
                prop.params,
                prop.body,
                prop.generator,
                prop.async
              );
            }
          }

          function pushAssign(objId, prop, body) {
            if (prop.kind === "get" && prop.kind === "set") {
              pushMutatorDefine(objId, prop, body);
            } else {
              body.push(
                _core().types.expressionStatement(
                  _core().types.assignmentExpression(
                    "=",
                    _core().types.memberExpression(
                      _core().types.cloneNode(objId),
                      prop.key,
                      prop.computed || _core().types.isLiteral(prop.key)
                    ),
                    getValue(prop)
                  )
                )
              );
            }
          }

          function pushMutatorDefine(_ref, prop) {
            var body = _ref.body,
              getMutatorId = _ref.getMutatorId,
              scope = _ref.scope;
            var key =
              !prop.computed && _core().types.isIdentifier(prop.key)
                ? _core().types.stringLiteral(prop.key.name)
                : prop.key;
            var maybeMemoise = scope.maybeGenerateMemoised(key);

            if (maybeMemoise) {
              body.push(
                _core().types.expressionStatement(
                  _core().types.assignmentExpression("=", maybeMemoise, key)
                )
              );
              key = maybeMemoise;
            }

            body.push.apply(
              body,
              buildMutatorMapAssign({
                MUTATOR_MAP_REF: getMutatorId(),
                KEY: _core().types.cloneNode(key),
                VALUE: getValue(prop),
                KIND: _core().types.identifier(prop.kind)
              })
            );
          }

          function pushComputedPropsLoose(info) {
            for (
              var _iterator = info.computedProps,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref2;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref2 = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref2 = _i.value;
              }

              var prop = _ref2;

              if (prop.kind === "get" || prop.kind === "set") {
                pushMutatorDefine(info, prop);
              } else {
                pushAssign(
                  _core().types.cloneNode(info.objId),
                  prop,
                  info.body
                );
              }
            }
          }

          function pushComputedPropsSpec(info) {
            var objId = info.objId,
              body = info.body,
              computedProps = info.computedProps,
              state = info.state;

            for (
              var _iterator2 = computedProps,
                _isArray2 = Array.isArray(_iterator2),
                _i2 = 0,
                _iterator2 = _isArray2
                  ? _iterator2
                  : _iterator2[Symbol.iterator]();
              ;

            ) {
              var _ref3;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref3 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref3 = _i2.value;
              }

              var prop = _ref3;

              var key = _core().types.toComputedKey(prop);

              if (prop.kind === "get" || prop.kind === "set") {
                pushMutatorDefine(info, prop);
              } else if (
                _core().types.isStringLiteral(key, {
                  value: "__proto__"
                })
              ) {
                pushAssign(objId, prop, body);
              } else {
                if (computedProps.length === 1) {
                  return _core().types.callExpression(
                    state.addHelper("defineProperty"),
                    [info.initPropExpression, key, getValue(prop)]
                  );
                } else {
                  body.push(
                    _core().types.expressionStatement(
                      _core().types.callExpression(
                        state.addHelper("defineProperty"),
                        [_core().types.cloneNode(objId), key, getValue(prop)]
                      )
                    )
                  );
                }
              }
            }
          }

          return {
            visitor: {
              ObjectExpression: {
                exit: function exit(path, state) {
                  var node = path.node,
                    parent = path.parent,
                    scope = path.scope;
                  var hasComputed = false;
                  var _arr = node.properties;

                  for (var _i3 = 0; _i3 < _arr.length; _i3++) {
                    var prop = _arr[_i3];
                    hasComputed = prop.computed === true;
                    if (hasComputed) break;
                  }

                  if (!hasComputed) return;
                  var initProps = [];
                  var computedProps = [];
                  var foundComputed = false;

                  for (
                    var _iterator3 = node.properties,
                      _isArray3 = Array.isArray(_iterator3),
                      _i4 = 0,
                      _iterator3 = _isArray3
                        ? _iterator3
                        : _iterator3[Symbol.iterator]();
                    ;

                  ) {
                    var _ref4;

                    if (_isArray3) {
                      if (_i4 >= _iterator3.length) break;
                      _ref4 = _iterator3[_i4++];
                    } else {
                      _i4 = _iterator3.next();
                      if (_i4.done) break;
                      _ref4 = _i4.value;
                    }

                    var _prop = _ref4;

                    if (_prop.computed) {
                      foundComputed = true;
                    }

                    if (foundComputed) {
                      computedProps.push(_prop);
                    } else {
                      initProps.push(_prop);
                    }
                  }

                  var objId = scope.generateUidIdentifierBasedOnNode(parent);

                  var initPropExpression = _core().types.objectExpression(
                    initProps
                  );

                  var body = [];
                  body.push(
                    _core().types.variableDeclaration("var", [
                      _core().types.variableDeclarator(
                        objId,
                        initPropExpression
                      )
                    ])
                  );
                  var mutatorRef;

                  var getMutatorId = function getMutatorId() {
                    if (!mutatorRef) {
                      mutatorRef = scope.generateUidIdentifier("mutatorMap");
                      body.push(
                        _core().types.variableDeclaration("var", [
                          _core().types.variableDeclarator(
                            mutatorRef,
                            _core().types.objectExpression([])
                          )
                        ])
                      );
                    }

                    return _core().types.cloneNode(mutatorRef);
                  };

                  var single = pushComputedProps({
                    scope: scope,
                    objId: objId,
                    body: body,
                    computedProps: computedProps,
                    initPropExpression: initPropExpression,
                    getMutatorId: getMutatorId,
                    state: state
                  });

                  if (mutatorRef) {
                    body.push(
                      _core().types.expressionStatement(
                        _core().types.callExpression(
                          state.addHelper("defineEnumerableProperties"),
                          [
                            _core().types.cloneNode(objId),
                            _core().types.cloneNode(mutatorRef)
                          ]
                        )
                      )
                    );
                  }

                  if (single) {
                    path.replaceWith(single);
                  } else {
                    body.push(
                      _core().types.expressionStatement(
                        _core().types.cloneNode(objId)
                      )
                    );
                    path.replaceWithMultiple(body);
                  }
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 210 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var _options$loose = options.loose,
            loose = _options$loose === void 0 ? false : _options$loose,
            _options$useBuiltIns = options.useBuiltIns,
            useBuiltIns =
              _options$useBuiltIns === void 0 ? false : _options$useBuiltIns;

          if (typeof loose !== "boolean") {
            throw new Error(".loose must be a boolean or undefined");
          }

          var arrayOnlySpread = loose;

          function getExtendsHelper(file) {
            return useBuiltIns
              ? _core().types.memberExpression(
                  _core().types.identifier("Object"),
                  _core().types.identifier("assign")
                )
              : file.addHelper("extends");
          }

          function variableDeclarationHasPattern(node) {
            var _arr = node.declarations;

            for (var _i = 0; _i < _arr.length; _i++) {
              var declar = _arr[_i];

              if (_core().types.isPattern(declar.id)) {
                return true;
              }
            }

            return false;
          }

          function hasRest(pattern) {
            var _arr2 = pattern.elements;

            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
              var elem = _arr2[_i2];

              if (_core().types.isRestElement(elem)) {
                return true;
              }
            }

            return false;
          }

          var arrayUnpackVisitor = {
            ReferencedIdentifier: function ReferencedIdentifier(path, state) {
              if (state.bindings[path.node.name]) {
                state.deopt = true;
                path.stop();
              }
            }
          };

          var DestructuringTransformer = (function() {
            function DestructuringTransformer(opts) {
              this.blockHoist = opts.blockHoist;
              this.operator = opts.operator;
              this.arrays = {};
              this.nodes = opts.nodes || [];
              this.scope = opts.scope;
              this.kind = opts.kind;
              this.arrayOnlySpread = opts.arrayOnlySpread;
              this.addHelper = opts.addHelper;
            }

            var _proto = DestructuringTransformer.prototype;

            _proto.buildVariableAssignment = function buildVariableAssignment(
              id,
              init
            ) {
              var op = this.operator;
              if (_core().types.isMemberExpression(id)) op = "=";
              var node;

              if (op) {
                node = _core().types.expressionStatement(
                  _core().types.assignmentExpression(
                    op,
                    id,
                    _core().types.cloneNode(init)
                  )
                );
              } else {
                node = _core().types.variableDeclaration(this.kind, [
                  _core().types.variableDeclarator(
                    id,
                    _core().types.cloneNode(init)
                  )
                ]);
              }

              node._blockHoist = this.blockHoist;
              return node;
            };

            _proto.buildVariableDeclaration = function buildVariableDeclaration(
              id,
              init
            ) {
              var declar = _core().types.variableDeclaration("var", [
                _core().types.variableDeclarator(
                  _core().types.cloneNode(id),
                  _core().types.cloneNode(init)
                )
              ]);

              declar._blockHoist = this.blockHoist;
              return declar;
            };

            _proto.push = function push(id, _init) {
              var init = _core().types.cloneNode(_init);

              if (_core().types.isObjectPattern(id)) {
                this.pushObjectPattern(id, init);
              } else if (_core().types.isArrayPattern(id)) {
                this.pushArrayPattern(id, init);
              } else if (_core().types.isAssignmentPattern(id)) {
                this.pushAssignmentPattern(id, init);
              } else {
                this.nodes.push(this.buildVariableAssignment(id, init));
              }
            };

            _proto.toArray = function toArray(node, count) {
              if (
                this.arrayOnlySpread ||
                (_core().types.isIdentifier(node) && this.arrays[node.name])
              ) {
                return node;
              } else {
                return this.scope.toArray(node, count);
              }
            };

            _proto.pushAssignmentPattern = function pushAssignmentPattern(
              _ref,
              valueRef
            ) {
              var left = _ref.left,
                right = _ref.right;
              var tempId = this.scope.generateUidIdentifierBasedOnNode(
                valueRef
              );
              this.nodes.push(this.buildVariableDeclaration(tempId, valueRef));

              var tempConditional = _core().types.conditionalExpression(
                _core().types.binaryExpression(
                  "===",
                  _core().types.cloneNode(tempId),
                  this.scope.buildUndefinedNode()
                ),
                right,
                _core().types.cloneNode(tempId)
              );

              if (_core().types.isPattern(left)) {
                var patternId;
                var node;

                if (this.kind === "const") {
                  patternId = this.scope.generateUidIdentifier(tempId.name);
                  node = this.buildVariableDeclaration(
                    patternId,
                    tempConditional
                  );
                } else {
                  patternId = tempId;
                  node = _core().types.expressionStatement(
                    _core().types.assignmentExpression(
                      "=",
                      _core().types.cloneNode(tempId),
                      tempConditional
                    )
                  );
                }

                this.nodes.push(node);
                this.push(left, patternId);
              } else {
                this.nodes.push(
                  this.buildVariableAssignment(left, tempConditional)
                );
              }
            };

            _proto.pushObjectRest = function pushObjectRest(
              pattern,
              objRef,
              spreadProp,
              spreadPropIndex
            ) {
              var keys = [];

              for (var i = 0; i < pattern.properties.length; i++) {
                var prop = pattern.properties[i];
                if (i >= spreadPropIndex) break;
                if (_core().types.isRestElement(prop)) continue;
                var key = prop.key;

                if (_core().types.isIdentifier(key) && !prop.computed) {
                  key = _core().types.stringLiteral(prop.key.name);
                }

                keys.push(_core().types.cloneNode(key));
              }

              var value;

              if (keys.length === 0) {
                value = _core().types.callExpression(getExtendsHelper(this), [
                  _core().types.objectExpression([]),
                  _core().types.cloneNode(objRef)
                ]);
              } else {
                keys = _core().types.arrayExpression(keys);
                value = _core().types.callExpression(
                  this.addHelper("objectWithoutProperties"),
                  [_core().types.cloneNode(objRef), keys]
                );
              }

              this.nodes.push(
                this.buildVariableAssignment(spreadProp.argument, value)
              );
            };

            _proto.pushObjectProperty = function pushObjectProperty(
              prop,
              propRef
            ) {
              if (_core().types.isLiteral(prop.key)) prop.computed = true;
              var pattern = prop.value;

              var objRef = _core().types.memberExpression(
                _core().types.cloneNode(propRef),
                prop.key,
                prop.computed
              );

              if (_core().types.isPattern(pattern)) {
                this.push(pattern, objRef);
              } else {
                this.nodes.push(this.buildVariableAssignment(pattern, objRef));
              }
            };

            _proto.pushObjectPattern = function pushObjectPattern(
              pattern,
              objRef
            ) {
              if (!pattern.properties.length) {
                this.nodes.push(
                  _core().types.expressionStatement(
                    _core().types.callExpression(
                      this.addHelper("objectDestructuringEmpty"),
                      [objRef]
                    )
                  )
                );
              }

              if (
                pattern.properties.length > 1 &&
                !this.scope.isStatic(objRef)
              ) {
                var temp = this.scope.generateUidIdentifierBasedOnNode(objRef);
                this.nodes.push(this.buildVariableDeclaration(temp, objRef));
                objRef = temp;
              }

              for (var i = 0; i < pattern.properties.length; i++) {
                var prop = pattern.properties[i];

                if (_core().types.isRestElement(prop)) {
                  this.pushObjectRest(pattern, objRef, prop, i);
                } else {
                  this.pushObjectProperty(prop, objRef);
                }
              }
            };

            _proto.canUnpackArrayPattern = function canUnpackArrayPattern(
              pattern,
              arr
            ) {
              if (!_core().types.isArrayExpression(arr)) return false;
              if (pattern.elements.length > arr.elements.length) return;

              if (
                pattern.elements.length < arr.elements.length &&
                !hasRest(pattern)
              ) {
                return false;
              }

              var _arr3 = pattern.elements;

              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var elem = _arr3[_i3];
                if (!elem) return false;
                if (_core().types.isMemberExpression(elem)) return false;
              }

              var _arr4 = arr.elements;

              for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
                var _elem = _arr4[_i4];
                if (_core().types.isSpreadElement(_elem)) return false;
                if (_core().types.isCallExpression(_elem)) return false;
                if (_core().types.isMemberExpression(_elem)) return false;
              }

              var bindings = _core().types.getBindingIdentifiers(pattern);

              var state = {
                deopt: false,
                bindings: bindings
              };
              this.scope.traverse(arr, arrayUnpackVisitor, state);
              return !state.deopt;
            };

            _proto.pushUnpackedArrayPattern = function pushUnpackedArrayPattern(
              pattern,
              arr
            ) {
              for (var i = 0; i < pattern.elements.length; i++) {
                var elem = pattern.elements[i];

                if (_core().types.isRestElement(elem)) {
                  this.push(
                    elem.argument,
                    _core().types.arrayExpression(arr.elements.slice(i))
                  );
                } else {
                  this.push(elem, arr.elements[i]);
                }
              }
            };

            _proto.pushArrayPattern = function pushArrayPattern(
              pattern,
              arrayRef
            ) {
              if (!pattern.elements) return;

              if (this.canUnpackArrayPattern(pattern, arrayRef)) {
                return this.pushUnpackedArrayPattern(pattern, arrayRef);
              }

              var count = !hasRest(pattern) && pattern.elements.length;
              var toArray = this.toArray(arrayRef, count);

              if (_core().types.isIdentifier(toArray)) {
                arrayRef = toArray;
              } else {
                arrayRef = this.scope.generateUidIdentifierBasedOnNode(
                  arrayRef
                );
                this.arrays[arrayRef.name] = true;
                this.nodes.push(
                  this.buildVariableDeclaration(arrayRef, toArray)
                );
              }

              for (var i = 0; i < pattern.elements.length; i++) {
                var elem = pattern.elements[i];
                if (!elem) continue;
                var elemRef = void 0;

                if (_core().types.isRestElement(elem)) {
                  elemRef = this.toArray(arrayRef);
                  elemRef = _core().types.callExpression(
                    _core().types.memberExpression(
                      elemRef,
                      _core().types.identifier("slice")
                    ),
                    [_core().types.numericLiteral(i)]
                  );
                  elem = elem.argument;
                } else {
                  elemRef = _core().types.memberExpression(
                    arrayRef,
                    _core().types.numericLiteral(i),
                    true
                  );
                }

                this.push(elem, elemRef);
              }
            };

            _proto.init = function init(pattern, ref) {
              if (
                !_core().types.isArrayExpression(ref) &&
                !_core().types.isMemberExpression(ref)
              ) {
                var memo = this.scope.maybeGenerateMemoised(ref, true);

                if (memo) {
                  this.nodes.push(
                    this.buildVariableDeclaration(
                      memo,
                      _core().types.cloneNode(ref)
                    )
                  );
                  ref = memo;
                }
              }

              this.push(pattern, ref);
              return this.nodes;
            };

            return DestructuringTransformer;
          })();

          return {
            visitor: {
              ExportNamedDeclaration: function ExportNamedDeclaration(path) {
                var declaration = path.get("declaration");
                if (!declaration.isVariableDeclaration()) return;
                if (!variableDeclarationHasPattern(declaration.node)) return;
                var specifiers = [];

                for (var name in path.getOuterBindingIdentifiers(path)) {
                  specifiers.push(
                    _core().types.exportSpecifier(
                      _core().types.identifier(name),
                      _core().types.identifier(name)
                    )
                  );
                }

                path.replaceWith(declaration.node);
                path.insertAfter(
                  _core().types.exportNamedDeclaration(null, specifiers)
                );
              },
              ForXStatement: function ForXStatement(path) {
                var _this = this;

                var node = path.node,
                  scope = path.scope;
                var left = node.left;

                if (_core().types.isPattern(left)) {
                  var temp = scope.generateUidIdentifier("ref");
                  node.left = _core().types.variableDeclaration("var", [
                    _core().types.variableDeclarator(temp)
                  ]);
                  path.ensureBlock();
                  node.body.body.unshift(
                    _core().types.variableDeclaration("var", [
                      _core().types.variableDeclarator(left, temp)
                    ])
                  );
                  return;
                }

                if (!_core().types.isVariableDeclaration(left)) return;
                var pattern = left.declarations[0].id;
                if (!_core().types.isPattern(pattern)) return;
                var key = scope.generateUidIdentifier("ref");
                node.left = _core().types.variableDeclaration(left.kind, [
                  _core().types.variableDeclarator(key, null)
                ]);
                var nodes = [];
                var destructuring = new DestructuringTransformer({
                  kind: left.kind,
                  scope: scope,
                  nodes: nodes,
                  arrayOnlySpread: arrayOnlySpread,
                  addHelper: function addHelper(name) {
                    return _this.addHelper(name);
                  }
                });
                destructuring.init(pattern, key);
                path.ensureBlock();
                var block = node.body;
                block.body = nodes.concat(block.body);
              },
              CatchClause: function CatchClause(_ref2) {
                var _this2 = this;

                var node = _ref2.node,
                  scope = _ref2.scope;
                var pattern = node.param;
                if (!_core().types.isPattern(pattern)) return;
                var ref = scope.generateUidIdentifier("ref");
                node.param = ref;
                var nodes = [];
                var destructuring = new DestructuringTransformer({
                  kind: "let",
                  scope: scope,
                  nodes: nodes,
                  arrayOnlySpread: arrayOnlySpread,
                  addHelper: function addHelper(name) {
                    return _this2.addHelper(name);
                  }
                });
                destructuring.init(pattern, ref);
                node.body.body = nodes.concat(node.body.body);
              },
              AssignmentExpression: function AssignmentExpression(path) {
                var _this3 = this;

                var node = path.node,
                  scope = path.scope;
                if (!_core().types.isPattern(node.left)) return;
                var nodes = [];
                var destructuring = new DestructuringTransformer({
                  operator: node.operator,
                  scope: scope,
                  nodes: nodes,
                  arrayOnlySpread: arrayOnlySpread,
                  addHelper: function addHelper(name) {
                    return _this3.addHelper(name);
                  }
                });
                var ref;

                if (
                  path.isCompletionRecord() ||
                  !path.parentPath.isExpressionStatement()
                ) {
                  ref = scope.generateUidIdentifierBasedOnNode(
                    node.right,
                    "ref"
                  );
                  nodes.push(
                    _core().types.variableDeclaration("var", [
                      _core().types.variableDeclarator(ref, node.right)
                    ])
                  );

                  if (_core().types.isArrayExpression(node.right)) {
                    destructuring.arrays[ref.name] = true;
                  }
                }

                destructuring.init(node.left, ref || node.right);

                if (ref) {
                  nodes.push(
                    _core().types.expressionStatement(
                      _core().types.cloneNode(ref)
                    )
                  );
                }

                path.replaceWithMultiple(nodes);
              },
              VariableDeclaration: function VariableDeclaration(path) {
                var _this4 = this;

                var node = path.node,
                  scope = path.scope,
                  parent = path.parent;
                if (_core().types.isForXStatement(parent)) return;
                if (!parent || !path.container) return;
                if (!variableDeclarationHasPattern(node)) return;
                var nodeKind = node.kind;
                var nodes = [];
                var declar;

                for (var i = 0; i < node.declarations.length; i++) {
                  declar = node.declarations[i];
                  var patternId = declar.init;
                  var pattern = declar.id;
                  var destructuring = new DestructuringTransformer({
                    blockHoist: node._blockHoist,
                    nodes: nodes,
                    scope: scope,
                    kind: node.kind,
                    arrayOnlySpread: arrayOnlySpread,
                    addHelper: function addHelper(name) {
                      return _this4.addHelper(name);
                    }
                  });

                  if (_core().types.isPattern(pattern)) {
                    destructuring.init(pattern, patternId);

                    if (+i !== node.declarations.length - 1) {
                      _core().types.inherits(nodes[nodes.length - 1], declar);
                    }
                  } else {
                    nodes.push(
                      _core().types.inherits(
                        destructuring.buildVariableAssignment(
                          declar.id,
                          _core().types.cloneNode(declar.init)
                        ),
                        declar
                      )
                    );
                  }
                }

                var tail = null;
                var nodesOut = [];

                for (var _i5 = 0; _i5 < nodes.length; _i5++) {
                  var _node = nodes[_i5];

                  if (
                    tail !== null &&
                    _core().types.isVariableDeclaration(_node)
                  ) {
                    var _tail$declarations;

                    (_tail$declarations = tail.declarations).push.apply(
                      _tail$declarations,
                      _node.declarations
                    );
                  } else {
                    _node.kind = nodeKind;
                    nodesOut.push(_node);
                    tail = _core().types.isVariableDeclaration(_node)
                      ? _node
                      : null;
                  }
                }

                for (var _i6 = 0; _i6 < nodesOut.length; _i6++) {
                  var nodeOut = nodesOut[_i6];
                  if (!nodeOut.declarations) continue;

                  for (
                    var _iterator = nodeOut.declarations,
                      _isArray = Array.isArray(_iterator),
                      _i7 = 0,
                      _iterator = _isArray
                        ? _iterator
                        : _iterator[Symbol.iterator]();
                    ;

                  ) {
                    var _ref3;

                    if (_isArray) {
                      if (_i7 >= _iterator.length) break;
                      _ref3 = _iterator[_i7++];
                    } else {
                      _i7 = _iterator.next();
                      if (_i7.done) break;
                      _ref3 = _i7.value;
                    }

                    var declaration = _ref3;
                    var name = declaration.id.name;

                    if (scope.bindings[name]) {
                      scope.bindings[name].kind = nodeOut.kind;
                    }
                  }
                }

                if (nodesOut.length === 1) {
                  path.replaceWith(nodesOut[0]);
                } else {
                  path.replaceWithMultiple(nodesOut);
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 211 */
      /***/ function(module, exports, __webpack_require__) {
        var baseRest = __webpack_require__(47),
          pullAll = __webpack_require__(933);

        var pull = baseRest(pullAll);
        module.exports = pull;

        /***/
      },
      /* 212 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function getName(key) {
          if (_core().types.isIdentifier(key)) {
            return key.name;
          }

          return key.value.toString();
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              ObjectExpression: function ObjectExpression(path) {
                var node = path.node;
                var plainProps = node.properties.filter(function(prop) {
                  return !_core().types.isSpreadElement(prop) && !prop.computed;
                });
                var alreadySeenData = Object.create(null);
                var alreadySeenGetters = Object.create(null);
                var alreadySeenSetters = Object.create(null);

                for (
                  var _iterator = plainProps,
                    _isArray = Array.isArray(_iterator),
                    _i = 0,
                    _iterator = _isArray
                      ? _iterator
                      : _iterator[Symbol.iterator]();
                  ;

                ) {
                  var _ref;

                  if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                  } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                  }

                  var prop = _ref;
                  var name = getName(prop.key);
                  var isDuplicate = false;

                  switch (prop.kind) {
                    case "get":
                      if (alreadySeenData[name] || alreadySeenGetters[name]) {
                        isDuplicate = true;
                      }

                      alreadySeenGetters[name] = true;
                      break;

                    case "set":
                      if (alreadySeenData[name] || alreadySeenSetters[name]) {
                        isDuplicate = true;
                      }

                      alreadySeenSetters[name] = true;
                      break;

                    default:
                      if (
                        alreadySeenData[name] ||
                        alreadySeenGetters[name] ||
                        alreadySeenSetters[name]
                      ) {
                        isDuplicate = true;
                      }

                      alreadySeenData[name] = true;
                  }

                  if (isDuplicate) {
                    prop.computed = true;
                    prop.key = _core().types.stringLiteral(name);
                  }
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 213 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var loose = options.loose,
            assumeArray = options.assumeArray;

          if (loose === true && assumeArray === true) {
            throw new Error(
              "The loose and assumeArray options cannot be used together in @babel/plugin-transform-for-of"
            );
          }

          if (assumeArray) {
            return {
              visitor: {
                ForOfStatement: function ForOfStatement(path) {
                  var scope = path.scope;
                  var _path$node = path.node,
                    left = _path$node.left,
                    right = _path$node.right,
                    body = _path$node.body;
                  var i = scope.generateUidIdentifier("i");
                  var array = scope.maybeGenerateMemoised(right, true);
                  var inits = [
                    _core().types.variableDeclarator(
                      i,
                      _core().types.numericLiteral(0)
                    )
                  ];

                  if (array) {
                    inits.push(_core().types.variableDeclarator(array, right));
                  } else {
                    array = right;
                  }

                  var item = _core().types.memberExpression(
                    _core().types.cloneNode(array),
                    _core().types.cloneNode(i),
                    true
                  );

                  var assignment;

                  if (_core().types.isVariableDeclaration(left)) {
                    assignment = left;
                    assignment.declarations[0].init = item;
                  } else {
                    assignment = _core().types.expressionStatement(
                      _core().types.assignmentExpression("=", left, item)
                    );
                  }

                  var block = _core().types.toBlock(body);

                  block.body.unshift(assignment);
                  path.replaceWith(
                    _core().types.forStatement(
                      _core().types.variableDeclaration("let", inits),
                      _core().types.binaryExpression(
                        "<",
                        _core().types.cloneNode(i),
                        _core().types.memberExpression(
                          _core().types.cloneNode(array),
                          _core().types.identifier("length")
                        )
                      ),
                      _core().types.updateExpression(
                        "++",
                        _core().types.cloneNode(i)
                      ),
                      block
                    )
                  );
                }
              }
            };
          }

          var pushComputedProps = loose
            ? pushComputedPropsLoose
            : pushComputedPropsSpec;
          var buildForOfArray = (0, _core().template)(
            "\n    for (var KEY = 0; KEY < ARR.length; KEY++) BODY;\n  "
          );
          var buildForOfLoose = (0, _core().template)(
            "\n    for (var LOOP_OBJECT = OBJECT,\n             IS_ARRAY = Array.isArray(LOOP_OBJECT),\n             INDEX = 0,\n             LOOP_OBJECT = IS_ARRAY ? LOOP_OBJECT : LOOP_OBJECT[Symbol.iterator]();;) {\n      INTERMEDIATE;\n      if (IS_ARRAY) {\n        if (INDEX >= LOOP_OBJECT.length) break;\n        ID = LOOP_OBJECT[INDEX++];\n      } else {\n        INDEX = LOOP_OBJECT.next();\n        if (INDEX.done) break;\n        ID = INDEX.value;\n      }\n    }\n  "
          );
          var buildForOf = (0, _core().template)(
            "\n    var ITERATOR_COMPLETION = true;\n    var ITERATOR_HAD_ERROR_KEY = false;\n    var ITERATOR_ERROR_KEY = undefined;\n    try {\n      for (\n        var ITERATOR_KEY = OBJECT[Symbol.iterator](), STEP_KEY;\n        !(ITERATOR_COMPLETION = (STEP_KEY = ITERATOR_KEY.next()).done);\n        ITERATOR_COMPLETION = true\n      ) {}\n    } catch (err) {\n      ITERATOR_HAD_ERROR_KEY = true;\n      ITERATOR_ERROR_KEY = err;\n    } finally {\n      try {\n        if (!ITERATOR_COMPLETION && ITERATOR_KEY.return != null) {\n          ITERATOR_KEY.return();\n        }\n      } finally {\n        if (ITERATOR_HAD_ERROR_KEY) {\n          throw ITERATOR_ERROR_KEY;\n        }\n      }\n    }\n  "
          );

          function _ForOfStatementArray(path) {
            var node = path.node,
              scope = path.scope;
            var nodes = [];
            var right = node.right;

            if (
              !_core().types.isIdentifier(right) ||
              !scope.hasBinding(right.name)
            ) {
              var uid = scope.generateUid("arr");
              nodes.push(
                _core().types.variableDeclaration("var", [
                  _core().types.variableDeclarator(
                    _core().types.identifier(uid),
                    right
                  )
                ])
              );
              right = _core().types.identifier(uid);
            }

            var iterationKey = scope.generateUidIdentifier("i");
            var loop = buildForOfArray({
              BODY: node.body,
              KEY: iterationKey,
              ARR: right
            });

            _core().types.inherits(loop, node);

            _core().types.ensureBlock(loop);

            var iterationValue = _core().types.memberExpression(
              _core().types.cloneNode(right),
              _core().types.cloneNode(iterationKey),
              true
            );

            var left = node.left;

            if (_core().types.isVariableDeclaration(left)) {
              left.declarations[0].init = iterationValue;
              loop.body.body.unshift(left);
            } else {
              loop.body.body.unshift(
                _core().types.expressionStatement(
                  _core().types.assignmentExpression("=", left, iterationValue)
                )
              );
            }

            if (path.parentPath.isLabeledStatement()) {
              loop = _core().types.labeledStatement(
                path.parentPath.node.label,
                loop
              );
            }

            nodes.push(loop);
            return nodes;
          }

          function replaceWithArray(path) {
            if (path.parentPath.isLabeledStatement()) {
              path.parentPath.replaceWithMultiple(_ForOfStatementArray(path));
            } else {
              path.replaceWithMultiple(_ForOfStatementArray(path));
            }
          }

          return {
            visitor: {
              ForOfStatement: function ForOfStatement(path, state) {
                var right = path.get("right");

                if (
                  right.isArrayExpression() ||
                  right.isGenericType("Array") ||
                  _core().types.isArrayTypeAnnotation(right.getTypeAnnotation())
                ) {
                  replaceWithArray(path);
                  return;
                }

                var node = path.node;
                var build = pushComputedProps(path, state);
                var declar = build.declar;
                var loop = build.loop;
                var block = loop.body;
                path.ensureBlock();

                if (declar) {
                  block.body.push(declar);
                }

                block.body = block.body.concat(node.body.body);

                _core().types.inherits(loop, node);

                _core().types.inherits(loop.body, node.body);

                if (build.replaceParent) {
                  path.parentPath.replaceWithMultiple(build.node);
                  path.remove();
                } else {
                  path.replaceWithMultiple(build.node);
                }
              }
            }
          };

          function pushComputedPropsLoose(path, file) {
            var node = path.node,
              scope = path.scope,
              parent = path.parent;
            var left = node.left;
            var declar, id, intermediate;

            if (
              _core().types.isIdentifier(left) ||
              _core().types.isPattern(left) ||
              _core().types.isMemberExpression(left)
            ) {
              id = left;
              intermediate = null;
            } else if (_core().types.isVariableDeclaration(left)) {
              id = scope.generateUidIdentifier("ref");
              declar = _core().types.variableDeclaration(left.kind, [
                _core().types.variableDeclarator(
                  left.declarations[0].id,
                  _core().types.identifier(id.name)
                )
              ]);
              intermediate = _core().types.variableDeclaration("var", [
                _core().types.variableDeclarator(
                  _core().types.identifier(id.name)
                )
              ]);
            } else {
              throw file.buildCodeFrameError(
                left,
                "Unknown node type " + left.type + " in ForStatement"
              );
            }

            var iteratorKey = scope.generateUidIdentifier("iterator");
            var isArrayKey = scope.generateUidIdentifier("isArray");
            var loop = buildForOfLoose({
              LOOP_OBJECT: iteratorKey,
              IS_ARRAY: isArrayKey,
              OBJECT: node.right,
              INDEX: scope.generateUidIdentifier("i"),
              ID: id,
              INTERMEDIATE: intermediate
            });

            var isLabeledParent = _core().types.isLabeledStatement(parent);

            var labeled;

            if (isLabeledParent) {
              labeled = _core().types.labeledStatement(parent.label, loop);
            }

            return {
              replaceParent: isLabeledParent,
              declar: declar,
              node: labeled || loop,
              loop: loop
            };
          }

          function pushComputedPropsSpec(path, file) {
            var node = path.node,
              scope = path.scope,
              parent = path.parent;
            var left = node.left;
            var declar;
            var stepKey = scope.generateUid("step");

            var stepValue = _core().types.memberExpression(
              _core().types.identifier(stepKey),
              _core().types.identifier("value")
            );

            if (
              _core().types.isIdentifier(left) ||
              _core().types.isPattern(left) ||
              _core().types.isMemberExpression(left)
            ) {
              declar = _core().types.expressionStatement(
                _core().types.assignmentExpression("=", left, stepValue)
              );
            } else if (_core().types.isVariableDeclaration(left)) {
              declar = _core().types.variableDeclaration(left.kind, [
                _core().types.variableDeclarator(
                  left.declarations[0].id,
                  stepValue
                )
              ]);
            } else {
              throw file.buildCodeFrameError(
                left,
                "Unknown node type " + left.type + " in ForStatement"
              );
            }

            var template = buildForOf({
              ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier(
                "didIteratorError"
              ),
              ITERATOR_COMPLETION: scope.generateUidIdentifier(
                "iteratorNormalCompletion"
              ),
              ITERATOR_ERROR_KEY: scope.generateUidIdentifier("iteratorError"),
              ITERATOR_KEY: scope.generateUidIdentifier("iterator"),
              STEP_KEY: _core().types.identifier(stepKey),
              OBJECT: node.right
            });

            var isLabeledParent = _core().types.isLabeledStatement(parent);

            var tryBody = template[3].block.body;
            var loop = tryBody[0];

            if (isLabeledParent) {
              tryBody[0] = _core().types.labeledStatement(parent.label, loop);
            }

            return {
              replaceParent: isLabeledParent,
              declar: declar,
              loop: loop,
              node: template
            };
          }
        });

        exports.default = _default;

        /***/
      },
      /* 214 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperFunctionName() {
          var data = _interopRequireDefault(__webpack_require__(20));

          _helperFunctionName = function _helperFunctionName() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              FunctionExpression: {
                exit: function exit(path) {
                  if (
                    path.key !== "value" &&
                    !path.parentPath.isObjectProperty()
                  ) {
                    var replacement = (0, _helperFunctionName().default)(path);
                    if (replacement) path.replaceWith(replacement);
                  }
                }
              },
              ObjectProperty: function ObjectProperty(path) {
                var value = path.get("value");

                if (value.isFunction()) {
                  var newNode = (0, _helperFunctionName().default)(value);
                  if (newNode) value.replaceWith(newNode);
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 215 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              BinaryExpression: function BinaryExpression(path) {
                var node = path.node;

                if (node.operator === "instanceof") {
                  var helper = this.addHelper("instanceof");
                  var isUnderHelper = path.findParent(function(path) {
                    return (
                      (path.isVariableDeclarator() &&
                        path.node.id === helper) ||
                      (path.isFunctionDeclaration() &&
                        path.node.id &&
                        path.node.id.name === helper.name)
                    );
                  });

                  if (isUnderHelper) {
                    return;
                  } else {
                    path.replaceWith(
                      _core().types.callExpression(helper, [
                        node.left,
                        node.right
                      ])
                    );
                  }
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 216 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              NumericLiteral: function NumericLiteral(_ref) {
                var node = _ref.node;

                if (node.extra && /^0[ob]/i.test(node.extra.raw)) {
                  node.extra = undefined;
                }
              },
              StringLiteral: function StringLiteral(_ref2) {
                var node = _ref2.node;

                if (node.extra && /\\[u]/gi.test(node.extra.raw)) {
                  node.extra = undefined;
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 217 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperModuleTransforms() {
          var data = __webpack_require__(97);

          _helperModuleTransforms = function _helperModuleTransforms() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var buildWrapper = (0, _core().template)(
          "\n  define(MODULE_NAME, AMD_ARGUMENTS, function(IMPORT_NAMES) {\n  })\n"
        );

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var loose = options.loose,
            allowTopLevelThis = options.allowTopLevelThis,
            strict = options.strict,
            strictMode = options.strictMode,
            noInterop = options.noInterop;
          return {
            visitor: {
              Program: {
                exit: function exit(path) {
                  if (!(0, _helperModuleTransforms().isModule)(path)) return;
                  var moduleName = this.getModuleName();
                  if (moduleName)
                    moduleName = _core().types.stringLiteral(moduleName);

                  var _rewriteModuleStateme = (0,
                    _helperModuleTransforms()
                      .rewriteModuleStatementsAndPrepareHeader)(path, {
                      loose: loose,
                      strict: strict,
                      strictMode: strictMode,
                      allowTopLevelThis: allowTopLevelThis,
                      noInterop: noInterop
                    }),
                    meta = _rewriteModuleStateme.meta,
                    headers = _rewriteModuleStateme.headers;

                  var amdArgs = [];
                  var importNames = [];

                  if ((0, _helperModuleTransforms().hasExports)(meta)) {
                    amdArgs.push(_core().types.stringLiteral("exports"));
                    importNames.push(_core().types.identifier(meta.exportName));
                  }

                  for (
                    var _iterator = meta.source,
                      _isArray = Array.isArray(_iterator),
                      _i = 0,
                      _iterator = _isArray
                        ? _iterator
                        : _iterator[Symbol.iterator]();
                    ;

                  ) {
                    var _ref;

                    if (_isArray) {
                      if (_i >= _iterator.length) break;
                      _ref = _iterator[_i++];
                    } else {
                      _i = _iterator.next();
                      if (_i.done) break;
                      _ref = _i.value;
                    }

                    var _ref2 = _ref,
                      source = _ref2[0],
                      metadata = _ref2[1];
                    amdArgs.push(_core().types.stringLiteral(source));
                    importNames.push(_core().types.identifier(metadata.name));

                    if (
                      !(0, _helperModuleTransforms().isSideEffectImport)(
                        metadata
                      )
                    ) {
                      var interop = (0, _helperModuleTransforms().wrapInterop)(
                        path,
                        _core().types.identifier(metadata.name),
                        metadata.interop
                      );

                      if (interop) {
                        var header = _core().types.expressionStatement(
                          _core().types.assignmentExpression(
                            "=",
                            _core().types.identifier(metadata.name),
                            interop
                          )
                        );

                        header.loc = metadata.loc;
                        headers.push(header);
                      }
                    }

                    headers.push.apply(
                      headers,
                      (0,
                      _helperModuleTransforms().buildNamespaceInitStatements)(
                        meta,
                        metadata,
                        loose
                      )
                    );
                  }

                  (0, _helperModuleTransforms().ensureStatementsHoisted)(
                    headers
                  );
                  path.unshiftContainer("body", headers);
                  var _path$node = path.node,
                    body = _path$node.body,
                    directives = _path$node.directives;
                  path.node.directives = [];
                  path.node.body = [];
                  var amdWrapper = path.pushContainer("body", [
                    buildWrapper({
                      MODULE_NAME: moduleName,
                      AMD_ARGUMENTS: _core().types.arrayExpression(amdArgs),
                      IMPORT_NAMES: importNames
                    })
                  ])[0];
                  var amdFactory = amdWrapper
                    .get("expression.arguments")
                    .filter(function(arg) {
                      return arg.isFunctionExpression();
                    })[0]
                    .get("body");
                  amdFactory.pushContainer("directives", directives);
                  amdFactory.pushContainer("body", body);
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 218 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = simplifyAccess;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function simplifyAccess(path, bindingNames) {
          path.traverse(simpleAssignmentVisitor, {
            scope: path.scope,
            bindingNames: bindingNames,
            seen: new WeakSet()
          });
        }

        var simpleAssignmentVisitor = {
          UpdateExpression: {
            exit: function exit(path) {
              var scope = this.scope,
                bindingNames = this.bindingNames;
              var arg = path.get("argument");
              if (!arg.isIdentifier()) return;
              var localName = arg.node.name;
              if (!bindingNames.has(localName)) return;

              if (
                scope.getBinding(localName) !== path.scope.getBinding(localName)
              ) {
                return;
              }

              if (
                path.parentPath.isExpressionStatement() &&
                !path.isCompletionRecord()
              ) {
                var operator = path.node.operator == "++" ? "+=" : "-=";
                path.replaceWith(
                  t().assignmentExpression(
                    operator,
                    arg.node,
                    t().numericLiteral(1)
                  )
                );
              } else if (path.node.prefix) {
                path.replaceWith(
                  t().assignmentExpression(
                    "=",
                    t().identifier(localName),
                    t().binaryExpression(
                      path.node.operator[0],
                      t().unaryExpression("+", arg.node),
                      t().numericLiteral(1)
                    )
                  )
                );
              } else {
                var old = path.scope.generateUidIdentifierBasedOnNode(
                  arg.node,
                  "old"
                );
                var varName = old.name;
                path.scope.push({
                  id: old
                });
                var binary = t().binaryExpression(
                  path.node.operator[0],
                  t().identifier(varName),
                  t().numericLiteral(1)
                );
                path.replaceWith(
                  t().sequenceExpression([
                    t().assignmentExpression(
                      "=",
                      t().identifier(varName),
                      t().unaryExpression("+", arg.node)
                    ),
                    t().assignmentExpression(
                      "=",
                      t().cloneNode(arg.node),
                      binary
                    ),
                    t().identifier(varName)
                  ])
                );
              }
            }
          },
          AssignmentExpression: {
            exit: function exit(path) {
              var scope = this.scope,
                seen = this.seen,
                bindingNames = this.bindingNames;
              if (path.node.operator === "=") return;
              if (seen.has(path.node)) return;
              seen.add(path.node);
              var left = path.get("left");
              if (!left.isIdentifier()) return;
              var localName = left.node.name;
              if (!bindingNames.has(localName)) return;

              if (
                scope.getBinding(localName) !== path.scope.getBinding(localName)
              ) {
                return;
              }

              path.node.right = t().binaryExpression(
                path.node.operator.slice(0, -1),
                t().cloneNode(path.node.left),
                path.node.right
              );
              path.node.operator = "=";
            }
          }
        };

        /***/
      },
      /* 219 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperModuleTransforms() {
          var data = __webpack_require__(97);

          _helperModuleTransforms = function _helperModuleTransforms() {
            return data;
          };

          return data;
        }

        function _helperSimpleAccess() {
          var data = _interopRequireDefault(__webpack_require__(218));

          _helperSimpleAccess = function _helperSimpleAccess() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _templateObject = _taggedTemplateLiteralLoose([
            '\n    (function(){\n      throw new Error(\n        "The CommonJS \'" + "',
            '" + "\' variable is not available in ES6 modules." +\n        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +\n        "Babel config for this file.");\n    })()\n  '
          ]),
          _templateObject2 = _taggedTemplateLiteralLoose([
            "\n                  function ",
            "() {\n                    const data = ",
            ";\n                    ",
            " = function(){ return data; };\n                    return data;\n                  }\n                "
          ]),
          _templateObject3 = _taggedTemplateLiteralLoose([
            "\n                  var ",
            " = ",
            ";\n                "
          ]);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _taggedTemplateLiteralLoose(strings, raw) {
          if (!raw) {
            raw = strings.slice(0);
          }

          strings.raw = raw;
          return strings;
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var loose = options.loose,
            _options$strictNamesp = options.strictNamespace,
            strictNamespace =
              _options$strictNamesp === void 0 ? false : _options$strictNamesp,
            _options$mjsStrictNam = options.mjsStrictNamespace,
            mjsStrictNamespace =
              _options$mjsStrictNam === void 0 ? true : _options$mjsStrictNam,
            allowTopLevelThis = options.allowTopLevelThis,
            strict = options.strict,
            strictMode = options.strictMode,
            noInterop = options.noInterop,
            _options$lazy = options.lazy,
            lazy = _options$lazy === void 0 ? false : _options$lazy,
            _options$allowCommonJ = options.allowCommonJSExports,
            allowCommonJSExports =
              _options$allowCommonJ === void 0 ? true : _options$allowCommonJ;

          if (
            typeof lazy !== "boolean" &&
            typeof lazy !== "function" &&
            (!Array.isArray(lazy) ||
              !lazy.every(function(item) {
                return typeof item === "string";
              }))
          ) {
            throw new Error(
              ".lazy must be a boolean, array of strings, or a function"
            );
          }

          if (typeof strictNamespace !== "boolean") {
            throw new Error(".strictNamespace must be a boolean, or undefined");
          }

          if (typeof mjsStrictNamespace !== "boolean") {
            throw new Error(
              ".mjsStrictNamespace must be a boolean, or undefined"
            );
          }

          var getAssertion = function getAssertion(localName) {
            return _core().template.expression.ast(_templateObject, localName);
          };

          var moduleExportsVisitor = {
            ReferencedIdentifier: function ReferencedIdentifier(path) {
              var localName = path.node.name;
              if (localName !== "module" && localName !== "exports") return;
              var localBinding = path.scope.getBinding(localName);
              var rootBinding = this.scope.getBinding(localName);

              if (
                rootBinding !== localBinding ||
                (path.parentPath.isObjectProperty({
                  value: path.node
                }) &&
                  path.parentPath.parentPath.isObjectPattern()) ||
                path.parentPath.isAssignmentExpression({
                  left: path.node
                }) ||
                path.isAssignmentExpression({
                  left: path.node
                })
              ) {
                return;
              }

              path.replaceWith(getAssertion(localName));
            },
            AssignmentExpression: function AssignmentExpression(path) {
              var _this = this;

              var left = path.get("left");

              if (left.isIdentifier()) {
                var localName = path.node.name;
                if (localName !== "module" && localName !== "exports") return;
                var localBinding = path.scope.getBinding(localName);
                var rootBinding = this.scope.getBinding(localName);
                if (rootBinding !== localBinding) return;
                var right = path.get("right");
                right.replaceWith(
                  _core().types.sequenceExpression([
                    right.node,
                    getAssertion(localName)
                  ])
                );
              } else if (left.isPattern()) {
                var ids = left.getOuterBindingIdentifiers();
                var _localName = Object.keys(ids).filter(function(localName) {
                  if (localName !== "module" && localName !== "exports")
                    return false;
                  return (
                    _this.scope.getBinding(localName) ===
                    path.scope.getBinding(localName)
                  );
                })[0];

                if (_localName) {
                  var _right = path.get("right");

                  _right.replaceWith(
                    _core().types.sequenceExpression([
                      _right.node,
                      getAssertion(_localName)
                    ])
                  );
                }
              }
            }
          };
          return {
            visitor: {
              Program: {
                exit: function exit(path, state) {
                  if (!(0, _helperModuleTransforms().isModule)(path)) return;
                  path.scope.rename("exports");
                  path.scope.rename("module");
                  path.scope.rename("require");
                  path.scope.rename("__filename");
                  path.scope.rename("__dirname");

                  if (!allowCommonJSExports) {
                    (0, _helperSimpleAccess().default)(
                      path,
                      new Set(["module", "exports"])
                    );
                    path.traverse(moduleExportsVisitor, {
                      scope: path.scope
                    });
                  }

                  var moduleName = this.getModuleName();
                  if (moduleName)
                    moduleName = _core().types.stringLiteral(moduleName);

                  var _rewriteModuleStateme = (0,
                    _helperModuleTransforms()
                      .rewriteModuleStatementsAndPrepareHeader)(path, {
                      exportName: "exports",
                      loose: loose,
                      strict: strict,
                      strictMode: strictMode,
                      allowTopLevelThis: allowTopLevelThis,
                      noInterop: noInterop,
                      lazy: lazy,
                      esNamespaceOnly:
                        typeof state.filename === "string" &&
                        /\.mjs$/.test(state.filename)
                          ? mjsStrictNamespace
                          : strictNamespace
                    }),
                    meta = _rewriteModuleStateme.meta,
                    headers = _rewriteModuleStateme.headers;

                  for (
                    var _iterator = meta.source,
                      _isArray = Array.isArray(_iterator),
                      _i = 0,
                      _iterator = _isArray
                        ? _iterator
                        : _iterator[Symbol.iterator]();
                    ;

                  ) {
                    var _ref;

                    if (_isArray) {
                      if (_i >= _iterator.length) break;
                      _ref = _iterator[_i++];
                    } else {
                      _i = _iterator.next();
                      if (_i.done) break;
                      _ref = _i.value;
                    }

                    var _ref2 = _ref,
                      source = _ref2[0],
                      metadata = _ref2[1];

                    var loadExpr = _core().types.callExpression(
                      _core().types.identifier("require"),
                      [_core().types.stringLiteral(source)]
                    );

                    var header = void 0;

                    if (
                      (0, _helperModuleTransforms().isSideEffectImport)(
                        metadata
                      )
                    ) {
                      if (metadata.lazy) throw new Error("Assertion failure");
                      header = _core().types.expressionStatement(loadExpr);
                    } else {
                      var init =
                        (0, _helperModuleTransforms().wrapInterop)(
                          path,
                          loadExpr,
                          metadata.interop
                        ) || loadExpr;

                      if (metadata.lazy) {
                        header = _core().template.ast(
                          _templateObject2,
                          metadata.name,
                          init,
                          metadata.name
                        );
                      } else {
                        header = _core().template.ast(
                          _templateObject3,
                          metadata.name,
                          init
                        );
                      }
                    }

                    header.loc = metadata.loc;
                    headers.push(header);
                    headers.push.apply(
                      headers,
                      (0,
                      _helperModuleTransforms().buildNamespaceInitStatements)(
                        meta,
                        metadata,
                        loose
                      )
                    );
                  }

                  (0, _helperModuleTransforms().ensureStatementsHoisted)(
                    headers
                  );
                  path.unshiftContainer("body", headers);
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 220 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperHoistVariables() {
          var data = _interopRequireDefault(__webpack_require__(221));

          _helperHoistVariables = function _helperHoistVariables() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var buildTemplate = (0, _core().template)(
          '\n  SYSTEM_REGISTER(MODULE_NAME, SOURCES, function (EXPORT_IDENTIFIER, CONTEXT_IDENTIFIER) {\n    "use strict";\n    BEFORE_BODY;\n    return {\n      setters: SETTERS,\n      execute: function () {\n        BODY;\n      }\n    };\n  });\n'
        );
        var buildExportAll = (0, _core().template)(
          '\n  for (var KEY in TARGET) {\n    if (KEY !== "default" && KEY !== "__esModule") EXPORT_OBJ[KEY] = TARGET[KEY];\n  }\n'
        );
        var TYPE_IMPORT = "Import";

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var _options$systemGlobal = options.systemGlobal,
            systemGlobal =
              _options$systemGlobal === void 0
                ? "System"
                : _options$systemGlobal;
          var IGNORE_REASSIGNMENT_SYMBOL = Symbol();
          var reassignmentVisitor = {
            "AssignmentExpression|UpdateExpression": function AssignmentExpressionUpdateExpression(
              path
            ) {
              if (path.node[IGNORE_REASSIGNMENT_SYMBOL]) return;
              path.node[IGNORE_REASSIGNMENT_SYMBOL] = true;
              var arg = path.get(
                path.isAssignmentExpression() ? "left" : "argument"
              );
              if (!arg.isIdentifier()) return;
              var name = arg.node.name;
              if (this.scope.getBinding(name) !== path.scope.getBinding(name))
                return;
              var exportedNames = this.exports[name];
              if (!exportedNames) return;
              var node = path.node;
              var isPostUpdateExpression = path.isUpdateExpression({
                prefix: false
              });

              if (isPostUpdateExpression) {
                node = _core().types.binaryExpression(
                  node.operator[0],
                  _core().types.unaryExpression(
                    "+",
                    _core().types.cloneNode(node.argument)
                  ),
                  _core().types.numericLiteral(1)
                );
              }

              for (
                var _iterator = exportedNames,
                  _isArray = Array.isArray(_iterator),
                  _i = 0,
                  _iterator = _isArray
                    ? _iterator
                    : _iterator[Symbol.iterator]();
                ;

              ) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var exportedName = _ref;
                node = this.buildCall(exportedName, node).expression;
              }

              if (isPostUpdateExpression) {
                node = _core().types.sequenceExpression([node, path.node]);
              }

              path.replaceWith(node);
            }
          };
          return {
            visitor: {
              CallExpression: function CallExpression(path, state) {
                if (path.node.callee.type === TYPE_IMPORT) {
                  path.replaceWith(
                    _core().types.callExpression(
                      _core().types.memberExpression(
                        _core().types.identifier(state.contextIdent),
                        _core().types.identifier("import")
                      ),
                      path.node.arguments
                    )
                  );
                }
              },
              ReferencedIdentifier: function ReferencedIdentifier(path, state) {
                if (
                  path.node.name == "__moduleName" &&
                  !path.scope.hasBinding("__moduleName")
                ) {
                  path.replaceWith(
                    _core().types.memberExpression(
                      _core().types.identifier(state.contextIdent),
                      _core().types.identifier("id")
                    )
                  );
                }
              },
              Program: {
                enter: function enter(path, state) {
                  state.contextIdent = path.scope.generateUid("context");
                },
                exit: function exit(path, state) {
                  var exportIdent = path.scope.generateUid("export");
                  var contextIdent = state.contextIdent;
                  var exportNames = Object.create(null);
                  var modules = [];
                  var beforeBody = [];
                  var setters = [];
                  var sources = [];
                  var variableIds = [];
                  var removedPaths = [];

                  function addExportName(key, val) {
                    exportNames[key] = exportNames[key] || [];
                    exportNames[key].push(val);
                  }

                  function pushModule(source, key, specifiers) {
                    var module;
                    modules.forEach(function(m) {
                      if (m.key === source) {
                        module = m;
                      }
                    });

                    if (!module) {
                      modules.push(
                        (module = {
                          key: source,
                          imports: [],
                          exports: []
                        })
                      );
                    }

                    module[key] = module[key].concat(specifiers);
                  }

                  function buildExportCall(name, val) {
                    return _core().types.expressionStatement(
                      _core().types.callExpression(
                        _core().types.identifier(exportIdent),
                        [_core().types.stringLiteral(name), val]
                      )
                    );
                  }

                  var body = path.get("body");
                  var canHoist = true;

                  for (
                    var _iterator2 = body,
                      _isArray2 = Array.isArray(_iterator2),
                      _i2 = 0,
                      _iterator2 = _isArray2
                        ? _iterator2
                        : _iterator2[Symbol.iterator]();
                    ;

                  ) {
                    var _ref2;

                    if (_isArray2) {
                      if (_i2 >= _iterator2.length) break;
                      _ref2 = _iterator2[_i2++];
                    } else {
                      _i2 = _iterator2.next();
                      if (_i2.done) break;
                      _ref2 = _i2.value;
                    }

                    var _path = _ref2;
                    if (_path.isExportDeclaration())
                      _path = _path.get("declaration");

                    if (
                      _path.isVariableDeclaration() &&
                      _path.node.kind !== "var"
                    ) {
                      canHoist = false;
                      break;
                    }
                  }

                  for (
                    var _iterator3 = body,
                      _isArray3 = Array.isArray(_iterator3),
                      _i3 = 0,
                      _iterator3 = _isArray3
                        ? _iterator3
                        : _iterator3[Symbol.iterator]();
                    ;

                  ) {
                    var _ref3;

                    if (_isArray3) {
                      if (_i3 >= _iterator3.length) break;
                      _ref3 = _iterator3[_i3++];
                    } else {
                      _i3 = _iterator3.next();
                      if (_i3.done) break;
                      _ref3 = _i3.value;
                    }

                    var _path2 = _ref3;

                    if (canHoist && _path2.isFunctionDeclaration()) {
                      beforeBody.push(_path2.node);
                      removedPaths.push(_path2);
                    } else if (_path2.isImportDeclaration()) {
                      var source = _path2.node.source.value;
                      pushModule(source, "imports", _path2.node.specifiers);

                      for (var name in _path2.getBindingIdentifiers()) {
                        _path2.scope.removeBinding(name);

                        variableIds.push(_core().types.identifier(name));
                      }

                      _path2.remove();
                    } else if (_path2.isExportAllDeclaration()) {
                      pushModule(
                        _path2.node.source.value,
                        "exports",
                        _path2.node
                      );

                      _path2.remove();
                    } else if (_path2.isExportDefaultDeclaration()) {
                      var declar = _path2.get("declaration");

                      if (
                        declar.isClassDeclaration() ||
                        declar.isFunctionDeclaration()
                      ) {
                        var id = declar.node.id;
                        var nodes = [];

                        if (id) {
                          nodes.push(declar.node);
                          nodes.push(
                            buildExportCall(
                              "default",
                              _core().types.cloneNode(id)
                            )
                          );
                          addExportName(id.name, "default");
                        } else {
                          nodes.push(
                            buildExportCall(
                              "default",
                              _core().types.toExpression(declar.node)
                            )
                          );
                        }

                        if (!canHoist || declar.isClassDeclaration()) {
                          _path2.replaceWithMultiple(nodes);
                        } else {
                          beforeBody = beforeBody.concat(nodes);
                          removedPaths.push(_path2);
                        }
                      } else {
                        _path2.replaceWith(
                          buildExportCall("default", declar.node)
                        );
                      }
                    } else if (_path2.isExportNamedDeclaration()) {
                      var _declar = _path2.get("declaration");

                      if (_declar.node) {
                        _path2.replaceWith(_declar);

                        var _nodes = [];
                        var bindingIdentifiers = void 0;

                        if (_path2.isFunction()) {
                          var node = _declar.node;
                          var _name = node.id.name;

                          if (canHoist) {
                            addExportName(_name, _name);
                            beforeBody.push(node);
                            beforeBody.push(
                              buildExportCall(
                                _name,
                                _core().types.cloneNode(node.id)
                              )
                            );
                            removedPaths.push(_path2);
                          } else {
                            var _bindingIdentifiers;

                            bindingIdentifiers = ((_bindingIdentifiers = {}),
                            (_bindingIdentifiers[_name] = node.id),
                            _bindingIdentifiers);
                          }
                        } else {
                          bindingIdentifiers = _declar.getBindingIdentifiers();
                        }

                        for (var _name2 in bindingIdentifiers) {
                          addExportName(_name2, _name2);

                          _nodes.push(
                            buildExportCall(
                              _name2,
                              _core().types.identifier(_name2)
                            )
                          );
                        }

                        _path2.insertAfter(_nodes);
                      } else {
                        var specifiers = _path2.node.specifiers;

                        if (specifiers && specifiers.length) {
                          if (_path2.node.source) {
                            pushModule(
                              _path2.node.source.value,
                              "exports",
                              specifiers
                            );

                            _path2.remove();
                          } else {
                            var _nodes2 = [];

                            for (
                              var _iterator6 = specifiers,
                                _isArray6 = Array.isArray(_iterator6),
                                _i7 = 0,
                                _iterator6 = _isArray6
                                  ? _iterator6
                                  : _iterator6[Symbol.iterator]();
                              ;

                            ) {
                              var _ref6;

                              if (_isArray6) {
                                if (_i7 >= _iterator6.length) break;
                                _ref6 = _iterator6[_i7++];
                              } else {
                                _i7 = _iterator6.next();
                                if (_i7.done) break;
                                _ref6 = _i7.value;
                              }

                              var specifier = _ref6;

                              _nodes2.push(
                                buildExportCall(
                                  specifier.exported.name,
                                  specifier.local
                                )
                              );

                              addExportName(
                                specifier.local.name,
                                specifier.exported.name
                              );
                            }

                            _path2.replaceWithMultiple(_nodes2);
                          }
                        }
                      }
                    }
                  }

                  modules.forEach(function(specifiers) {
                    var setterBody = [];
                    var target = path.scope.generateUid(specifiers.key);

                    for (
                      var _iterator4 = specifiers.imports,
                        _isArray4 = Array.isArray(_iterator4),
                        _i4 = 0,
                        _iterator4 = _isArray4
                          ? _iterator4
                          : _iterator4[Symbol.iterator]();
                      ;

                    ) {
                      var _ref4;

                      if (_isArray4) {
                        if (_i4 >= _iterator4.length) break;
                        _ref4 = _iterator4[_i4++];
                      } else {
                        _i4 = _iterator4.next();
                        if (_i4.done) break;
                        _ref4 = _i4.value;
                      }

                      var specifier = _ref4;

                      if (_core().types.isImportNamespaceSpecifier(specifier)) {
                        setterBody.push(
                          _core().types.expressionStatement(
                            _core().types.assignmentExpression(
                              "=",
                              specifier.local,
                              _core().types.identifier(target)
                            )
                          )
                        );
                      } else if (
                        _core().types.isImportDefaultSpecifier(specifier)
                      ) {
                        specifier = _core().types.importSpecifier(
                          specifier.local,
                          _core().types.identifier("default")
                        );
                      }

                      if (_core().types.isImportSpecifier(specifier)) {
                        setterBody.push(
                          _core().types.expressionStatement(
                            _core().types.assignmentExpression(
                              "=",
                              specifier.local,
                              _core().types.memberExpression(
                                _core().types.identifier(target),
                                specifier.imported
                              )
                            )
                          )
                        );
                      }
                    }

                    if (specifiers.exports.length) {
                      var exportObj = path.scope.generateUid("exportObj");
                      setterBody.push(
                        _core().types.variableDeclaration("var", [
                          _core().types.variableDeclarator(
                            _core().types.identifier(exportObj),
                            _core().types.objectExpression([])
                          )
                        ])
                      );

                      for (
                        var _iterator5 = specifiers.exports,
                          _isArray5 = Array.isArray(_iterator5),
                          _i5 = 0,
                          _iterator5 = _isArray5
                            ? _iterator5
                            : _iterator5[Symbol.iterator]();
                        ;

                      ) {
                        var _ref5;

                        if (_isArray5) {
                          if (_i5 >= _iterator5.length) break;
                          _ref5 = _iterator5[_i5++];
                        } else {
                          _i5 = _iterator5.next();
                          if (_i5.done) break;
                          _ref5 = _i5.value;
                        }

                        var node = _ref5;

                        if (_core().types.isExportAllDeclaration(node)) {
                          setterBody.push(
                            buildExportAll({
                              KEY: path.scope.generateUidIdentifier("key"),
                              EXPORT_OBJ: _core().types.identifier(exportObj),
                              TARGET: _core().types.identifier(target)
                            })
                          );
                        } else if (_core().types.isExportSpecifier(node)) {
                          setterBody.push(
                            _core().types.expressionStatement(
                              _core().types.assignmentExpression(
                                "=",
                                _core().types.memberExpression(
                                  _core().types.identifier(exportObj),
                                  node.exported
                                ),
                                _core().types.memberExpression(
                                  _core().types.identifier(target),
                                  node.local
                                )
                              )
                            )
                          );
                        } else {
                        }
                      }

                      setterBody.push(
                        _core().types.expressionStatement(
                          _core().types.callExpression(
                            _core().types.identifier(exportIdent),
                            [_core().types.identifier(exportObj)]
                          )
                        )
                      );
                    }

                    sources.push(_core().types.stringLiteral(specifiers.key));
                    setters.push(
                      _core().types.functionExpression(
                        null,
                        [_core().types.identifier(target)],
                        _core().types.blockStatement(setterBody)
                      )
                    );
                  });
                  var moduleName = this.getModuleName();
                  if (moduleName)
                    moduleName = _core().types.stringLiteral(moduleName);

                  if (canHoist) {
                    (0, _helperHoistVariables().default)(path, function(id) {
                      return variableIds.push(id);
                    });
                  }

                  if (variableIds.length) {
                    beforeBody.unshift(
                      _core().types.variableDeclaration(
                        "var",
                        variableIds.map(function(id) {
                          return _core().types.variableDeclarator(id);
                        })
                      )
                    );
                  }

                  path.traverse(reassignmentVisitor, {
                    exports: exportNames,
                    buildCall: buildExportCall,
                    scope: path.scope
                  });

                  for (var _i6 = 0; _i6 < removedPaths.length; _i6++) {
                    var _path3 = removedPaths[_i6];

                    _path3.remove();
                  }

                  path.node.body = [
                    buildTemplate({
                      SYSTEM_REGISTER: _core().types.memberExpression(
                        _core().types.identifier(systemGlobal),
                        _core().types.identifier("register")
                      ),
                      BEFORE_BODY: beforeBody,
                      MODULE_NAME: moduleName,
                      SETTERS: _core().types.arrayExpression(setters),
                      SOURCES: _core().types.arrayExpression(sources),
                      BODY: path.node.body,
                      EXPORT_IDENTIFIER: _core().types.identifier(exportIdent),
                      CONTEXT_IDENTIFIER: _core().types.identifier(contextIdent)
                    })
                  ];
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 221 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var visitor = {
          Scope: function Scope(path, state) {
            if (state.kind === "let") path.skip();
          },
          Function: function Function(path) {
            path.skip();
          },
          VariableDeclaration: function VariableDeclaration(path, state) {
            if (state.kind && path.node.kind !== state.kind) return;
            var nodes = [];
            var declarations = path.get("declarations");
            var firstId;

            for (
              var _iterator = declarations,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var declar = _ref;
              firstId = declar.node.id;

              if (declar.node.init) {
                nodes.push(
                  t().expressionStatement(
                    t().assignmentExpression(
                      "=",
                      declar.node.id,
                      declar.node.init
                    )
                  )
                );
              }

              for (var name in declar.getBindingIdentifiers()) {
                state.emit(t().identifier(name), name);
              }
            }

            if (
              path.parentPath.isFor({
                left: path.node
              })
            ) {
              path.replaceWith(firstId);
            } else {
              path.replaceWithMultiple(nodes);
            }
          }
        };

        function _default(path, emit, kind) {
          if (kind === void 0) {
            kind = "var";
          }

          path.traverse(visitor, {
            kind: kind,
            emit: emit
          });
        }

        /***/
      },
      /* 222 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _path() {
          var data = __webpack_require__(7);

          _path = function _path() {
            return data;
          };

          return data;
        }

        function _helperModuleTransforms() {
          var data = __webpack_require__(97);

          _helperModuleTransforms = function _helperModuleTransforms() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var buildPrerequisiteAssignment = (0, _core().template)(
          "\n  GLOBAL_REFERENCE = GLOBAL_REFERENCE || {}\n"
        );
        var buildWrapper = (0, _core().template)(
          '\n  (function (global, factory) {\n    if (typeof define === "function" && define.amd) {\n      define(MODULE_NAME, AMD_ARGUMENTS, factory);\n    } else if (typeof exports !== "undefined") {\n      factory(COMMONJS_ARGUMENTS);\n    } else {\n      var mod = { exports: {} };\n      factory(BROWSER_ARGUMENTS);\n\n      GLOBAL_TO_ASSIGN;\n    }\n  })(this, function(IMPORT_NAMES) {\n  })\n'
        );

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var globals = options.globals,
            exactGlobals = options.exactGlobals,
            loose = options.loose,
            allowTopLevelThis = options.allowTopLevelThis,
            strict = options.strict,
            strictMode = options.strictMode,
            noInterop = options.noInterop;

          function buildBrowserInit(
            browserGlobals,
            exactGlobals,
            filename,
            moduleName
          ) {
            var moduleNameOrBasename = moduleName
              ? moduleName.value
              : (0, _path().basename)(filename, (0, _path().extname)(filename));

            var globalToAssign = _core().types.memberExpression(
              _core().types.identifier("global"),
              _core().types.identifier(
                _core().types.toIdentifier(moduleNameOrBasename)
              )
            );

            var initAssignments = [];

            if (exactGlobals) {
              var globalName = browserGlobals[moduleNameOrBasename];

              if (globalName) {
                initAssignments = [];
                var members = globalName.split(".");
                globalToAssign = members.slice(1).reduce(function(accum, curr) {
                  initAssignments.push(
                    buildPrerequisiteAssignment({
                      GLOBAL_REFERENCE: _core().types.cloneNode(accum)
                    })
                  );
                  return _core().types.memberExpression(
                    accum,
                    _core().types.identifier(curr)
                  );
                }, _core().types.memberExpression(
                  _core().types.identifier("global"),
                  _core().types.identifier(members[0])
                ));
              }
            }

            initAssignments.push(
              _core().types.expressionStatement(
                _core().types.assignmentExpression(
                  "=",
                  globalToAssign,
                  _core().types.memberExpression(
                    _core().types.identifier("mod"),
                    _core().types.identifier("exports")
                  )
                )
              )
            );
            return initAssignments;
          }

          function buildBrowserArg(browserGlobals, exactGlobals, source) {
            var memberExpression;

            if (exactGlobals) {
              var globalRef = browserGlobals[source];

              if (globalRef) {
                memberExpression = globalRef
                  .split(".")
                  .reduce(function(accum, curr) {
                    return _core().types.memberExpression(
                      accum,
                      _core().types.identifier(curr)
                    );
                  }, _core().types.identifier("global"));
              } else {
                memberExpression = _core().types.memberExpression(
                  _core().types.identifier("global"),
                  _core().types.identifier(_core().types.toIdentifier(source))
                );
              }
            } else {
              var requireName = (0, _path().basename)(
                source,
                (0, _path().extname)(source)
              );
              var globalName = browserGlobals[requireName] || requireName;
              memberExpression = _core().types.memberExpression(
                _core().types.identifier("global"),
                _core().types.identifier(_core().types.toIdentifier(globalName))
              );
            }

            return memberExpression;
          }

          return {
            visitor: {
              Program: {
                exit: function exit(path) {
                  if (!(0, _helperModuleTransforms().isModule)(path)) return;
                  var browserGlobals = globals || {};
                  var moduleName = this.getModuleName();
                  if (moduleName)
                    moduleName = _core().types.stringLiteral(moduleName);

                  var _rewriteModuleStateme = (0,
                    _helperModuleTransforms()
                      .rewriteModuleStatementsAndPrepareHeader)(path, {
                      loose: loose,
                      strict: strict,
                      strictMode: strictMode,
                      allowTopLevelThis: allowTopLevelThis,
                      noInterop: noInterop
                    }),
                    meta = _rewriteModuleStateme.meta,
                    headers = _rewriteModuleStateme.headers;

                  var amdArgs = [];
                  var commonjsArgs = [];
                  var browserArgs = [];
                  var importNames = [];

                  if ((0, _helperModuleTransforms().hasExports)(meta)) {
                    amdArgs.push(_core().types.stringLiteral("exports"));
                    commonjsArgs.push(_core().types.identifier("exports"));
                    browserArgs.push(
                      _core().types.memberExpression(
                        _core().types.identifier("mod"),
                        _core().types.identifier("exports")
                      )
                    );
                    importNames.push(_core().types.identifier(meta.exportName));
                  }

                  for (
                    var _iterator = meta.source,
                      _isArray = Array.isArray(_iterator),
                      _i = 0,
                      _iterator = _isArray
                        ? _iterator
                        : _iterator[Symbol.iterator]();
                    ;

                  ) {
                    var _ref;

                    if (_isArray) {
                      if (_i >= _iterator.length) break;
                      _ref = _iterator[_i++];
                    } else {
                      _i = _iterator.next();
                      if (_i.done) break;
                      _ref = _i.value;
                    }

                    var _ref2 = _ref,
                      source = _ref2[0],
                      metadata = _ref2[1];
                    amdArgs.push(_core().types.stringLiteral(source));
                    commonjsArgs.push(
                      _core().types.callExpression(
                        _core().types.identifier("require"),
                        [_core().types.stringLiteral(source)]
                      )
                    );
                    browserArgs.push(
                      buildBrowserArg(browserGlobals, exactGlobals, source)
                    );
                    importNames.push(_core().types.identifier(metadata.name));

                    if (
                      !(0, _helperModuleTransforms().isSideEffectImport)(
                        metadata
                      )
                    ) {
                      var interop = (0, _helperModuleTransforms().wrapInterop)(
                        path,
                        _core().types.identifier(metadata.name),
                        metadata.interop
                      );

                      if (interop) {
                        var header = _core().types.expressionStatement(
                          _core().types.assignmentExpression(
                            "=",
                            _core().types.identifier(metadata.name),
                            interop
                          )
                        );

                        header.loc = meta.loc;
                        headers.push(header);
                      }
                    }

                    headers.push.apply(
                      headers,
                      (0,
                      _helperModuleTransforms().buildNamespaceInitStatements)(
                        meta,
                        metadata,
                        loose
                      )
                    );
                  }

                  (0, _helperModuleTransforms().ensureStatementsHoisted)(
                    headers
                  );
                  path.unshiftContainer("body", headers);
                  var _path$node = path.node,
                    body = _path$node.body,
                    directives = _path$node.directives;
                  path.node.directives = [];
                  path.node.body = [];
                  var umdWrapper = path.pushContainer("body", [
                    buildWrapper({
                      MODULE_NAME: moduleName,
                      AMD_ARGUMENTS: _core().types.arrayExpression(amdArgs),
                      COMMONJS_ARGUMENTS: commonjsArgs,
                      BROWSER_ARGUMENTS: browserArgs,
                      IMPORT_NAMES: importNames,
                      GLOBAL_TO_ASSIGN: buildBrowserInit(
                        browserGlobals,
                        exactGlobals,
                        this.filename || "unknown",
                        moduleName
                      )
                    })
                  ])[0];
                  var umdFactory = umdWrapper
                    .get("expression.arguments")[1]
                    .get("body");
                  umdFactory.pushContainer("directives", directives);
                  umdFactory.pushContainer("body", body);
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 223 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperReplaceSupers() {
          var data = _interopRequireDefault(__webpack_require__(95));

          _helperReplaceSupers = function _helperReplaceSupers() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function replacePropertySuper(path, getObjectRef, file) {
          var replaceSupers = new (_helperReplaceSupers()).default({
            getObjectRef: getObjectRef,
            methodPath: path,
            file: file
          });
          replaceSupers.replace();
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              ObjectExpression: function ObjectExpression(path, state) {
                var objectRef;

                var getObjectRef = function getObjectRef() {
                  return (objectRef =
                    objectRef || path.scope.generateUidIdentifier("obj"));
                };

                path.get("properties").forEach(function(propPath) {
                  if (!propPath.isMethod()) return;
                  replacePropertySuper(propPath, getObjectRef, state);
                });

                if (objectRef) {
                  path.scope.push({
                    id: _core().types.cloneNode(objectRef)
                  });
                  path.replaceWith(
                    _core().types.assignmentExpression(
                      "=",
                      _core().types.cloneNode(objectRef),
                      path.node
                    )
                  );
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 224 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _params = _interopRequireDefault(__webpack_require__(941));

        var _rest = _interopRequireDefault(__webpack_require__(943));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var loose = options.loose;
          return {
            visitor: {
              Function: function Function(path) {
                if (
                  path.isArrowFunctionExpression() &&
                  path.get("params").some(function(param) {
                    return param.isRestElement() || param.isAssignmentPattern();
                  })
                ) {
                  path.arrowFunctionToExpression();
                }

                var convertedRest = (0, _rest.default)(path);
                var convertedParams = (0, _params.default)(path, loose);

                if (convertedRest || convertedParams) {
                  path.scope.crawl();
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 225 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              ObjectMethod: function ObjectMethod(path) {
                var node = path.node;

                if (node.kind === "method") {
                  var func = _core().types.functionExpression(
                    null,
                    node.params,
                    node.body,
                    node.generator,
                    node.async
                  );

                  func.returnType = node.returnType;
                  path.replaceWith(
                    _core().types.objectProperty(node.key, func, node.computed)
                  );
                }
              },
              ObjectProperty: function ObjectProperty(_ref) {
                var node = _ref.node;

                if (node.shorthand) {
                  node.shorthand = false;
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 226 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var loose = options.loose;

          function getSpreadLiteral(spread, scope) {
            if (
              loose &&
              !_core().types.isIdentifier(spread.argument, {
                name: "arguments"
              })
            ) {
              return spread.argument;
            } else {
              return scope.toArray(spread.argument, true);
            }
          }

          function hasSpread(nodes) {
            for (var i = 0; i < nodes.length; i++) {
              if (_core().types.isSpreadElement(nodes[i])) {
                return true;
              }
            }

            return false;
          }

          function push(_props, nodes) {
            if (!_props.length) return _props;
            nodes.push(_core().types.arrayExpression(_props));
            return [];
          }

          function build(props, scope) {
            var nodes = [];
            var _props = [];

            for (
              var _iterator = props,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var prop = _ref;

              if (_core().types.isSpreadElement(prop)) {
                _props = push(_props, nodes);
                nodes.push(getSpreadLiteral(prop, scope));
              } else {
                _props.push(prop);
              }
            }

            push(_props, nodes);
            return nodes;
          }

          return {
            visitor: {
              ArrayExpression: function ArrayExpression(path) {
                var node = path.node,
                  scope = path.scope;
                var elements = node.elements;
                if (!hasSpread(elements)) return;
                var nodes = build(elements, scope);
                var first = nodes.shift();

                if (nodes.length === 0 && first !== elements[0].argument) {
                  path.replaceWith(first);
                  return;
                }

                path.replaceWith(
                  _core().types.callExpression(
                    _core().types.memberExpression(
                      first,
                      _core().types.identifier("concat")
                    ),
                    nodes
                  )
                );
              },
              CallExpression: function CallExpression(path) {
                var node = path.node,
                  scope = path.scope;
                var args = node.arguments;
                if (!hasSpread(args)) return;
                var calleePath = path.get("callee");
                if (calleePath.isSuper()) return;
                var contextLiteral = scope.buildUndefinedNode();
                node.arguments = [];
                var nodes;

                if (
                  args.length === 1 &&
                  args[0].argument.name === "arguments"
                ) {
                  nodes = [args[0].argument];
                } else {
                  nodes = build(args, scope);
                }

                var first = nodes.shift();

                if (nodes.length) {
                  node.arguments.push(
                    _core().types.callExpression(
                      _core().types.memberExpression(
                        first,
                        _core().types.identifier("concat")
                      ),
                      nodes
                    )
                  );
                } else {
                  node.arguments.push(first);
                }

                var callee = node.callee;

                if (calleePath.isMemberExpression()) {
                  var temp = scope.maybeGenerateMemoised(callee.object);

                  if (temp) {
                    callee.object = _core().types.assignmentExpression(
                      "=",
                      temp,
                      callee.object
                    );
                    contextLiteral = temp;
                  } else {
                    contextLiteral = _core().types.cloneNode(callee.object);
                  }

                  _core().types.appendToMemberExpression(
                    callee,
                    _core().types.identifier("apply")
                  );
                } else {
                  node.callee = _core().types.memberExpression(
                    node.callee,
                    _core().types.identifier("apply")
                  );
                }

                if (_core().types.isSuper(contextLiteral)) {
                  contextLiteral = _core().types.thisExpression();
                }

                node.arguments.unshift(_core().types.cloneNode(contextLiteral));
              },
              NewExpression: function NewExpression(path) {
                var node = path.node,
                  scope = path.scope;
                var args = node.arguments;
                if (!hasSpread(args)) return;
                var nodes = build(args, scope);
                var first = nodes.shift();

                if (nodes.length) {
                  args = _core().types.callExpression(
                    _core().types.memberExpression(
                      first,
                      _core().types.identifier("concat")
                    ),
                    nodes
                  );
                } else {
                  args = first;
                }

                path.replaceWith(
                  _core().types.callExpression(
                    path.hub.file.addHelper("construct"),
                    [node.callee, args]
                  )
                );
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 227 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function regex() {
          var data = _interopRequireWildcard(__webpack_require__(57));

          regex = function regex() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              RegExpLiteral: function RegExpLiteral(path) {
                var node = path.node;
                if (!regex().is(node, "y")) return;
                path.replaceWith(
                  _core().types.newExpression(
                    _core().types.identifier("RegExp"),
                    [
                      _core().types.stringLiteral(node.pattern),
                      _core().types.stringLiteral(node.flags)
                    ]
                  )
                );
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 228 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperAnnotateAsPure() {
          var data = _interopRequireDefault(__webpack_require__(56));

          _helperAnnotateAsPure = function _helperAnnotateAsPure() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var loose = options.loose;
          var helperName = "taggedTemplateLiteral";
          if (loose) helperName += "Loose";

          function buildConcatCallExressions(items) {
            var avail = true;
            return items.reduce(function(left, right) {
              var canBeInserted = _core().types.isLiteral(right);

              if (!canBeInserted && avail) {
                canBeInserted = true;
                avail = false;
              }

              if (canBeInserted && _core().types.isCallExpression(left)) {
                left.arguments.push(right);
                return left;
              }

              return _core().types.callExpression(
                _core().types.memberExpression(
                  left,
                  _core().types.identifier("concat")
                ),
                [right]
              );
            });
          }

          return {
            visitor: {
              TaggedTemplateExpression: function TaggedTemplateExpression(
                path
              ) {
                var node = path.node;
                var quasi = node.quasi;
                var strings = [];
                var raws = [];
                var isStringsRawEqual = true;
                var _arr = quasi.quasis;

                for (var _i = 0; _i < _arr.length; _i++) {
                  var elem = _arr[_i];
                  var _elem$value = elem.value,
                    raw = _elem$value.raw,
                    cooked = _elem$value.cooked;
                  var value =
                    cooked == null
                      ? path.scope.buildUndefinedNode()
                      : _core().types.stringLiteral(cooked);
                  strings.push(value);
                  raws.push(_core().types.stringLiteral(raw));

                  if (raw !== cooked) {
                    isStringsRawEqual = false;
                  }
                }

                var scope = path.scope.getProgramParent();
                var templateObject = scope.generateUidIdentifier(
                  "templateObject"
                );
                var helperId = this.addHelper(helperName);
                var callExpressionInput = [
                  _core().types.arrayExpression(strings)
                ];

                if (!isStringsRawEqual) {
                  callExpressionInput.push(_core().types.arrayExpression(raws));
                }

                var init = _core().types.callExpression(
                  helperId,
                  callExpressionInput
                );

                (0, _helperAnnotateAsPure().default)(init);
                init._compact = true;
                scope.push({
                  id: templateObject,
                  init: init,
                  _blockHoist: 1.9
                });
                path.replaceWith(
                  _core().types.callExpression(
                    node.tag,
                    [_core().types.cloneNode(templateObject)].concat(
                      quasi.expressions
                    )
                  )
                );
              },
              TemplateLiteral: function TemplateLiteral(path) {
                var nodes = [];
                var expressions = path.get("expressions");
                var index = 0;
                var _arr2 = path.node.quasis;

                for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                  var elem = _arr2[_i2];

                  if (elem.value.cooked) {
                    nodes.push(_core().types.stringLiteral(elem.value.cooked));
                  }

                  if (index < expressions.length) {
                    var expr = expressions[index++];
                    var node = expr.node;

                    if (
                      !_core().types.isStringLiteral(node, {
                        value: ""
                      })
                    ) {
                      nodes.push(node);
                    }
                  }
                }

                var considerSecondNode =
                  !loose || !_core().types.isStringLiteral(nodes[1]);

                if (
                  !_core().types.isStringLiteral(nodes[0]) &&
                  considerSecondNode
                ) {
                  nodes.unshift(_core().types.stringLiteral(""));
                }

                var root = nodes[0];

                if (loose) {
                  for (var i = 1; i < nodes.length; i++) {
                    root = _core().types.binaryExpression("+", root, nodes[i]);
                  }
                } else if (nodes.length > 1) {
                  root = buildConcatCallExressions(nodes);
                }

                path.replaceWith(root);
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 229 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              Scope: function Scope(_ref) {
                var scope = _ref.scope;

                if (!scope.getBinding("Symbol")) {
                  return;
                }

                scope.rename("Symbol");
              },
              UnaryExpression: function UnaryExpression(path) {
                var node = path.node,
                  parent = path.parent;
                if (node.operator !== "typeof") return;

                if (
                  path.parentPath.isBinaryExpression() &&
                  _core().types.EQUALITY_BINARY_OPERATORS.indexOf(
                    parent.operator
                  ) >= 0
                ) {
                  var opposite = path.getOpposite();

                  if (
                    opposite.isLiteral() &&
                    opposite.node.value !== "symbol" &&
                    opposite.node.value !== "object"
                  ) {
                    return;
                  }
                }

                var helper = this.addHelper("typeof");
                var isUnderHelper = path.findParent(function(path) {
                  return (
                    (path.isVariableDeclarator() && path.node.id === helper) ||
                    (path.isFunctionDeclaration() &&
                      path.node.id &&
                      path.node.id.name === helper.name)
                  );
                });

                if (isUnderHelper) {
                  return;
                }

                var call = _core().types.callExpression(helper, [
                  node.argument
                ]);

                var arg = path.get("argument");

                if (
                  arg.isIdentifier() &&
                  !path.scope.hasBinding(arg.node.name, true)
                ) {
                  var unary = _core().types.unaryExpression(
                    "typeof",
                    _core().types.cloneNode(node.argument)
                  );

                  path.replaceWith(
                    _core().types.conditionalExpression(
                      _core().types.binaryExpression(
                        "===",
                        unary,
                        _core().types.stringLiteral("undefined")
                      ),
                      _core().types.stringLiteral("undefined"),
                      call
                    )
                  );
                } else {
                  path.replaceWith(call);
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 230 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxTypescript() {
          var data = _interopRequireDefault(__webpack_require__(190));

          _pluginSyntaxTypescript = function _pluginSyntaxTypescript() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _enum = _interopRequireDefault(__webpack_require__(944));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function isInType(path) {
          switch (path.parent.type) {
            case "TSTypeReference":
            case "TSQualifiedName":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;

            default:
              return false;
          }
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            inherits: _pluginSyntaxTypescript().default,
            visitor: {
              Pattern: visitPattern,
              Identifier: visitPattern,
              RestElement: visitPattern,
              Program: function Program(path, state) {
                state.programPath = path;
              },
              ImportDeclaration: function ImportDeclaration(path, state) {
                if (path.node.specifiers.length === 0) {
                  return;
                }

                var allElided = true;
                var importsToRemove = [];

                for (
                  var _iterator = path.node.specifiers,
                    _isArray = Array.isArray(_iterator),
                    _i = 0,
                    _iterator = _isArray
                      ? _iterator
                      : _iterator[Symbol.iterator]();
                  ;

                ) {
                  var _ref;

                  if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                  } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                  }

                  var specifier = _ref;
                  var binding = path.scope.getBinding(specifier.local.name);

                  if (binding && isImportTypeOnly(binding, state.programPath)) {
                    importsToRemove.push(binding.path);
                  } else {
                    allElided = false;
                  }
                }

                if (allElided) {
                  path.remove();
                } else {
                  for (var _i2 = 0; _i2 < importsToRemove.length; _i2++) {
                    var importPath = importsToRemove[_i2];
                    importPath.remove();
                  }
                }
              },
              TSDeclareFunction: function TSDeclareFunction(path) {
                path.remove();
              },
              TSDeclareMethod: function TSDeclareMethod(path) {
                path.remove();
              },
              VariableDeclaration: function VariableDeclaration(path) {
                if (path.node.declare) path.remove();
              },
              VariableDeclarator: function VariableDeclarator(_ref2) {
                var node = _ref2.node;
                if (node.definite) node.definite = null;
              },
              ClassMethod: function ClassMethod(path) {
                var node = path.node;
                if (node.accessibility) node.accessibility = null;
                if (node.abstract) node.abstract = null;
                if (node.optional) node.optional = null;

                if (node.kind !== "constructor") {
                  return;
                }

                var parameterProperties = [];

                for (
                  var _iterator2 = node.params,
                    _isArray2 = Array.isArray(_iterator2),
                    _i3 = 0,
                    _iterator2 = _isArray2
                      ? _iterator2
                      : _iterator2[Symbol.iterator]();
                  ;

                ) {
                  var _ref3;

                  if (_isArray2) {
                    if (_i3 >= _iterator2.length) break;
                    _ref3 = _iterator2[_i3++];
                  } else {
                    _i3 = _iterator2.next();
                    if (_i3.done) break;
                    _ref3 = _i3.value;
                  }

                  var param = _ref3;

                  if (param.type === "TSParameterProperty") {
                    parameterProperties.push(param.parameter);
                  }
                }

                if (!parameterProperties.length) {
                  return;
                }

                var assigns = parameterProperties.map(function(p) {
                  var name;

                  if (_core().types.isIdentifier(p)) {
                    name = p.name;
                  } else if (
                    _core().types.isAssignmentPattern(p) &&
                    _core().types.isIdentifier(p.left)
                  ) {
                    name = p.left.name;
                  } else {
                    throw path.buildCodeFrameError(
                      "Parameter properties can not be destructuring patterns."
                    );
                  }

                  var assign = _core().types.assignmentExpression(
                    "=",
                    _core().types.memberExpression(
                      _core().types.thisExpression(),
                      _core().types.identifier(name)
                    ),
                    _core().types.identifier(name)
                  );

                  return _core().types.expressionStatement(assign);
                });
                var statements = node.body.body;
                var first = statements[0];

                var startsWithSuperCall =
                  first !== undefined &&
                  _core().types.isExpressionStatement(first) &&
                  _core().types.isCallExpression(first.expression) &&
                  _core().types.isSuper(first.expression.callee);

                node.body.body = startsWithSuperCall
                  ? [first].concat(assigns, statements.slice(1))
                  : assigns.concat(statements);
              },
              TSParameterProperty: function TSParameterProperty(path) {
                path.replaceWith(path.node.parameter);
              },
              ClassProperty: function ClassProperty(path) {
                var node = path.node;

                if (!node.value) {
                  path.remove();
                  return;
                }

                if (node.accessibility) node.accessibility = null;
                if (node.abstract) node.abstract = null;
                if (node.readonly) node.readonly = null;
                if (node.optional) node.optional = null;
                if (node.definite) node.definite = null;
                if (node.typeAnnotation) node.typeAnnotation = null;
              },
              TSIndexSignature: function TSIndexSignature(path) {
                path.remove();
              },
              ClassDeclaration: function ClassDeclaration(path) {
                var node = path.node;

                if (node.declare) {
                  path.remove();
                  return;
                }

                if (node.abstract) node.abstract = null;
              },
              Class: function Class(_ref4) {
                var node = _ref4.node;
                if (node.typeParameters) node.typeParameters = null;
                if (node.superTypeParameters) node.superTypeParameters = null;
                if (node.implements) node.implements = null;
              },
              Function: function Function(_ref5) {
                var node = _ref5.node;
                if (node.typeParameters) node.typeParameters = null;
                if (node.returnType) node.returnType = null;
                var p0 = node.params[0];

                if (
                  p0 &&
                  _core().types.isIdentifier(p0) &&
                  p0.name === "this"
                ) {
                  node.params.shift();
                }
              },
              TSModuleDeclaration: function TSModuleDeclaration(path) {
                if (
                  !path.node.declare &&
                  path.node.id.type !== "StringLiteral"
                ) {
                  throw path.buildCodeFrameError(
                    "Namespaces are not supported."
                  );
                }

                path.remove();
              },
              TSInterfaceDeclaration: function TSInterfaceDeclaration(path) {
                path.remove();
              },
              TSTypeAliasDeclaration: function TSTypeAliasDeclaration(path) {
                path.remove();
              },
              TSEnumDeclaration: function TSEnumDeclaration(path) {
                (0, _enum.default)(path, _core().types);
              },
              TSImportEqualsDeclaration: function TSImportEqualsDeclaration(
                path
              ) {
                throw path.buildCodeFrameError(
                  "`import =` is not supported by @babel/plugin-transform-typescript\n" +
                    "Please consider using " +
                    "`import <moduleName> from '<moduleName>';` alongside " +
                    "Typescript's --allowSyntheticDefaultImports option."
                );
              },
              TSExportAssignment: function TSExportAssignment(path) {
                throw path.buildCodeFrameError(
                  "`export =` is not supported by @babel/plugin-transform-typescript\n" +
                    "Please consider using `export <value>;`."
                );
              },
              TSTypeAssertion: function TSTypeAssertion(path) {
                path.replaceWith(path.node.expression);
              },
              TSAsExpression: function TSAsExpression(path) {
                path.replaceWith(path.node.expression);
              },
              TSNonNullExpression: function TSNonNullExpression(path) {
                path.replaceWith(path.node.expression);
              },
              CallExpression: function CallExpression(path) {
                path.node.typeParameters = null;
              },
              NewExpression: function NewExpression(path) {
                path.node.typeParameters = null;
              }
            }
          };

          function visitPattern(_ref6) {
            var node = _ref6.node;
            if (node.typeAnnotation) node.typeAnnotation = null;
            if (_core().types.isIdentifier(node) && node.optional)
              node.optional = null;
          }

          function isImportTypeOnly(binding, programPath) {
            for (
              var _iterator3 = binding.referencePaths,
                _isArray3 = Array.isArray(_iterator3),
                _i4 = 0,
                _iterator3 = _isArray3
                  ? _iterator3
                  : _iterator3[Symbol.iterator]();
              ;

            ) {
              var _ref7;

              if (_isArray3) {
                if (_i4 >= _iterator3.length) break;
                _ref7 = _iterator3[_i4++];
              } else {
                _i4 = _iterator3.next();
                if (_i4.done) break;
                _ref7 = _i4.value;
              }

              var path = _ref7;

              if (!isInType(path)) {
                return false;
              }
            }

            if (binding.identifier.name != "React") {
              return true;
            }

            var sourceFileHasJsx = false;
            programPath.traverse({
              JSXElement: function JSXElement() {
                sourceFileHasJsx = true;
              }
            });
            return !sourceFileHasJsx;
          }
        });

        exports.default = _default;

        /***/
      },
      /* 231 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _regexpuCore() {
          var data = _interopRequireDefault(__webpack_require__(96));

          _regexpuCore = function _regexpuCore() {
            return data;
          };

          return data;
        }

        function regex() {
          var data = _interopRequireWildcard(__webpack_require__(57));

          regex = function regex() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              RegExpLiteral: function RegExpLiteral(_ref) {
                var node = _ref.node;
                if (!regex().is(node, "u")) return;
                node.pattern = (0, _regexpuCore().default)(
                  node.pattern,
                  node.flags
                );
                regex().pullFlag(node, "u");
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 232 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperBuilderBinaryAssignmentOperatorVisitor() {
          var data = _interopRequireDefault(__webpack_require__(948));

          _helperBuilderBinaryAssignmentOperatorVisitor = function _helperBuilderBinaryAssignmentOperatorVisitor() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: (0,
            _helperBuilderBinaryAssignmentOperatorVisitor().default)({
              operator: "**",
              build: function build(left, right) {
                return _core().types.callExpression(
                  _core().types.memberExpression(
                    _core().types.identifier("Math"),
                    _core().types.identifier("pow")
                  ),
                  [left, right]
                );
              }
            })
          };
        });

        exports.default = _default;

        /***/
      },
      /* 233 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxFlow() {
          var data = _interopRequireDefault(__webpack_require__(92));

          _pluginSyntaxFlow = function _pluginSyntaxFlow() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          var FLOW_DIRECTIVE = "@flow";
          var skipStrip = false;
          return {
            inherits: _pluginSyntaxFlow().default,
            visitor: {
              Program: function Program(path, _ref) {
                var comments = _ref.file.ast.comments,
                  opts = _ref.opts;
                skipStrip = false;
                var directiveFound = false;
                var _arr = comments;

                for (var _i = 0; _i < _arr.length; _i++) {
                  var comment = _arr[_i];

                  if (comment.value.indexOf(FLOW_DIRECTIVE) >= 0) {
                    directiveFound = true;
                    comment.value = comment.value.replace(FLOW_DIRECTIVE, "");
                    if (!comment.value.replace(/\*/g, "").trim())
                      comment.ignore = true;
                  }
                }

                if (!directiveFound && opts.requireDirective) {
                  skipStrip = true;
                }
              },
              ImportDeclaration: function ImportDeclaration(path) {
                if (skipStrip) return;
                if (!path.node.specifiers.length) return;
                var typeCount = 0;
                path.node.specifiers.forEach(function(_ref2) {
                  var importKind = _ref2.importKind;

                  if (importKind === "type" || importKind === "typeof") {
                    typeCount++;
                  }
                });

                if (typeCount === path.node.specifiers.length) {
                  path.remove();
                }
              },
              Flow: function Flow(path) {
                if (skipStrip) {
                  throw path.buildCodeFrameError(
                    "A @flow directive is required when using Flow annotations with " +
                      "the `requireDirective` option."
                  );
                }

                path.remove();
              },
              ClassProperty: function ClassProperty(path) {
                if (skipStrip) return;
                path.node.variance = null;
                path.node.typeAnnotation = null;
                if (!path.node.value) path.remove();
              },
              Class: function Class(path) {
                if (skipStrip) return;
                path.node.implements = null;
                path.get("body.body").forEach(function(child) {
                  if (child.isClassProperty()) {
                    child.node.typeAnnotation = null;
                    if (!child.node.value) child.remove();
                  }
                });
              },
              AssignmentPattern: function AssignmentPattern(_ref3) {
                var node = _ref3.node;
                if (skipStrip) return;
                node.left.optional = false;
              },
              Function: function Function(_ref4) {
                var node = _ref4.node;
                if (skipStrip) return;

                for (var i = 0; i < node.params.length; i++) {
                  var param = node.params[i];
                  param.optional = false;

                  if (param.type === "AssignmentPattern") {
                    param.left.optional = false;
                  }
                }

                node.predicate = null;
              },
              TypeCastExpression: function TypeCastExpression(path) {
                if (skipStrip) return;
                var node = path.node;

                do {
                  node = node.expression;
                } while (_core().types.isTypeCastExpression(node));

                path.replaceWith(node);
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 234 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxFunctionBind() {
          var data = _interopRequireDefault(__webpack_require__(184));

          _pluginSyntaxFunctionBind = function _pluginSyntaxFunctionBind() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);

          function getTempId(scope) {
            var id = scope.path.getData("functionBind");
            if (id) return id;
            id = scope.generateDeclaredUidIdentifier("context");
            return scope.path.setData("functionBind", id);
          }

          function getStaticContext(bind, scope) {
            var object = bind.object || bind.callee.object;
            return scope.isStatic(object) && object;
          }

          function inferBindContext(bind, scope) {
            var staticContext = getStaticContext(bind, scope);
            if (staticContext) return _core().types.cloneNode(staticContext);
            var tempId = getTempId(scope);

            if (bind.object) {
              bind.callee = _core().types.sequenceExpression([
                _core().types.assignmentExpression("=", tempId, bind.object),
                bind.callee
              ]);
            } else {
              bind.callee.object = _core().types.assignmentExpression(
                "=",
                tempId,
                bind.callee.object
              );
            }

            return tempId;
          }

          return {
            inherits: _pluginSyntaxFunctionBind().default,
            visitor: {
              CallExpression: function CallExpression(_ref) {
                var node = _ref.node,
                  scope = _ref.scope;
                var bind = node.callee;
                if (!_core().types.isBindExpression(bind)) return;
                var context = inferBindContext(bind, scope);
                node.callee = _core().types.memberExpression(
                  bind.callee,
                  _core().types.identifier("call")
                );
                node.arguments.unshift(context);
              },
              BindExpression: function BindExpression(path) {
                var node = path.node,
                  scope = path.scope;
                var context = inferBindContext(node, scope);
                path.replaceWith(
                  _core().types.callExpression(
                    _core().types.memberExpression(
                      node.callee,
                      _core().types.identifier("bind")
                    ),
                    [context]
                  )
                );
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 235 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxObjectRestSpread() {
          var data = _interopRequireDefault(__webpack_require__(187));

          _pluginSyntaxObjectRestSpread = function _pluginSyntaxObjectRestSpread() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api, opts) {
          api.assertVersion(7);
          var _opts$useBuiltIns = opts.useBuiltIns,
            useBuiltIns =
              _opts$useBuiltIns === void 0 ? false : _opts$useBuiltIns,
            _opts$loose = opts.loose,
            loose = _opts$loose === void 0 ? false : _opts$loose;

          if (typeof loose !== "boolean") {
            throw new Error(".loose must be a boolean, or undefined");
          }

          function getExtendsHelper(file) {
            return useBuiltIns
              ? _core().types.memberExpression(
                  _core().types.identifier("Object"),
                  _core().types.identifier("assign")
                )
              : file.addHelper("extends");
          }

          function hasRestElement(path) {
            var foundRestElement = false;
            visitRestElements(path, function() {
              foundRestElement = true;
              path.stop();
            });
            return foundRestElement;
          }

          function visitRestElements(path, visitor) {
            path.traverse({
              Expression: function Expression(path) {
                var parentType = path.parent.type;

                if (
                  (parentType == "AssignmentPattern" && path.key === "right") ||
                  (parentType == "ObjectProperty" &&
                    path.parent.computed &&
                    path.key === "key")
                ) {
                  path.skip();
                }
              },
              RestElement: visitor
            });
          }

          function hasSpread(node) {
            for (
              var _iterator = node.properties,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var prop = _ref;

              if (_core().types.isSpreadElement(prop)) {
                return true;
              }
            }

            return false;
          }

          function extractNormalizedKeys(path) {
            var props = path.node.properties;
            var keys = [];
            var allLiteral = true;

            for (
              var _iterator2 = props,
                _isArray2 = Array.isArray(_iterator2),
                _i2 = 0,
                _iterator2 = _isArray2
                  ? _iterator2
                  : _iterator2[Symbol.iterator]();
              ;

            ) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var prop = _ref2;

              if (_core().types.isIdentifier(prop.key) && !prop.computed) {
                keys.push(_core().types.stringLiteral(prop.key.name));
              } else if (_core().types.isLiteral(prop.key)) {
                keys.push(_core().types.stringLiteral(String(prop.key.value)));
              } else {
                keys.push(_core().types.cloneNode(prop.key));
                allLiteral = false;
              }
            }

            return {
              keys: keys,
              allLiteral: allLiteral
            };
          }

          function replaceImpureComputedKeys(path) {
            var impureComputedPropertyDeclarators = [];

            for (
              var _iterator3 = path.get("properties"),
                _isArray3 = Array.isArray(_iterator3),
                _i3 = 0,
                _iterator3 = _isArray3
                  ? _iterator3
                  : _iterator3[Symbol.iterator]();
              ;

            ) {
              var _ref3;

              if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
              }

              var propPath = _ref3;
              var key = propPath.get("key");

              if (propPath.node.computed && !key.isPure()) {
                var name = path.scope.generateUidBasedOnNode(key.node);

                var declarator = _core().types.variableDeclarator(
                  _core().types.identifier(name),
                  key.node
                );

                impureComputedPropertyDeclarators.push(declarator);
                key.replaceWith(_core().types.identifier(name));
              }
            }

            return impureComputedPropertyDeclarators;
          }

          function createObjectSpread(path, file, objRef) {
            var props = path.get("properties");
            var last = props[props.length - 1];

            _core().types.assertRestElement(last.node);

            var restElement = _core().types.cloneNode(last.node);

            last.remove();
            var impureComputedPropertyDeclarators = replaceImpureComputedKeys(
              path
            );

            var _extractNormalizedKey = extractNormalizedKeys(path),
              keys = _extractNormalizedKey.keys,
              allLiteral = _extractNormalizedKey.allLiteral;

            if (keys.length === 0) {
              return [
                impureComputedPropertyDeclarators,
                restElement.argument,
                _core().types.callExpression(getExtendsHelper(file), [
                  _core().types.objectExpression([]),
                  _core().types.cloneNode(objRef)
                ])
              ];
            }

            var keyExpression;

            if (!allLiteral) {
              keyExpression = _core().types.callExpression(
                _core().types.memberExpression(
                  _core().types.arrayExpression(keys),
                  _core().types.identifier("map")
                ),
                [file.addHelper("toPropertyKey")]
              );
            } else {
              keyExpression = _core().types.arrayExpression(keys);
            }

            return [
              impureComputedPropertyDeclarators,
              restElement.argument,
              _core().types.callExpression(
                file.addHelper("objectWithoutProperties"),
                [_core().types.cloneNode(objRef), keyExpression]
              )
            ];
          }

          function replaceRestElement(parentPath, paramPath, i, numParams) {
            if (paramPath.isAssignmentPattern()) {
              replaceRestElement(
                parentPath,
                paramPath.get("left"),
                i,
                numParams
              );
              return;
            }

            if (paramPath.isArrayPattern() && hasRestElement(paramPath)) {
              var elements = paramPath.get("elements");

              for (var _i4 = 0; _i4 < elements.length; _i4++) {
                replaceRestElement(
                  parentPath,
                  elements[_i4],
                  _i4,
                  elements.length
                );
              }
            }

            if (paramPath.isObjectPattern() && hasRestElement(paramPath)) {
              var uid = parentPath.scope.generateUidIdentifier("ref");

              var declar = _core().types.variableDeclaration("let", [
                _core().types.variableDeclarator(paramPath.node, uid)
              ]);

              parentPath.ensureBlock();
              parentPath.get("body").unshiftContainer("body", declar);
              paramPath.replaceWith(_core().types.cloneNode(uid));
            }
          }

          return {
            inherits: _pluginSyntaxObjectRestSpread().default,
            visitor: {
              Function: function Function(path) {
                var params = path.get("params");

                for (var i = params.length - 1; i >= 0; i--) {
                  replaceRestElement(
                    params[i].parentPath,
                    params[i],
                    i,
                    params.length
                  );
                }
              },
              VariableDeclarator: function VariableDeclarator(path, file) {
                if (!path.get("id").isObjectPattern()) {
                  return;
                }

                var insertionPath = path;
                var originalPath = path;
                visitRestElements(path.get("id"), function(path) {
                  if (!path.parentPath.isObjectPattern()) {
                    return;
                  }

                  if (
                    originalPath.node.id.properties.length > 1 &&
                    !_core().types.isIdentifier(originalPath.node.init)
                  ) {
                    var initRef = path.scope.generateUidIdentifierBasedOnNode(
                      originalPath.node.init,
                      "ref"
                    );
                    originalPath.insertBefore(
                      _core().types.variableDeclarator(
                        initRef,
                        originalPath.node.init
                      )
                    );
                    originalPath.replaceWith(
                      _core().types.variableDeclarator(
                        originalPath.node.id,
                        _core().types.cloneNode(initRef)
                      )
                    );
                    return;
                  }

                  var ref = originalPath.node.init;
                  var refPropertyPath = [];
                  var kind;
                  path.findParent(function(path) {
                    if (path.isObjectProperty()) {
                      refPropertyPath.unshift(path.node.key.name);
                    } else if (path.isVariableDeclarator()) {
                      kind = path.parentPath.node.kind;
                      return true;
                    }
                  });

                  if (refPropertyPath.length) {
                    refPropertyPath.forEach(function(prop) {
                      ref = _core().types.memberExpression(
                        ref,
                        _core().types.identifier(prop)
                      );
                    });
                  }

                  var objectPatternPath = path.findParent(function(path) {
                    return path.isObjectPattern();
                  });

                  var _createObjectSpread = createObjectSpread(
                      objectPatternPath,
                      file,
                      ref
                    ),
                    impureComputedPropertyDeclarators = _createObjectSpread[0],
                    argument = _createObjectSpread[1],
                    callExpression = _createObjectSpread[2];

                  _core().types.assertIdentifier(argument);

                  insertionPath.insertBefore(impureComputedPropertyDeclarators);
                  insertionPath.insertAfter(
                    _core().types.variableDeclarator(argument, callExpression)
                  );
                  insertionPath = insertionPath.getSibling(
                    insertionPath.key + 1
                  );
                  path.scope.registerBinding(kind, insertionPath);

                  if (objectPatternPath.node.properties.length === 0) {
                    objectPatternPath
                      .findParent(function(path) {
                        return (
                          path.isObjectProperty() || path.isVariableDeclarator()
                        );
                      })
                      .remove();
                  }
                });
              },
              ExportNamedDeclaration: function ExportNamedDeclaration(path) {
                var declaration = path.get("declaration");
                if (!declaration.isVariableDeclaration()) return;
                var hasRest = declaration
                  .get("declarations")
                  .some(function(path) {
                    return hasRestElement(path.get("id"));
                  });
                if (!hasRest) return;
                var specifiers = [];

                for (var name in path.getOuterBindingIdentifiers(path)) {
                  specifiers.push(
                    _core().types.exportSpecifier(
                      _core().types.identifier(name),
                      _core().types.identifier(name)
                    )
                  );
                }

                path.replaceWith(declaration.node);
                path.insertAfter(
                  _core().types.exportNamedDeclaration(null, specifiers)
                );
              },
              CatchClause: function CatchClause(path) {
                var paramPath = path.get("param");
                replaceRestElement(paramPath.parentPath, paramPath);
              },
              AssignmentExpression: function AssignmentExpression(path, file) {
                var leftPath = path.get("left");

                if (leftPath.isObjectPattern() && hasRestElement(leftPath)) {
                  var nodes = [];
                  var refName = path.scope.generateUidBasedOnNode(
                    path.node.right,
                    "ref"
                  );
                  nodes.push(
                    _core().types.variableDeclaration("var", [
                      _core().types.variableDeclarator(
                        _core().types.identifier(refName),
                        path.node.right
                      )
                    ])
                  );

                  var _createObjectSpread2 = createObjectSpread(
                      leftPath,
                      file,
                      _core().types.identifier(refName)
                    ),
                    impureComputedPropertyDeclarators = _createObjectSpread2[0],
                    argument = _createObjectSpread2[1],
                    callExpression = _createObjectSpread2[2];

                  if (impureComputedPropertyDeclarators.length > 0) {
                    nodes.push(
                      _core().types.variableDeclaration(
                        "var",
                        impureComputedPropertyDeclarators
                      )
                    );
                  }

                  var nodeWithoutSpread = _core().types.cloneNode(path.node);

                  nodeWithoutSpread.right = _core().types.identifier(refName);
                  nodes.push(
                    _core().types.expressionStatement(nodeWithoutSpread)
                  );
                  nodes.push(
                    _core().types.toStatement(
                      _core().types.assignmentExpression(
                        "=",
                        argument,
                        callExpression
                      )
                    )
                  );
                  nodes.push(
                    _core().types.expressionStatement(
                      _core().types.identifier(refName)
                    )
                  );
                  path.replaceWithMultiple(nodes);
                }
              },
              ForXStatement: function ForXStatement(path) {
                var node = path.node,
                  scope = path.scope;
                var leftPath = path.get("left");
                var left = node.left;

                if (
                  _core().types.isObjectPattern(left) &&
                  hasRestElement(leftPath)
                ) {
                  var temp = scope.generateUidIdentifier("ref");
                  node.left = _core().types.variableDeclaration("var", [
                    _core().types.variableDeclarator(temp)
                  ]);
                  path.ensureBlock();
                  node.body.body.unshift(
                    _core().types.variableDeclaration("var", [
                      _core().types.variableDeclarator(
                        left,
                        _core().types.cloneNode(temp)
                      )
                    ])
                  );
                  return;
                }

                if (!_core().types.isVariableDeclaration(left)) return;
                var pattern = left.declarations[0].id;
                if (!_core().types.isObjectPattern(pattern)) return;
                var key = scope.generateUidIdentifier("ref");
                node.left = _core().types.variableDeclaration(left.kind, [
                  _core().types.variableDeclarator(key, null)
                ]);
                path.ensureBlock();
                node.body.body.unshift(
                  _core().types.variableDeclaration(node.left.kind, [
                    _core().types.variableDeclarator(
                      pattern,
                      _core().types.cloneNode(key)
                    )
                  ])
                );
              },
              ObjectExpression: function ObjectExpression(path, file) {
                if (!hasSpread(path.node)) return;
                var args = [];
                var props = [];

                function push() {
                  if (!props.length) return;
                  args.push(_core().types.objectExpression(props));
                  props = [];
                }

                if (_core().types.isSpreadElement(path.node.properties[0])) {
                  args.push(_core().types.objectExpression([]));
                }

                var _arr = path.node.properties;

                for (var _i5 = 0; _i5 < _arr.length; _i5++) {
                  var prop = _arr[_i5];

                  if (_core().types.isSpreadElement(prop)) {
                    push();
                    args.push(prop.argument);
                  } else {
                    props.push(prop);
                  }
                }

                push();
                var helper;

                if (loose) {
                  helper = getExtendsHelper(file);
                } else {
                  helper = file.addHelper("objectSpread");
                }

                path.replaceWith(_core().types.callExpression(helper, args));
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 236 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxOptionalCatchBinding() {
          var data = _interopRequireDefault(__webpack_require__(188));

          _pluginSyntaxOptionalCatchBinding = function _pluginSyntaxOptionalCatchBinding() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            inherits: _pluginSyntaxOptionalCatchBinding().default,
            visitor: {
              CatchClause: function CatchClause(path) {
                if (!path.node.param) {
                  var uid = path.scope.generateUidIdentifier("unused");
                  var paramPath = path.get("param");
                  paramPath.replaceWith(uid);
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 237 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _path() {
          var data = _interopRequireDefault(__webpack_require__(7));

          _path = function _path() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);

          function addDisplayName(id, call) {
            var props = call.arguments[0].properties;
            var safe = true;

            for (var i = 0; i < props.length; i++) {
              var prop = props[i];

              var key = _core().types.toComputedKey(prop);

              if (
                _core().types.isLiteral(key, {
                  value: "displayName"
                })
              ) {
                safe = false;
                break;
              }
            }

            if (safe) {
              props.unshift(
                _core().types.objectProperty(
                  _core().types.identifier("displayName"),
                  _core().types.stringLiteral(id)
                )
              );
            }
          }

          var isCreateClassCallExpression = _core().types.buildMatchMemberExpression(
            "React.createClass"
          );

          var isCreateClassAddon = function isCreateClassAddon(callee) {
            return callee.name === "createReactClass";
          };

          function isCreateClass(node) {
            if (!node || !_core().types.isCallExpression(node)) return false;

            if (
              !isCreateClassCallExpression(node.callee) &&
              !isCreateClassAddon(node.callee)
            ) {
              return false;
            }

            var args = node.arguments;
            if (args.length !== 1) return false;
            var first = args[0];
            if (!_core().types.isObjectExpression(first)) return false;
            return true;
          }

          return {
            visitor: {
              ExportDefaultDeclaration: function ExportDefaultDeclaration(
                _ref,
                state
              ) {
                var node = _ref.node;

                if (isCreateClass(node.declaration)) {
                  var filename = state.filename || "unknown";

                  var displayName = _path().default.basename(
                    filename,
                    _path().default.extname(filename)
                  );

                  if (displayName === "index") {
                    displayName = _path().default.basename(
                      _path().default.dirname(filename)
                    );
                  }

                  addDisplayName(displayName, node.declaration);
                }
              },
              CallExpression: function CallExpression(path) {
                var node = path.node;
                if (!isCreateClass(node)) return;
                var id;
                path.find(function(path) {
                  if (path.isAssignmentExpression()) {
                    id = path.node.left;
                  } else if (path.isObjectProperty()) {
                    id = path.node.key;
                  } else if (path.isVariableDeclarator()) {
                    id = path.node.id;
                  } else if (path.isStatement()) {
                    return true;
                  }

                  if (id) return true;
                });
                if (!id) return;

                if (_core().types.isMemberExpression(id)) {
                  id = id.property;
                }

                if (_core().types.isIdentifier(id)) {
                  addDisplayName(id.name, node);
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 238 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxJsx() {
          var data = _interopRequireDefault(__webpack_require__(93));

          _pluginSyntaxJsx = function _pluginSyntaxJsx() {
            return data;
          };

          return data;
        }

        function _helperBuilderReactJsx() {
          var data = _interopRequireDefault(__webpack_require__(98));

          _helperBuilderReactJsx = function _helperBuilderReactJsx() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var THROW_IF_NAMESPACE =
            options.throwIfNamespace === undefined
              ? true
              : !!options.throwIfNamespace;
          var PRAGMA_DEFAULT = options.pragma || "React.createElement";
          var PRAGMA_FRAG_DEFAULT = options.pragmaFrag || "React.Fragment";
          var JSX_ANNOTATION_REGEX = /\*?\s*@jsx\s+([^\s]+)/;
          var JSX_FRAG_ANNOTATION_REGEX = /\*?\s*@jsxFrag\s+([^\s]+)/;

          var createIdentifierParser = function createIdentifierParser(id) {
            return function() {
              return id
                .split(".")
                .map(function(name) {
                  return _core().types.identifier(name);
                })
                .reduce(function(object, property) {
                  return _core().types.memberExpression(object, property);
                });
            };
          };

          var visitor = (0, _helperBuilderReactJsx().default)({
            pre: function pre(state) {
              var tagName = state.tagName;
              var args = state.args;

              if (_core().types.react.isCompatTag(tagName)) {
                args.push(_core().types.stringLiteral(tagName));
              } else {
                args.push(state.tagExpr);
              }
            },
            post: function post(state, pass) {
              state.callee = pass.get("jsxIdentifier")();
            },
            throwIfNamespace: THROW_IF_NAMESPACE
          });
          visitor.Program = {
            enter: function enter(path, state) {
              var file = state.file;
              var pragma = PRAGMA_DEFAULT;
              var pragmaFrag = PRAGMA_FRAG_DEFAULT;
              var pragmaSet = !!options.pragma;
              var pragmaFragSet = !!options.pragmaFrag;
              var _arr = file.ast.comments;

              for (var _i = 0; _i < _arr.length; _i++) {
                var comment = _arr[_i];
                var jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);

                if (jsxMatches) {
                  pragma = jsxMatches[1];
                  pragmaSet = true;
                }

                var jsxFragMatches = JSX_FRAG_ANNOTATION_REGEX.exec(
                  comment.value
                );

                if (jsxFragMatches) {
                  pragmaFrag = jsxFragMatches[1];
                  pragmaFragSet = true;
                }
              }

              state.set("jsxIdentifier", createIdentifierParser(pragma));
              state.set(
                "jsxFragIdentifier",
                createIdentifierParser(pragmaFrag)
              );
              state.set("usedFragment", false);
              state.set("pragmaSet", pragmaSet);
              state.set("pragmaFragSet", pragmaFragSet);
            },
            exit: function exit(path, state) {
              if (
                state.get("pragmaSet") &&
                state.get("usedFragment") &&
                !state.get("pragmaFragSet")
              ) {
                throw new Error(
                  "transform-react-jsx: pragma has been set but " +
                    "pragmafrag has not been set"
                );
              }
            }
          };

          visitor.JSXAttribute = function(path) {
            if (_core().types.isJSXElement(path.node.value)) {
              path.node.value = _core().types.jsxExpressionContainer(
                path.node.value
              );
            }
          };

          return {
            inherits: _pluginSyntaxJsx().default,
            visitor: visitor
          };
        });

        exports.default = _default;

        /***/
      },
      /* 239 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var TRACE_ID = "__self";

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          var visitor = {
            JSXOpeningElement: function JSXOpeningElement(_ref) {
              var node = _ref.node;

              var id = _core().types.jsxIdentifier(TRACE_ID);

              var trace = _core().types.thisExpression();

              node.attributes.push(
                _core().types.jsxAttribute(
                  id,
                  _core().types.jsxExpressionContainer(trace)
                )
              );
            }
          };
          return {
            visitor: visitor
          };
        });

        exports.default = _default;

        /***/
      },
      /* 240 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var TRACE_ID = "__source";
        var FILE_NAME_VAR = "_jsxFileName";

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);

          function makeTrace(fileNameIdentifier, lineNumber) {
            var fileLineLiteral =
              lineNumber != null
                ? _core().types.numericLiteral(lineNumber)
                : _core().types.nullLiteral();

            var fileNameProperty = _core().types.objectProperty(
              _core().types.identifier("fileName"),
              fileNameIdentifier
            );

            var lineNumberProperty = _core().types.objectProperty(
              _core().types.identifier("lineNumber"),
              fileLineLiteral
            );

            return _core().types.objectExpression([
              fileNameProperty,
              lineNumberProperty
            ]);
          }

          var visitor = {
            JSXOpeningElement: function JSXOpeningElement(path, state) {
              var id = _core().types.jsxIdentifier(TRACE_ID);

              var location = path.container.openingElement.loc;

              if (!location) {
                return;
              }

              var attributes = path.container.openingElement.attributes;

              for (var i = 0; i < attributes.length; i++) {
                var name = attributes[i].name;

                if (name && name.name === TRACE_ID) {
                  return;
                }
              }

              if (!state.fileNameIdentifier) {
                var fileName = state.filename || "";
                var fileNameIdentifier = path.scope.generateUidIdentifier(
                  FILE_NAME_VAR
                );
                path.hub.file.scope.push({
                  id: fileNameIdentifier,
                  init: _core().types.stringLiteral(fileName)
                });
                state.fileNameIdentifier = fileNameIdentifier;
              }

              var trace = makeTrace(
                state.fileNameIdentifier,
                location.start.line
              );
              attributes.push(
                _core().types.jsxAttribute(
                  id,
                  _core().types.jsxExpressionContainer(trace)
                )
              );
            }
          };
          return {
            visitor: visitor
          };
        });

        exports.default = _default;

        /***/
      },
      /* 241 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "default", {
          enumerable: true,
          get: function get() {
            return _regeneratorTransform().default;
          }
        });

        function _regeneratorTransform() {
          var data = _interopRequireDefault(__webpack_require__(959));

          _regeneratorTransform = function _regeneratorTransform() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        /***/
      },
      /* 242 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var _assert = __webpack_require__(13);

        var _assert2 = _interopRequireDefault(_assert);

        var _leap = __webpack_require__(962);

        var leap = _interopRequireWildcard(_leap);

        var _meta = __webpack_require__(963);

        var meta = _interopRequireWildcard(_meta);

        var _util = __webpack_require__(29);

        var util = _interopRequireWildcard(_util);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key))
                  newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var hasOwn = Object.prototype.hasOwnProperty;

        function Emitter(contextId) {
          _assert2.default.ok(this instanceof Emitter);

          util.getTypes().assertIdentifier(contextId);
          this.nextTempId = 0;
          this.contextId = contextId;
          this.listing = [];
          this.marked = [true];
          this.finalLoc = loc();
          this.tryEntries = [];
          this.leapManager = new leap.LeapManager(this);
        }

        var Ep = Emitter.prototype;
        exports.Emitter = Emitter;

        function loc() {
          return util.getTypes().numericLiteral(-1);
        }

        Ep.mark = function(loc) {
          util.getTypes().assertLiteral(loc);
          var index = this.listing.length;

          if (loc.value === -1) {
            loc.value = index;
          } else {
            _assert2.default.strictEqual(loc.value, index);
          }

          this.marked[index] = true;
          return loc;
        };

        Ep.emit = function(node) {
          var t = util.getTypes();

          if (t.isExpression(node)) {
            node = t.expressionStatement(node);
          }

          t.assertStatement(node);
          this.listing.push(node);
        };

        Ep.emitAssign = function(lhs, rhs) {
          this.emit(this.assign(lhs, rhs));
          return lhs;
        };

        Ep.assign = function(lhs, rhs) {
          var t = util.getTypes();
          return t.expressionStatement(t.assignmentExpression("=", lhs, rhs));
        };

        Ep.contextProperty = function(name, computed) {
          var t = util.getTypes();
          return t.memberExpression(
            this.contextId,
            computed ? t.stringLiteral(name) : t.identifier(name),
            !!computed
          );
        };

        Ep.stop = function(rval) {
          if (rval) {
            this.setReturnValue(rval);
          }

          this.jump(this.finalLoc);
        };

        Ep.setReturnValue = function(valuePath) {
          util.getTypes().assertExpression(valuePath.value);
          this.emitAssign(
            this.contextProperty("rval"),
            this.explodeExpression(valuePath)
          );
        };

        Ep.clearPendingException = function(tryLoc, assignee) {
          var t = util.getTypes();
          t.assertLiteral(tryLoc);
          var catchCall = t.callExpression(
            this.contextProperty("catch", true),
            [tryLoc]
          );

          if (assignee) {
            this.emitAssign(assignee, catchCall);
          } else {
            this.emit(catchCall);
          }
        };

        Ep.jump = function(toLoc) {
          this.emitAssign(this.contextProperty("next"), toLoc);
          this.emit(util.getTypes().breakStatement());
        };

        Ep.jumpIf = function(test, toLoc) {
          var t = util.getTypes();
          t.assertExpression(test);
          t.assertLiteral(toLoc);
          this.emit(
            t.ifStatement(
              test,
              t.blockStatement([
                this.assign(this.contextProperty("next"), toLoc),
                t.breakStatement()
              ])
            )
          );
        };

        Ep.jumpIfNot = function(test, toLoc) {
          var t = util.getTypes();
          t.assertExpression(test);
          t.assertLiteral(toLoc);
          var negatedTest = void 0;

          if (t.isUnaryExpression(test) && test.operator === "!") {
            negatedTest = test.argument;
          } else {
            negatedTest = t.unaryExpression("!", test);
          }

          this.emit(
            t.ifStatement(
              negatedTest,
              t.blockStatement([
                this.assign(this.contextProperty("next"), toLoc),
                t.breakStatement()
              ])
            )
          );
        };

        Ep.makeTempVar = function() {
          return this.contextProperty("t" + this.nextTempId++);
        };

        Ep.getContextFunction = function(id) {
          var t = util.getTypes();
          return t.functionExpression(
            id || null,
            [this.contextId],
            t.blockStatement([this.getDispatchLoop()]),
            false,
            false
          );
        };

        Ep.getDispatchLoop = function() {
          var self = this;
          var t = util.getTypes();
          var cases = [];
          var current = void 0;
          var alreadyEnded = false;
          self.listing.forEach(function(stmt, i) {
            if (self.marked.hasOwnProperty(i)) {
              cases.push(t.switchCase(t.numericLiteral(i), (current = [])));
              alreadyEnded = false;
            }

            if (!alreadyEnded) {
              current.push(stmt);
              if (t.isCompletionStatement(stmt)) alreadyEnded = true;
            }
          });
          this.finalLoc.value = this.listing.length;
          cases.push(
            t.switchCase(this.finalLoc, []),
            t.switchCase(t.stringLiteral("end"), [
              t.returnStatement(
                t.callExpression(this.contextProperty("stop"), [])
              )
            ])
          );
          return t.whileStatement(
            t.numericLiteral(1),
            t.switchStatement(
              t.assignmentExpression(
                "=",
                this.contextProperty("prev"),
                this.contextProperty("next")
              ),
              cases
            )
          );
        };

        Ep.getTryLocsList = function() {
          if (this.tryEntries.length === 0) {
            return null;
          }

          var t = util.getTypes();
          var lastLocValue = 0;
          return t.arrayExpression(
            this.tryEntries.map(function(tryEntry) {
              var thisLocValue = tryEntry.firstLoc.value;

              _assert2.default.ok(
                thisLocValue >= lastLocValue,
                "try entries out of order"
              );

              lastLocValue = thisLocValue;
              var ce = tryEntry.catchEntry;
              var fe = tryEntry.finallyEntry;
              var locs = [tryEntry.firstLoc, ce ? ce.firstLoc : null];

              if (fe) {
                locs[2] = fe.firstLoc;
                locs[3] = fe.afterLoc;
              }

              return t.arrayExpression(locs);
            })
          );
        };

        Ep.explode = function(path, ignoreResult) {
          var t = util.getTypes();
          var node = path.node;
          var self = this;
          t.assertNode(node);
          if (t.isDeclaration(node)) throw getDeclError(node);
          if (t.isStatement(node)) return self.explodeStatement(path);
          if (t.isExpression(node))
            return self.explodeExpression(path, ignoreResult);

          switch (node.type) {
            case "Program":
              return path.get("body").map(self.explodeStatement, self);

            case "VariableDeclarator":
              throw getDeclError(node);

            case "Property":
            case "SwitchCase":
            case "CatchClause":
              throw new Error(
                node.type + " nodes should be handled by their parents"
              );

            default:
              throw new Error(
                "unknown Node of type " + JSON.stringify(node.type)
              );
          }
        };

        function getDeclError(node) {
          return new Error(
            "all declarations should have been transformed into " +
              "assignments before the Exploder began its work: " +
              JSON.stringify(node)
          );
        }

        Ep.explodeStatement = function(path, labelId) {
          var t = util.getTypes();
          var stmt = path.node;
          var self = this;
          var before = void 0,
            after = void 0,
            head = void 0;
          t.assertStatement(stmt);

          if (labelId) {
            t.assertIdentifier(labelId);
          } else {
            labelId = null;
          }

          if (t.isBlockStatement(stmt)) {
            path.get("body").forEach(function(path) {
              self.explodeStatement(path);
            });
            return;
          }

          if (!meta.containsLeap(stmt)) {
            self.emit(stmt);
            return;
          }

          switch (stmt.type) {
            case "ExpressionStatement":
              self.explodeExpression(path.get("expression"), true);
              break;

            case "LabeledStatement":
              after = loc();
              self.leapManager.withEntry(
                new leap.LabeledEntry(after, stmt.label),
                function() {
                  self.explodeStatement(path.get("body"), stmt.label);
                }
              );
              self.mark(after);
              break;

            case "WhileStatement":
              before = loc();
              after = loc();
              self.mark(before);
              self.jumpIfNot(self.explodeExpression(path.get("test")), after);
              self.leapManager.withEntry(
                new leap.LoopEntry(after, before, labelId),
                function() {
                  self.explodeStatement(path.get("body"));
                }
              );
              self.jump(before);
              self.mark(after);
              break;

            case "DoWhileStatement":
              var first = loc();
              var test = loc();
              after = loc();
              self.mark(first);
              self.leapManager.withEntry(
                new leap.LoopEntry(after, test, labelId),
                function() {
                  self.explode(path.get("body"));
                }
              );
              self.mark(test);
              self.jumpIf(self.explodeExpression(path.get("test")), first);
              self.mark(after);
              break;

            case "ForStatement":
              head = loc();
              var update = loc();
              after = loc();

              if (stmt.init) {
                self.explode(path.get("init"), true);
              }

              self.mark(head);

              if (stmt.test) {
                self.jumpIfNot(self.explodeExpression(path.get("test")), after);
              } else {
              }

              self.leapManager.withEntry(
                new leap.LoopEntry(after, update, labelId),
                function() {
                  self.explodeStatement(path.get("body"));
                }
              );
              self.mark(update);

              if (stmt.update) {
                self.explode(path.get("update"), true);
              }

              self.jump(head);
              self.mark(after);
              break;

            case "TypeCastExpression":
              return self.explodeExpression(path.get("expression"));

            case "ForInStatement":
              head = loc();
              after = loc();
              var keyIterNextFn = self.makeTempVar();
              self.emitAssign(
                keyIterNextFn,
                t.callExpression(util.runtimeProperty("keys"), [
                  self.explodeExpression(path.get("right"))
                ])
              );
              self.mark(head);
              var keyInfoTmpVar = self.makeTempVar();
              self.jumpIf(
                t.memberExpression(
                  t.assignmentExpression(
                    "=",
                    keyInfoTmpVar,
                    t.callExpression(keyIterNextFn, [])
                  ),
                  t.identifier("done"),
                  false
                ),
                after
              );
              self.emitAssign(
                stmt.left,
                t.memberExpression(keyInfoTmpVar, t.identifier("value"), false)
              );
              self.leapManager.withEntry(
                new leap.LoopEntry(after, head, labelId),
                function() {
                  self.explodeStatement(path.get("body"));
                }
              );
              self.jump(head);
              self.mark(after);
              break;

            case "BreakStatement":
              self.emitAbruptCompletion({
                type: "break",
                target: self.leapManager.getBreakLoc(stmt.label)
              });
              break;

            case "ContinueStatement":
              self.emitAbruptCompletion({
                type: "continue",
                target: self.leapManager.getContinueLoc(stmt.label)
              });
              break;

            case "SwitchStatement":
              var disc = self.emitAssign(
                self.makeTempVar(),
                self.explodeExpression(path.get("discriminant"))
              );
              after = loc();
              var defaultLoc = loc();
              var condition = defaultLoc;
              var caseLocs = [];
              var cases = stmt.cases || [];

              for (var i = cases.length - 1; i >= 0; --i) {
                var c = cases[i];
                t.assertSwitchCase(c);

                if (c.test) {
                  condition = t.conditionalExpression(
                    t.binaryExpression("===", disc, c.test),
                    (caseLocs[i] = loc()),
                    condition
                  );
                } else {
                  caseLocs[i] = defaultLoc;
                }
              }

              var discriminant = path.get("discriminant");
              util.replaceWithOrRemove(discriminant, condition);
              self.jump(self.explodeExpression(discriminant));
              self.leapManager.withEntry(
                new leap.SwitchEntry(after),
                function() {
                  path.get("cases").forEach(function(casePath) {
                    var i = casePath.key;
                    self.mark(caseLocs[i]);
                    casePath.get("consequent").forEach(function(path) {
                      self.explodeStatement(path);
                    });
                  });
                }
              );
              self.mark(after);

              if (defaultLoc.value === -1) {
                self.mark(defaultLoc);

                _assert2.default.strictEqual(after.value, defaultLoc.value);
              }

              break;

            case "IfStatement":
              var elseLoc = stmt.alternate && loc();
              after = loc();
              self.jumpIfNot(
                self.explodeExpression(path.get("test")),
                elseLoc || after
              );
              self.explodeStatement(path.get("consequent"));

              if (elseLoc) {
                self.jump(after);
                self.mark(elseLoc);
                self.explodeStatement(path.get("alternate"));
              }

              self.mark(after);
              break;

            case "ReturnStatement":
              self.emitAbruptCompletion({
                type: "return",
                value: self.explodeExpression(path.get("argument"))
              });
              break;

            case "WithStatement":
              throw new Error(
                "WithStatement not supported in generator functions."
              );

            case "TryStatement":
              after = loc();
              var handler = stmt.handler;
              var catchLoc = handler && loc();
              var catchEntry =
                catchLoc && new leap.CatchEntry(catchLoc, handler.param);
              var finallyLoc = stmt.finalizer && loc();
              var finallyEntry =
                finallyLoc && new leap.FinallyEntry(finallyLoc, after);
              var tryEntry = new leap.TryEntry(
                self.getUnmarkedCurrentLoc(),
                catchEntry,
                finallyEntry
              );
              self.tryEntries.push(tryEntry);
              self.updateContextPrevLoc(tryEntry.firstLoc);
              self.leapManager.withEntry(tryEntry, function() {
                self.explodeStatement(path.get("block"));

                if (catchLoc) {
                  if (finallyLoc) {
                    self.jump(finallyLoc);
                  } else {
                    self.jump(after);
                  }

                  self.updateContextPrevLoc(self.mark(catchLoc));
                  var bodyPath = path.get("handler.body");
                  var safeParam = self.makeTempVar();
                  self.clearPendingException(tryEntry.firstLoc, safeParam);
                  bodyPath.traverse(catchParamVisitor, {
                    safeParam: safeParam,
                    catchParamName: handler.param.name
                  });
                  self.leapManager.withEntry(catchEntry, function() {
                    self.explodeStatement(bodyPath);
                  });
                }

                if (finallyLoc) {
                  self.updateContextPrevLoc(self.mark(finallyLoc));
                  self.leapManager.withEntry(finallyEntry, function() {
                    self.explodeStatement(path.get("finalizer"));
                  });
                  self.emit(
                    t.returnStatement(
                      t.callExpression(self.contextProperty("finish"), [
                        finallyEntry.firstLoc
                      ])
                    )
                  );
                }
              });
              self.mark(after);
              break;

            case "ThrowStatement":
              self.emit(
                t.throwStatement(self.explodeExpression(path.get("argument")))
              );
              break;

            default:
              throw new Error(
                "unknown Statement of type " + JSON.stringify(stmt.type)
              );
          }
        };

        var catchParamVisitor = {
          Identifier: function Identifier(path, state) {
            if (
              path.node.name === state.catchParamName &&
              util.isReference(path)
            ) {
              util.replaceWithOrRemove(path, state.safeParam);
            }
          },
          Scope: function Scope(path, state) {
            if (path.scope.hasOwnBinding(state.catchParamName)) {
              path.skip();
            }
          }
        };

        Ep.emitAbruptCompletion = function(record) {
          if (!isValidCompletion(record)) {
            _assert2.default.ok(
              false,
              "invalid completion record: " + JSON.stringify(record)
            );
          }

          _assert2.default.notStrictEqual(
            record.type,
            "normal",
            "normal completions are not abrupt"
          );

          var t = util.getTypes();
          var abruptArgs = [t.stringLiteral(record.type)];

          if (record.type === "break" || record.type === "continue") {
            t.assertLiteral(record.target);
            abruptArgs[1] = record.target;
          } else if (record.type === "return" || record.type === "throw") {
            if (record.value) {
              t.assertExpression(record.value);
              abruptArgs[1] = record.value;
            }
          }

          this.emit(
            t.returnStatement(
              t.callExpression(this.contextProperty("abrupt"), abruptArgs)
            )
          );
        };

        function isValidCompletion(record) {
          var type = record.type;

          if (type === "normal") {
            return !hasOwn.call(record, "target");
          }

          if (type === "break" || type === "continue") {
            return (
              !hasOwn.call(record, "value") &&
              util.getTypes().isLiteral(record.target)
            );
          }

          if (type === "return" || type === "throw") {
            return (
              hasOwn.call(record, "value") && !hasOwn.call(record, "target")
            );
          }

          return false;
        }

        Ep.getUnmarkedCurrentLoc = function() {
          return util.getTypes().numericLiteral(this.listing.length);
        };

        Ep.updateContextPrevLoc = function(loc) {
          if (loc) {
            util.getTypes().assertLiteral(loc);

            if (loc.value === -1) {
              loc.value = this.listing.length;
            } else {
              _assert2.default.strictEqual(loc.value, this.listing.length);
            }
          } else {
            loc = this.getUnmarkedCurrentLoc();
          }

          this.emitAssign(this.contextProperty("prev"), loc);
        };

        Ep.explodeExpression = function(path, ignoreResult) {
          var t = util.getTypes();
          var expr = path.node;

          if (expr) {
            t.assertExpression(expr);
          } else {
            return expr;
          }

          var self = this;
          var result = void 0;
          var after = void 0;

          function finish(expr) {
            t.assertExpression(expr);

            if (ignoreResult) {
              self.emit(expr);
            } else {
              return expr;
            }
          }

          if (!meta.containsLeap(expr)) {
            return finish(expr);
          }

          var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);

          function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {
            _assert2.default.ok(
              !ignoreChildResult || !tempVar,
              "Ignoring the result of a child expression but forcing it to " +
                "be assigned to a temporary variable?"
            );

            var result = self.explodeExpression(childPath, ignoreChildResult);

            if (ignoreChildResult) {
            } else if (
              tempVar ||
              (hasLeapingChildren && !t.isLiteral(result))
            ) {
              result = self.emitAssign(tempVar || self.makeTempVar(), result);
            }

            return result;
          }

          switch (expr.type) {
            case "MemberExpression":
              return finish(
                t.memberExpression(
                  self.explodeExpression(path.get("object")),
                  expr.computed
                    ? explodeViaTempVar(null, path.get("property"))
                    : expr.property,
                  expr.computed
                )
              );

            case "CallExpression":
              var calleePath = path.get("callee");
              var argsPath = path.get("arguments");
              var newCallee = void 0;
              var newArgs = [];
              var hasLeapingArgs = false;
              argsPath.forEach(function(argPath) {
                hasLeapingArgs =
                  hasLeapingArgs || meta.containsLeap(argPath.node);
              });

              if (t.isMemberExpression(calleePath.node)) {
                if (hasLeapingArgs) {
                  var newObject = explodeViaTempVar(
                    self.makeTempVar(),
                    calleePath.get("object")
                  );
                  var newProperty = calleePath.node.computed
                    ? explodeViaTempVar(null, calleePath.get("property"))
                    : calleePath.node.property;
                  newArgs.unshift(newObject);
                  newCallee = t.memberExpression(
                    t.memberExpression(
                      newObject,
                      newProperty,
                      calleePath.node.computed
                    ),
                    t.identifier("call"),
                    false
                  );
                } else {
                  newCallee = self.explodeExpression(calleePath);
                }
              } else {
                newCallee = explodeViaTempVar(null, calleePath);

                if (t.isMemberExpression(newCallee)) {
                  newCallee = t.sequenceExpression([
                    t.numericLiteral(0),
                    newCallee
                  ]);
                }
              }

              argsPath.forEach(function(argPath) {
                newArgs.push(explodeViaTempVar(null, argPath));
              });
              return finish(t.callExpression(newCallee, newArgs));

            case "NewExpression":
              return finish(
                t.newExpression(
                  explodeViaTempVar(null, path.get("callee")),
                  path.get("arguments").map(function(argPath) {
                    return explodeViaTempVar(null, argPath);
                  })
                )
              );

            case "ObjectExpression":
              return finish(
                t.objectExpression(
                  path.get("properties").map(function(propPath) {
                    if (propPath.isObjectProperty()) {
                      return t.objectProperty(
                        propPath.node.key,
                        explodeViaTempVar(null, propPath.get("value")),
                        propPath.node.computed
                      );
                    } else {
                      return propPath.node;
                    }
                  })
                )
              );

            case "ArrayExpression":
              return finish(
                t.arrayExpression(
                  path.get("elements").map(function(elemPath) {
                    return explodeViaTempVar(null, elemPath);
                  })
                )
              );

            case "SequenceExpression":
              var lastIndex = expr.expressions.length - 1;
              path.get("expressions").forEach(function(exprPath) {
                if (exprPath.key === lastIndex) {
                  result = self.explodeExpression(exprPath, ignoreResult);
                } else {
                  self.explodeExpression(exprPath, true);
                }
              });
              return result;

            case "LogicalExpression":
              after = loc();

              if (!ignoreResult) {
                result = self.makeTempVar();
              }

              var left = explodeViaTempVar(result, path.get("left"));

              if (expr.operator === "&&") {
                self.jumpIfNot(left, after);
              } else {
                _assert2.default.strictEqual(expr.operator, "||");

                self.jumpIf(left, after);
              }

              explodeViaTempVar(result, path.get("right"), ignoreResult);
              self.mark(after);
              return result;

            case "ConditionalExpression":
              var elseLoc = loc();
              after = loc();
              var test = self.explodeExpression(path.get("test"));
              self.jumpIfNot(test, elseLoc);

              if (!ignoreResult) {
                result = self.makeTempVar();
              }

              explodeViaTempVar(result, path.get("consequent"), ignoreResult);
              self.jump(after);
              self.mark(elseLoc);
              explodeViaTempVar(result, path.get("alternate"), ignoreResult);
              self.mark(after);
              return result;

            case "UnaryExpression":
              return finish(
                t.unaryExpression(
                  expr.operator,
                  self.explodeExpression(path.get("argument")),
                  !!expr.prefix
                )
              );

            case "BinaryExpression":
              return finish(
                t.binaryExpression(
                  expr.operator,
                  explodeViaTempVar(null, path.get("left")),
                  explodeViaTempVar(null, path.get("right"))
                )
              );

            case "AssignmentExpression":
              return finish(
                t.assignmentExpression(
                  expr.operator,
                  self.explodeExpression(path.get("left")),
                  self.explodeExpression(path.get("right"))
                )
              );

            case "UpdateExpression":
              return finish(
                t.updateExpression(
                  expr.operator,
                  self.explodeExpression(path.get("argument")),
                  expr.prefix
                )
              );

            case "YieldExpression":
              after = loc();
              var arg =
                expr.argument && self.explodeExpression(path.get("argument"));

              if (arg && expr.delegate) {
                var _result = self.makeTempVar();

                self.emit(
                  t.returnStatement(
                    t.callExpression(self.contextProperty("delegateYield"), [
                      arg,
                      t.stringLiteral(_result.property.name),
                      after
                    ])
                  )
                );
                self.mark(after);
                return _result;
              }

              self.emitAssign(self.contextProperty("next"), after);
              self.emit(t.returnStatement(arg || null));
              self.mark(after);
              return self.contextProperty("sent");

            default:
              throw new Error(
                "unknown Expression of type " + JSON.stringify(expr.type)
              );
          }
        };

        /***/
      },
      /* 243 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var originalObject = Object;
        var originalDefProp = Object.defineProperty;
        var originalCreate = Object.create;

        function defProp(obj, name, value) {
          if (originalDefProp)
            try {
              originalDefProp.call(originalObject, obj, name, {
                value: value
              });
            } catch (definePropertyIsBrokenInIE8) {
              obj[name] = value;
            }
          else {
            obj[name] = value;
          }
        }

        function makeSafeToCall(fun) {
          if (fun) {
            defProp(fun, "call", fun.call);
            defProp(fun, "apply", fun.apply);
          }

          return fun;
        }

        makeSafeToCall(originalDefProp);
        makeSafeToCall(originalCreate);
        var hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);
        var numToStr = makeSafeToCall(Number.prototype.toString);
        var strSlice = makeSafeToCall(String.prototype.slice);

        var cloner = function cloner() {};

        function create(prototype) {
          if (originalCreate) {
            return originalCreate.call(originalObject, prototype);
          }

          cloner.prototype = prototype || null;
          return new cloner();
        }

        var rand = Math.random;
        var uniqueKeys = create(null);

        function makeUniqueKey() {
          do {
            var uniqueKey = internString(
              strSlice.call(numToStr.call(rand(), 36), 2)
            );
          } while (hasOwn.call(uniqueKeys, uniqueKey));

          return (uniqueKeys[uniqueKey] = uniqueKey);
        }

        function internString(str) {
          var obj = {};
          obj[str] = true;
          return Object.keys(obj)[0];
        }

        exports.makeUniqueKey = makeUniqueKey;
        var originalGetOPNs = Object.getOwnPropertyNames;

        Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
          for (
            var names = originalGetOPNs(object),
              src = 0,
              dst = 0,
              len = names.length;
            src < len;
            ++src
          ) {
            if (!hasOwn.call(uniqueKeys, names[src])) {
              if (src > dst) {
                names[dst] = names[src];
              }

              ++dst;
            }
          }

          names.length = dst;
          return names;
        };

        function defaultCreatorFn(object) {
          return create(null);
        }

        function makeAccessor(secretCreatorFn) {
          var brand = makeUniqueKey();
          var passkey = create(null);
          secretCreatorFn = secretCreatorFn || defaultCreatorFn;

          function register(object) {
            var secret;

            function vault(key, forget) {
              if (key === passkey) {
                return forget
                  ? (secret = null)
                  : secret || (secret = secretCreatorFn(object));
              }
            }

            defProp(object, brand, vault);
          }

          function accessor(object) {
            if (!hasOwn.call(object, brand)) register(object);
            return object[brand](passkey);
          }

          accessor.forget = function(object) {
            if (hasOwn.call(object, brand)) object[brand](passkey, true);
          };

          return accessor;
        }

        exports.makeAccessor = makeAccessor;

        /***/
      },
      /* 244 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _regexpuCore() {
          var data = _interopRequireDefault(__webpack_require__(96));

          _regexpuCore = function _regexpuCore() {
            return data;
          };

          return data;
        }

        function regex() {
          var data = _interopRequireWildcard(__webpack_require__(57));

          regex = function regex() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var _options$useUnicodeFl = options.useUnicodeFlag,
            useUnicodeFlag =
              _options$useUnicodeFl === void 0 ? true : _options$useUnicodeFl;

          if (typeof useUnicodeFlag !== "boolean") {
            throw new Error(".useUnicodeFlag must be a boolean, or undefined");
          }

          return {
            visitor: {
              RegExpLiteral: function RegExpLiteral(path) {
                var node = path.node;

                if (!regex().is(node, "u")) {
                  return;
                }

                node.pattern = (0, _regexpuCore().default)(
                  node.pattern,
                  node.flags,
                  {
                    unicodePropertyEscape: true,
                    useUnicodeFlag: useUnicodeFlag
                  }
                );

                if (!useUnicodeFlag) {
                  regex().pullFlag(node, "u");
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 245 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _presetStage() {
          var data = _interopRequireDefault(__webpack_require__(246));

          _presetStage = function _presetStage() {
            return data;
          };

          return data;
        }

        function _pluginProposalExportDefaultFrom() {
          var data = _interopRequireDefault(__webpack_require__(201));

          _pluginProposalExportDefaultFrom = function _pluginProposalExportDefaultFrom() {
            return data;
          };

          return data;
        }

        function _pluginProposalLogicalAssignmentOperators() {
          var data = _interopRequireDefault(__webpack_require__(977));

          _pluginProposalLogicalAssignmentOperators = function _pluginProposalLogicalAssignmentOperators() {
            return data;
          };

          return data;
        }

        function _pluginProposalOptionalChaining() {
          var data = _interopRequireDefault(__webpack_require__(979));

          _pluginProposalOptionalChaining = function _pluginProposalOptionalChaining() {
            return data;
          };

          return data;
        }

        function _pluginProposalPipelineOperator() {
          var data = _interopRequireDefault(__webpack_require__(203));

          _pluginProposalPipelineOperator = function _pluginProposalPipelineOperator() {
            return data;
          };

          return data;
        }

        function _pluginProposalNullishCoalescingOperator() {
          var data = _interopRequireDefault(__webpack_require__(981));

          _pluginProposalNullishCoalescingOperator = function _pluginProposalNullishCoalescingOperator() {
            return data;
          };

          return data;
        }

        function _pluginProposalDoExpressions() {
          var data = _interopRequireDefault(__webpack_require__(200));

          _pluginProposalDoExpressions = function _pluginProposalDoExpressions() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api, opts) {
          if (opts === void 0) {
            opts = {};
          }

          api.assertVersion(7);
          var _opts = opts,
            _opts$loose = _opts.loose,
            loose = _opts$loose === void 0 ? false : _opts$loose,
            _opts$useBuiltIns = _opts.useBuiltIns,
            useBuiltIns =
              _opts$useBuiltIns === void 0 ? false : _opts$useBuiltIns,
            _opts$decoratorsLegac = _opts.decoratorsLegacy,
            decoratorsLegacy =
              _opts$decoratorsLegac === void 0 ? false : _opts$decoratorsLegac;

          if (typeof loose !== "boolean") {
            throw new Error(
              "@babel/preset-stage-1 'loose' option must be a boolean."
            );
          }

          if (typeof useBuiltIns !== "boolean") {
            throw new Error(
              "@babel/preset-stage-1 'useBuiltIns' option must be a boolean."
            );
          }

          if (typeof decoratorsLegacy !== "boolean") {
            throw new Error(
              "@babel/preset-stage-1 'decoratorsLegacy' option must be a boolean."
            );
          }

          if (decoratorsLegacy !== true) {
            throw new Error(
              "The new decorators proposal is not supported yet." +
                ' You must pass the `"decoratorsLegacy": true` option to' +
                " @babel/preset-stage-1"
            );
          }

          return {
            presets: [
              [
                _presetStage().default,
                {
                  loose: loose,
                  useBuiltIns: useBuiltIns,
                  decoratorsLegacy: decoratorsLegacy
                }
              ]
            ],
            plugins: [
              _pluginProposalExportDefaultFrom().default,
              _pluginProposalLogicalAssignmentOperators().default,
              [
                _pluginProposalOptionalChaining().default,
                {
                  loose: loose
                }
              ],
              _pluginProposalPipelineOperator().default,
              [
                _pluginProposalNullishCoalescingOperator().default,
                {
                  loose: loose
                }
              ],
              _pluginProposalDoExpressions().default
            ]
          };
        });

        exports.default = _default;

        /***/
      },
      /* 246 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _presetStage() {
          var data = _interopRequireDefault(__webpack_require__(247));

          _presetStage = function _presetStage() {
            return data;
          };

          return data;
        }

        function _pluginProposalDecorators() {
          var data = _interopRequireDefault(__webpack_require__(199));

          _pluginProposalDecorators = function _pluginProposalDecorators() {
            return data;
          };

          return data;
        }

        function _pluginProposalFunctionSent() {
          var data = _interopRequireDefault(__webpack_require__(972));

          _pluginProposalFunctionSent = function _pluginProposalFunctionSent() {
            return data;
          };

          return data;
        }

        function _pluginProposalExportNamespaceFrom() {
          var data = _interopRequireDefault(__webpack_require__(202));

          _pluginProposalExportNamespaceFrom = function _pluginProposalExportNamespaceFrom() {
            return data;
          };

          return data;
        }

        function _pluginProposalNumericSeparator() {
          var data = _interopRequireDefault(__webpack_require__(973));

          _pluginProposalNumericSeparator = function _pluginProposalNumericSeparator() {
            return data;
          };

          return data;
        }

        function _pluginProposalThrowExpressions() {
          var data = _interopRequireDefault(__webpack_require__(975));

          _pluginProposalThrowExpressions = function _pluginProposalThrowExpressions() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api, opts) {
          if (opts === void 0) {
            opts = {};
          }

          api.assertVersion(7);
          var _opts = opts,
            _opts$loose = _opts.loose,
            loose = _opts$loose === void 0 ? false : _opts$loose,
            _opts$useBuiltIns = _opts.useBuiltIns,
            useBuiltIns =
              _opts$useBuiltIns === void 0 ? false : _opts$useBuiltIns,
            _opts$decoratorsLegac = _opts.decoratorsLegacy,
            decoratorsLegacy =
              _opts$decoratorsLegac === void 0 ? false : _opts$decoratorsLegac;

          if (typeof loose !== "boolean") {
            throw new Error(
              "@babel/preset-stage-2 'loose' option must be a boolean."
            );
          }

          if (typeof useBuiltIns !== "boolean") {
            throw new Error(
              "@babel/preset-stage-2 'useBuiltIns' option must be a boolean."
            );
          }

          if (typeof decoratorsLegacy !== "boolean") {
            throw new Error(
              "@babel/preset-stage-2 'decoratorsLegacy' option must be a boolean."
            );
          }

          if (decoratorsLegacy !== true) {
            throw new Error(
              "The new decorators proposal is not supported yet." +
                ' You must pass the `"decoratorsLegacy": true` option to' +
                " @babel/preset-stage-2"
            );
          }

          return {
            presets: [
              [
                _presetStage().default,
                {
                  loose: loose,
                  useBuiltIns: useBuiltIns
                }
              ]
            ],
            plugins: [
              [
                _pluginProposalDecorators().default,
                {
                  legacy: decoratorsLegacy
                }
              ],
              _pluginProposalFunctionSent().default,
              _pluginProposalExportNamespaceFrom().default,
              _pluginProposalNumericSeparator().default,
              _pluginProposalThrowExpressions().default
            ]
          };
        });

        exports.default = _default;

        /***/
      },
      /* 247 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxDynamicImport() {
          var data = _interopRequireDefault(__webpack_require__(181));

          _pluginSyntaxDynamicImport = function _pluginSyntaxDynamicImport() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxImportMeta() {
          var data = _interopRequireDefault(__webpack_require__(186));

          _pluginSyntaxImportMeta = function _pluginSyntaxImportMeta() {
            return data;
          };

          return data;
        }

        function _pluginProposalAsyncGeneratorFunctions() {
          var data = _interopRequireDefault(__webpack_require__(196));

          _pluginProposalAsyncGeneratorFunctions = function _pluginProposalAsyncGeneratorFunctions() {
            return data;
          };

          return data;
        }

        function _pluginProposalClassProperties() {
          var data = _interopRequireDefault(__webpack_require__(197));

          _pluginProposalClassProperties = function _pluginProposalClassProperties() {
            return data;
          };

          return data;
        }

        function _pluginProposalObjectRestSpread() {
          var data = _interopRequireDefault(__webpack_require__(235));

          _pluginProposalObjectRestSpread = function _pluginProposalObjectRestSpread() {
            return data;
          };

          return data;
        }

        function _pluginProposalOptionalCatchBinding() {
          var data = _interopRequireDefault(__webpack_require__(236));

          _pluginProposalOptionalCatchBinding = function _pluginProposalOptionalCatchBinding() {
            return data;
          };

          return data;
        }

        function _pluginProposalUnicodePropertyRegex() {
          var data = _interopRequireDefault(__webpack_require__(244));

          _pluginProposalUnicodePropertyRegex = function _pluginProposalUnicodePropertyRegex() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api, opts) {
          api.assertVersion(7);
          var loose = false;
          var useBuiltIns = false;

          if (opts !== undefined) {
            if (opts.loose !== undefined) loose = opts.loose;
            if (opts.useBuiltIns !== undefined) useBuiltIns = opts.useBuiltIns;
          }

          if (typeof loose !== "boolean") {
            throw new Error(
              "@babel/preset-stage-3 'loose' option must be a boolean."
            );
          }

          if (typeof useBuiltIns !== "boolean") {
            throw new Error(
              "@babel/preset-stage-3 'useBuiltIns' option must be a boolean."
            );
          }

          return {
            plugins: [
              _pluginSyntaxDynamicImport().default,
              _pluginSyntaxImportMeta().default,
              _pluginProposalAsyncGeneratorFunctions().default,
              [
                _pluginProposalClassProperties().default,
                {
                  loose: loose
                }
              ],
              [
                _pluginProposalObjectRestSpread().default,
                {
                  useBuiltIns: useBuiltIns
                }
              ],
              _pluginProposalOptionalCatchBinding().default,
              _pluginProposalUnicodePropertyRegex().default
            ]
          };
        });

        exports.default = _default;

        /***/
      },
      /* 248 */
      /***/ function(module, __webpack_exports__, __webpack_require__) {
        "use strict";
        Object.defineProperty(__webpack_exports__, "__esModule", {
          value: true
        });

        // EXTERNAL MODULE: ./packages/babel-core/lib/index.js
        var lib = __webpack_require__(2);
        var lib_default = /*#__PURE__*/ __webpack_require__.n(lib);

        // CONCATENATED MODULE: ./packages/babel-standalone/src/transformScriptTags.js
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function") {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym
                  ).enumerable;
                })
              );
            }
            ownKeys.forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          }
          return target;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        var scriptTypes = ["text/jsx", "text/babel"];
        var headEl;
        var inlineScriptCount = 0;

        function transformCode(transformFn, script) {
          var source;

          if (script.url != null) {
            source = script.url;
          } else {
            source = "Inline Babel script";
            inlineScriptCount++;

            if (inlineScriptCount > 1) {
              source += " (" + inlineScriptCount + ")";
            }
          }

          return transformFn(
            script.content,
            _objectSpread(
              {
                filename: source
              },
              buildBabelOptions(script)
            )
          ).code;
        }

        function buildBabelOptions(script) {
          return {
            presets: script.presets || ["react", "es2015"],
            plugins: script.plugins || [
              "proposal-class-properties",
              "proposal-object-rest-spread",
              "transform-flow-strip-types"
            ],
            sourceMaps: "inline"
          };
        }

        function run(transformFn, script) {
          var scriptEl = document.createElement("script");
          scriptEl.text = transformCode(transformFn, script);
          headEl.appendChild(scriptEl);
        }

        function load(url, successCallback, errorCallback) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, true);

          if ("overrideMimeType" in xhr) {
            xhr.overrideMimeType("text/plain");
          }

          xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
              if (xhr.status === 0 || xhr.status === 200) {
                successCallback(xhr.responseText);
              } else {
                errorCallback();
                throw new Error("Could not load " + url);
              }
            }
          };

          return xhr.send(null);
        }

        function getPluginsOrPresetsFromScript(script, attributeName) {
          var rawValue = script.getAttribute(attributeName);

          if (rawValue === "") {
            return [];
          }

          if (!rawValue) {
            return null;
          }

          return rawValue.split(",").map(function(item) {
            return item.trim();
          });
        }

        function loadScripts(transformFn, scripts) {
          var result = [];
          var count = scripts.length;

          function check() {
            var script, i;

            for (i = 0; i < count; i++) {
              script = result[i];

              if (script.loaded && !script.executed) {
                script.executed = true;
                run(transformFn, script);
              } else if (!script.loaded && !script.error && !script.async) {
                break;
              }
            }
          }

          scripts.forEach(function(script, i) {
            var scriptData = {
              async: script.hasAttribute("async"),
              error: false,
              executed: false,
              plugins: getPluginsOrPresetsFromScript(script, "data-plugins"),
              presets: getPluginsOrPresetsFromScript(script, "data-presets")
            };

            if (script.src) {
              result[i] = _objectSpread({}, scriptData, {
                content: null,
                loaded: false,
                url: script.src
              });
              load(
                script.src,
                function(content) {
                  result[i].loaded = true;
                  result[i].content = content;
                  check();
                },
                function() {
                  result[i].error = true;
                  check();
                }
              );
            } else {
              result[i] = _objectSpread({}, scriptData, {
                content: script.innerHTML,
                loaded: true,
                url: null
              });
            }
          });
          check();
        }

        function runScripts(transformFn, scripts) {
          headEl = document.getElementsByTagName("head")[0];

          if (!scripts) {
            scripts = document.getElementsByTagName("script");
          }

          var jsxScripts = [];

          for (var i = 0; i < scripts.length; i++) {
            var script = scripts.item(i);
            var type = script.type.split(";")[0];

            if (scriptTypes.indexOf(type) !== -1) {
              jsxScripts.push(script);
            }
          }

          if (jsxScripts.length === 0) {
            return;
          }

          console.warn(
            "You are using the in-browser Babel transformer. Be sure to precompile " +
              "your scripts for production - https://babeljs.io/docs/setup/"
          );
          loadScripts(transformFn, jsxScripts);
        }
        // CONCATENATED MODULE: ./packages/babel-standalone/src/index.js
        /* harmony export (immutable) */ __webpack_exports__[
          "transform"
        ] = transform;
        /* harmony export (immutable) */ __webpack_exports__[
          "transformFromAst"
        ] = transformFromAst;
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "availablePlugins",
          function() {
            return availablePlugins;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "availablePresets",
          function() {
            return availablePresets;
          }
        );
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "buildExternalHelpers",
          function() {
            return buildExternalHelpers;
          }
        );
        /* harmony export (immutable) */ __webpack_exports__[
          "registerPlugin"
        ] = registerPlugin;
        /* harmony export (immutable) */ __webpack_exports__[
          "registerPlugins"
        ] = registerPlugins;
        /* harmony export (immutable) */ __webpack_exports__[
          "registerPreset"
        ] = registerPreset;
        /* harmony export (immutable) */ __webpack_exports__[
          "registerPresets"
        ] = registerPresets;
        /* harmony export (binding) */ __webpack_require__.d(
          __webpack_exports__,
          "version",
          function() {
            return version;
          }
        );
        /* harmony export (immutable) */ __webpack_exports__[
          "transformScriptTags"
        ] = transformScriptTags;
        /* harmony export (immutable) */ __webpack_exports__[
          "disableScriptTags"
        ] = disableScriptTags;
        function src__objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);
            if (typeof Object.getOwnPropertySymbols === "function") {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym
                  ).enumerable;
                })
              );
            }
            ownKeys.forEach(function(key) {
              src__defineProperty(target, key, source[key]);
            });
          }
          return target;
        }

        function src__defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }

        var isArray =
          Array.isArray ||
          function(arg) {
            return Object.prototype.toString.call(arg) === "[object Array]";
          };

        function loadBuiltin(builtinTable, name) {
          if (isArray(name) && typeof name[0] === "string") {
            if (builtinTable.hasOwnProperty(name[0])) {
              return [builtinTable[name[0]]].concat(name.slice(1));
            }

            return;
          } else if (typeof name === "string") {
            return builtinTable[name];
          }

          return name;
        }

        function processOptions(options) {
          var presets = (options.presets || []).map(function(presetName) {
            var preset = loadBuiltin(availablePresets, presetName);

            if (preset) {
              if (
                isArray(preset) &&
                typeof preset[0] === "object" &&
                preset[0].hasOwnProperty("buildPreset")
              ) {
                preset[0] = src__objectSpread({}, preset[0], {
                  buildPreset: preset[0].buildPreset
                });
              }
            } else {
              throw new Error(
                'Invalid preset specified in Babel options: "' +
                  presetName +
                  '"'
              );
            }

            return preset;
          });
          var plugins = (options.plugins || []).map(function(pluginName) {
            var plugin = loadBuiltin(availablePlugins, pluginName);

            if (!plugin) {
              throw new Error(
                'Invalid plugin specified in Babel options: "' +
                  pluginName +
                  '"'
              );
            }

            return plugin;
          });
          return src__objectSpread(
            {
              babelrc: false
            },
            options,
            {
              presets: presets,
              plugins: plugins
            }
          );
        }

        function transform(code, options) {
          return lib["transform"](code, processOptions(options));
        }
        function transformFromAst(ast, code, options) {
          return lib["transformFromAst"](ast, code, processOptions(options));
        }
        var availablePlugins = {};
        var availablePresets = {};
        var buildExternalHelpers = lib["buildExternalHelpers"];
        function registerPlugin(name, plugin) {
          if (availablePlugins.hasOwnProperty(name)) {
            console.warn(
              'A plugin named "' +
                name +
                '" is already registered, it will be overridden'
            );
          }

          availablePlugins[name] = plugin;
        }
        function registerPlugins(newPlugins) {
          Object.keys(newPlugins).forEach(function(name) {
            return registerPlugin(name, newPlugins[name]);
          });
        }
        function registerPreset(name, preset) {
          if (availablePresets.hasOwnProperty(name)) {
            console.warn(
              'A preset named "' +
                name +
                '" is already registered, it will be overridden'
            );
          }

          availablePresets[name] = preset;
        }
        function registerPresets(newPresets) {
          Object.keys(newPresets).forEach(function(name) {
            return registerPreset(name, newPresets[name]);
          });
        }
        registerPlugins({
          "external-helpers": __webpack_require__(531),
          "syntax-async-generators": __webpack_require__(177),
          "syntax-class-properties": __webpack_require__(178),
          "syntax-decorators": __webpack_require__(179),
          "syntax-do-expressions": __webpack_require__(180),
          "syntax-dynamic-import": __webpack_require__(181),
          "syntax-export-default-from": __webpack_require__(182),
          "syntax-export-namespace-from": __webpack_require__(183),
          "syntax-flow": __webpack_require__(92),
          "syntax-function-bind": __webpack_require__(184),
          "syntax-function-sent": __webpack_require__(185),
          "syntax-import-meta": __webpack_require__(186),
          "syntax-jsx": __webpack_require__(93),
          "syntax-object-rest-spread": __webpack_require__(187),
          "syntax-optional-catch-binding": __webpack_require__(188),
          "syntax-pipeline-operator": __webpack_require__(189),
          "syntax-typescript": __webpack_require__(190),
          "transform-async-to-generator": __webpack_require__(191),
          "proposal-async-generator-functions": __webpack_require__(196),
          "proposal-class-properties": __webpack_require__(197),
          "proposal-decorators": __webpack_require__(199),
          "proposal-do-expressions": __webpack_require__(200),
          "proposal-export-default-from": __webpack_require__(201),
          "proposal-export-namespace-from": __webpack_require__(202),
          "proposal-pipeline-operator": __webpack_require__(203),
          "transform-arrow-functions": __webpack_require__(204),
          "transform-block-scoped-functions": __webpack_require__(205),
          "transform-block-scoping": __webpack_require__(206),
          "transform-classes": __webpack_require__(207),
          "transform-computed-properties": __webpack_require__(209),
          "transform-destructuring": __webpack_require__(210),
          "transform-dotall-regex": __webpack_require__(547),
          "transform-duplicate-keys": __webpack_require__(212),
          "transform-for-of": __webpack_require__(213),
          "transform-function-name": __webpack_require__(214),
          "transform-instanceof": __webpack_require__(215),
          "transform-literals": __webpack_require__(216),
          "transform-modules-amd": __webpack_require__(217),
          "transform-modules-commonjs": __webpack_require__(219),
          "transform-modules-systemjs": __webpack_require__(220),
          "transform-modules-umd": __webpack_require__(222),
          "transform-object-super": __webpack_require__(223),
          "transform-parameters": __webpack_require__(224),
          "transform-shorthand-properties": __webpack_require__(225),
          "transform-spread": __webpack_require__(226),
          "transform-sticky-regex": __webpack_require__(227),
          "transform-template-literals": __webpack_require__(228),
          "transform-typeof-symbol": __webpack_require__(229),
          "transform-typescript": __webpack_require__(230),
          "transform-unicode-regex": __webpack_require__(231),
          "transform-member-expression-literals": __webpack_require__(945),
          "transform-property-literals": __webpack_require__(946),
          "transform-property-mutators": __webpack_require__(947),
          "transform-exponentiation-operator": __webpack_require__(232),
          "transform-flow-comments": __webpack_require__(950),
          "transform-flow-strip-types": __webpack_require__(233),
          "proposal-function-bind": __webpack_require__(234),
          "transform-jscript": __webpack_require__(951),
          "transform-new-target": __webpack_require__(952),
          "transform-object-assign": __webpack_require__(953),
          "proposal-object-rest-spread": __webpack_require__(235),
          "transform-object-set-prototype-of-to-assign": __webpack_require__(
            954
          ),
          "proposal-optional-catch-binding": __webpack_require__(236),
          "transform-proto-to-assign": __webpack_require__(955),
          "transform-react-constant-elements": __webpack_require__(956),
          "transform-react-display-name": __webpack_require__(237),
          "transform-react-inline-elements": __webpack_require__(957),
          "transform-react-jsx": __webpack_require__(238),
          "transform-react-jsx-compat": __webpack_require__(958),
          "transform-react-jsx-self": __webpack_require__(239),
          "transform-react-jsx-source": __webpack_require__(240),
          "transform-regenerator": __webpack_require__(241),
          "transform-runtime": __webpack_require__(965),
          "transform-strict-mode": __webpack_require__(967),
          "proposal-unicode-property-regex": __webpack_require__(244)
        });
        registerPresets({
          es2015: __webpack_require__(99),
          es2016: __webpack_require__(968),
          es2017: __webpack_require__(969),
          react: __webpack_require__(970),
          "stage-0": __webpack_require__(971),
          "stage-1": __webpack_require__(245),
          "stage-2": __webpack_require__(246),
          "stage-3": __webpack_require__(247),
          "es2015-loose": {
            presets: [
              [
                __webpack_require__(99),
                {
                  loose: true
                }
              ]
            ]
          },
          "es2015-no-commonjs": {
            presets: [
              [
                __webpack_require__(99),
                {
                  modules: false
                }
              ]
            ]
          },
          typescript: __webpack_require__(983),
          flow: __webpack_require__(984)
        });
        var version = "7.0.0-beta.45";

        function onDOMContentLoaded() {
          transformScriptTags();
        }

        if (
          typeof window !== "undefined" &&
          window &&
          window.addEventListener
        ) {
          window.addEventListener(
            "DOMContentLoaded",
            onDOMContentLoaded,
            false
          );
        }

        function transformScriptTags(scriptTags) {
          runScripts(transform, scriptTags);
        }
        function disableScriptTags() {
          window.removeEventListener("DOMContentLoaded", onDOMContentLoaded);
        }

        /***/
      },
      /* 249 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _path2 = _interopRequireDefault(__webpack_require__(23));

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var testing = "production" === "test";

        var TraversalContext = (function() {
          function TraversalContext(scope, opts, state, parentPath) {
            this.queue = null;
            this.parentPath = parentPath;
            this.scope = scope;
            this.state = state;
            this.opts = opts;
          }

          var _proto = TraversalContext.prototype;

          _proto.shouldVisit = function shouldVisit(node) {
            var opts = this.opts;
            if (opts.enter || opts.exit) return true;
            if (opts[node.type]) return true;
            var keys = t().VISITOR_KEYS[node.type];
            if (!keys || !keys.length) return false;

            for (
              var _iterator = keys,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var key = _ref;
              if (node[key]) return true;
            }

            return false;
          };

          _proto.create = function create(node, obj, key, listKey) {
            return _path2.default.get({
              parentPath: this.parentPath,
              parent: node,
              container: obj,
              key: key,
              listKey: listKey
            });
          };

          _proto.maybeQueue = function maybeQueue(path, notPriority) {
            if (this.trap) {
              throw new Error("Infinite cycle detected");
            }

            if (this.queue) {
              if (notPriority) {
                this.queue.push(path);
              } else {
                this.priorityQueue.push(path);
              }
            }
          };

          _proto.visitMultiple = function visitMultiple(
            container,
            parent,
            listKey
          ) {
            if (container.length === 0) return false;
            var queue = [];

            for (var key = 0; key < container.length; key++) {
              var node = container[key];

              if (node && this.shouldVisit(node)) {
                queue.push(this.create(parent, container, key, listKey));
              }
            }

            return this.visitQueue(queue);
          };

          _proto.visitSingle = function visitSingle(node, key) {
            if (this.shouldVisit(node[key])) {
              return this.visitQueue([this.create(node, node, key)]);
            } else {
              return false;
            }
          };

          _proto.visitQueue = function visitQueue(queue) {
            this.queue = queue;
            this.priorityQueue = [];
            var visited = [];
            var stop = false;

            for (
              var _iterator2 = queue,
                _isArray2 = Array.isArray(_iterator2),
                _i2 = 0,
                _iterator2 = _isArray2
                  ? _iterator2
                  : _iterator2[Symbol.iterator]();
              ;

            ) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var path = _ref2;
              path.resync();

              if (
                path.contexts.length === 0 ||
                path.contexts[path.contexts.length - 1] !== this
              ) {
                path.pushContext(this);
              }

              if (path.key === null) continue;

              if (testing && queue.length >= 10000) {
                this.trap = true;
              }

              if (visited.indexOf(path.node) >= 0) continue;
              visited.push(path.node);

              if (path.visit()) {
                stop = true;
                break;
              }

              if (this.priorityQueue.length) {
                stop = this.visitQueue(this.priorityQueue);
                this.priorityQueue = [];
                this.queue = queue;
                if (stop) break;
              }
            }

            for (
              var _iterator3 = queue,
                _isArray3 = Array.isArray(_iterator3),
                _i3 = 0,
                _iterator3 = _isArray3
                  ? _iterator3
                  : _iterator3[Symbol.iterator]();
              ;

            ) {
              var _ref3;

              if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
              }

              var _path = _ref3;

              _path.popContext();
            }

            this.queue = null;
            return stop;
          };

          _proto.visit = function visit(node, key) {
            var nodes = node[key];
            if (!nodes) return false;

            if (Array.isArray(nodes)) {
              return this.visitMultiple(nodes, node, key);
            } else {
              return this.visitSingle(node, key);
            }
          };

          return TraversalContext;
        })();

        exports.default = TraversalContext;

        /***/
      },
      /* 250 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _buildMatchMemberExpression = _interopRequireDefault(
          __webpack_require__(103)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var isReactComponent = (0, _buildMatchMemberExpression.default)(
          "React.Component"
        );
        var _default = isReactComponent;
        exports.default = _default;

        /***/
      },
      /* 251 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isCompatTag;

        function isCompatTag(tagName) {
          return !!tagName && /^[a-z]/.test(tagName);
        }

        /***/
      },
      /* 252 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = buildChildren;

        var _generated = __webpack_require__(4);

        var _cleanJSXElementLiteralChild = _interopRequireDefault(
          __webpack_require__(253)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function buildChildren(node) {
          var elements = [];

          for (var i = 0; i < node.children.length; i++) {
            var child = node.children[i];

            if ((0, _generated.isJSXText)(child)) {
              (0, _cleanJSXElementLiteralChild.default)(child, elements);
              continue;
            }

            if ((0, _generated.isJSXExpressionContainer)(child))
              child = child.expression;
            if ((0, _generated.isJSXEmptyExpression)(child)) continue;
            elements.push(child);
          }

          return elements;
        }

        /***/
      },
      /* 253 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = cleanJSXElementLiteralChild;

        var _generated = __webpack_require__(5);

        function cleanJSXElementLiteralChild(child, args) {
          var lines = child.value.split(/\r\n|\n|\r/);
          var lastNonEmptyLine = 0;

          for (var i = 0; i < lines.length; i++) {
            if (lines[i].match(/[^ \t]/)) {
              lastNonEmptyLine = i;
            }
          }

          var str = "";

          for (var _i = 0; _i < lines.length; _i++) {
            var line = lines[_i];
            var isFirstLine = _i === 0;
            var isLastLine = _i === lines.length - 1;
            var isLastNonEmptyLine = _i === lastNonEmptyLine;
            var trimmedLine = line.replace(/\t/g, " ");

            if (!isFirstLine) {
              trimmedLine = trimmedLine.replace(/^[ ]+/, "");
            }

            if (!isLastLine) {
              trimmedLine = trimmedLine.replace(/[ ]+$/, "");
            }

            if (trimmedLine) {
              if (!isLastNonEmptyLine) {
                trimmedLine += " ";
              }

              str += trimmedLine;
            }
          }

          if (str) args.push((0, _generated.stringLiteral)(str));
        }

        /***/
      },
      /* 254 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = builder;

        function _clone() {
          var data = _interopRequireDefault(__webpack_require__(105));

          _clone = function _clone() {
            return data;
          };

          return data;
        }

        var _definitions = __webpack_require__(11);

        var _validate = _interopRequireDefault(__webpack_require__(123));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function builder(type) {
          for (
            var _len = arguments.length,
              args = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key];
          }

          var keys = _definitions.BUILDER_KEYS[type];
          var countArgs = args.length;

          if (countArgs > keys.length) {
            throw new Error(
              type +
                ": Too many arguments passed. Received " +
                countArgs +
                " but can receive no more than " +
                keys.length
            );
          }

          var node = {
            type: type
          };
          var i = 0;
          keys.forEach(function(key) {
            var field = _definitions.NODE_FIELDS[type][key];
            var arg;
            if (i < countArgs) arg = args[i];
            if (arg === undefined) arg = (0, _clone().default)(field.default);
            node[key] = arg;
            i++;
          });

          for (var key in node) {
            (0, _validate.default)(node, key, node[key]);
          }

          return node;
        }

        /***/
      },
      /* 255 */
      /***/ function(module, exports, __webpack_require__) {
        var Stack = __webpack_require__(59),
          arrayEach = __webpack_require__(284),
          assignValue = __webpack_require__(109),
          baseAssign = __webpack_require__(285),
          baseAssignIn = __webpack_require__(292),
          cloneBuffer = __webpack_require__(295),
          copyArray = __webpack_require__(115),
          copySymbols = __webpack_require__(296),
          copySymbolsIn = __webpack_require__(298),
          getAllKeys = __webpack_require__(118),
          getAllKeysIn = __webpack_require__(299),
          getTag = __webpack_require__(43),
          initCloneArray = __webpack_require__(303),
          initCloneByTag = __webpack_require__(304),
          initCloneObject = __webpack_require__(309),
          isArray = __webpack_require__(6),
          isBuffer = __webpack_require__(63),
          isMap = __webpack_require__(311),
          isObject = __webpack_require__(15),
          isSet = __webpack_require__(313),
          keys = __webpack_require__(25);

        var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;
        var argsTag = "[object Arguments]",
          arrayTag = "[object Array]",
          boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          errorTag = "[object Error]",
          funcTag = "[object Function]",
          genTag = "[object GeneratorFunction]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          objectTag = "[object Object]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          symbolTag = "[object Symbol]",
          weakMapTag = "[object WeakMap]";
        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]",
          float32Tag = "[object Float32Array]",
          float64Tag = "[object Float64Array]",
          int8Tag = "[object Int8Array]",
          int16Tag = "[object Int16Array]",
          int32Tag = "[object Int32Array]",
          uint8Tag = "[object Uint8Array]",
          uint8ClampedTag = "[object Uint8ClampedArray]",
          uint16Tag = "[object Uint16Array]",
          uint32Tag = "[object Uint32Array]";
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[
          arrayBufferTag
        ] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[
          dateTag
        ] = cloneableTags[float32Tag] = cloneableTags[
          float64Tag
        ] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[
          int32Tag
        ] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[
          objectTag
        ] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[
          stringTag
        ] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[
          uint8ClampedTag
        ] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[
          weakMapTag
        ] = false;

        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

          if (customizer) {
            result = object
              ? customizer(value, key, object, stack)
              : customizer(value);
          }

          if (result !== undefined) {
            return result;
          }

          if (!isObject(value)) {
            return value;
          }

          var isArr = isArray(value);

          if (isArr) {
            result = initCloneArray(value);

            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }

            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result = isFlat || isFunc ? {} : initCloneObject(value);

              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result, value))
                  : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }

              result = initCloneByTag(value, tag, isDeep);
            }
          }

          stack || (stack = new Stack());
          var stacked = stack.get(value);

          if (stacked) {
            return stacked;
          }

          stack.set(value, result);

          if (isSet(value)) {
            value.forEach(function(subValue) {
              result.add(
                baseClone(subValue, bitmask, customizer, subValue, value, stack)
              );
            });
            return result;
          }

          if (isMap(value)) {
            value.forEach(function(subValue, key) {
              result.set(
                key,
                baseClone(subValue, bitmask, customizer, key, value, stack)
              );
            });
            return result;
          }

          var keysFunc = isFull
            ? isFlat ? getAllKeysIn : getAllKeys
            : isFlat ? keysIn : keys;
          var props = isArr ? undefined : keysFunc(value);
          arrayEach(props || value, function(subValue, key) {
            if (props) {
              key = subValue;
              subValue = value[key];
            }

            assignValue(
              result,
              key,
              baseClone(subValue, bitmask, customizer, key, value, stack)
            );
          });
          return result;
        }

        module.exports = baseClone;

        /***/
      },
      /* 256 */
      /***/ function(module, exports) {
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }

        module.exports = listCacheClear;

        /***/
      },
      /* 257 */
      /***/ function(module, exports, __webpack_require__) {
        var assocIndexOf = __webpack_require__(38);

        var arrayProto = Array.prototype;
        var splice = arrayProto.splice;

        function listCacheDelete(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          if (index < 0) {
            return false;
          }

          var lastIndex = data.length - 1;

          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }

          --this.size;
          return true;
        }

        module.exports = listCacheDelete;

        /***/
      },
      /* 258 */
      /***/ function(module, exports, __webpack_require__) {
        var assocIndexOf = __webpack_require__(38);

        function listCacheGet(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          return index < 0 ? undefined : data[index][1];
        }

        module.exports = listCacheGet;

        /***/
      },
      /* 259 */
      /***/ function(module, exports, __webpack_require__) {
        var assocIndexOf = __webpack_require__(38);

        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }

        module.exports = listCacheHas;

        /***/
      },
      /* 260 */
      /***/ function(module, exports, __webpack_require__) {
        var assocIndexOf = __webpack_require__(38);

        function listCacheSet(key, value) {
          var data = this.__data__,
            index = assocIndexOf(data, key);

          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }

          return this;
        }

        module.exports = listCacheSet;

        /***/
      },
      /* 261 */
      /***/ function(module, exports, __webpack_require__) {
        var ListCache = __webpack_require__(37);

        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }

        module.exports = stackClear;

        /***/
      },
      /* 262 */
      /***/ function(module, exports) {
        function stackDelete(key) {
          var data = this.__data__,
            result = data["delete"](key);
          this.size = data.size;
          return result;
        }

        module.exports = stackDelete;

        /***/
      },
      /* 263 */
      /***/ function(module, exports) {
        function stackGet(key) {
          return this.__data__.get(key);
        }

        module.exports = stackGet;

        /***/
      },
      /* 264 */
      /***/ function(module, exports) {
        function stackHas(key) {
          return this.__data__.has(key);
        }

        module.exports = stackHas;

        /***/
      },
      /* 265 */
      /***/ function(module, exports, __webpack_require__) {
        var ListCache = __webpack_require__(37),
          Map = __webpack_require__(60),
          MapCache = __webpack_require__(61);

        var LARGE_ARRAY_SIZE = 200;

        function stackSet(key, value) {
          var data = this.__data__;

          if (data instanceof ListCache) {
            var pairs = data.__data__;

            if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }

            data = this.__data__ = new MapCache(pairs);
          }

          data.set(key, value);
          this.size = data.size;
          return this;
        }

        module.exports = stackSet;

        /***/
      },
      /* 266 */
      /***/ function(module, exports, __webpack_require__) {
        var isFunction = __webpack_require__(106),
          isMasked = __webpack_require__(269),
          isObject = __webpack_require__(15),
          toSource = __webpack_require__(108);

        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var funcProto = Function.prototype,
          objectProto = Object.prototype;
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var reIsNative = RegExp(
          "^" +
            funcToString
              .call(hasOwnProperty)
              .replace(reRegExpChar, "\\$&")
              .replace(
                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                "$1.*?"
              ) +
            "$"
        );

        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }

          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }

        module.exports = baseIsNative;

        /***/
      },
      /* 267 */
      /***/ function(module, exports, __webpack_require__) {
        var Symbol = __webpack_require__(24);

        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var nativeObjectToString = objectProto.toString;
        var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

          try {
            value[symToStringTag] = undefined;
            var unmasked = true;
          } catch (e) {}

          var result = nativeObjectToString.call(value);

          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }

          return result;
        }

        module.exports = getRawTag;

        /***/
      },
      /* 268 */
      /***/ function(module, exports) {
        var objectProto = Object.prototype;
        var nativeObjectToString = objectProto.toString;

        function objectToString(value) {
          return nativeObjectToString.call(value);
        }

        module.exports = objectToString;

        /***/
      },
      /* 269 */
      /***/ function(module, exports, __webpack_require__) {
        var coreJsData = __webpack_require__(270);

        var maskSrcKey = (function() {
          var uid = /[^.]+$/.exec(
            (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ""
          );
          return uid ? "Symbol(src)_1." + uid : "";
        })();

        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }

        module.exports = isMasked;

        /***/
      },
      /* 270 */
      /***/ function(module, exports, __webpack_require__) {
        var root = __webpack_require__(9);

        var coreJsData = root["__core-js_shared__"];
        module.exports = coreJsData;

        /***/
      },
      /* 271 */
      /***/ function(module, exports) {
        function getValue(object, key) {
          return object == null ? undefined : object[key];
        }

        module.exports = getValue;

        /***/
      },
      /* 272 */
      /***/ function(module, exports, __webpack_require__) {
        var Hash = __webpack_require__(273),
          ListCache = __webpack_require__(37),
          Map = __webpack_require__(60);

        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            hash: new Hash(),
            map: new (Map || ListCache)(),
            string: new Hash()
          };
        }

        module.exports = mapCacheClear;

        /***/
      },
      /* 273 */
      /***/ function(module, exports, __webpack_require__) {
        var hashClear = __webpack_require__(274),
          hashDelete = __webpack_require__(275),
          hashGet = __webpack_require__(276),
          hashHas = __webpack_require__(277),
          hashSet = __webpack_require__(278);

        function Hash(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();

          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        module.exports = Hash;

        /***/
      },
      /* 274 */
      /***/ function(module, exports, __webpack_require__) {
        var nativeCreate = __webpack_require__(39);

        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }

        module.exports = hashClear;

        /***/
      },
      /* 275 */
      /***/ function(module, exports) {
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }

        module.exports = hashDelete;

        /***/
      },
      /* 276 */
      /***/ function(module, exports, __webpack_require__) {
        var nativeCreate = __webpack_require__(39);

        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;

        function hashGet(key) {
          var data = this.__data__;

          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined : result;
          }

          return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }

        module.exports = hashGet;

        /***/
      },
      /* 277 */
      /***/ function(module, exports, __webpack_require__) {
        var nativeCreate = __webpack_require__(39);

        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;

        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate
            ? data[key] !== undefined
            : hasOwnProperty.call(data, key);
        }

        module.exports = hashHas;

        /***/
      },
      /* 278 */
      /***/ function(module, exports, __webpack_require__) {
        var nativeCreate = __webpack_require__(39);

        var HASH_UNDEFINED = "__lodash_hash_undefined__";

        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] =
            nativeCreate && value === undefined ? HASH_UNDEFINED : value;
          return this;
        }

        module.exports = hashSet;

        /***/
      },
      /* 279 */
      /***/ function(module, exports, __webpack_require__) {
        var getMapData = __webpack_require__(40);

        function mapCacheDelete(key) {
          var result = getMapData(this, key)["delete"](key);
          this.size -= result ? 1 : 0;
          return result;
        }

        module.exports = mapCacheDelete;

        /***/
      },
      /* 280 */
      /***/ function(module, exports) {
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" ||
            type == "number" ||
            type == "symbol" ||
            type == "boolean"
            ? value !== "__proto__"
            : value === null;
        }

        module.exports = isKeyable;

        /***/
      },
      /* 281 */
      /***/ function(module, exports, __webpack_require__) {
        var getMapData = __webpack_require__(40);

        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }

        module.exports = mapCacheGet;

        /***/
      },
      /* 282 */
      /***/ function(module, exports, __webpack_require__) {
        var getMapData = __webpack_require__(40);

        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }

        module.exports = mapCacheHas;

        /***/
      },
      /* 283 */
      /***/ function(module, exports, __webpack_require__) {
        var getMapData = __webpack_require__(40);

        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
            size = data.size;
          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }

        module.exports = mapCacheSet;

        /***/
      },
      /* 284 */
      /***/ function(module, exports) {
        function arrayEach(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length;

          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }

          return array;
        }

        module.exports = arrayEach;

        /***/
      },
      /* 285 */
      /***/ function(module, exports, __webpack_require__) {
        var copyObject = __webpack_require__(31),
          keys = __webpack_require__(25);

        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }

        module.exports = baseAssign;

        /***/
      },
      /* 286 */
      /***/ function(module, exports) {
        function baseTimes(n, iteratee) {
          var index = -1,
            result = Array(n);

          while (++index < n) {
            result[index] = iteratee(index);
          }

          return result;
        }

        module.exports = baseTimes;

        /***/
      },
      /* 287 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGetTag = __webpack_require__(14),
          isObjectLike = __webpack_require__(10);

        var argsTag = "[object Arguments]";

        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }

        module.exports = baseIsArguments;

        /***/
      },
      /* 288 */
      /***/ function(module, exports) {
        function stubFalse() {
          return false;
        }

        module.exports = stubFalse;

        /***/
      },
      /* 289 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGetTag = __webpack_require__(14),
          isLength = __webpack_require__(65),
          isObjectLike = __webpack_require__(10);

        var argsTag = "[object Arguments]",
          arrayTag = "[object Array]",
          boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          errorTag = "[object Error]",
          funcTag = "[object Function]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          objectTag = "[object Object]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          weakMapTag = "[object WeakMap]";
        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]",
          float32Tag = "[object Float32Array]",
          float64Tag = "[object Float64Array]",
          int8Tag = "[object Int8Array]",
          int16Tag = "[object Int16Array]",
          int32Tag = "[object Int32Array]",
          uint8Tag = "[object Uint8Array]",
          uint8ClampedTag = "[object Uint8ClampedArray]",
          uint16Tag = "[object Uint16Array]",
          uint32Tag = "[object Uint32Array]";
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[
          float64Tag
        ] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[
          int32Tag
        ] = typedArrayTags[uint8Tag] = typedArrayTags[
          uint8ClampedTag
        ] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[
          arrayBufferTag
        ] = typedArrayTags[boolTag] = typedArrayTags[
          dataViewTag
        ] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[
          funcTag
        ] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[
          objectTag
        ] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[
          stringTag
        ] = typedArrayTags[weakMapTag] = false;

        function baseIsTypedArray(value) {
          return (
            isObjectLike(value) &&
            isLength(value.length) &&
            !!typedArrayTags[baseGetTag(value)]
          );
        }

        module.exports = baseIsTypedArray;

        /***/
      },
      /* 290 */
      /***/ function(module, exports, __webpack_require__) {
        var isPrototype = __webpack_require__(66),
          nativeKeys = __webpack_require__(291);

        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;

        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }

          var result = [];

          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result.push(key);
            }
          }

          return result;
        }

        module.exports = baseKeys;

        /***/
      },
      /* 291 */
      /***/ function(module, exports, __webpack_require__) {
        var overArg = __webpack_require__(114);

        var nativeKeys = overArg(Object.keys, Object);
        module.exports = nativeKeys;

        /***/
      },
      /* 292 */
      /***/ function(module, exports, __webpack_require__) {
        var copyObject = __webpack_require__(31),
          keysIn = __webpack_require__(42);

        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }

        module.exports = baseAssignIn;

        /***/
      },
      /* 293 */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(15),
          isPrototype = __webpack_require__(66),
          nativeKeysIn = __webpack_require__(294);

        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;

        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }

          var isProto = isPrototype(object),
            result = [];

          for (var key in object) {
            if (
              !(
                key == "constructor" &&
                (isProto || !hasOwnProperty.call(object, key))
              )
            ) {
              result.push(key);
            }
          }

          return result;
        }

        module.exports = baseKeysIn;

        /***/
      },
      /* 294 */
      /***/ function(module, exports) {
        function nativeKeysIn(object) {
          var result = [];

          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }

          return result;
        }

        module.exports = nativeKeysIn;

        /***/
      },
      /* 295 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(module) {
          var root = __webpack_require__(9);

          var freeExports =
            typeof exports == "object" &&
            exports &&
            !exports.nodeType &&
            exports;
          var freeModule =
            freeExports &&
            typeof module == "object" &&
            module &&
            !module.nodeType &&
            module;
          var moduleExports = freeModule && freeModule.exports === freeExports;
          var Buffer = moduleExports ? root.Buffer : undefined,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }

            var length = buffer.length,
              result = allocUnsafe
                ? allocUnsafe(length)
                : new buffer.constructor(length);
            buffer.copy(result);
            return result;
          }

          module.exports = cloneBuffer;
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(26)(module)));

        /***/
      },
      /* 296 */
      /***/ function(module, exports, __webpack_require__) {
        var copyObject = __webpack_require__(31),
          getSymbols = __webpack_require__(67);

        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }

        module.exports = copySymbols;

        /***/
      },
      /* 297 */
      /***/ function(module, exports) {
        function arrayFilter(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

          while (++index < length) {
            var value = array[index];

            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }

          return result;
        }

        module.exports = arrayFilter;

        /***/
      },
      /* 298 */
      /***/ function(module, exports, __webpack_require__) {
        var copyObject = __webpack_require__(31),
          getSymbolsIn = __webpack_require__(117);

        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }

        module.exports = copySymbolsIn;

        /***/
      },
      /* 299 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGetAllKeys = __webpack_require__(119),
          getSymbolsIn = __webpack_require__(117),
          keysIn = __webpack_require__(42);

        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }

        module.exports = getAllKeysIn;

        /***/
      },
      /* 300 */
      /***/ function(module, exports, __webpack_require__) {
        var getNative = __webpack_require__(17),
          root = __webpack_require__(9);

        var DataView = getNative(root, "DataView");
        module.exports = DataView;

        /***/
      },
      /* 301 */
      /***/ function(module, exports, __webpack_require__) {
        var getNative = __webpack_require__(17),
          root = __webpack_require__(9);

        var Promise = getNative(root, "Promise");
        module.exports = Promise;

        /***/
      },
      /* 302 */
      /***/ function(module, exports, __webpack_require__) {
        var getNative = __webpack_require__(17),
          root = __webpack_require__(9);

        var WeakMap = getNative(root, "WeakMap");
        module.exports = WeakMap;

        /***/
      },
      /* 303 */
      /***/ function(module, exports) {
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;

        function initCloneArray(array) {
          var length = array.length,
            result = new array.constructor(length);

          if (
            length &&
            typeof array[0] == "string" &&
            hasOwnProperty.call(array, "index")
          ) {
            result.index = array.index;
            result.input = array.input;
          }

          return result;
        }

        module.exports = initCloneArray;

        /***/
      },
      /* 304 */
      /***/ function(module, exports, __webpack_require__) {
        var cloneArrayBuffer = __webpack_require__(70),
          cloneDataView = __webpack_require__(305),
          cloneRegExp = __webpack_require__(306),
          cloneSymbol = __webpack_require__(307),
          cloneTypedArray = __webpack_require__(308);

        var boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          symbolTag = "[object Symbol]";
        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]",
          float32Tag = "[object Float32Array]",
          float64Tag = "[object Float64Array]",
          int8Tag = "[object Int8Array]",
          int16Tag = "[object Int16Array]",
          int32Tag = "[object Int32Array]",
          uint8Tag = "[object Uint8Array]",
          uint8ClampedTag = "[object Uint8ClampedArray]",
          uint16Tag = "[object Uint16Array]",
          uint32Tag = "[object Uint32Array]";

        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;

          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);

            case boolTag:
            case dateTag:
              return new Ctor(+object);

            case dataViewTag:
              return cloneDataView(object, isDeep);

            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);

            case mapTag:
              return new Ctor();

            case numberTag:
            case stringTag:
              return new Ctor(object);

            case regexpTag:
              return cloneRegExp(object);

            case setTag:
              return new Ctor();

            case symbolTag:
              return cloneSymbol(object);
          }
        }

        module.exports = initCloneByTag;

        /***/
      },
      /* 305 */
      /***/ function(module, exports, __webpack_require__) {
        var cloneArrayBuffer = __webpack_require__(70);

        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(dataView.buffer)
            : dataView.buffer;
          return new dataView.constructor(
            buffer,
            dataView.byteOffset,
            dataView.byteLength
          );
        }

        module.exports = cloneDataView;

        /***/
      },
      /* 306 */
      /***/ function(module, exports) {
        var reFlags = /\w*$/;

        function cloneRegExp(regexp) {
          var result = new regexp.constructor(
            regexp.source,
            reFlags.exec(regexp)
          );
          result.lastIndex = regexp.lastIndex;
          return result;
        }

        module.exports = cloneRegExp;

        /***/
      },
      /* 307 */
      /***/ function(module, exports, __webpack_require__) {
        var Symbol = __webpack_require__(24);

        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }

        module.exports = cloneSymbol;

        /***/
      },
      /* 308 */
      /***/ function(module, exports, __webpack_require__) {
        var cloneArrayBuffer = __webpack_require__(70);

        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(typedArray.buffer)
            : typedArray.buffer;
          return new typedArray.constructor(
            buffer,
            typedArray.byteOffset,
            typedArray.length
          );
        }

        module.exports = cloneTypedArray;

        /***/
      },
      /* 309 */
      /***/ function(module, exports, __webpack_require__) {
        var baseCreate = __webpack_require__(310),
          getPrototype = __webpack_require__(69),
          isPrototype = __webpack_require__(66);

        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object)
            ? baseCreate(getPrototype(object))
            : {};
        }

        module.exports = initCloneObject;

        /***/
      },
      /* 310 */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(15);

        var objectCreate = Object.create;

        var baseCreate = (function() {
          function object() {}

          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }

            if (objectCreate) {
              return objectCreate(proto);
            }

            object.prototype = proto;
            var result = new object();
            object.prototype = undefined;
            return result;
          };
        })();

        module.exports = baseCreate;

        /***/
      },
      /* 311 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIsMap = __webpack_require__(312),
          baseUnary = __webpack_require__(27),
          nodeUtil = __webpack_require__(41);

        var nodeIsMap = nodeUtil && nodeUtil.isMap;
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        module.exports = isMap;

        /***/
      },
      /* 312 */
      /***/ function(module, exports, __webpack_require__) {
        var getTag = __webpack_require__(43),
          isObjectLike = __webpack_require__(10);

        var mapTag = "[object Map]";

        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }

        module.exports = baseIsMap;

        /***/
      },
      /* 313 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIsSet = __webpack_require__(314),
          baseUnary = __webpack_require__(27),
          nodeUtil = __webpack_require__(41);

        var nodeIsSet = nodeUtil && nodeUtil.isSet;
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        module.exports = isSet;

        /***/
      },
      /* 314 */
      /***/ function(module, exports, __webpack_require__) {
        var getTag = __webpack_require__(43),
          isObjectLike = __webpack_require__(10);

        var setTag = "[object Set]";

        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }

        module.exports = baseIsSet;

        /***/
      },
      /* 315 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var fastProto = null;

        function FastObject(o) {
          if (fastProto !== null && typeof fastProto.property) {
            var result = fastProto;
            fastProto = FastObject.prototype = null;
            return result;
          }

          fastProto = FastObject.prototype =
            o == null ? Object.create(null) : o;
          return new FastObject();
        }

        FastObject();

        module.exports = function toFastproperties(o) {
          return FastObject(o);
        };

        /***/
      },
      /* 316 */
      /***/ function(module, exports) {
        (function() {
          "use strict";

          function isExpression(node) {
            if (node == null) {
              return false;
            }

            switch (node.type) {
              case "ArrayExpression":
              case "AssignmentExpression":
              case "BinaryExpression":
              case "CallExpression":
              case "ConditionalExpression":
              case "FunctionExpression":
              case "Identifier":
              case "Literal":
              case "LogicalExpression":
              case "MemberExpression":
              case "NewExpression":
              case "ObjectExpression":
              case "SequenceExpression":
              case "ThisExpression":
              case "UnaryExpression":
              case "UpdateExpression":
                return true;
            }

            return false;
          }

          function isIterationStatement(node) {
            if (node == null) {
              return false;
            }

            switch (node.type) {
              case "DoWhileStatement":
              case "ForInStatement":
              case "ForStatement":
              case "WhileStatement":
                return true;
            }

            return false;
          }

          function isStatement(node) {
            if (node == null) {
              return false;
            }

            switch (node.type) {
              case "BlockStatement":
              case "BreakStatement":
              case "ContinueStatement":
              case "DebuggerStatement":
              case "DoWhileStatement":
              case "EmptyStatement":
              case "ExpressionStatement":
              case "ForInStatement":
              case "ForStatement":
              case "IfStatement":
              case "LabeledStatement":
              case "ReturnStatement":
              case "SwitchStatement":
              case "ThrowStatement":
              case "TryStatement":
              case "VariableDeclaration":
              case "WhileStatement":
              case "WithStatement":
                return true;
            }

            return false;
          }

          function isSourceElement(node) {
            return (
              isStatement(node) ||
              (node != null && node.type === "FunctionDeclaration")
            );
          }

          function trailingStatement(node) {
            switch (node.type) {
              case "IfStatement":
                if (node.alternate != null) {
                  return node.alternate;
                }

                return node.consequent;

              case "LabeledStatement":
              case "ForStatement":
              case "ForInStatement":
              case "WhileStatement":
              case "WithStatement":
                return node.body;
            }

            return null;
          }

          function isProblematicIfStatement(node) {
            var current;

            if (node.type !== "IfStatement") {
              return false;
            }

            if (node.alternate == null) {
              return false;
            }

            current = node.consequent;

            do {
              if (current.type === "IfStatement") {
                if (current.alternate == null) {
                  return true;
                }
              }

              current = trailingStatement(current);
            } while (current);

            return false;
          }

          module.exports = {
            isExpression: isExpression,
            isStatement: isStatement,
            isIterationStatement: isIterationStatement,
            isSourceElement: isSourceElement,
            isProblematicIfStatement: isProblematicIfStatement,
            trailingStatement: trailingStatement
          };
        })();

        /***/
      },
      /* 317 */
      /***/ function(module, exports, __webpack_require__) {
        (function() {
          "use strict";

          var code = __webpack_require__(122);

          function isStrictModeReservedWordES6(id) {
            switch (id) {
              case "implements":
              case "interface":
              case "package":
              case "private":
              case "protected":
              case "public":
              case "static":
              case "let":
                return true;

              default:
                return false;
            }
          }

          function isKeywordES5(id, strict) {
            if (!strict && id === "yield") {
              return false;
            }

            return isKeywordES6(id, strict);
          }

          function isKeywordES6(id, strict) {
            if (strict && isStrictModeReservedWordES6(id)) {
              return true;
            }

            switch (id.length) {
              case 2:
                return id === "if" || id === "in" || id === "do";

              case 3:
                return (
                  id === "var" || id === "for" || id === "new" || id === "try"
                );

              case 4:
                return (
                  id === "this" ||
                  id === "else" ||
                  id === "case" ||
                  id === "void" ||
                  id === "with" ||
                  id === "enum"
                );

              case 5:
                return (
                  id === "while" ||
                  id === "break" ||
                  id === "catch" ||
                  id === "throw" ||
                  id === "const" ||
                  id === "yield" ||
                  id === "class" ||
                  id === "super"
                );

              case 6:
                return (
                  id === "return" ||
                  id === "typeof" ||
                  id === "delete" ||
                  id === "switch" ||
                  id === "export" ||
                  id === "import"
                );

              case 7:
                return id === "default" || id === "finally" || id === "extends";

              case 8:
                return (
                  id === "function" || id === "continue" || id === "debugger"
                );

              case 10:
                return id === "instanceof";

              default:
                return false;
            }
          }

          function isReservedWordES5(id, strict) {
            return (
              id === "null" ||
              id === "true" ||
              id === "false" ||
              isKeywordES5(id, strict)
            );
          }

          function isReservedWordES6(id, strict) {
            return (
              id === "null" ||
              id === "true" ||
              id === "false" ||
              isKeywordES6(id, strict)
            );
          }

          function isRestrictedWord(id) {
            return id === "eval" || id === "arguments";
          }

          function isIdentifierNameES5(id) {
            var i, iz, ch;

            if (id.length === 0) {
              return false;
            }

            ch = id.charCodeAt(0);

            if (!code.isIdentifierStartES5(ch)) {
              return false;
            }

            for (i = 1, iz = id.length; i < iz; ++i) {
              ch = id.charCodeAt(i);

              if (!code.isIdentifierPartES5(ch)) {
                return false;
              }
            }

            return true;
          }

          function decodeUtf16(lead, trail) {
            return (lead - 0xd800) * 0x400 + (trail - 0xdc00) + 0x10000;
          }

          function isIdentifierNameES6(id) {
            var i, iz, ch, lowCh, check;

            if (id.length === 0) {
              return false;
            }

            check = code.isIdentifierStartES6;

            for (i = 0, iz = id.length; i < iz; ++i) {
              ch = id.charCodeAt(i);

              if (0xd800 <= ch && ch <= 0xdbff) {
                ++i;

                if (i >= iz) {
                  return false;
                }

                lowCh = id.charCodeAt(i);

                if (!(0xdc00 <= lowCh && lowCh <= 0xdfff)) {
                  return false;
                }

                ch = decodeUtf16(ch, lowCh);
              }

              if (!check(ch)) {
                return false;
              }

              check = code.isIdentifierPartES6;
            }

            return true;
          }

          function isIdentifierES5(id, strict) {
            return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
          }

          function isIdentifierES6(id, strict) {
            return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
          }

          module.exports = {
            isKeywordES5: isKeywordES5,
            isKeywordES6: isKeywordES6,
            isReservedWordES5: isReservedWordES5,
            isReservedWordES6: isReservedWordES6,
            isRestrictedWord: isRestrictedWord,
            isIdentifierNameES5: isIdentifierNameES5,
            isIdentifierNameES6: isIdentifierNameES6,
            isIdentifierES5: isIdentifierES5,
            isIdentifierES6: isIdentifierES6
          };
        })();

        /***/
      },
      /* 318 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var _utils = _interopRequireWildcard(__webpack_require__(16));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var defineInterfaceishType = function defineInterfaceishType(
          name,
          typeParameterType
        ) {
          if (typeParameterType === void 0) {
            typeParameterType = "TypeParameterDeclaration";
          }

          (0, _utils.default)(name, {
            builder: ["id", "typeParameters", "extends", "body"],
            visitor: [
              "id",
              "typeParameters",
              "extends",
              "mixins",
              "implements",
              "body"
            ],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
            fields: {
              id: (0, _utils.validateType)("Identifier"),
              typeParameters: (0, _utils.validateOptionalType)(
                typeParameterType
              ),
              extends: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("InterfaceExtends")
              ),
              mixins: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("InterfaceExtends")
              ),
              implements: (0, _utils.validateOptional)(
                (0, _utils.arrayOfType)("ClassImplements")
              ),
              body: (0, _utils.validateType)("ObjectTypeAnnotation")
            }
          });
        };

        (0, _utils.default)("AnyTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
        });
        (0, _utils.default)("ArrayTypeAnnotation", {
          visitor: ["elementType"],
          aliases: ["Flow", "FlowType"],
          fields: {
            elementType: (0, _utils.validateType)("FlowType")
          }
        });
        (0, _utils.default)("BooleanTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
        });
        (0, _utils.default)("BooleanLiteralTypeAnnotation", {
          builder: ["value"],
          aliases: ["Flow", "FlowType"],
          fields: {
            value: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
          }
        });
        (0, _utils.default)("NullLiteralTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
        });
        (0, _utils.default)("ClassImplements", {
          visitor: ["id", "typeParameters"],
          aliases: ["Flow"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterInstantiation"
            )
          }
        });
        defineInterfaceishType("DeclareClass", "TypeParameterInstantiation");
        (0, _utils.default)("DeclareFunction", {
          visitor: ["id"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            predicate: (0, _utils.validateOptionalType)("DeclaredPredicate")
          }
        });
        defineInterfaceishType("DeclareInterface");
        (0, _utils.default)("DeclareModule", {
          builder: ["id", "body", "kind"],
          visitor: ["id", "body"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
            body: (0, _utils.validateType)("BlockStatement"),
            kind: (0, _utils.validateOptional)(
              (0, _utils.assertOneOf)("CommonJS", "ES")
            )
          }
        });
        (0, _utils.default)("DeclareModuleExports", {
          visitor: ["typeAnnotation"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
          }
        });
        (0, _utils.default)("DeclareTypeAlias", {
          visitor: ["id", "typeParameters", "right"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterDeclaration"
            ),
            right: (0, _utils.validateType)("FlowType")
          }
        });
        (0, _utils.default)("DeclareOpaqueType", {
          visitor: ["id", "typeParameters", "supertype"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterDeclaration"
            ),
            supertype: (0, _utils.validateOptionalType)("FlowType")
          }
        });
        (0, _utils.default)("DeclareVariable", {
          visitor: ["id"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier")
          }
        });
        (0, _utils.default)("DeclareExportDeclaration", {
          visitor: ["declaration", "specifiers", "source"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            declaration: (0, _utils.validateOptionalType)("Flow"),
            specifiers: (0, _utils.validateOptional)(
              (0, _utils.arrayOfType)([
                "ExportSpecifier",
                "ExportNamespaceSpecifier"
              ])
            ),
            source: (0, _utils.validateOptionalType)("StringLiteral"),
            default: (0, _utils.validateOptional)(
              (0, _utils.assertValueType)("boolean")
            )
          }
        });
        (0, _utils.default)("DeclareExportAllDeclaration", {
          visitor: ["source"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            source: (0, _utils.validateType)("StringLiteral"),
            exportKind: (0, _utils.validateOptional)(
              (0, _utils.assertOneOf)(["type", "value"])
            )
          }
        });
        (0, _utils.default)("DeclaredPredicate", {
          visitor: ["value"],
          aliases: ["Flow", "FlowPredicate"],
          fields: {
            value: (0, _utils.validateType)("Flow")
          }
        });
        (0, _utils.default)("ExistsTypeAnnotation", {
          aliases: ["Flow", "FlowType"]
        });
        (0, _utils.default)("FunctionTypeAnnotation", {
          visitor: ["typeParameters", "params", "rest", "returnType"],
          aliases: ["Flow", "FlowType"],
          fields: {
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterDeclaration"
            ),
            params: (0, _utils.validate)(
              (0, _utils.arrayOfType)("FunctionTypeParam")
            ),
            rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
            returnType: (0, _utils.validateType)("FlowType")
          }
        });
        (0, _utils.default)("FunctionTypeParam", {
          visitor: ["name", "typeAnnotation"],
          aliases: ["Flow"],
          fields: {
            name: (0, _utils.validateOptionalType)("Identifier"),
            typeAnnotation: (0, _utils.validateType)("FlowType"),
            optional: (0, _utils.validateOptional)(
              (0, _utils.assertValueType)("boolean")
            )
          }
        });
        (0, _utils.default)("GenericTypeAnnotation", {
          visitor: ["id", "typeParameters"],
          aliases: ["Flow", "FlowType"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterInstantiation"
            )
          }
        });
        (0, _utils.default)("InferredPredicate", {
          aliases: ["Flow", "FlowPredicate"]
        });
        (0, _utils.default)("InterfaceExtends", {
          visitor: ["id", "typeParameters"],
          aliases: ["Flow"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterInstantiation"
            )
          }
        });
        defineInterfaceishType("InterfaceDeclaration");
        (0, _utils.default)("IntersectionTypeAnnotation", {
          visitor: ["types"],
          aliases: ["Flow", "FlowType"],
          fields: {
            types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
          }
        });
        (0, _utils.default)("MixedTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
        });
        (0, _utils.default)("EmptyTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
        });
        (0, _utils.default)("NullableTypeAnnotation", {
          visitor: ["typeAnnotation"],
          aliases: ["Flow", "FlowType"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("FlowType")
          }
        });
        (0, _utils.default)("NumberLiteralTypeAnnotation", {
          builder: ["value"],
          aliases: ["Flow", "FlowType"],
          fields: {
            value: (0, _utils.validate)((0, _utils.assertValueType)("number"))
          }
        });
        (0, _utils.default)("NumberTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
        });
        (0, _utils.default)("ObjectTypeAnnotation", {
          visitor: ["properties", "indexers", "callProperties"],
          aliases: ["Flow", "FlowType"],
          builder: ["properties", "indexers", "callProperties", "exact"],
          fields: {
            properties: (0, _utils.validate)(
              (0, _utils.arrayOfType)([
                "ObjectTypeProperty",
                "ObjectTypeSpreadProperty"
              ])
            ),
            indexers: (0, _utils.validateOptional)(
              (0, _utils.arrayOfType)("ObjectTypeIndexer")
            ),
            callProperties: (0, _utils.validateOptional)(
              (0, _utils.arrayOfType)("ObjectTypeCallProperty")
            ),
            exact: {
              validate: (0, _utils.assertValueType)("boolean"),
              default: false
            }
          }
        });
        (0, _utils.default)("ObjectTypeCallProperty", {
          visitor: ["value"],
          aliases: ["Flow", "UserWhitespacable"],
          fields: {
            value: (0, _utils.validateType)("FlowType"),
            static: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
          }
        });
        (0, _utils.default)("ObjectTypeIndexer", {
          visitor: ["id", "key", "value", "variance"],
          aliases: ["Flow", "UserWhitespacable"],
          fields: {
            id: (0, _utils.validateOptionalType)("Identifier"),
            key: (0, _utils.validateType)("FlowType"),
            value: (0, _utils.validateType)("FlowType"),
            static: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            variance: (0, _utils.validateOptionalType)("Variance")
          }
        });
        (0, _utils.default)("ObjectTypeProperty", {
          visitor: ["key", "value", "variance"],
          aliases: ["Flow", "UserWhitespacable"],
          fields: {
            key: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
            value: (0, _utils.validateType)("FlowType"),
            kind: (0, _utils.validate)(
              (0, _utils.assertOneOf)("init", "get", "set")
            ),
            static: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            optional: (0, _utils.validate)(
              (0, _utils.assertValueType)("boolean")
            ),
            variance: (0, _utils.validateOptionalType)("Variance")
          }
        });
        (0, _utils.default)("ObjectTypeSpreadProperty", {
          visitor: ["argument"],
          aliases: ["Flow", "UserWhitespacable"],
          fields: {
            argument: (0, _utils.validateType)("FlowType")
          }
        });
        (0, _utils.default)("OpaqueType", {
          visitor: ["id", "typeParameters", "supertype", "impltype"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterDeclaration"
            ),
            supertype: (0, _utils.validateOptionalType)("FlowType"),
            impltype: (0, _utils.validateType)("FlowType")
          }
        });
        (0, _utils.default)("QualifiedTypeIdentifier", {
          visitor: ["id", "qualification"],
          aliases: ["Flow"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            qualification: (0, _utils.validateType)([
              "Identifier",
              "QualifiedTypeIdentifier"
            ])
          }
        });
        (0, _utils.default)("StringLiteralTypeAnnotation", {
          builder: ["value"],
          aliases: ["Flow", "FlowType"],
          fields: {
            value: (0, _utils.validate)((0, _utils.assertValueType)("string"))
          }
        });
        (0, _utils.default)("StringTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
        });
        (0, _utils.default)("ThisTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
        });
        (0, _utils.default)("TupleTypeAnnotation", {
          visitor: ["types"],
          aliases: ["Flow", "FlowType"],
          fields: {
            types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
          }
        });
        (0, _utils.default)("TypeofTypeAnnotation", {
          visitor: ["argument"],
          aliases: ["Flow", "FlowType"],
          fields: {
            argument: (0, _utils.validateType)("FlowType")
          }
        });
        (0, _utils.default)("TypeAlias", {
          visitor: ["id", "typeParameters", "right"],
          aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
          fields: {
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TypeParameterDeclaration"
            ),
            right: (0, _utils.validateType)("FlowType")
          }
        });
        (0, _utils.default)("TypeAnnotation", {
          aliases: ["Flow"],
          visitor: ["typeAnnotation"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("FlowType")
          }
        });
        (0, _utils.default)("TypeCastExpression", {
          visitor: ["expression", "typeAnnotation"],
          aliases: ["Flow", "ExpressionWrapper", "Expression"],
          fields: {
            expression: (0, _utils.validateType)("Expression"),
            typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
          }
        });
        (0, _utils.default)("TypeParameter", {
          aliases: ["Flow"],
          visitor: ["bound", "default", "variance"],
          fields: {
            name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
            bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
            default: (0, _utils.validateOptionalType)("FlowType"),
            variance: (0, _utils.validateOptionalType)("Variance")
          }
        });
        (0, _utils.default)("TypeParameterDeclaration", {
          aliases: ["Flow"],
          visitor: ["params"],
          fields: {
            params: (0, _utils.validate)(
              (0, _utils.arrayOfType)("TypeParameter")
            )
          }
        });
        (0, _utils.default)("TypeParameterInstantiation", {
          aliases: ["Flow"],
          visitor: ["params"],
          fields: {
            params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
          }
        });
        (0, _utils.default)("UnionTypeAnnotation", {
          visitor: ["types"],
          aliases: ["Flow", "FlowType"],
          fields: {
            types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
          }
        });
        (0, _utils.default)("Variance", {
          aliases: ["Flow"],
          builder: ["kind"],
          fields: {
            kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus"))
          }
        });
        (0, _utils.default)("VoidTypeAnnotation", {
          aliases: ["Flow", "FlowType", "FlowBaseAnnotation"]
        });

        /***/
      },
      /* 319 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var _utils = _interopRequireWildcard(__webpack_require__(16));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        (0, _utils.default)("JSXAttribute", {
          visitor: ["name", "value"],
          aliases: ["JSX", "Immutable"],
          fields: {
            name: {
              validate: (0, _utils.assertNodeType)(
                "JSXIdentifier",
                "JSXNamespacedName"
              )
            },
            value: {
              optional: true,
              validate: (0, _utils.assertNodeType)(
                "JSXElement",
                "JSXFragment",
                "StringLiteral",
                "JSXExpressionContainer"
              )
            }
          }
        });
        (0, _utils.default)("JSXClosingElement", {
          visitor: ["name"],
          aliases: ["JSX", "Immutable"],
          fields: {
            name: {
              validate: (0, _utils.assertNodeType)(
                "JSXIdentifier",
                "JSXMemberExpression"
              )
            }
          }
        });
        (0, _utils.default)("JSXElement", {
          builder: [
            "openingElement",
            "closingElement",
            "children",
            "selfClosing"
          ],
          visitor: ["openingElement", "children", "closingElement"],
          aliases: ["JSX", "Immutable", "Expression"],
          fields: {
            openingElement: {
              validate: (0, _utils.assertNodeType)("JSXOpeningElement")
            },
            closingElement: {
              optional: true,
              validate: (0, _utils.assertNodeType)("JSXClosingElement")
            },
            children: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "JSXText",
                    "JSXExpressionContainer",
                    "JSXSpreadChild",
                    "JSXElement",
                    "JSXFragment"
                  )
                )
              )
            }
          }
        });
        (0, _utils.default)("JSXEmptyExpression", {
          aliases: ["JSX"]
        });
        (0, _utils.default)("JSXExpressionContainer", {
          visitor: ["expression"],
          aliases: ["JSX", "Immutable"],
          fields: {
            expression: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          }
        });
        (0, _utils.default)("JSXSpreadChild", {
          visitor: ["expression"],
          aliases: ["JSX", "Immutable"],
          fields: {
            expression: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          }
        });
        (0, _utils.default)("JSXIdentifier", {
          builder: ["name"],
          aliases: ["JSX"],
          fields: {
            name: {
              validate: (0, _utils.assertValueType)("string")
            }
          }
        });
        (0, _utils.default)("JSXMemberExpression", {
          visitor: ["object", "property"],
          aliases: ["JSX"],
          fields: {
            object: {
              validate: (0, _utils.assertNodeType)(
                "JSXMemberExpression",
                "JSXIdentifier"
              )
            },
            property: {
              validate: (0, _utils.assertNodeType)("JSXIdentifier")
            }
          }
        });
        (0, _utils.default)("JSXNamespacedName", {
          visitor: ["namespace", "name"],
          aliases: ["JSX"],
          fields: {
            namespace: {
              validate: (0, _utils.assertNodeType)("JSXIdentifier")
            },
            name: {
              validate: (0, _utils.assertNodeType)("JSXIdentifier")
            }
          }
        });
        (0, _utils.default)("JSXOpeningElement", {
          builder: ["name", "attributes", "selfClosing"],
          visitor: ["name", "attributes"],
          aliases: ["JSX", "Immutable"],
          fields: {
            name: {
              validate: (0, _utils.assertNodeType)(
                "JSXIdentifier",
                "JSXMemberExpression"
              )
            },
            selfClosing: {
              default: false,
              validate: (0, _utils.assertValueType)("boolean")
            },
            attributes: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "JSXAttribute",
                    "JSXSpreadAttribute"
                  )
                )
              )
            }
          }
        });
        (0, _utils.default)("JSXSpreadAttribute", {
          visitor: ["argument"],
          aliases: ["JSX"],
          fields: {
            argument: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          }
        });
        (0, _utils.default)("JSXText", {
          aliases: ["JSX", "Immutable"],
          builder: ["value"],
          fields: {
            value: {
              validate: (0, _utils.assertValueType)("string")
            }
          }
        });
        (0, _utils.default)("JSXFragment", {
          builder: ["openingFragment", "closingFragment", "children"],
          visitor: ["openingFragment", "children", "closingFragment"],
          aliases: ["JSX", "Immutable", "Expression"],
          fields: {
            openingFragment: {
              validate: (0, _utils.assertNodeType)("JSXOpeningFragment")
            },
            closingFragment: {
              validate: (0, _utils.assertNodeType)("JSXClosingFragment")
            },
            children: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "JSXText",
                    "JSXExpressionContainer",
                    "JSXSpreadChild",
                    "JSXElement",
                    "JSXFragment"
                  )
                )
              )
            }
          }
        });
        (0, _utils.default)("JSXOpeningFragment", {
          aliases: ["JSX", "Immutable"]
        });
        (0, _utils.default)("JSXClosingFragment", {
          aliases: ["JSX", "Immutable"]
        });

        /***/
      },
      /* 320 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var _utils = _interopRequireWildcard(__webpack_require__(16));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        (0, _utils.default)("Noop", {
          visitor: []
        });
        (0, _utils.default)("ParenthesizedExpression", {
          visitor: ["expression"],
          aliases: ["Expression", "ExpressionWrapper"],
          fields: {
            expression: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          }
        });

        /***/
      },
      /* 321 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var _utils = _interopRequireWildcard(__webpack_require__(16));

        var _es = __webpack_require__(75);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);

            if (typeof Object.getOwnPropertySymbols === "function") {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym
                  ).enumerable;
                })
              );
            }

            ownKeys.forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          }

          return target;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        (0, _utils.default)("AwaitExpression", {
          builder: ["argument"],
          visitor: ["argument"],
          aliases: ["Expression", "Terminatorless"],
          fields: {
            argument: {
              validate: (0, _utils.assertNodeType)("Expression")
            }
          }
        });
        (0, _utils.default)("BindExpression", {
          visitor: ["object", "callee"],
          aliases: ["Expression"],
          fields: {}
        });
        (0, _utils.default)("ClassProperty", {
          visitor: ["key", "value", "typeAnnotation", "decorators"],
          builder: ["key", "value", "typeAnnotation", "decorators", "computed"],
          aliases: ["Property"],
          fields: _objectSpread({}, _es.classMethodOrPropertyCommon, {
            value: {
              validate: (0, _utils.assertNodeType)("Expression"),
              optional: true
            },
            definite: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true
            },
            typeAnnotation: {
              validate: (0, _utils.assertNodeType)(
                "TypeAnnotation",
                "TSTypeAnnotation",
                "Noop"
              ),
              optional: true
            },
            decorators: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))
              ),
              optional: true
            },
            readonly: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true
            }
          })
        });
        (0, _utils.default)("OptionalMemberExpression", {
          builder: ["object", "property", "computed", "optional"],
          visitor: ["object", "property"],
          aliases: ["Expression"],
          fields: {
            object: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            property: {
              validate: (function() {
                var normal = (0, _utils.assertNodeType)("Identifier");
                var computed = (0, _utils.assertNodeType)("Expression");
                return function(node, key, val) {
                  var validator = node.computed ? computed : normal;
                  validator(node, key, val);
                };
              })()
            },
            computed: {
              default: false
            },
            optional: {
              validate: (0, _utils.assertValueType)("boolean")
            }
          }
        });
        (0, _utils.default)("OptionalCallExpression", {
          visitor: ["callee", "arguments", "typeParameters"],
          builder: ["callee", "arguments", "optional"],
          aliases: ["Expression"],
          fields: {
            callee: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            arguments: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)(
                    "Expression",
                    "SpreadElement",
                    "JSXNamespacedName"
                  )
                )
              )
            },
            optional: {
              validate: (0, _utils.assertValueType)("boolean")
            },
            typeParameters: {
              validate: (0, _utils.assertNodeType)(
                "TypeParameterInstantiation",
                "TSTypeParameterInstantiation"
              ),
              optional: true
            }
          }
        });
        (0, _utils.default)("ClassPrivateProperty", {
          visitor: ["key", "value"],
          builder: ["key", "value"],
          aliases: ["Property", "Private"],
          fields: {
            key: {
              validate: (0, _utils.assertNodeType)("PrivateName")
            },
            value: {
              validate: (0, _utils.assertNodeType)("Expression"),
              optional: true
            }
          }
        });
        (0, _utils.default)("Import", {
          aliases: ["Expression"]
        });
        (0, _utils.default)("Decorator", {
          visitor: ["callee", "arguments"],
          fields: {
            callee: {
              validate: (0, _utils.assertNodeType)("Expression")
            },
            arguments: {
              optional: true,
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)("Expression", "SpreadElement")
                )
              )
            }
          }
        });
        (0, _utils.default)("DoExpression", {
          visitor: ["body"],
          aliases: ["Expression"],
          fields: {
            body: {
              validate: (0, _utils.assertNodeType)("BlockStatement")
            }
          }
        });
        (0, _utils.default)("ExportDefaultSpecifier", {
          visitor: ["exported"],
          aliases: ["ModuleSpecifier"],
          fields: {
            exported: {
              validate: (0, _utils.assertNodeType)("Identifier")
            }
          }
        });
        (0, _utils.default)("ExportNamespaceSpecifier", {
          visitor: ["exported"],
          aliases: ["ModuleSpecifier"],
          fields: {
            exported: {
              validate: (0, _utils.assertNodeType)("Identifier")
            }
          }
        });
        (0, _utils.default)("PrivateName", {
          visitor: ["id"],
          aliases: ["Private"],
          fields: {
            id: {
              validate: (0, _utils.assertNodeType)("Identifier")
            }
          }
        });

        /***/
      },
      /* 322 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var _utils = _interopRequireWildcard(__webpack_require__(16));

        var _core = __webpack_require__(71);

        var _es = __webpack_require__(75);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);

            if (typeof Object.getOwnPropertySymbols === "function") {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym
                  ).enumerable;
                })
              );
            }

            ownKeys.forEach(function(key) {
              _defineProperty(target, key, source[key]);
            });
          }

          return target;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        var bool = (0, _utils.assertValueType)("boolean");
        var tSFunctionTypeAnnotationCommon = {
          returnType: {
            validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
            optional: true
          },
          typeParameters: {
            validate: (0, _utils.assertNodeType)(
              "TSTypeParameterDeclaration",
              "Noop"
            ),
            optional: true
          }
        };
        (0, _utils.default)("TSParameterProperty", {
          aliases: ["LVal"],
          visitor: ["parameter"],
          fields: {
            accessibility: {
              validate: (0, _utils.assertOneOf)(
                "public",
                "private",
                "protected"
              ),
              optional: true
            },
            readonly: {
              validate: (0, _utils.assertValueType)("boolean"),
              optional: true
            },
            parameter: {
              validate: (0, _utils.assertNodeType)(
                "Identifier",
                "AssignmentPattern"
              )
            }
          }
        });
        (0, _utils.default)("TSDeclareFunction", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "typeParameters", "params", "returnType"],
          fields: _objectSpread(
            {},
            _core.functionDeclarationCommon,
            tSFunctionTypeAnnotationCommon
          )
        });
        (0, _utils.default)("TSDeclareMethod", {
          visitor: [
            "decorators",
            "key",
            "typeParameters",
            "params",
            "returnType"
          ],
          fields: _objectSpread(
            {},
            _es.classMethodOrDeclareMethodCommon,
            tSFunctionTypeAnnotationCommon
          )
        });
        (0, _utils.default)("TSQualifiedName", {
          aliases: ["TSEntityName"],
          visitor: ["left", "right"],
          fields: {
            left: (0, _utils.validateType)("TSEntityName"),
            right: (0, _utils.validateType)("Identifier")
          }
        });
        var signatureDeclarationCommon = {
          typeParameters: (0, _utils.validateOptionalType)(
            "TSTypeParameterDeclaration"
          ),
          parameters: (0, _utils.validateArrayOfType)([
            "Identifier",
            "RestElement"
          ]),
          typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
        };
        var callConstructSignatureDeclaration = {
          aliases: ["TSTypeElement"],
          visitor: ["typeParameters", "parameters", "typeAnnotation"],
          fields: signatureDeclarationCommon
        };
        (0, _utils.default)(
          "TSCallSignatureDeclaration",
          callConstructSignatureDeclaration
        );
        (0, _utils.default)(
          "TSConstructSignatureDeclaration",
          callConstructSignatureDeclaration
        );
        var namedTypeElementCommon = {
          key: (0, _utils.validateType)("Expression"),
          computed: (0, _utils.validate)(bool),
          optional: (0, _utils.validateOptional)(bool)
        };
        (0, _utils.default)("TSPropertySignature", {
          aliases: ["TSTypeElement"],
          visitor: ["key", "typeAnnotation", "initializer"],
          fields: _objectSpread({}, namedTypeElementCommon, {
            readonly: (0, _utils.validateOptional)(bool),
            typeAnnotation: (0, _utils.validateOptionalType)(
              "TSTypeAnnotation"
            ),
            initializer: (0, _utils.validateOptionalType)("Expression")
          })
        });
        (0, _utils.default)("TSMethodSignature", {
          aliases: ["TSTypeElement"],
          visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
          fields: _objectSpread(
            {},
            signatureDeclarationCommon,
            namedTypeElementCommon
          )
        });
        (0, _utils.default)("TSIndexSignature", {
          aliases: ["TSTypeElement"],
          visitor: ["parameters", "typeAnnotation"],
          fields: {
            readonly: (0, _utils.validateOptional)(bool),
            parameters: (0, _utils.validateArrayOfType)("Identifier"),
            typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
          }
        });
        var tsKeywordTypes = [
          "TSAnyKeyword",
          "TSNumberKeyword",
          "TSObjectKeyword",
          "TSBooleanKeyword",
          "TSStringKeyword",
          "TSSymbolKeyword",
          "TSVoidKeyword",
          "TSUndefinedKeyword",
          "TSNullKeyword",
          "TSNeverKeyword"
        ];

        for (var _i = 0; _i < tsKeywordTypes.length; _i++) {
          var type = tsKeywordTypes[_i];
          (0, _utils.default)(type, {
            aliases: ["TSType"],
            visitor: [],
            fields: {}
          });
        }

        (0, _utils.default)("TSThisType", {
          aliases: ["TSType"],
          visitor: [],
          fields: {}
        });
        var fnOrCtr = {
          aliases: ["TSType"],
          visitor: ["typeParameters", "typeAnnotation"],
          fields: signatureDeclarationCommon
        };
        (0, _utils.default)("TSFunctionType", fnOrCtr);
        (0, _utils.default)("TSConstructorType", fnOrCtr);
        (0, _utils.default)("TSTypeReference", {
          aliases: ["TSType"],
          visitor: ["typeName", "typeParameters"],
          fields: {
            typeName: (0, _utils.validateType)("TSEntityName"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TSTypeParameterInstantiation"
            )
          }
        });
        (0, _utils.default)("TSTypePredicate", {
          aliases: ["TSType"],
          visitor: ["parameterName", "typeAnnotation"],
          fields: {
            parameterName: (0, _utils.validateType)([
              "Identifier",
              "TSThisType"
            ]),
            typeAnnotation: (0, _utils.validateType)("TSTypeAnnotation")
          }
        });
        (0, _utils.default)("TSTypeQuery", {
          aliases: ["TSType"],
          visitor: ["exprName"],
          fields: {
            exprName: (0, _utils.validateType)("TSEntityName")
          }
        });
        (0, _utils.default)("TSTypeLiteral", {
          aliases: ["TSType"],
          visitor: ["members"],
          fields: {
            members: (0, _utils.validateArrayOfType)("TSTypeElement")
          }
        });
        (0, _utils.default)("TSArrayType", {
          aliases: ["TSType"],
          visitor: ["elementType"],
          fields: {
            elementType: (0, _utils.validateType)("TSType")
          }
        });
        (0, _utils.default)("TSTupleType", {
          aliases: ["TSType"],
          visitor: ["elementTypes"],
          fields: {
            elementTypes: (0, _utils.validateArrayOfType)("TSType")
          }
        });
        var unionOrIntersection = {
          aliases: ["TSType"],
          visitor: ["types"],
          fields: {
            types: (0, _utils.validateArrayOfType)("TSType")
          }
        };
        (0, _utils.default)("TSUnionType", unionOrIntersection);
        (0, _utils.default)("TSIntersectionType", unionOrIntersection);
        (0, _utils.default)("TSConditionalType", {
          aliases: ["TSType"],
          visitor: ["checkType", "extendsType", "trueType", "falseType"],
          fields: {
            checkType: (0, _utils.validateType)("TSType"),
            extendsType: (0, _utils.validateType)("TSType"),
            trueType: (0, _utils.validateType)("TSType"),
            falseType: (0, _utils.validateType)("TSType")
          }
        });
        (0, _utils.default)("TSInferType", {
          aliases: ["TSType"],
          visitor: ["typeParameter"],
          fields: {
            typeParameter: (0, _utils.validateType)("TSType")
          }
        });
        (0, _utils.default)("TSParenthesizedType", {
          aliases: ["TSType"],
          visitor: ["typeAnnotation"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("TSType")
          }
        });
        (0, _utils.default)("TSTypeOperator", {
          aliases: ["TSType"],
          visitor: ["typeAnnotation"],
          fields: {
            operator: (0, _utils.validate)(
              (0, _utils.assertValueType)("string")
            ),
            typeAnnotation: (0, _utils.validateType)("TSType")
          }
        });
        (0, _utils.default)("TSIndexedAccessType", {
          aliases: ["TSType"],
          visitor: ["objectType", "indexType"],
          fields: {
            objectType: (0, _utils.validateType)("TSType"),
            indexType: (0, _utils.validateType)("TSType")
          }
        });
        (0, _utils.default)("TSMappedType", {
          aliases: ["TSType"],
          visitor: ["typeParameter", "typeAnnotation"],
          fields: {
            readonly: (0, _utils.validateOptional)(bool),
            typeParameter: (0, _utils.validateType)("TSTypeParameter"),
            optional: (0, _utils.validateOptional)(bool),
            typeAnnotation: (0, _utils.validateOptionalType)("TSType")
          }
        });
        (0, _utils.default)("TSLiteralType", {
          aliases: ["TSType"],
          visitor: ["literal"],
          fields: {
            literal: (0, _utils.validateType)([
              "NumericLiteral",
              "StringLiteral",
              "BooleanLiteral"
            ])
          }
        });
        (0, _utils.default)("TSExpressionWithTypeArguments", {
          aliases: ["TSType"],
          visitor: ["expression", "typeParameters"],
          fields: {
            expression: (0, _utils.validateType)("TSEntityName"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TSTypeParameterInstantiation"
            )
          }
        });
        (0, _utils.default)("TSInterfaceDeclaration", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "typeParameters", "extends", "body"],
          fields: {
            declare: (0, _utils.validateOptional)(bool),
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TSTypeParameterDeclaration"
            ),
            extends: (0, _utils.validateOptional)(
              (0, _utils.arrayOfType)("TSExpressionWithTypeArguments")
            ),
            body: (0, _utils.validateType)("TSInterfaceBody")
          }
        });
        (0, _utils.default)("TSInterfaceBody", {
          visitor: ["body"],
          fields: {
            body: (0, _utils.validateArrayOfType)("TSTypeElement")
          }
        });
        (0, _utils.default)("TSTypeAliasDeclaration", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "typeParameters", "typeAnnotation"],
          fields: {
            declare: (0, _utils.validateOptional)(bool),
            id: (0, _utils.validateType)("Identifier"),
            typeParameters: (0, _utils.validateOptionalType)(
              "TSTypeParameterDeclaration"
            ),
            typeAnnotation: (0, _utils.validateType)("TSType")
          }
        });
        (0, _utils.default)("TSAsExpression", {
          aliases: ["Expression"],
          visitor: ["expression", "typeAnnotation"],
          fields: {
            expression: (0, _utils.validateType)("Expression"),
            typeAnnotation: (0, _utils.validateType)("TSType")
          }
        });
        (0, _utils.default)("TSTypeAssertion", {
          aliases: ["Expression"],
          visitor: ["typeAnnotation", "expression"],
          fields: {
            typeAnnotation: (0, _utils.validateType)("TSType"),
            expression: (0, _utils.validateType)("Expression")
          }
        });
        (0, _utils.default)("TSEnumDeclaration", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "members"],
          fields: {
            declare: (0, _utils.validateOptional)(bool),
            const: (0, _utils.validateOptional)(bool),
            id: (0, _utils.validateType)("Identifier"),
            members: (0, _utils.validateArrayOfType)("TSEnumMember"),
            initializer: (0, _utils.validateOptionalType)("Expression")
          }
        });
        (0, _utils.default)("TSEnumMember", {
          visitor: ["id", "initializer"],
          fields: {
            id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
            initializer: (0, _utils.validateOptionalType)("Expression")
          }
        });
        (0, _utils.default)("TSModuleDeclaration", {
          aliases: ["Statement", "Declaration"],
          visitor: ["id", "body"],
          fields: {
            declare: (0, _utils.validateOptional)(bool),
            global: (0, _utils.validateOptional)(bool),
            id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
            body: (0, _utils.validateType)([
              "TSModuleBlock",
              "TSModuleDeclaration"
            ])
          }
        });
        (0, _utils.default)("TSModuleBlock", {
          visitor: ["body"],
          fields: {
            body: (0, _utils.validateArrayOfType)("Statement")
          }
        });
        (0, _utils.default)("TSImportEqualsDeclaration", {
          aliases: ["Statement"],
          visitor: ["id", "moduleReference"],
          fields: {
            isExport: (0, _utils.validate)(bool),
            id: (0, _utils.validateType)("Identifier"),
            moduleReference: (0, _utils.validateType)([
              "TSEntityName",
              "TSExternalModuleReference"
            ])
          }
        });
        (0, _utils.default)("TSExternalModuleReference", {
          visitor: ["expression"],
          fields: {
            expression: (0, _utils.validateType)("StringLiteral")
          }
        });
        (0, _utils.default)("TSNonNullExpression", {
          aliases: ["Expression"],
          visitor: ["expression"],
          fields: {
            expression: (0, _utils.validateType)("Expression")
          }
        });
        (0, _utils.default)("TSExportAssignment", {
          aliases: ["Statement"],
          visitor: ["expression"],
          fields: {
            expression: (0, _utils.validateType)("Expression")
          }
        });
        (0, _utils.default)("TSNamespaceExportDeclaration", {
          aliases: ["Statement"],
          visitor: ["id"],
          fields: {
            id: (0, _utils.validateType)("Identifier")
          }
        });
        (0, _utils.default)("TSTypeAnnotation", {
          visitor: ["typeAnnotation"],
          fields: {
            typeAnnotation: {
              validate: (0, _utils.assertNodeType)("TSType")
            }
          }
        });
        (0, _utils.default)("TSTypeParameterInstantiation", {
          visitor: ["params"],
          fields: {
            params: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType"))
              )
            }
          }
        });
        (0, _utils.default)("TSTypeParameterDeclaration", {
          visitor: ["params"],
          fields: {
            params: {
              validate: (0, _utils.chain)(
                (0, _utils.assertValueType)("array"),
                (0, _utils.assertEach)(
                  (0, _utils.assertNodeType)("TSTypeParameter")
                )
              )
            }
          }
        });
        (0, _utils.default)("TSTypeParameter", {
          visitor: ["constraint", "default"],
          fields: {
            name: {
              validate: (0, _utils.assertValueType)("string")
            },
            constraint: {
              validate: (0, _utils.assertNodeType)("TSType"),
              optional: true
            },
            default: {
              validate: (0, _utils.assertNodeType)("TSType"),
              optional: true
            }
          }
        });

        /***/
      },
      /* 323 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = assertNode;

        var _isNode = _interopRequireDefault(__webpack_require__(124));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function assertNode(node) {
          if (!(0, _isNode.default)(node)) {
            var type = (node && node.type) || JSON.stringify(node);
            throw new TypeError('Not a valid node of type "' + type + '"');
          }
        }

        /***/
      },
      /* 324 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.assertArrayExpression = assertArrayExpression;
        exports.assertAssignmentExpression = assertAssignmentExpression;
        exports.assertBinaryExpression = assertBinaryExpression;
        exports.assertDirective = assertDirective;
        exports.assertDirectiveLiteral = assertDirectiveLiteral;
        exports.assertBlockStatement = assertBlockStatement;
        exports.assertBreakStatement = assertBreakStatement;
        exports.assertCallExpression = assertCallExpression;
        exports.assertCatchClause = assertCatchClause;
        exports.assertConditionalExpression = assertConditionalExpression;
        exports.assertContinueStatement = assertContinueStatement;
        exports.assertDebuggerStatement = assertDebuggerStatement;
        exports.assertDoWhileStatement = assertDoWhileStatement;
        exports.assertEmptyStatement = assertEmptyStatement;
        exports.assertExpressionStatement = assertExpressionStatement;
        exports.assertFile = assertFile;
        exports.assertForInStatement = assertForInStatement;
        exports.assertForStatement = assertForStatement;
        exports.assertFunctionDeclaration = assertFunctionDeclaration;
        exports.assertFunctionExpression = assertFunctionExpression;
        exports.assertIdentifier = assertIdentifier;
        exports.assertIfStatement = assertIfStatement;
        exports.assertLabeledStatement = assertLabeledStatement;
        exports.assertStringLiteral = assertStringLiteral;
        exports.assertNumericLiteral = assertNumericLiteral;
        exports.assertNullLiteral = assertNullLiteral;
        exports.assertBooleanLiteral = assertBooleanLiteral;
        exports.assertRegExpLiteral = assertRegExpLiteral;
        exports.assertLogicalExpression = assertLogicalExpression;
        exports.assertMemberExpression = assertMemberExpression;
        exports.assertNewExpression = assertNewExpression;
        exports.assertProgram = assertProgram;
        exports.assertObjectExpression = assertObjectExpression;
        exports.assertObjectMethod = assertObjectMethod;
        exports.assertObjectProperty = assertObjectProperty;
        exports.assertRestElement = assertRestElement;
        exports.assertReturnStatement = assertReturnStatement;
        exports.assertSequenceExpression = assertSequenceExpression;
        exports.assertSwitchCase = assertSwitchCase;
        exports.assertSwitchStatement = assertSwitchStatement;
        exports.assertThisExpression = assertThisExpression;
        exports.assertThrowStatement = assertThrowStatement;
        exports.assertTryStatement = assertTryStatement;
        exports.assertUnaryExpression = assertUnaryExpression;
        exports.assertUpdateExpression = assertUpdateExpression;
        exports.assertVariableDeclaration = assertVariableDeclaration;
        exports.assertVariableDeclarator = assertVariableDeclarator;
        exports.assertWhileStatement = assertWhileStatement;
        exports.assertWithStatement = assertWithStatement;
        exports.assertAssignmentPattern = assertAssignmentPattern;
        exports.assertArrayPattern = assertArrayPattern;
        exports.assertArrowFunctionExpression = assertArrowFunctionExpression;
        exports.assertClassBody = assertClassBody;
        exports.assertClassDeclaration = assertClassDeclaration;
        exports.assertClassExpression = assertClassExpression;
        exports.assertExportAllDeclaration = assertExportAllDeclaration;
        exports.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
        exports.assertExportNamedDeclaration = assertExportNamedDeclaration;
        exports.assertExportSpecifier = assertExportSpecifier;
        exports.assertForOfStatement = assertForOfStatement;
        exports.assertImportDeclaration = assertImportDeclaration;
        exports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
        exports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
        exports.assertImportSpecifier = assertImportSpecifier;
        exports.assertMetaProperty = assertMetaProperty;
        exports.assertClassMethod = assertClassMethod;
        exports.assertObjectPattern = assertObjectPattern;
        exports.assertSpreadElement = assertSpreadElement;
        exports.assertSuper = assertSuper;
        exports.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
        exports.assertTemplateElement = assertTemplateElement;
        exports.assertTemplateLiteral = assertTemplateLiteral;
        exports.assertYieldExpression = assertYieldExpression;
        exports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
        exports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
        exports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
        exports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
        exports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
        exports.assertClassImplements = assertClassImplements;
        exports.assertDeclareClass = assertDeclareClass;
        exports.assertDeclareFunction = assertDeclareFunction;
        exports.assertDeclareInterface = assertDeclareInterface;
        exports.assertDeclareModule = assertDeclareModule;
        exports.assertDeclareModuleExports = assertDeclareModuleExports;
        exports.assertDeclareTypeAlias = assertDeclareTypeAlias;
        exports.assertDeclareOpaqueType = assertDeclareOpaqueType;
        exports.assertDeclareVariable = assertDeclareVariable;
        exports.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
        exports.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
        exports.assertDeclaredPredicate = assertDeclaredPredicate;
        exports.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
        exports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
        exports.assertFunctionTypeParam = assertFunctionTypeParam;
        exports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
        exports.assertInferredPredicate = assertInferredPredicate;
        exports.assertInterfaceExtends = assertInterfaceExtends;
        exports.assertInterfaceDeclaration = assertInterfaceDeclaration;
        exports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
        exports.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
        exports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
        exports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
        exports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
        exports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
        exports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
        exports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
        exports.assertObjectTypeIndexer = assertObjectTypeIndexer;
        exports.assertObjectTypeProperty = assertObjectTypeProperty;
        exports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
        exports.assertOpaqueType = assertOpaqueType;
        exports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
        exports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
        exports.assertStringTypeAnnotation = assertStringTypeAnnotation;
        exports.assertThisTypeAnnotation = assertThisTypeAnnotation;
        exports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
        exports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
        exports.assertTypeAlias = assertTypeAlias;
        exports.assertTypeAnnotation = assertTypeAnnotation;
        exports.assertTypeCastExpression = assertTypeCastExpression;
        exports.assertTypeParameter = assertTypeParameter;
        exports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
        exports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
        exports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
        exports.assertVariance = assertVariance;
        exports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
        exports.assertJSXAttribute = assertJSXAttribute;
        exports.assertJSXClosingElement = assertJSXClosingElement;
        exports.assertJSXElement = assertJSXElement;
        exports.assertJSXEmptyExpression = assertJSXEmptyExpression;
        exports.assertJSXExpressionContainer = assertJSXExpressionContainer;
        exports.assertJSXSpreadChild = assertJSXSpreadChild;
        exports.assertJSXIdentifier = assertJSXIdentifier;
        exports.assertJSXMemberExpression = assertJSXMemberExpression;
        exports.assertJSXNamespacedName = assertJSXNamespacedName;
        exports.assertJSXOpeningElement = assertJSXOpeningElement;
        exports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
        exports.assertJSXText = assertJSXText;
        exports.assertJSXFragment = assertJSXFragment;
        exports.assertJSXOpeningFragment = assertJSXOpeningFragment;
        exports.assertJSXClosingFragment = assertJSXClosingFragment;
        exports.assertNoop = assertNoop;
        exports.assertParenthesizedExpression = assertParenthesizedExpression;
        exports.assertAwaitExpression = assertAwaitExpression;
        exports.assertBindExpression = assertBindExpression;
        exports.assertClassProperty = assertClassProperty;
        exports.assertOptionalMemberExpression = assertOptionalMemberExpression;
        exports.assertOptionalCallExpression = assertOptionalCallExpression;
        exports.assertClassPrivateProperty = assertClassPrivateProperty;
        exports.assertImport = assertImport;
        exports.assertDecorator = assertDecorator;
        exports.assertDoExpression = assertDoExpression;
        exports.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
        exports.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
        exports.assertPrivateName = assertPrivateName;
        exports.assertTSParameterProperty = assertTSParameterProperty;
        exports.assertTSDeclareFunction = assertTSDeclareFunction;
        exports.assertTSDeclareMethod = assertTSDeclareMethod;
        exports.assertTSQualifiedName = assertTSQualifiedName;
        exports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
        exports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
        exports.assertTSPropertySignature = assertTSPropertySignature;
        exports.assertTSMethodSignature = assertTSMethodSignature;
        exports.assertTSIndexSignature = assertTSIndexSignature;
        exports.assertTSAnyKeyword = assertTSAnyKeyword;
        exports.assertTSNumberKeyword = assertTSNumberKeyword;
        exports.assertTSObjectKeyword = assertTSObjectKeyword;
        exports.assertTSBooleanKeyword = assertTSBooleanKeyword;
        exports.assertTSStringKeyword = assertTSStringKeyword;
        exports.assertTSSymbolKeyword = assertTSSymbolKeyword;
        exports.assertTSVoidKeyword = assertTSVoidKeyword;
        exports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
        exports.assertTSNullKeyword = assertTSNullKeyword;
        exports.assertTSNeverKeyword = assertTSNeverKeyword;
        exports.assertTSThisType = assertTSThisType;
        exports.assertTSFunctionType = assertTSFunctionType;
        exports.assertTSConstructorType = assertTSConstructorType;
        exports.assertTSTypeReference = assertTSTypeReference;
        exports.assertTSTypePredicate = assertTSTypePredicate;
        exports.assertTSTypeQuery = assertTSTypeQuery;
        exports.assertTSTypeLiteral = assertTSTypeLiteral;
        exports.assertTSArrayType = assertTSArrayType;
        exports.assertTSTupleType = assertTSTupleType;
        exports.assertTSUnionType = assertTSUnionType;
        exports.assertTSIntersectionType = assertTSIntersectionType;
        exports.assertTSConditionalType = assertTSConditionalType;
        exports.assertTSInferType = assertTSInferType;
        exports.assertTSParenthesizedType = assertTSParenthesizedType;
        exports.assertTSTypeOperator = assertTSTypeOperator;
        exports.assertTSIndexedAccessType = assertTSIndexedAccessType;
        exports.assertTSMappedType = assertTSMappedType;
        exports.assertTSLiteralType = assertTSLiteralType;
        exports.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
        exports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
        exports.assertTSInterfaceBody = assertTSInterfaceBody;
        exports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
        exports.assertTSAsExpression = assertTSAsExpression;
        exports.assertTSTypeAssertion = assertTSTypeAssertion;
        exports.assertTSEnumDeclaration = assertTSEnumDeclaration;
        exports.assertTSEnumMember = assertTSEnumMember;
        exports.assertTSModuleDeclaration = assertTSModuleDeclaration;
        exports.assertTSModuleBlock = assertTSModuleBlock;
        exports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
        exports.assertTSExternalModuleReference = assertTSExternalModuleReference;
        exports.assertTSNonNullExpression = assertTSNonNullExpression;
        exports.assertTSExportAssignment = assertTSExportAssignment;
        exports.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
        exports.assertTSTypeAnnotation = assertTSTypeAnnotation;
        exports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
        exports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
        exports.assertTSTypeParameter = assertTSTypeParameter;
        exports.assertExpression = assertExpression;
        exports.assertBinary = assertBinary;
        exports.assertScopable = assertScopable;
        exports.assertBlockParent = assertBlockParent;
        exports.assertBlock = assertBlock;
        exports.assertStatement = assertStatement;
        exports.assertTerminatorless = assertTerminatorless;
        exports.assertCompletionStatement = assertCompletionStatement;
        exports.assertConditional = assertConditional;
        exports.assertLoop = assertLoop;
        exports.assertWhile = assertWhile;
        exports.assertExpressionWrapper = assertExpressionWrapper;
        exports.assertFor = assertFor;
        exports.assertForXStatement = assertForXStatement;
        exports.assertFunction = assertFunction;
        exports.assertFunctionParent = assertFunctionParent;
        exports.assertPureish = assertPureish;
        exports.assertDeclaration = assertDeclaration;
        exports.assertPatternLike = assertPatternLike;
        exports.assertLVal = assertLVal;
        exports.assertTSEntityName = assertTSEntityName;
        exports.assertLiteral = assertLiteral;
        exports.assertImmutable = assertImmutable;
        exports.assertUserWhitespacable = assertUserWhitespacable;
        exports.assertMethod = assertMethod;
        exports.assertObjectMember = assertObjectMember;
        exports.assertProperty = assertProperty;
        exports.assertUnaryLike = assertUnaryLike;
        exports.assertPattern = assertPattern;
        exports.assertClass = assertClass;
        exports.assertModuleDeclaration = assertModuleDeclaration;
        exports.assertExportDeclaration = assertExportDeclaration;
        exports.assertModuleSpecifier = assertModuleSpecifier;
        exports.assertFlow = assertFlow;
        exports.assertFlowType = assertFlowType;
        exports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
        exports.assertFlowDeclaration = assertFlowDeclaration;
        exports.assertFlowPredicate = assertFlowPredicate;
        exports.assertJSX = assertJSX;
        exports.assertPrivate = assertPrivate;
        exports.assertTSTypeElement = assertTSTypeElement;
        exports.assertTSType = assertTSType;
        exports.assertNumberLiteral = assertNumberLiteral;
        exports.assertRegexLiteral = assertRegexLiteral;
        exports.assertRestProperty = assertRestProperty;
        exports.assertSpreadProperty = assertSpreadProperty;

        var _is = _interopRequireDefault(__webpack_require__(73));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function assert(type, node, opts) {
          if (!(0, _is.default)(type, node, opts)) {
            throw new Error(
              'Expected type "' +
                type +
                '" with option ' +
                JSON.stringify(opts) +
                ', but instead got "' +
                node.type +
                '".'
            );
          }
        }

        function assertArrayExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ArrayExpression", node, opts);
        }

        function assertAssignmentExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("AssignmentExpression", node, opts);
        }

        function assertBinaryExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("BinaryExpression", node, opts);
        }

        function assertDirective(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Directive", node, opts);
        }

        function assertDirectiveLiteral(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DirectiveLiteral", node, opts);
        }

        function assertBlockStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("BlockStatement", node, opts);
        }

        function assertBreakStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("BreakStatement", node, opts);
        }

        function assertCallExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("CallExpression", node, opts);
        }

        function assertCatchClause(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("CatchClause", node, opts);
        }

        function assertConditionalExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ConditionalExpression", node, opts);
        }

        function assertContinueStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ContinueStatement", node, opts);
        }

        function assertDebuggerStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DebuggerStatement", node, opts);
        }

        function assertDoWhileStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DoWhileStatement", node, opts);
        }

        function assertEmptyStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("EmptyStatement", node, opts);
        }

        function assertExpressionStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ExpressionStatement", node, opts);
        }

        function assertFile(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("File", node, opts);
        }

        function assertForInStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ForInStatement", node, opts);
        }

        function assertForStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ForStatement", node, opts);
        }

        function assertFunctionDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("FunctionDeclaration", node, opts);
        }

        function assertFunctionExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("FunctionExpression", node, opts);
        }

        function assertIdentifier(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Identifier", node, opts);
        }

        function assertIfStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("IfStatement", node, opts);
        }

        function assertLabeledStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("LabeledStatement", node, opts);
        }

        function assertStringLiteral(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("StringLiteral", node, opts);
        }

        function assertNumericLiteral(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("NumericLiteral", node, opts);
        }

        function assertNullLiteral(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("NullLiteral", node, opts);
        }

        function assertBooleanLiteral(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("BooleanLiteral", node, opts);
        }

        function assertRegExpLiteral(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("RegExpLiteral", node, opts);
        }

        function assertLogicalExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("LogicalExpression", node, opts);
        }

        function assertMemberExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("MemberExpression", node, opts);
        }

        function assertNewExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("NewExpression", node, opts);
        }

        function assertProgram(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Program", node, opts);
        }

        function assertObjectExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ObjectExpression", node, opts);
        }

        function assertObjectMethod(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ObjectMethod", node, opts);
        }

        function assertObjectProperty(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ObjectProperty", node, opts);
        }

        function assertRestElement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("RestElement", node, opts);
        }

        function assertReturnStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ReturnStatement", node, opts);
        }

        function assertSequenceExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("SequenceExpression", node, opts);
        }

        function assertSwitchCase(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("SwitchCase", node, opts);
        }

        function assertSwitchStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("SwitchStatement", node, opts);
        }

        function assertThisExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ThisExpression", node, opts);
        }

        function assertThrowStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ThrowStatement", node, opts);
        }

        function assertTryStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TryStatement", node, opts);
        }

        function assertUnaryExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("UnaryExpression", node, opts);
        }

        function assertUpdateExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("UpdateExpression", node, opts);
        }

        function assertVariableDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("VariableDeclaration", node, opts);
        }

        function assertVariableDeclarator(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("VariableDeclarator", node, opts);
        }

        function assertWhileStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("WhileStatement", node, opts);
        }

        function assertWithStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("WithStatement", node, opts);
        }

        function assertAssignmentPattern(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("AssignmentPattern", node, opts);
        }

        function assertArrayPattern(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ArrayPattern", node, opts);
        }

        function assertArrowFunctionExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ArrowFunctionExpression", node, opts);
        }

        function assertClassBody(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ClassBody", node, opts);
        }

        function assertClassDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ClassDeclaration", node, opts);
        }

        function assertClassExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ClassExpression", node, opts);
        }

        function assertExportAllDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ExportAllDeclaration", node, opts);
        }

        function assertExportDefaultDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ExportDefaultDeclaration", node, opts);
        }

        function assertExportNamedDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ExportNamedDeclaration", node, opts);
        }

        function assertExportSpecifier(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ExportSpecifier", node, opts);
        }

        function assertForOfStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ForOfStatement", node, opts);
        }

        function assertImportDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ImportDeclaration", node, opts);
        }

        function assertImportDefaultSpecifier(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ImportDefaultSpecifier", node, opts);
        }

        function assertImportNamespaceSpecifier(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ImportNamespaceSpecifier", node, opts);
        }

        function assertImportSpecifier(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ImportSpecifier", node, opts);
        }

        function assertMetaProperty(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("MetaProperty", node, opts);
        }

        function assertClassMethod(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ClassMethod", node, opts);
        }

        function assertObjectPattern(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ObjectPattern", node, opts);
        }

        function assertSpreadElement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("SpreadElement", node, opts);
        }

        function assertSuper(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Super", node, opts);
        }

        function assertTaggedTemplateExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TaggedTemplateExpression", node, opts);
        }

        function assertTemplateElement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TemplateElement", node, opts);
        }

        function assertTemplateLiteral(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TemplateLiteral", node, opts);
        }

        function assertYieldExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("YieldExpression", node, opts);
        }

        function assertAnyTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("AnyTypeAnnotation", node, opts);
        }

        function assertArrayTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ArrayTypeAnnotation", node, opts);
        }

        function assertBooleanTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("BooleanTypeAnnotation", node, opts);
        }

        function assertBooleanLiteralTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("BooleanLiteralTypeAnnotation", node, opts);
        }

        function assertNullLiteralTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("NullLiteralTypeAnnotation", node, opts);
        }

        function assertClassImplements(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ClassImplements", node, opts);
        }

        function assertDeclareClass(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclareClass", node, opts);
        }

        function assertDeclareFunction(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclareFunction", node, opts);
        }

        function assertDeclareInterface(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclareInterface", node, opts);
        }

        function assertDeclareModule(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclareModule", node, opts);
        }

        function assertDeclareModuleExports(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclareModuleExports", node, opts);
        }

        function assertDeclareTypeAlias(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclareTypeAlias", node, opts);
        }

        function assertDeclareOpaqueType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclareOpaqueType", node, opts);
        }

        function assertDeclareVariable(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclareVariable", node, opts);
        }

        function assertDeclareExportDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclareExportDeclaration", node, opts);
        }

        function assertDeclareExportAllDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclareExportAllDeclaration", node, opts);
        }

        function assertDeclaredPredicate(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DeclaredPredicate", node, opts);
        }

        function assertExistsTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ExistsTypeAnnotation", node, opts);
        }

        function assertFunctionTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("FunctionTypeAnnotation", node, opts);
        }

        function assertFunctionTypeParam(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("FunctionTypeParam", node, opts);
        }

        function assertGenericTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("GenericTypeAnnotation", node, opts);
        }

        function assertInferredPredicate(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("InferredPredicate", node, opts);
        }

        function assertInterfaceExtends(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("InterfaceExtends", node, opts);
        }

        function assertInterfaceDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("InterfaceDeclaration", node, opts);
        }

        function assertIntersectionTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("IntersectionTypeAnnotation", node, opts);
        }

        function assertMixedTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("MixedTypeAnnotation", node, opts);
        }

        function assertEmptyTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("EmptyTypeAnnotation", node, opts);
        }

        function assertNullableTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("NullableTypeAnnotation", node, opts);
        }

        function assertNumberLiteralTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("NumberLiteralTypeAnnotation", node, opts);
        }

        function assertNumberTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("NumberTypeAnnotation", node, opts);
        }

        function assertObjectTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ObjectTypeAnnotation", node, opts);
        }

        function assertObjectTypeCallProperty(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ObjectTypeCallProperty", node, opts);
        }

        function assertObjectTypeIndexer(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ObjectTypeIndexer", node, opts);
        }

        function assertObjectTypeProperty(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ObjectTypeProperty", node, opts);
        }

        function assertObjectTypeSpreadProperty(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ObjectTypeSpreadProperty", node, opts);
        }

        function assertOpaqueType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("OpaqueType", node, opts);
        }

        function assertQualifiedTypeIdentifier(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("QualifiedTypeIdentifier", node, opts);
        }

        function assertStringLiteralTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("StringLiteralTypeAnnotation", node, opts);
        }

        function assertStringTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("StringTypeAnnotation", node, opts);
        }

        function assertThisTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ThisTypeAnnotation", node, opts);
        }

        function assertTupleTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TupleTypeAnnotation", node, opts);
        }

        function assertTypeofTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TypeofTypeAnnotation", node, opts);
        }

        function assertTypeAlias(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TypeAlias", node, opts);
        }

        function assertTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TypeAnnotation", node, opts);
        }

        function assertTypeCastExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TypeCastExpression", node, opts);
        }

        function assertTypeParameter(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TypeParameter", node, opts);
        }

        function assertTypeParameterDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TypeParameterDeclaration", node, opts);
        }

        function assertTypeParameterInstantiation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TypeParameterInstantiation", node, opts);
        }

        function assertUnionTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("UnionTypeAnnotation", node, opts);
        }

        function assertVariance(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Variance", node, opts);
        }

        function assertVoidTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("VoidTypeAnnotation", node, opts);
        }

        function assertJSXAttribute(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXAttribute", node, opts);
        }

        function assertJSXClosingElement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXClosingElement", node, opts);
        }

        function assertJSXElement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXElement", node, opts);
        }

        function assertJSXEmptyExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXEmptyExpression", node, opts);
        }

        function assertJSXExpressionContainer(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXExpressionContainer", node, opts);
        }

        function assertJSXSpreadChild(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXSpreadChild", node, opts);
        }

        function assertJSXIdentifier(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXIdentifier", node, opts);
        }

        function assertJSXMemberExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXMemberExpression", node, opts);
        }

        function assertJSXNamespacedName(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXNamespacedName", node, opts);
        }

        function assertJSXOpeningElement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXOpeningElement", node, opts);
        }

        function assertJSXSpreadAttribute(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXSpreadAttribute", node, opts);
        }

        function assertJSXText(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXText", node, opts);
        }

        function assertJSXFragment(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXFragment", node, opts);
        }

        function assertJSXOpeningFragment(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXOpeningFragment", node, opts);
        }

        function assertJSXClosingFragment(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSXClosingFragment", node, opts);
        }

        function assertNoop(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Noop", node, opts);
        }

        function assertParenthesizedExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ParenthesizedExpression", node, opts);
        }

        function assertAwaitExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("AwaitExpression", node, opts);
        }

        function assertBindExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("BindExpression", node, opts);
        }

        function assertClassProperty(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ClassProperty", node, opts);
        }

        function assertOptionalMemberExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("OptionalMemberExpression", node, opts);
        }

        function assertOptionalCallExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("OptionalCallExpression", node, opts);
        }

        function assertClassPrivateProperty(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ClassPrivateProperty", node, opts);
        }

        function assertImport(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Import", node, opts);
        }

        function assertDecorator(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Decorator", node, opts);
        }

        function assertDoExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("DoExpression", node, opts);
        }

        function assertExportDefaultSpecifier(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ExportDefaultSpecifier", node, opts);
        }

        function assertExportNamespaceSpecifier(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ExportNamespaceSpecifier", node, opts);
        }

        function assertPrivateName(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("PrivateName", node, opts);
        }

        function assertTSParameterProperty(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSParameterProperty", node, opts);
        }

        function assertTSDeclareFunction(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSDeclareFunction", node, opts);
        }

        function assertTSDeclareMethod(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSDeclareMethod", node, opts);
        }

        function assertTSQualifiedName(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSQualifiedName", node, opts);
        }

        function assertTSCallSignatureDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSCallSignatureDeclaration", node, opts);
        }

        function assertTSConstructSignatureDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSConstructSignatureDeclaration", node, opts);
        }

        function assertTSPropertySignature(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSPropertySignature", node, opts);
        }

        function assertTSMethodSignature(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSMethodSignature", node, opts);
        }

        function assertTSIndexSignature(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSIndexSignature", node, opts);
        }

        function assertTSAnyKeyword(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSAnyKeyword", node, opts);
        }

        function assertTSNumberKeyword(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSNumberKeyword", node, opts);
        }

        function assertTSObjectKeyword(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSObjectKeyword", node, opts);
        }

        function assertTSBooleanKeyword(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSBooleanKeyword", node, opts);
        }

        function assertTSStringKeyword(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSStringKeyword", node, opts);
        }

        function assertTSSymbolKeyword(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSSymbolKeyword", node, opts);
        }

        function assertTSVoidKeyword(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSVoidKeyword", node, opts);
        }

        function assertTSUndefinedKeyword(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSUndefinedKeyword", node, opts);
        }

        function assertTSNullKeyword(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSNullKeyword", node, opts);
        }

        function assertTSNeverKeyword(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSNeverKeyword", node, opts);
        }

        function assertTSThisType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSThisType", node, opts);
        }

        function assertTSFunctionType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSFunctionType", node, opts);
        }

        function assertTSConstructorType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSConstructorType", node, opts);
        }

        function assertTSTypeReference(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeReference", node, opts);
        }

        function assertTSTypePredicate(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypePredicate", node, opts);
        }

        function assertTSTypeQuery(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeQuery", node, opts);
        }

        function assertTSTypeLiteral(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeLiteral", node, opts);
        }

        function assertTSArrayType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSArrayType", node, opts);
        }

        function assertTSTupleType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTupleType", node, opts);
        }

        function assertTSUnionType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSUnionType", node, opts);
        }

        function assertTSIntersectionType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSIntersectionType", node, opts);
        }

        function assertTSConditionalType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSConditionalType", node, opts);
        }

        function assertTSInferType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSInferType", node, opts);
        }

        function assertTSParenthesizedType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSParenthesizedType", node, opts);
        }

        function assertTSTypeOperator(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeOperator", node, opts);
        }

        function assertTSIndexedAccessType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSIndexedAccessType", node, opts);
        }

        function assertTSMappedType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSMappedType", node, opts);
        }

        function assertTSLiteralType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSLiteralType", node, opts);
        }

        function assertTSExpressionWithTypeArguments(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSExpressionWithTypeArguments", node, opts);
        }

        function assertTSInterfaceDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSInterfaceDeclaration", node, opts);
        }

        function assertTSInterfaceBody(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSInterfaceBody", node, opts);
        }

        function assertTSTypeAliasDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeAliasDeclaration", node, opts);
        }

        function assertTSAsExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSAsExpression", node, opts);
        }

        function assertTSTypeAssertion(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeAssertion", node, opts);
        }

        function assertTSEnumDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSEnumDeclaration", node, opts);
        }

        function assertTSEnumMember(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSEnumMember", node, opts);
        }

        function assertTSModuleDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSModuleDeclaration", node, opts);
        }

        function assertTSModuleBlock(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSModuleBlock", node, opts);
        }

        function assertTSImportEqualsDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSImportEqualsDeclaration", node, opts);
        }

        function assertTSExternalModuleReference(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSExternalModuleReference", node, opts);
        }

        function assertTSNonNullExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSNonNullExpression", node, opts);
        }

        function assertTSExportAssignment(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSExportAssignment", node, opts);
        }

        function assertTSNamespaceExportDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSNamespaceExportDeclaration", node, opts);
        }

        function assertTSTypeAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeAnnotation", node, opts);
        }

        function assertTSTypeParameterInstantiation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeParameterInstantiation", node, opts);
        }

        function assertTSTypeParameterDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeParameterDeclaration", node, opts);
        }

        function assertTSTypeParameter(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeParameter", node, opts);
        }

        function assertExpression(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Expression", node, opts);
        }

        function assertBinary(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Binary", node, opts);
        }

        function assertScopable(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Scopable", node, opts);
        }

        function assertBlockParent(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("BlockParent", node, opts);
        }

        function assertBlock(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Block", node, opts);
        }

        function assertStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Statement", node, opts);
        }

        function assertTerminatorless(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Terminatorless", node, opts);
        }

        function assertCompletionStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("CompletionStatement", node, opts);
        }

        function assertConditional(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Conditional", node, opts);
        }

        function assertLoop(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Loop", node, opts);
        }

        function assertWhile(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("While", node, opts);
        }

        function assertExpressionWrapper(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ExpressionWrapper", node, opts);
        }

        function assertFor(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("For", node, opts);
        }

        function assertForXStatement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ForXStatement", node, opts);
        }

        function assertFunction(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Function", node, opts);
        }

        function assertFunctionParent(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("FunctionParent", node, opts);
        }

        function assertPureish(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Pureish", node, opts);
        }

        function assertDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Declaration", node, opts);
        }

        function assertPatternLike(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("PatternLike", node, opts);
        }

        function assertLVal(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("LVal", node, opts);
        }

        function assertTSEntityName(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSEntityName", node, opts);
        }

        function assertLiteral(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Literal", node, opts);
        }

        function assertImmutable(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Immutable", node, opts);
        }

        function assertUserWhitespacable(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("UserWhitespacable", node, opts);
        }

        function assertMethod(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Method", node, opts);
        }

        function assertObjectMember(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ObjectMember", node, opts);
        }

        function assertProperty(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Property", node, opts);
        }

        function assertUnaryLike(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("UnaryLike", node, opts);
        }

        function assertPattern(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Pattern", node, opts);
        }

        function assertClass(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Class", node, opts);
        }

        function assertModuleDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ModuleDeclaration", node, opts);
        }

        function assertExportDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ExportDeclaration", node, opts);
        }

        function assertModuleSpecifier(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("ModuleSpecifier", node, opts);
        }

        function assertFlow(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Flow", node, opts);
        }

        function assertFlowType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("FlowType", node, opts);
        }

        function assertFlowBaseAnnotation(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("FlowBaseAnnotation", node, opts);
        }

        function assertFlowDeclaration(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("FlowDeclaration", node, opts);
        }

        function assertFlowPredicate(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("FlowPredicate", node, opts);
        }

        function assertJSX(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("JSX", node, opts);
        }

        function assertPrivate(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("Private", node, opts);
        }

        function assertTSTypeElement(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSTypeElement", node, opts);
        }

        function assertTSType(node, opts) {
          if (opts === void 0) {
            opts = {};
          }

          assert("TSType", node, opts);
        }

        function assertNumberLiteral(node, opts) {
          console.trace(
            "The node type NumberLiteral has been renamed to NumericLiteral"
          );
          assert("NumberLiteral", node, opts);
        }

        function assertRegexLiteral(node, opts) {
          console.trace(
            "The node type RegexLiteral has been renamed to RegExpLiteral"
          );
          assert("RegexLiteral", node, opts);
        }

        function assertRestProperty(node, opts) {
          console.trace(
            "The node type RestProperty has been renamed to RestElement"
          );
          assert("RestProperty", node, opts);
        }

        function assertSpreadProperty(node, opts) {
          console.trace(
            "The node type SpreadProperty has been renamed to SpreadElement"
          );
          assert("SpreadProperty", node, opts);
        }

        /***/
      },
      /* 325 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = createTypeAnnotationBasedOnTypeof;

        var _generated = __webpack_require__(5);

        function createTypeAnnotationBasedOnTypeof(type) {
          if (type === "string") {
            return (0, _generated.stringTypeAnnotation)();
          } else if (type === "number") {
            return (0, _generated.numberTypeAnnotation)();
          } else if (type === "undefined") {
            return (0, _generated.voidTypeAnnotation)();
          } else if (type === "boolean") {
            return (0, _generated.booleanTypeAnnotation)();
          } else if (type === "function") {
            return (0, _generated.genericTypeAnnotation)(
              (0, _generated.identifier)("Function")
            );
          } else if (type === "object") {
            return (0, _generated.genericTypeAnnotation)(
              (0, _generated.identifier)("Object")
            );
          } else if (type === "symbol") {
            return (0, _generated.genericTypeAnnotation)(
              (0, _generated.identifier)("Symbol")
            );
          } else {
            throw new Error("Invalid typeof value");
          }
        }

        /***/
      },
      /* 326 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = createUnionTypeAnnotation;

        var _generated = __webpack_require__(5);

        var _removeTypeDuplicates = _interopRequireDefault(
          __webpack_require__(125)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function createUnionTypeAnnotation(types) {
          var flattened = (0, _removeTypeDuplicates.default)(types);

          if (flattened.length === 1) {
            return flattened[0];
          } else {
            return (0, _generated.unionTypeAnnotation)(flattened);
          }
        }

        /***/
      },
      /* 327 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = cloneDeep;

        var _cloneNode = _interopRequireDefault(__webpack_require__(33));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function cloneDeep(node) {
          return (0, _cloneNode.default)(node);
        }

        /***/
      },
      /* 328 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = cloneWithoutLoc;

        var _clone = _interopRequireDefault(__webpack_require__(126));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function cloneWithoutLoc(node) {
          var newNode = (0, _clone.default)(node);
          newNode.loc = null;
          return newNode;
        }

        /***/
      },
      /* 329 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = addComment;

        var _addComments = _interopRequireDefault(__webpack_require__(127));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function addComment(node, type, content, line) {
          return (0, _addComments.default)(node, type, [
            {
              type: line ? "CommentLine" : "CommentBlock",
              value: content
            }
          ]);
        }

        /***/
      },
      /* 330 */
      /***/ function(module, exports, __webpack_require__) {
        var baseUniq = __webpack_require__(331);

        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }

        module.exports = uniq;

        /***/
      },
      /* 331 */
      /***/ function(module, exports, __webpack_require__) {
        var SetCache = __webpack_require__(129),
          arrayIncludes = __webpack_require__(334),
          arrayIncludesWith = __webpack_require__(338),
          cacheHas = __webpack_require__(130),
          createSet = __webpack_require__(339),
          setToArray = __webpack_require__(78);

        var LARGE_ARRAY_SIZE = 200;

        function baseUniq(array, iteratee, comparator) {
          var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

          if (comparator) {
            isCommon = false;
            includes = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set = iteratee ? null : createSet(array);

            if (set) {
              return setToArray(set);
            }

            isCommon = false;
            includes = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee ? [] : result;
          }

          outer: while (++index < length) {
            var value = array[index],
              computed = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;

            if (isCommon && computed === computed) {
              var seenIndex = seen.length;

              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }

              if (iteratee) {
                seen.push(computed);
              }

              result.push(value);
            } else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }

              result.push(value);
            }
          }

          return result;
        }

        module.exports = baseUniq;

        /***/
      },
      /* 332 */
      /***/ function(module, exports) {
        var HASH_UNDEFINED = "__lodash_hash_undefined__";

        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);

          return this;
        }

        module.exports = setCacheAdd;

        /***/
      },
      /* 333 */
      /***/ function(module, exports) {
        function setCacheHas(value) {
          return this.__data__.has(value);
        }

        module.exports = setCacheHas;

        /***/
      },
      /* 334 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIndexOf = __webpack_require__(77);

        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }

        module.exports = arrayIncludes;

        /***/
      },
      /* 335 */
      /***/ function(module, exports) {
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1);

          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }

          return -1;
        }

        module.exports = baseFindIndex;

        /***/
      },
      /* 336 */
      /***/ function(module, exports) {
        function baseIsNaN(value) {
          return value !== value;
        }

        module.exports = baseIsNaN;

        /***/
      },
      /* 337 */
      /***/ function(module, exports) {
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1,
            length = array.length;

          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }

          return -1;
        }

        module.exports = strictIndexOf;

        /***/
      },
      /* 338 */
      /***/ function(module, exports) {
        function arrayIncludesWith(array, value, comparator) {
          var index = -1,
            length = array == null ? 0 : array.length;

          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }

          return false;
        }

        module.exports = arrayIncludesWith;

        /***/
      },
      /* 339 */
      /***/ function(module, exports, __webpack_require__) {
        var Set = __webpack_require__(120),
          noop = __webpack_require__(340),
          setToArray = __webpack_require__(78);

        var INFINITY = 1 / 0;
        var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY)
          ? noop
          : function(values) {
              return new Set(values);
            };
        module.exports = createSet;

        /***/
      },
      /* 340 */
      /***/ function(module, exports) {
        function noop() {}

        module.exports = noop;

        /***/
      },
      /* 341 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = removeComments;

        var _constants = __webpack_require__(19);

        function removeComments(node) {
          _constants.COMMENT_KEYS.forEach(function(key) {
            node[key] = null;
          });

          return node;
        }

        /***/
      },
      /* 342 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TSTYPE_TYPES = exports.TSTYPEELEMENT_TYPES = exports.PRIVATE_TYPES = exports.JSX_TYPES = exports.FLOWPREDICATE_TYPES = exports.FLOWDECLARATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = exports.FLOWTYPE_TYPES = exports.FLOW_TYPES = exports.MODULESPECIFIER_TYPES = exports.EXPORTDECLARATION_TYPES = exports.MODULEDECLARATION_TYPES = exports.CLASS_TYPES = exports.PATTERN_TYPES = exports.UNARYLIKE_TYPES = exports.PROPERTY_TYPES = exports.OBJECTMEMBER_TYPES = exports.METHOD_TYPES = exports.USERWHITESPACABLE_TYPES = exports.IMMUTABLE_TYPES = exports.LITERAL_TYPES = exports.TSENTITYNAME_TYPES = exports.LVAL_TYPES = exports.PATTERNLIKE_TYPES = exports.DECLARATION_TYPES = exports.PUREISH_TYPES = exports.FUNCTIONPARENT_TYPES = exports.FUNCTION_TYPES = exports.FORXSTATEMENT_TYPES = exports.FOR_TYPES = exports.EXPRESSIONWRAPPER_TYPES = exports.WHILE_TYPES = exports.LOOP_TYPES = exports.CONDITIONAL_TYPES = exports.COMPLETIONSTATEMENT_TYPES = exports.TERMINATORLESS_TYPES = exports.STATEMENT_TYPES = exports.BLOCK_TYPES = exports.BLOCKPARENT_TYPES = exports.SCOPABLE_TYPES = exports.BINARY_TYPES = exports.EXPRESSION_TYPES = void 0;

        var _definitions = __webpack_require__(11);

        var EXPRESSION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Expression"];
        exports.EXPRESSION_TYPES = EXPRESSION_TYPES;
        var BINARY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Binary"];
        exports.BINARY_TYPES = BINARY_TYPES;
        var SCOPABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Scopable"];
        exports.SCOPABLE_TYPES = SCOPABLE_TYPES;
        var BLOCKPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["BlockParent"];
        exports.BLOCKPARENT_TYPES = BLOCKPARENT_TYPES;
        var BLOCK_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Block"];
        exports.BLOCK_TYPES = BLOCK_TYPES;
        var STATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Statement"];
        exports.STATEMENT_TYPES = STATEMENT_TYPES;
        var TERMINATORLESS_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["Terminatorless"];
        exports.TERMINATORLESS_TYPES = TERMINATORLESS_TYPES;
        var COMPLETIONSTATEMENT_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["CompletionStatement"];
        exports.COMPLETIONSTATEMENT_TYPES = COMPLETIONSTATEMENT_TYPES;
        var CONDITIONAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Conditional"];
        exports.CONDITIONAL_TYPES = CONDITIONAL_TYPES;
        var LOOP_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Loop"];
        exports.LOOP_TYPES = LOOP_TYPES;
        var WHILE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["While"];
        exports.WHILE_TYPES = WHILE_TYPES;
        var EXPRESSIONWRAPPER_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
        exports.EXPRESSIONWRAPPER_TYPES = EXPRESSIONWRAPPER_TYPES;
        var FOR_TYPES = _definitions.FLIPPED_ALIAS_KEYS["For"];
        exports.FOR_TYPES = FOR_TYPES;
        var FORXSTATEMENT_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ForXStatement"];
        exports.FORXSTATEMENT_TYPES = FORXSTATEMENT_TYPES;
        var FUNCTION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Function"];
        exports.FUNCTION_TYPES = FUNCTION_TYPES;
        var FUNCTIONPARENT_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["FunctionParent"];
        exports.FUNCTIONPARENT_TYPES = FUNCTIONPARENT_TYPES;
        var PUREISH_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Pureish"];
        exports.PUREISH_TYPES = PUREISH_TYPES;
        var DECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Declaration"];
        exports.DECLARATION_TYPES = DECLARATION_TYPES;
        var PATTERNLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["PatternLike"];
        exports.PATTERNLIKE_TYPES = PATTERNLIKE_TYPES;
        var LVAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["LVal"];
        exports.LVAL_TYPES = LVAL_TYPES;
        var TSENTITYNAME_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["TSEntityName"];
        exports.TSENTITYNAME_TYPES = TSENTITYNAME_TYPES;
        var LITERAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Literal"];
        exports.LITERAL_TYPES = LITERAL_TYPES;
        var IMMUTABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Immutable"];
        exports.IMMUTABLE_TYPES = IMMUTABLE_TYPES;
        var USERWHITESPACABLE_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
        exports.USERWHITESPACABLE_TYPES = USERWHITESPACABLE_TYPES;
        var METHOD_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Method"];
        exports.METHOD_TYPES = METHOD_TYPES;
        var OBJECTMEMBER_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ObjectMember"];
        exports.OBJECTMEMBER_TYPES = OBJECTMEMBER_TYPES;
        var PROPERTY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Property"];
        exports.PROPERTY_TYPES = PROPERTY_TYPES;
        var UNARYLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["UnaryLike"];
        exports.UNARYLIKE_TYPES = UNARYLIKE_TYPES;
        var PATTERN_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Pattern"];
        exports.PATTERN_TYPES = PATTERN_TYPES;
        var CLASS_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Class"];
        exports.CLASS_TYPES = CLASS_TYPES;
        var MODULEDECLARATION_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ModuleDeclaration"];
        exports.MODULEDECLARATION_TYPES = MODULEDECLARATION_TYPES;
        var EXPORTDECLARATION_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
        exports.EXPORTDECLARATION_TYPES = EXPORTDECLARATION_TYPES;
        var MODULESPECIFIER_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
        exports.MODULESPECIFIER_TYPES = MODULESPECIFIER_TYPES;
        var FLOW_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Flow"];
        exports.FLOW_TYPES = FLOW_TYPES;
        var FLOWTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowType"];
        exports.FLOWTYPE_TYPES = FLOWTYPE_TYPES;
        var FLOWBASEANNOTATION_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
        exports.FLOWBASEANNOTATION_TYPES = FLOWBASEANNOTATION_TYPES;
        var FLOWDECLARATION_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
        exports.FLOWDECLARATION_TYPES = FLOWDECLARATION_TYPES;
        var FLOWPREDICATE_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["FlowPredicate"];
        exports.FLOWPREDICATE_TYPES = FLOWPREDICATE_TYPES;
        var JSX_TYPES = _definitions.FLIPPED_ALIAS_KEYS["JSX"];
        exports.JSX_TYPES = JSX_TYPES;
        var PRIVATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Private"];
        exports.PRIVATE_TYPES = PRIVATE_TYPES;
        var TSTYPEELEMENT_TYPES =
          _definitions.FLIPPED_ALIAS_KEYS["TSTypeElement"];
        exports.TSTYPEELEMENT_TYPES = TSTYPEELEMENT_TYPES;
        var TSTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSType"];
        exports.TSTYPE_TYPES = TSTYPE_TYPES;

        /***/
      },
      /* 343 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = ensureBlock;

        var _toBlock = _interopRequireDefault(__webpack_require__(134));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function ensureBlock(node, key) {
          if (key === void 0) {
            key = "body";
          }

          return (node[key] = (0, _toBlock.default)(node[key], node));
        }

        /***/
      },
      /* 344 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = toBindingIdentifierName;

        var _toIdentifier = _interopRequireDefault(__webpack_require__(135));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function toBindingIdentifierName(name) {
          name = (0, _toIdentifier.default)(name);
          if (name === "eval" || name === "arguments") name = "_" + name;
          return name;
        }

        /***/
      },
      /* 345 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = toComputedKey;

        var _generated = __webpack_require__(4);

        var _generated2 = __webpack_require__(5);

        function toComputedKey(node, key) {
          if (key === void 0) {
            key = node.key || node.property;
          }

          if (!node.computed && (0, _generated.isIdentifier)(key))
            key = (0, _generated2.stringLiteral)(key.name);
          return key;
        }

        /***/
      },
      /* 346 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = toExpression;

        var _generated = __webpack_require__(4);

        function toExpression(node) {
          if ((0, _generated.isExpressionStatement)(node)) {
            node = node.expression;
          }

          if ((0, _generated.isExpression)(node)) {
            return node;
          }

          if ((0, _generated.isClass)(node)) {
            node.type = "ClassExpression";
          } else if ((0, _generated.isFunction)(node)) {
            node.type = "FunctionExpression";
          }

          if (!(0, _generated.isExpression)(node)) {
            throw new Error("cannot turn " + node.type + " to an expression");
          }

          return node;
        }

        /***/
      },
      /* 347 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = toKeyAlias;

        var _generated = __webpack_require__(4);

        var _cloneNode = _interopRequireDefault(__webpack_require__(33));

        var _removePropertiesDeep = _interopRequireDefault(
          __webpack_require__(136)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function toKeyAlias(node, key) {
          if (key === void 0) {
            key = node.key;
          }

          var alias;

          if (node.kind === "method") {
            return toKeyAlias.increment() + "";
          } else if ((0, _generated.isIdentifier)(key)) {
            alias = key.name;
          } else if ((0, _generated.isStringLiteral)(key)) {
            alias = JSON.stringify(key.value);
          } else {
            alias = JSON.stringify(
              (0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))
            );
          }

          if (node.computed) {
            alias = "[" + alias + "]";
          }

          if (node.static) {
            alias = "static:" + alias;
          }

          return alias;
        }

        toKeyAlias.uid = 0;

        toKeyAlias.increment = function() {
          if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {
            return (toKeyAlias.uid = 0);
          } else {
            return toKeyAlias.uid++;
          }
        };

        /***/
      },
      /* 348 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = toSequenceExpression;

        var _gatherSequenceExpressions = _interopRequireDefault(
          __webpack_require__(349)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function toSequenceExpression(nodes, scope) {
          if (!nodes || !nodes.length) return;
          var declars = [];
          var result = (0, _gatherSequenceExpressions.default)(
            nodes,
            scope,
            declars
          );
          if (!result) return;

          for (var _i = 0; _i < declars.length; _i++) {
            var declar = declars[_i];
            scope.push(declar);
          }

          return result;
        }

        /***/
      },
      /* 349 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = gatherSequenceExpressions;

        var _getBindingIdentifiers = _interopRequireDefault(
          __webpack_require__(44)
        );

        var _generated = __webpack_require__(4);

        var _generated2 = __webpack_require__(5);

        var _cloneNode = _interopRequireDefault(__webpack_require__(33));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function gatherSequenceExpressions(nodes, scope, declars) {
          var exprs = [];
          var ensureLastUndefined = true;

          for (
            var _iterator = nodes,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var node = _ref;
            ensureLastUndefined = false;

            if ((0, _generated.isExpression)(node)) {
              exprs.push(node);
            } else if ((0, _generated.isExpressionStatement)(node)) {
              exprs.push(node.expression);
            } else if ((0, _generated.isVariableDeclaration)(node)) {
              if (node.kind !== "var") return;
              var _arr = node.declarations;

              for (var _i2 = 0; _i2 < _arr.length; _i2++) {
                var declar = _arr[_i2];
                var bindings = (0, _getBindingIdentifiers.default)(declar);

                for (var key in bindings) {
                  declars.push({
                    kind: node.kind,
                    id: (0, _cloneNode.default)(bindings[key])
                  });
                }

                if (declar.init) {
                  exprs.push(
                    (0, _generated2.assignmentExpression)(
                      "=",
                      declar.id,
                      declar.init
                    )
                  );
                }
              }

              ensureLastUndefined = true;
            } else if ((0, _generated.isIfStatement)(node)) {
              var consequent = node.consequent
                ? gatherSequenceExpressions([node.consequent], scope, declars)
                : scope.buildUndefinedNode();
              var alternate = node.alternate
                ? gatherSequenceExpressions([node.alternate], scope, declars)
                : scope.buildUndefinedNode();
              if (!consequent || !alternate) return;
              exprs.push(
                (0, _generated2.conditionalExpression)(
                  node.test,
                  consequent,
                  alternate
                )
              );
            } else if ((0, _generated.isBlockStatement)(node)) {
              var body = gatherSequenceExpressions(node.body, scope, declars);
              if (!body) return;
              exprs.push(body);
            } else if ((0, _generated.isEmptyStatement)(node)) {
              ensureLastUndefined = true;
            } else {
              return;
            }
          }

          if (ensureLastUndefined) {
            exprs.push(scope.buildUndefinedNode());
          }

          if (exprs.length === 1) {
            return exprs[0];
          } else {
            return (0, _generated2.sequenceExpression)(exprs);
          }
        }

        /***/
      },
      /* 350 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = toStatement;

        var _generated = __webpack_require__(4);

        var _generated2 = __webpack_require__(5);

        function toStatement(node, ignore) {
          if ((0, _generated.isStatement)(node)) {
            return node;
          }

          var mustHaveId = false;
          var newType;

          if ((0, _generated.isClass)(node)) {
            mustHaveId = true;
            newType = "ClassDeclaration";
          } else if ((0, _generated.isFunction)(node)) {
            mustHaveId = true;
            newType = "FunctionDeclaration";
          } else if ((0, _generated.isAssignmentExpression)(node)) {
            return (0, _generated2.expressionStatement)(node);
          }

          if (mustHaveId && !node.id) {
            newType = false;
          }

          if (!newType) {
            if (ignore) {
              return false;
            } else {
              throw new Error("cannot turn " + node.type + " to a statement");
            }
          }

          node.type = newType;
          return node;
        }

        /***/
      },
      /* 351 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = valueToNode;

        function _isPlainObject() {
          var data = _interopRequireDefault(__webpack_require__(352));

          _isPlainObject = function _isPlainObject() {
            return data;
          };

          return data;
        }

        function _isRegExp() {
          var data = _interopRequireDefault(__webpack_require__(353));

          _isRegExp = function _isRegExp() {
            return data;
          };

          return data;
        }

        var _isValidIdentifier = _interopRequireDefault(
          __webpack_require__(32)
        );

        var _generated = __webpack_require__(5);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function valueToNode(value) {
          if (value === undefined) {
            return (0, _generated.identifier)("undefined");
          }

          if (value === true || value === false) {
            return (0, _generated.booleanLiteral)(value);
          }

          if (value === null) {
            return (0, _generated.nullLiteral)();
          }

          if (typeof value === "string") {
            return (0, _generated.stringLiteral)(value);
          }

          if (typeof value === "number") {
            return (0, _generated.numericLiteral)(value);
          }

          if ((0, _isRegExp().default)(value)) {
            var pattern = value.source;
            var flags = value.toString().match(/\/([a-z]+|)$/)[1];
            return (0, _generated.regExpLiteral)(pattern, flags);
          }

          if (Array.isArray(value)) {
            return (0, _generated.arrayExpression)(value.map(valueToNode));
          }

          if ((0, _isPlainObject().default)(value)) {
            var props = [];

            for (var key in value) {
              var nodeKey = void 0;

              if ((0, _isValidIdentifier.default)(key)) {
                nodeKey = (0, _generated.identifier)(key);
              } else {
                nodeKey = (0, _generated.stringLiteral)(key);
              }

              props.push(
                (0, _generated.objectProperty)(nodeKey, valueToNode(value[key]))
              );
            }

            return (0, _generated.objectExpression)(props);
          }

          throw new Error("don't know how to turn this value into a node");
        }

        /***/
      },
      /* 352 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGetTag = __webpack_require__(14),
          getPrototype = __webpack_require__(69),
          isObjectLike = __webpack_require__(10);

        var objectTag = "[object Object]";
        var funcProto = Function.prototype,
          objectProto = Object.prototype;
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var objectCtorString = funcToString.call(Object);

        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }

          var proto = getPrototype(value);

          if (proto === null) {
            return true;
          }

          var Ctor =
            hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return (
            typeof Ctor == "function" &&
            Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString
          );
        }

        module.exports = isPlainObject;

        /***/
      },
      /* 353 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIsRegExp = __webpack_require__(354),
          baseUnary = __webpack_require__(27),
          nodeUtil = __webpack_require__(41);

        var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        module.exports = isRegExp;

        /***/
      },
      /* 354 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGetTag = __webpack_require__(14),
          isObjectLike = __webpack_require__(10);

        var regexpTag = "[object RegExp]";

        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }

        module.exports = baseIsRegExp;

        /***/
      },
      /* 355 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = appendToMemberExpression;

        var _generated = __webpack_require__(5);

        function appendToMemberExpression(member, append, computed) {
          if (computed === void 0) {
            computed = false;
          }

          member.object = (0, _generated.memberExpression)(
            member.object,
            member.property,
            member.computed
          );
          member.property = append;
          member.computed = !!computed;
          return member;
        }

        /***/
      },
      /* 356 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = inherits;

        var _constants = __webpack_require__(19);

        var _inheritsComments = _interopRequireDefault(
          __webpack_require__(132)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function inherits(child, parent) {
          if (!child || !parent) return child;
          var _arr = _constants.INHERIT_KEYS.optional;

          for (var _i = 0; _i < _arr.length; _i++) {
            var _key = _arr[_i];

            if (child[_key] == null) {
              child[_key] = parent[_key];
            }
          }

          for (var key in parent) {
            if (key[0] === "_" && key !== "__clone") child[key] = parent[key];
          }

          var _arr2 = _constants.INHERIT_KEYS.force;

          for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
            var _key2 = _arr2[_i2];
            child[_key2] = parent[_key2];
          }

          (0, _inheritsComments.default)(child, parent);
          return child;
        }

        /***/
      },
      /* 357 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = prependToMemberExpression;

        var _generated = __webpack_require__(5);

        function prependToMemberExpression(member, prepend) {
          member.object = (0, _generated.memberExpression)(
            prepend,
            member.object
          );
          return member;
        }

        /***/
      },
      /* 358 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = getOuterBindingIdentifiers;

        var _getBindingIdentifiers = _interopRequireDefault(
          __webpack_require__(44)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function getOuterBindingIdentifiers(node, duplicates) {
          return (0, _getBindingIdentifiers.default)(node, duplicates, true);
        }

        /***/
      },
      /* 359 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = traverse;

        var _definitions = __webpack_require__(11);

        function traverse(node, handlers, state) {
          if (typeof handlers === "function") {
            handlers = {
              enter: handlers
            };
          }

          var _ref = handlers,
            enter = _ref.enter,
            exit = _ref.exit;
          traverseSimpleImpl(node, enter, exit, state, []);
        }

        function traverseSimpleImpl(node, enter, exit, state, ancestors) {
          var keys = _definitions.VISITOR_KEYS[node.type];
          if (!keys) return;
          if (enter) enter(node, ancestors, state);

          for (
            var _iterator = keys,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref2;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref2 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref2 = _i.value;
            }

            var _key = _ref2;
            var subNode = node[_key];

            if (Array.isArray(subNode)) {
              for (var i = 0; i < subNode.length; i++) {
                var child = subNode[i];
                if (!child) continue;
                ancestors.push({
                  node: node,
                  key: _key,
                  index: i
                });
                traverseSimpleImpl(child, enter, exit, state, ancestors);
                ancestors.pop();
              }
            } else if (subNode) {
              ancestors.push({
                node: node,
                key: _key
              });
              traverseSimpleImpl(subNode, enter, exit, state, ancestors);
              ancestors.pop();
            }
          }

          if (exit) exit(node, ancestors, state);
        }

        /***/
      },
      /* 360 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isBinding;

        var _getBindingIdentifiers = _interopRequireDefault(
          __webpack_require__(44)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function isBinding(node, parent) {
          var keys = _getBindingIdentifiers.default.keys[parent.type];

          if (keys) {
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              var val = parent[key];

              if (Array.isArray(val)) {
                if (val.indexOf(node) >= 0) return true;
              } else {
                if (val === node) return true;
              }
            }
          }

          return false;
        }

        /***/
      },
      /* 361 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isBlockScoped;

        var _generated = __webpack_require__(4);

        var _isLet = _interopRequireDefault(__webpack_require__(139));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function isBlockScoped(node) {
          return (
            (0, _generated.isFunctionDeclaration)(node) ||
            (0, _generated.isClassDeclaration)(node) ||
            (0, _isLet.default)(node)
          );
        }

        /***/
      },
      /* 362 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isImmutable;

        var _isType = _interopRequireDefault(__webpack_require__(74));

        var _generated = __webpack_require__(4);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function isImmutable(node) {
          if ((0, _isType.default)(node.type, "Immutable")) return true;

          if ((0, _generated.isIdentifier)(node)) {
            if (node.name === "undefined") {
              return true;
            } else {
              return false;
            }
          }

          return false;
        }

        /***/
      },
      /* 363 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isNodesEquivalent;

        var _definitions = __webpack_require__(11);

        function isNodesEquivalent(a, b) {
          if (
            typeof a !== "object" ||
            typeof b !== "object" ||
            a == null ||
            b == null
          ) {
            return a === b;
          }

          if (a.type !== b.type) {
            return false;
          }

          var fields = Object.keys(_definitions.NODE_FIELDS[a.type] || a.type);

          for (var _i = 0; _i < fields.length; _i++) {
            var field = fields[_i];

            if (typeof a[field] !== typeof b[field]) {
              return false;
            }

            if (Array.isArray(a[field])) {
              if (!Array.isArray(b[field])) {
                return false;
              }

              if (a[field].length !== b[field].length) {
                return false;
              }

              for (var i = 0; i < a[field].length; i++) {
                if (!isNodesEquivalent(a[field][i], b[field][i])) {
                  return false;
                }
              }

              continue;
            }

            if (!isNodesEquivalent(a[field], b[field])) {
              return false;
            }
          }

          return true;
        }

        /***/
      },
      /* 364 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isReferenced;

        function isReferenced(node, parent) {
          switch (parent.type) {
            case "MemberExpression":
            case "JSXMemberExpression":
            case "OptionalMemberExpression":
              if (parent.property === node) {
                return !!parent.computed;
              }

              return parent.object === node;

            case "VariableDeclarator":
              return parent.init === node;

            case "ArrowFunctionExpression":
              return parent.body === node;

            case "ExportSpecifier":
              if (parent.source) {
                return false;
              }

              return parent.local === node;

            case "ObjectProperty":
            case "ClassProperty":
            case "ClassPrivateProperty":
            case "ClassMethod":
            case "ObjectMethod":
              if (parent.key === node) {
                return !!parent.computed;
              }

              return parent.value === node;

            case "ClassDeclaration":
            case "ClassExpression":
              return parent.superClass === node;

            case "AssignmentExpression":
              return parent.right === node;

            case "AssignmentPattern":
              return parent.right === node;

            case "LabeledStatement":
              return false;

            case "CatchClause":
              return false;

            case "RestElement":
              return false;

            case "FunctionDeclaration":
            case "FunctionExpression":
              return false;

            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
              return false;

            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
              return false;

            case "JSXAttribute":
              return false;

            case "ObjectPattern":
            case "ArrayPattern":
              return false;

            case "MetaProperty":
              return false;
          }

          return true;
        }

        /***/
      },
      /* 365 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isScope;

        var _generated = __webpack_require__(4);

        function isScope(node, parent) {
          if (
            (0, _generated.isBlockStatement)(node) &&
            (0, _generated.isFunction)(parent, {
              body: node
            })
          ) {
            return false;
          }

          if (
            (0, _generated.isBlockStatement)(node) &&
            (0, _generated.isCatchClause)(parent, {
              body: node
            })
          ) {
            return false;
          }

          return (0, _generated.isScopable)(node);
        }

        /***/
      },
      /* 366 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isSpecifierDefault;

        var _generated = __webpack_require__(4);

        function isSpecifierDefault(specifier) {
          return (
            (0, _generated.isImportDefaultSpecifier)(specifier) ||
            (0, _generated.isIdentifier)(
              specifier.imported || specifier.exported,
              {
                name: "default"
              }
            )
          );
        }

        /***/
      },
      /* 367 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isValidES3Identifier;

        var _isValidIdentifier = _interopRequireDefault(
          __webpack_require__(32)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var RESERVED_WORDS_ES3_ONLY = new Set([
          "abstract",
          "boolean",
          "byte",
          "char",
          "double",
          "enum",
          "final",
          "float",
          "goto",
          "implements",
          "int",
          "interface",
          "long",
          "native",
          "package",
          "private",
          "protected",
          "public",
          "short",
          "static",
          "synchronized",
          "throws",
          "transient",
          "volatile"
        ]);

        function isValidES3Identifier(name) {
          return (
            (0, _isValidIdentifier.default)(name) &&
            !RESERVED_WORDS_ES3_ONLY.has(name)
          );
        }

        /***/
      },
      /* 368 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = isVar;

        var _generated = __webpack_require__(4);

        var _constants = __webpack_require__(19);

        function isVar(node) {
          return (
            (0, _generated.isVariableDeclaration)(node, {
              kind: "var"
            }) && !node[_constants.BLOCK_SCOPED_SYMBOL]
          );
        }

        /***/
      },
      /* 369 */
      /***/ function(module, exports, __webpack_require__) {
        exports = module.exports = createDebug.debug = createDebug[
          "default"
        ] = createDebug;
        exports.coerce = coerce;
        exports.disable = disable;
        exports.enable = enable;
        exports.enabled = enabled;
        exports.humanize = __webpack_require__(370);
        exports.instances = [];
        exports.names = [];
        exports.skips = [];
        exports.formatters = {};

        function selectColor(namespace) {
          var hash = 0,
            i;

          for (i in namespace) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0;
          }

          return exports.colors[Math.abs(hash) % exports.colors.length];
        }

        function createDebug(namespace) {
          var prevTime;

          function debug() {
            if (!debug.enabled) return;
            var self = debug;
            var curr = +new Date();
            var ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            var args = new Array(arguments.length);

            for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i];
            }

            args[0] = exports.coerce(args[0]);

            if ("string" !== typeof args[0]) {
              args.unshift("%O");
            }

            var index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
              if (match === "%%") return match;
              index++;
              var formatter = exports.formatters[format];

              if ("function" === typeof formatter) {
                var val = args[index];
                match = formatter.call(self, val);
                args.splice(index, 1);
                index--;
              }

              return match;
            });
            exports.formatArgs.call(self, args);
            var logFn = debug.log || exports.log || console.log.bind(console);
            logFn.apply(self, args);
          }

          debug.namespace = namespace;
          debug.enabled = exports.enabled(namespace);
          debug.useColors = exports.useColors();
          debug.color = selectColor(namespace);
          debug.destroy = destroy;

          if ("function" === typeof exports.init) {
            exports.init(debug);
          }

          exports.instances.push(debug);
          return debug;
        }

        function destroy() {
          var index = exports.instances.indexOf(this);

          if (index !== -1) {
            exports.instances.splice(index, 1);
            return true;
          } else {
            return false;
          }
        }

        function enable(namespaces) {
          exports.save(namespaces);
          exports.names = [];
          exports.skips = [];
          var i;
          var split = (typeof namespaces === "string" ? namespaces : "").split(
            /[\s,]+/
          );
          var len = split.length;

          for (i = 0; i < len; i++) {
            if (!split[i]) continue;
            namespaces = split[i].replace(/\*/g, ".*?");

            if (namespaces[0] === "-") {
              exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
            } else {
              exports.names.push(new RegExp("^" + namespaces + "$"));
            }
          }

          for (i = 0; i < exports.instances.length; i++) {
            var instance = exports.instances[i];
            instance.enabled = exports.enabled(instance.namespace);
          }
        }

        function disable() {
          exports.enable("");
        }

        function enabled(name) {
          if (name[name.length - 1] === "*") {
            return true;
          }

          var i, len;

          for (i = 0, len = exports.skips.length; i < len; i++) {
            if (exports.skips[i].test(name)) {
              return false;
            }
          }

          for (i = 0, len = exports.names.length; i < len; i++) {
            if (exports.names[i].test(name)) {
              return true;
            }
          }

          return false;
        }

        function coerce(val) {
          if (val instanceof Error) return val.stack || val.message;
          return val;
        }

        /***/
      },
      /* 370 */
      /***/ function(module, exports) {
        var s = 1000;
        var m = s * 60;
        var h = m * 60;
        var d = h * 24;
        var y = d * 365.25;

        module.exports = function(val, options) {
          options = options || {};
          var type = typeof val;

          if (type === "string" && val.length > 0) {
            return parse(val);
          } else if (type === "number" && isNaN(val) === false) {
            return options.long ? fmtLong(val) : fmtShort(val);
          }

          throw new Error(
            "val is not a non-empty string or a valid number. val=" +
              JSON.stringify(val)
          );
        };

        function parse(str) {
          str = String(str);

          if (str.length > 100) {
            return;
          }

          var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
            str
          );

          if (!match) {
            return;
          }

          var n = parseFloat(match[1]);
          var type = (match[2] || "ms").toLowerCase();

          switch (type) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return n * y;

            case "days":
            case "day":
            case "d":
              return n * d;

            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return n * h;

            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return n * m;

            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return n * s;

            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return n;

            default:
              return undefined;
          }
        }

        function fmtShort(ms) {
          if (ms >= d) {
            return Math.round(ms / d) + "d";
          }

          if (ms >= h) {
            return Math.round(ms / h) + "h";
          }

          if (ms >= m) {
            return Math.round(ms / m) + "m";
          }

          if (ms >= s) {
            return Math.round(ms / s) + "s";
          }

          return ms + "ms";
        }

        function fmtLong(ms) {
          return (
            plural(ms, d, "day") ||
            plural(ms, h, "hour") ||
            plural(ms, m, "minute") ||
            plural(ms, s, "second") ||
            ms + " ms"
          );
        }

        function plural(ms, n, name) {
          if (ms < n) {
            return;
          }

          if (ms < n * 1.5) {
            return Math.floor(ms / n) + " " + name;
          }

          return Math.ceil(ms / n) + " " + name + "s";
        }

        /***/
      },
      /* 371 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var invariant = function invariant(
          condition,
          format,
          a,
          b,
          c,
          d,
          e,
          f
        ) {
          if (false) {
            if (format === undefined) {
              throw new Error("invariant requires an error message argument");
            }
          }

          if (!condition) {
            var error;

            if (format === undefined) {
              error = new Error(
                "Minified exception occurred; use the non-minified dev environment " +
                  "for the full error message and additional helpful warnings."
              );
            } else {
              var args = [a, b, c, d, e, f];
              var argIndex = 0;
              error = new Error(
                format.replace(/%s/g, function() {
                  return args[argIndex++];
                })
              );
              error.name = "Invariant Violation";
            }

            error.framesToPop = 1;
            throw error;
          }
        };

        module.exports = invariant;

        /***/
      },
      /* 372 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGetTag = __webpack_require__(14),
          isArray = __webpack_require__(6),
          isObjectLike = __webpack_require__(10);

        var stringTag = "[object String]";

        function isString(value) {
          return (
            typeof value == "string" ||
            (!isArray(value) &&
              isObjectLike(value) &&
              baseGetTag(value) == stringTag)
          );
        }

        module.exports = isString;

        /***/
      },
      /* 373 */
      /***/ function(module, exports, __webpack_require__) {
        var toNumber = __webpack_require__(374);

        var INFINITY = 1 / 0,
          MAX_INTEGER = 1.7976931348623157e308;

        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }

          value = toNumber(value);

          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }

          return value === value ? value : 0;
        }

        module.exports = toFinite;

        /***/
      },
      /* 374 */
      /***/ function(module, exports, __webpack_require__) {
        var isObject = __webpack_require__(15),
          isSymbol = __webpack_require__(34);

        var NAN = 0 / 0;
        var reTrim = /^\s+|\s+$/g;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsOctal = /^0o[0-7]+$/i;
        var freeParseInt = parseInt;

        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }

          if (isSymbol(value)) {
            return NAN;
          }

          if (isObject(value)) {
            var other =
              typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other) ? other + "" : other;
          }

          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }

          value = value.replace(reTrim, "");
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value)
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : reIsBadHex.test(value) ? NAN : +value;
        }

        module.exports = toNumber;

        /***/
      },
      /* 375 */
      /***/ function(module, exports, __webpack_require__) {
        var arrayMap = __webpack_require__(46);

        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }

        module.exports = baseValues;

        /***/
      },
      /* 376 */
      /***/ function(module, exports) {
        var MAX_SAFE_INTEGER = 9007199254740991;
        var nativeFloor = Math.floor;

        function baseRepeat(string, n) {
          var result = "";

          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result;
          }

          do {
            if (n % 2) {
              result += string;
            }

            n = nativeFloor(n / 2);

            if (n) {
              string += string;
            }
          } while (n);

          return result;
        }

        module.exports = baseRepeat;

        /***/
      },
      /* 377 */
      /***/ function(module, exports, __webpack_require__) {
        var Symbol = __webpack_require__(24),
          arrayMap = __webpack_require__(46),
          isArray = __webpack_require__(6),
          isSymbol = __webpack_require__(34);

        var INFINITY = 1 / 0;
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }

          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }

          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }

          var result = value + "";
          return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }

        module.exports = baseToString;

        /***/
      },
      /* 378 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var _binding = _interopRequireDefault(__webpack_require__(145));

        function _helperSplitExportDeclaration() {
          var data = _interopRequireDefault(__webpack_require__(80));

          _helperSplitExportDeclaration = function _helperSplitExportDeclaration() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var renameVisitor = {
          ReferencedIdentifier: function ReferencedIdentifier(_ref, state) {
            var node = _ref.node;

            if (node.name === state.oldName) {
              node.name = state.newName;
            }
          },
          Scope: function Scope(path, state) {
            if (
              !path.scope.bindingIdentifierEquals(
                state.oldName,
                state.binding.identifier
              )
            ) {
              path.skip();
            }
          },
          "AssignmentExpression|Declaration": function AssignmentExpressionDeclaration(
            path,
            state
          ) {
            var ids = path.getOuterBindingIdentifiers();

            for (var name in ids) {
              if (name === state.oldName) ids[name].name = state.newName;
            }
          }
        };

        var Renamer = (function() {
          function Renamer(binding, oldName, newName) {
            this.newName = newName;
            this.oldName = oldName;
            this.binding = binding;
          }

          var _proto = Renamer.prototype;

          _proto.maybeConvertFromExportDeclaration = function maybeConvertFromExportDeclaration(
            parentDeclar
          ) {
            var maybeExportDeclar = parentDeclar.parentPath;

            if (!maybeExportDeclar.isExportDeclaration()) {
              return;
            }

            if (
              maybeExportDeclar.isExportDefaultDeclaration() &&
              !maybeExportDeclar.get("declaration").node.id
            ) {
              return;
            }

            (0, _helperSplitExportDeclaration().default)(maybeExportDeclar);
          };

          _proto.maybeConvertFromClassFunctionDeclaration = function maybeConvertFromClassFunctionDeclaration(
            path
          ) {
            return;
            if (!path.isFunctionDeclaration() && !path.isClassDeclaration())
              return;
            if (this.binding.kind !== "hoisted") return;
            path.node.id = t().identifier(this.oldName);
            path.node._blockHoist = 3;
            path.replaceWith(
              t().variableDeclaration("let", [
                t().variableDeclarator(
                  t().identifier(this.newName),
                  t().toExpression(path.node)
                )
              ])
            );
          };

          _proto.maybeConvertFromClassFunctionExpression = function maybeConvertFromClassFunctionExpression(
            path
          ) {
            return;
            if (!path.isFunctionExpression() && !path.isClassExpression())
              return;
            if (this.binding.kind !== "local") return;
            path.node.id = t().identifier(this.oldName);
            this.binding.scope.parent.push({
              id: t().identifier(this.newName)
            });
            path.replaceWith(
              t().assignmentExpression(
                "=",
                t().identifier(this.newName),
                path.node
              )
            );
          };

          _proto.rename = function rename(block) {
            var binding = this.binding,
              oldName = this.oldName,
              newName = this.newName;
            var scope = binding.scope,
              path = binding.path;
            var parentDeclar = path.find(function(path) {
              return (
                path.isDeclaration() ||
                path.isFunctionExpression() ||
                path.isClassExpression()
              );
            });

            if (parentDeclar) {
              this.maybeConvertFromExportDeclaration(parentDeclar);
            }

            scope.traverse(block || scope.block, renameVisitor, this);

            if (!block) {
              scope.removeOwnBinding(oldName);
              scope.bindings[newName] = binding;
              this.binding.identifier.name = newName;
            }

            if (binding.type === "hoisted") {
            }

            if (parentDeclar) {
              this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
              this.maybeConvertFromClassFunctionExpression(parentDeclar);
            }
          };

          return Renamer;
        })();

        exports.default = Renamer;

        /***/
      },
      /* 379 */
      /***/ function(module, exports, __webpack_require__) {
        var baseRest = __webpack_require__(47),
          eq = __webpack_require__(30),
          isIterateeCall = __webpack_require__(35),
          keysIn = __webpack_require__(42);

        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var defaults = baseRest(function(object, sources) {
          object = Object(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }

          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;

            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];

              if (
                value === undefined ||
                (eq(value, objectProto[key]) &&
                  !hasOwnProperty.call(object, key))
              ) {
                object[key] = source[key];
              }
            }
          }

          return object;
        });
        module.exports = defaults;

        /***/
      },
      /* 380 */
      /***/ function(module, exports, __webpack_require__) {
        var apply = __webpack_require__(381);

        var nativeMax = Math.max;

        function overRest(func, start, transform) {
          start = nativeMax(start === undefined ? func.length - 1 : start, 0);
          return function() {
            var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

            while (++index < length) {
              array[index] = args[start + index];
            }

            index = -1;
            var otherArgs = Array(start + 1);

            while (++index < start) {
              otherArgs[index] = args[index];
            }

            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }

        module.exports = overRest;

        /***/
      },
      /* 381 */
      /***/ function(module, exports) {
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);

            case 1:
              return func.call(thisArg, args[0]);

            case 2:
              return func.call(thisArg, args[0], args[1]);

            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }

          return func.apply(thisArg, args);
        }

        module.exports = apply;

        /***/
      },
      /* 382 */
      /***/ function(module, exports, __webpack_require__) {
        var baseSetToString = __webpack_require__(383),
          shortOut = __webpack_require__(385);

        var setToString = shortOut(baseSetToString);
        module.exports = setToString;

        /***/
      },
      /* 383 */
      /***/ function(module, exports, __webpack_require__) {
        var constant = __webpack_require__(384),
          defineProperty = __webpack_require__(111),
          identity = __webpack_require__(48);

        var baseSetToString = !defineProperty
          ? identity
          : function(func, string) {
              return defineProperty(func, "toString", {
                configurable: true,
                enumerable: false,
                value: constant(string),
                writable: true
              });
            };
        module.exports = baseSetToString;

        /***/
      },
      /* 384 */
      /***/ function(module, exports) {
        function constant(value) {
          return function() {
            return value;
          };
        }

        module.exports = constant;

        /***/
      },
      /* 385 */
      /***/ function(module, exports) {
        var HOT_COUNT = 800,
          HOT_SPAN = 16;
        var nativeNow = Date.now;

        function shortOut(func) {
          var count = 0,
            lastCalled = 0;
          return function() {
            var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;

            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }

            return func.apply(undefined, arguments);
          };
        }

        module.exports = shortOut;

        /***/
      },
      /* 386 */
      /***/ function(module, exports) {
        module.exports = {
          builtin: {
            Array: false,
            ArrayBuffer: false,
            Atomics: false,
            Boolean: false,
            constructor: false,
            DataView: false,
            Date: false,
            decodeURI: false,
            decodeURIComponent: false,
            encodeURI: false,
            encodeURIComponent: false,
            Error: false,
            escape: false,
            eval: false,
            EvalError: false,
            Float32Array: false,
            Float64Array: false,
            Function: false,
            hasOwnProperty: false,
            Infinity: false,
            Int16Array: false,
            Int32Array: false,
            Int8Array: false,
            isFinite: false,
            isNaN: false,
            isPrototypeOf: false,
            JSON: false,
            Map: false,
            Math: false,
            NaN: false,
            Number: false,
            Object: false,
            parseFloat: false,
            parseInt: false,
            Promise: false,
            propertyIsEnumerable: false,
            Proxy: false,
            RangeError: false,
            ReferenceError: false,
            Reflect: false,
            RegExp: false,
            Set: false,
            SharedArrayBuffer: false,
            String: false,
            Symbol: false,
            SyntaxError: false,
            toLocaleString: false,
            toString: false,
            TypeError: false,
            Uint16Array: false,
            Uint32Array: false,
            Uint8Array: false,
            Uint8ClampedArray: false,
            undefined: false,
            unescape: false,
            URIError: false,
            valueOf: false,
            WeakMap: false,
            WeakSet: false
          },
          es5: {
            Array: false,
            Boolean: false,
            constructor: false,
            Date: false,
            decodeURI: false,
            decodeURIComponent: false,
            encodeURI: false,
            encodeURIComponent: false,
            Error: false,
            escape: false,
            eval: false,
            EvalError: false,
            Function: false,
            hasOwnProperty: false,
            Infinity: false,
            isFinite: false,
            isNaN: false,
            isPrototypeOf: false,
            JSON: false,
            Math: false,
            NaN: false,
            Number: false,
            Object: false,
            parseFloat: false,
            parseInt: false,
            propertyIsEnumerable: false,
            RangeError: false,
            ReferenceError: false,
            RegExp: false,
            String: false,
            SyntaxError: false,
            toLocaleString: false,
            toString: false,
            TypeError: false,
            undefined: false,
            unescape: false,
            URIError: false,
            valueOf: false
          },
          es2015: {
            Array: false,
            ArrayBuffer: false,
            Boolean: false,
            constructor: false,
            DataView: false,
            Date: false,
            decodeURI: false,
            decodeURIComponent: false,
            encodeURI: false,
            encodeURIComponent: false,
            Error: false,
            escape: false,
            eval: false,
            EvalError: false,
            Float32Array: false,
            Float64Array: false,
            Function: false,
            hasOwnProperty: false,
            Infinity: false,
            Int16Array: false,
            Int32Array: false,
            Int8Array: false,
            isFinite: false,
            isNaN: false,
            isPrototypeOf: false,
            JSON: false,
            Map: false,
            Math: false,
            NaN: false,
            Number: false,
            Object: false,
            parseFloat: false,
            parseInt: false,
            Promise: false,
            propertyIsEnumerable: false,
            Proxy: false,
            RangeError: false,
            ReferenceError: false,
            Reflect: false,
            RegExp: false,
            Set: false,
            String: false,
            Symbol: false,
            SyntaxError: false,
            toLocaleString: false,
            toString: false,
            TypeError: false,
            Uint16Array: false,
            Uint32Array: false,
            Uint8Array: false,
            Uint8ClampedArray: false,
            undefined: false,
            unescape: false,
            URIError: false,
            valueOf: false,
            WeakMap: false,
            WeakSet: false
          },
          es2017: {
            Array: false,
            ArrayBuffer: false,
            Atomics: false,
            Boolean: false,
            constructor: false,
            DataView: false,
            Date: false,
            decodeURI: false,
            decodeURIComponent: false,
            encodeURI: false,
            encodeURIComponent: false,
            Error: false,
            escape: false,
            eval: false,
            EvalError: false,
            Float32Array: false,
            Float64Array: false,
            Function: false,
            hasOwnProperty: false,
            Infinity: false,
            Int16Array: false,
            Int32Array: false,
            Int8Array: false,
            isFinite: false,
            isNaN: false,
            isPrototypeOf: false,
            JSON: false,
            Map: false,
            Math: false,
            NaN: false,
            Number: false,
            Object: false,
            parseFloat: false,
            parseInt: false,
            Promise: false,
            propertyIsEnumerable: false,
            Proxy: false,
            RangeError: false,
            ReferenceError: false,
            Reflect: false,
            RegExp: false,
            Set: false,
            SharedArrayBuffer: false,
            String: false,
            Symbol: false,
            SyntaxError: false,
            toLocaleString: false,
            toString: false,
            TypeError: false,
            Uint16Array: false,
            Uint32Array: false,
            Uint8Array: false,
            Uint8ClampedArray: false,
            undefined: false,
            unescape: false,
            URIError: false,
            valueOf: false,
            WeakMap: false,
            WeakSet: false
          },
          browser: {
            AbortController: false,
            AbortSignal: false,
            addEventListener: false,
            alert: false,
            AnalyserNode: false,
            Animation: false,
            AnimationEffectReadOnly: false,
            AnimationEffectTiming: false,
            AnimationEffectTimingReadOnly: false,
            AnimationEvent: false,
            AnimationPlaybackEvent: false,
            AnimationTimeline: false,
            applicationCache: false,
            ApplicationCache: false,
            ApplicationCacheErrorEvent: false,
            atob: false,
            Attr: false,
            Audio: false,
            AudioBuffer: false,
            AudioBufferSourceNode: false,
            AudioContext: false,
            AudioDestinationNode: false,
            AudioListener: false,
            AudioNode: false,
            AudioParam: false,
            AudioProcessingEvent: false,
            AudioScheduledSourceNode: false,
            BarProp: false,
            BaseAudioContext: false,
            BatteryManager: false,
            BeforeUnloadEvent: false,
            BiquadFilterNode: false,
            Blob: false,
            BlobEvent: false,
            blur: false,
            BroadcastChannel: false,
            btoa: false,
            BudgetService: false,
            ByteLengthQueuingStrategy: false,
            Cache: false,
            caches: false,
            CacheStorage: false,
            cancelAnimationFrame: false,
            cancelIdleCallback: false,
            CanvasCaptureMediaStreamTrack: false,
            CanvasGradient: false,
            CanvasPattern: false,
            CanvasRenderingContext2D: false,
            ChannelMergerNode: false,
            ChannelSplitterNode: false,
            CharacterData: false,
            clearInterval: false,
            clearTimeout: false,
            clientInformation: false,
            ClipboardEvent: false,
            close: false,
            closed: false,
            CloseEvent: false,
            Comment: false,
            CompositionEvent: false,
            confirm: false,
            console: false,
            ConstantSourceNode: false,
            ConvolverNode: false,
            CountQueuingStrategy: false,
            createImageBitmap: false,
            Credential: false,
            CredentialsContainer: false,
            crypto: false,
            Crypto: false,
            CryptoKey: false,
            CSS: false,
            CSSConditionRule: false,
            CSSFontFaceRule: false,
            CSSGroupingRule: false,
            CSSImportRule: false,
            CSSKeyframeRule: false,
            CSSKeyframesRule: false,
            CSSMediaRule: false,
            CSSNamespaceRule: false,
            CSSPageRule: false,
            CSSRule: false,
            CSSRuleList: false,
            CSSStyleDeclaration: false,
            CSSStyleRule: false,
            CSSStyleSheet: false,
            CSSSupportsRule: false,
            CustomElementRegistry: false,
            customElements: false,
            CustomEvent: false,
            DataTransfer: false,
            DataTransferItem: false,
            DataTransferItemList: false,
            defaultstatus: false,
            defaultStatus: false,
            DelayNode: false,
            DeviceMotionEvent: false,
            DeviceOrientationEvent: false,
            devicePixelRatio: false,
            dispatchEvent: false,
            document: false,
            Document: false,
            DocumentFragment: false,
            DocumentType: false,
            DOMError: false,
            DOMException: false,
            DOMImplementation: false,
            DOMMatrix: false,
            DOMMatrixReadOnly: false,
            DOMParser: false,
            DOMPoint: false,
            DOMPointReadOnly: false,
            DOMQuad: false,
            DOMRect: false,
            DOMRectReadOnly: false,
            DOMStringList: false,
            DOMStringMap: false,
            DOMTokenList: false,
            DragEvent: false,
            DynamicsCompressorNode: false,
            Element: false,
            ErrorEvent: false,
            event: false,
            Event: false,
            EventSource: false,
            EventTarget: false,
            external: false,
            fetch: false,
            File: false,
            FileList: false,
            FileReader: false,
            find: false,
            focus: false,
            FocusEvent: false,
            FontFace: false,
            FontFaceSetLoadEvent: false,
            FormData: false,
            frameElement: false,
            frames: false,
            GainNode: false,
            Gamepad: false,
            GamepadButton: false,
            GamepadEvent: false,
            getComputedStyle: false,
            getSelection: false,
            HashChangeEvent: false,
            Headers: false,
            history: false,
            History: false,
            HTMLAllCollection: false,
            HTMLAnchorElement: false,
            HTMLAreaElement: false,
            HTMLAudioElement: false,
            HTMLBaseElement: false,
            HTMLBodyElement: false,
            HTMLBRElement: false,
            HTMLButtonElement: false,
            HTMLCanvasElement: false,
            HTMLCollection: false,
            HTMLContentElement: false,
            HTMLDataElement: false,
            HTMLDataListElement: false,
            HTMLDetailsElement: false,
            HTMLDialogElement: false,
            HTMLDirectoryElement: false,
            HTMLDivElement: false,
            HTMLDListElement: false,
            HTMLDocument: false,
            HTMLElement: false,
            HTMLEmbedElement: false,
            HTMLFieldSetElement: false,
            HTMLFontElement: false,
            HTMLFormControlsCollection: false,
            HTMLFormElement: false,
            HTMLFrameElement: false,
            HTMLFrameSetElement: false,
            HTMLHeadElement: false,
            HTMLHeadingElement: false,
            HTMLHRElement: false,
            HTMLHtmlElement: false,
            HTMLIFrameElement: false,
            HTMLImageElement: false,
            HTMLInputElement: false,
            HTMLLabelElement: false,
            HTMLLegendElement: false,
            HTMLLIElement: false,
            HTMLLinkElement: false,
            HTMLMapElement: false,
            HTMLMarqueeElement: false,
            HTMLMediaElement: false,
            HTMLMenuElement: false,
            HTMLMetaElement: false,
            HTMLMeterElement: false,
            HTMLModElement: false,
            HTMLObjectElement: false,
            HTMLOListElement: false,
            HTMLOptGroupElement: false,
            HTMLOptionElement: false,
            HTMLOptionsCollection: false,
            HTMLOutputElement: false,
            HTMLParagraphElement: false,
            HTMLParamElement: false,
            HTMLPictureElement: false,
            HTMLPreElement: false,
            HTMLProgressElement: false,
            HTMLQuoteElement: false,
            HTMLScriptElement: false,
            HTMLSelectElement: false,
            HTMLShadowElement: false,
            HTMLSlotElement: false,
            HTMLSourceElement: false,
            HTMLSpanElement: false,
            HTMLStyleElement: false,
            HTMLTableCaptionElement: false,
            HTMLTableCellElement: false,
            HTMLTableColElement: false,
            HTMLTableElement: false,
            HTMLTableRowElement: false,
            HTMLTableSectionElement: false,
            HTMLTemplateElement: false,
            HTMLTextAreaElement: false,
            HTMLTimeElement: false,
            HTMLTitleElement: false,
            HTMLTrackElement: false,
            HTMLUListElement: false,
            HTMLUnknownElement: false,
            HTMLVideoElement: false,
            IDBCursor: false,
            IDBCursorWithValue: false,
            IDBDatabase: false,
            IDBFactory: false,
            IDBIndex: false,
            IDBKeyRange: false,
            IDBObjectStore: false,
            IDBOpenDBRequest: false,
            IDBRequest: false,
            IDBTransaction: false,
            IDBVersionChangeEvent: false,
            IdleDeadline: false,
            IIRFilterNode: false,
            Image: false,
            ImageBitmap: false,
            ImageBitmapRenderingContext: false,
            ImageCapture: false,
            ImageData: false,
            indexedDB: false,
            innerHeight: false,
            innerWidth: false,
            InputEvent: false,
            IntersectionObserver: false,
            IntersectionObserverEntry: false,
            Intl: false,
            isSecureContext: false,
            KeyboardEvent: false,
            KeyframeEffect: false,
            KeyframeEffectReadOnly: false,
            length: false,
            localStorage: false,
            location: false,
            Location: false,
            locationbar: false,
            matchMedia: false,
            MediaDeviceInfo: false,
            MediaDevices: false,
            MediaElementAudioSourceNode: false,
            MediaEncryptedEvent: false,
            MediaError: false,
            MediaKeyMessageEvent: false,
            MediaKeySession: false,
            MediaKeyStatusMap: false,
            MediaKeySystemAccess: false,
            MediaList: false,
            MediaQueryList: false,
            MediaQueryListEvent: false,
            MediaRecorder: false,
            MediaSettingsRange: false,
            MediaSource: false,
            MediaStream: false,
            MediaStreamAudioDestinationNode: false,
            MediaStreamAudioSourceNode: false,
            MediaStreamEvent: false,
            MediaStreamTrack: false,
            MediaStreamTrackEvent: false,
            menubar: false,
            MessageChannel: false,
            MessageEvent: false,
            MessagePort: false,
            MIDIAccess: false,
            MIDIConnectionEvent: false,
            MIDIInput: false,
            MIDIInputMap: false,
            MIDIMessageEvent: false,
            MIDIOutput: false,
            MIDIOutputMap: false,
            MIDIPort: false,
            MimeType: false,
            MimeTypeArray: false,
            MouseEvent: false,
            moveBy: false,
            moveTo: false,
            MutationEvent: false,
            MutationObserver: false,
            MutationRecord: false,
            name: false,
            NamedNodeMap: false,
            NavigationPreloadManager: false,
            navigator: false,
            Navigator: false,
            NetworkInformation: false,
            Node: false,
            NodeFilter: false,
            NodeIterator: false,
            NodeList: false,
            Notification: false,
            OfflineAudioCompletionEvent: false,
            OfflineAudioContext: false,
            offscreenBuffering: false,
            OffscreenCanvas: true,
            onabort: true,
            onafterprint: true,
            onanimationend: true,
            onanimationiteration: true,
            onanimationstart: true,
            onappinstalled: true,
            onauxclick: true,
            onbeforeinstallprompt: true,
            onbeforeprint: true,
            onbeforeunload: true,
            onblur: true,
            oncancel: true,
            oncanplay: true,
            oncanplaythrough: true,
            onchange: true,
            onclick: true,
            onclose: true,
            oncontextmenu: true,
            oncuechange: true,
            ondblclick: true,
            ondevicemotion: true,
            ondeviceorientation: true,
            ondeviceorientationabsolute: true,
            ondrag: true,
            ondragend: true,
            ondragenter: true,
            ondragleave: true,
            ondragover: true,
            ondragstart: true,
            ondrop: true,
            ondurationchange: true,
            onemptied: true,
            onended: true,
            onerror: true,
            onfocus: true,
            ongotpointercapture: true,
            onhashchange: true,
            oninput: true,
            oninvalid: true,
            onkeydown: true,
            onkeypress: true,
            onkeyup: true,
            onlanguagechange: true,
            onload: true,
            onloadeddata: true,
            onloadedmetadata: true,
            onloadstart: true,
            onlostpointercapture: true,
            onmessage: true,
            onmessageerror: true,
            onmousedown: true,
            onmouseenter: true,
            onmouseleave: true,
            onmousemove: true,
            onmouseout: true,
            onmouseover: true,
            onmouseup: true,
            onmousewheel: true,
            onoffline: true,
            ononline: true,
            onpagehide: true,
            onpageshow: true,
            onpause: true,
            onplay: true,
            onplaying: true,
            onpointercancel: true,
            onpointerdown: true,
            onpointerenter: true,
            onpointerleave: true,
            onpointermove: true,
            onpointerout: true,
            onpointerover: true,
            onpointerup: true,
            onpopstate: true,
            onprogress: true,
            onratechange: true,
            onrejectionhandled: true,
            onreset: true,
            onresize: true,
            onscroll: true,
            onsearch: true,
            onseeked: true,
            onseeking: true,
            onselect: true,
            onstalled: true,
            onstorage: true,
            onsubmit: true,
            onsuspend: true,
            ontimeupdate: true,
            ontoggle: true,
            ontransitionend: true,
            onunhandledrejection: true,
            onunload: true,
            onvolumechange: true,
            onwaiting: true,
            onwheel: true,
            open: false,
            openDatabase: false,
            opener: false,
            Option: false,
            origin: false,
            OscillatorNode: false,
            outerHeight: false,
            outerWidth: false,
            PageTransitionEvent: false,
            pageXOffset: false,
            pageYOffset: false,
            PannerNode: false,
            parent: false,
            Path2D: false,
            PaymentAddress: false,
            PaymentRequest: false,
            PaymentRequestUpdateEvent: false,
            PaymentResponse: false,
            performance: false,
            Performance: false,
            PerformanceEntry: false,
            PerformanceLongTaskTiming: false,
            PerformanceMark: false,
            PerformanceMeasure: false,
            PerformanceNavigation: false,
            PerformanceNavigationTiming: false,
            PerformanceObserver: false,
            PerformanceObserverEntryList: false,
            PerformancePaintTiming: false,
            PerformanceResourceTiming: false,
            PerformanceTiming: false,
            PeriodicWave: false,
            Permissions: false,
            PermissionStatus: false,
            personalbar: false,
            PhotoCapabilities: false,
            Plugin: false,
            PluginArray: false,
            PointerEvent: false,
            PopStateEvent: false,
            postMessage: false,
            Presentation: false,
            PresentationAvailability: false,
            PresentationConnection: false,
            PresentationConnectionAvailableEvent: false,
            PresentationConnectionCloseEvent: false,
            PresentationConnectionList: false,
            PresentationReceiver: false,
            PresentationRequest: false,
            print: false,
            ProcessingInstruction: false,
            ProgressEvent: false,
            PromiseRejectionEvent: false,
            prompt: false,
            PushManager: false,
            PushSubscription: false,
            PushSubscriptionOptions: false,
            RadioNodeList: false,
            Range: false,
            ReadableStream: false,
            RemotePlayback: false,
            removeEventListener: false,
            Request: false,
            requestAnimationFrame: false,
            requestIdleCallback: false,
            resizeBy: false,
            ResizeObserver: false,
            ResizeObserverEntry: false,
            resizeTo: false,
            Response: false,
            RTCCertificate: false,
            RTCDataChannel: false,
            RTCDataChannelEvent: false,
            RTCDtlsTransport: false,
            RTCIceCandidate: false,
            RTCIceGatherer: false,
            RTCIceTransport: false,
            RTCPeerConnection: false,
            RTCPeerConnectionIceEvent: false,
            RTCRtpContributingSource: false,
            RTCRtpReceiver: false,
            RTCRtpSender: false,
            RTCSctpTransport: false,
            RTCSessionDescription: false,
            RTCStatsReport: false,
            RTCTrackEvent: false,
            screen: false,
            Screen: false,
            screenLeft: false,
            ScreenOrientation: false,
            screenTop: false,
            screenX: false,
            screenY: false,
            ScriptProcessorNode: false,
            scroll: false,
            scrollbars: false,
            scrollBy: false,
            scrollTo: false,
            scrollX: false,
            scrollY: false,
            SecurityPolicyViolationEvent: false,
            Selection: false,
            self: false,
            ServiceWorker: false,
            ServiceWorkerContainer: false,
            ServiceWorkerRegistration: false,
            sessionStorage: false,
            setInterval: false,
            setTimeout: false,
            ShadowRoot: false,
            SharedWorker: false,
            SourceBuffer: false,
            SourceBufferList: false,
            speechSynthesis: false,
            SpeechSynthesisEvent: false,
            SpeechSynthesisUtterance: false,
            StaticRange: false,
            status: false,
            statusbar: false,
            StereoPannerNode: false,
            stop: false,
            Storage: false,
            StorageEvent: false,
            StorageManager: false,
            styleMedia: false,
            StyleSheet: false,
            StyleSheetList: false,
            SubtleCrypto: false,
            SVGAElement: false,
            SVGAngle: false,
            SVGAnimatedAngle: false,
            SVGAnimatedBoolean: false,
            SVGAnimatedEnumeration: false,
            SVGAnimatedInteger: false,
            SVGAnimatedLength: false,
            SVGAnimatedLengthList: false,
            SVGAnimatedNumber: false,
            SVGAnimatedNumberList: false,
            SVGAnimatedPreserveAspectRatio: false,
            SVGAnimatedRect: false,
            SVGAnimatedString: false,
            SVGAnimatedTransformList: false,
            SVGAnimateElement: false,
            SVGAnimateMotionElement: false,
            SVGAnimateTransformElement: false,
            SVGAnimationElement: false,
            SVGCircleElement: false,
            SVGClipPathElement: false,
            SVGComponentTransferFunctionElement: false,
            SVGDefsElement: false,
            SVGDescElement: false,
            SVGDiscardElement: false,
            SVGElement: false,
            SVGEllipseElement: false,
            SVGFEBlendElement: false,
            SVGFEColorMatrixElement: false,
            SVGFEComponentTransferElement: false,
            SVGFECompositeElement: false,
            SVGFEConvolveMatrixElement: false,
            SVGFEDiffuseLightingElement: false,
            SVGFEDisplacementMapElement: false,
            SVGFEDistantLightElement: false,
            SVGFEDropShadowElement: false,
            SVGFEFloodElement: false,
            SVGFEFuncAElement: false,
            SVGFEFuncBElement: false,
            SVGFEFuncGElement: false,
            SVGFEFuncRElement: false,
            SVGFEGaussianBlurElement: false,
            SVGFEImageElement: false,
            SVGFEMergeElement: false,
            SVGFEMergeNodeElement: false,
            SVGFEMorphologyElement: false,
            SVGFEOffsetElement: false,
            SVGFEPointLightElement: false,
            SVGFESpecularLightingElement: false,
            SVGFESpotLightElement: false,
            SVGFETileElement: false,
            SVGFETurbulenceElement: false,
            SVGFilterElement: false,
            SVGForeignObjectElement: false,
            SVGGElement: false,
            SVGGeometryElement: false,
            SVGGradientElement: false,
            SVGGraphicsElement: false,
            SVGImageElement: false,
            SVGLength: false,
            SVGLengthList: false,
            SVGLinearGradientElement: false,
            SVGLineElement: false,
            SVGMarkerElement: false,
            SVGMaskElement: false,
            SVGMatrix: false,
            SVGMetadataElement: false,
            SVGMPathElement: false,
            SVGNumber: false,
            SVGNumberList: false,
            SVGPathElement: false,
            SVGPatternElement: false,
            SVGPoint: false,
            SVGPointList: false,
            SVGPolygonElement: false,
            SVGPolylineElement: false,
            SVGPreserveAspectRatio: false,
            SVGRadialGradientElement: false,
            SVGRect: false,
            SVGRectElement: false,
            SVGScriptElement: false,
            SVGSetElement: false,
            SVGStopElement: false,
            SVGStringList: false,
            SVGStyleElement: false,
            SVGSVGElement: false,
            SVGSwitchElement: false,
            SVGSymbolElement: false,
            SVGTextContentElement: false,
            SVGTextElement: false,
            SVGTextPathElement: false,
            SVGTextPositioningElement: false,
            SVGTitleElement: false,
            SVGTransform: false,
            SVGTransformList: false,
            SVGTSpanElement: false,
            SVGUnitTypes: false,
            SVGUseElement: false,
            SVGViewElement: false,
            TaskAttributionTiming: false,
            Text: false,
            TextDecoder: false,
            TextEncoder: false,
            TextEvent: false,
            TextMetrics: false,
            TextTrack: false,
            TextTrackCue: false,
            TextTrackCueList: false,
            TextTrackList: false,
            TimeRanges: false,
            toolbar: false,
            top: false,
            Touch: false,
            TouchEvent: false,
            TouchList: false,
            TrackEvent: false,
            TransitionEvent: false,
            TreeWalker: false,
            UIEvent: false,
            URL: false,
            URLSearchParams: false,
            ValidityState: false,
            visualViewport: false,
            VisualViewport: false,
            VTTCue: false,
            WaveShaperNode: false,
            WebAssembly: false,
            WebGL2RenderingContext: false,
            WebGLActiveInfo: false,
            WebGLBuffer: false,
            WebGLContextEvent: false,
            WebGLFramebuffer: false,
            WebGLProgram: false,
            WebGLQuery: false,
            WebGLRenderbuffer: false,
            WebGLRenderingContext: false,
            WebGLSampler: false,
            WebGLShader: false,
            WebGLShaderPrecisionFormat: false,
            WebGLSync: false,
            WebGLTexture: false,
            WebGLTransformFeedback: false,
            WebGLUniformLocation: false,
            WebGLVertexArrayObject: false,
            WebSocket: false,
            WheelEvent: false,
            window: false,
            Window: false,
            Worker: false,
            WritableStream: false,
            XMLDocument: false,
            XMLHttpRequest: false,
            XMLHttpRequestEventTarget: false,
            XMLHttpRequestUpload: false,
            XMLSerializer: false,
            XPathEvaluator: false,
            XPathExpression: false,
            XPathResult: false,
            XSLTProcessor: false
          },
          worker: {
            applicationCache: false,
            atob: false,
            Blob: false,
            BroadcastChannel: false,
            btoa: false,
            Cache: false,
            caches: false,
            clearInterval: false,
            clearTimeout: false,
            close: true,
            console: false,
            fetch: false,
            FileReaderSync: false,
            FormData: false,
            Headers: false,
            IDBCursor: false,
            IDBCursorWithValue: false,
            IDBDatabase: false,
            IDBFactory: false,
            IDBIndex: false,
            IDBKeyRange: false,
            IDBObjectStore: false,
            IDBOpenDBRequest: false,
            IDBRequest: false,
            IDBTransaction: false,
            IDBVersionChangeEvent: false,
            ImageData: false,
            importScripts: true,
            indexedDB: false,
            location: false,
            MessageChannel: false,
            MessagePort: false,
            name: false,
            navigator: false,
            Notification: false,
            onclose: true,
            onconnect: true,
            onerror: true,
            onlanguagechange: true,
            onmessage: true,
            onoffline: true,
            ononline: true,
            onrejectionhandled: true,
            onunhandledrejection: true,
            performance: false,
            Performance: false,
            PerformanceEntry: false,
            PerformanceMark: false,
            PerformanceMeasure: false,
            PerformanceNavigation: false,
            PerformanceResourceTiming: false,
            PerformanceTiming: false,
            postMessage: true,
            Promise: false,
            Request: false,
            Response: false,
            self: true,
            ServiceWorkerRegistration: false,
            setInterval: false,
            setTimeout: false,
            TextDecoder: false,
            TextEncoder: false,
            URL: false,
            URLSearchParams: false,
            WebSocket: false,
            Worker: false,
            XMLHttpRequest: false
          },
          node: {
            __dirname: false,
            __filename: false,
            Buffer: false,
            clearImmediate: false,
            clearInterval: false,
            clearTimeout: false,
            console: false,
            exports: true,
            global: false,
            Intl: false,
            module: false,
            process: false,
            require: false,
            setImmediate: false,
            setInterval: false,
            setTimeout: false
          },
          commonjs: {
            exports: true,
            global: false,
            module: false,
            require: false
          },
          amd: { define: false, require: false },
          mocha: {
            after: false,
            afterEach: false,
            before: false,
            beforeEach: false,
            context: false,
            describe: false,
            it: false,
            mocha: false,
            run: false,
            setup: false,
            specify: false,
            suite: false,
            suiteSetup: false,
            suiteTeardown: false,
            teardown: false,
            test: false,
            xcontext: false,
            xdescribe: false,
            xit: false,
            xspecify: false
          },
          jasmine: {
            afterAll: false,
            afterEach: false,
            beforeAll: false,
            beforeEach: false,
            describe: false,
            expect: false,
            fail: false,
            fdescribe: false,
            fit: false,
            it: false,
            jasmine: false,
            pending: false,
            runs: false,
            spyOn: false,
            spyOnProperty: false,
            waits: false,
            waitsFor: false,
            xdescribe: false,
            xit: false
          },
          jest: {
            afterAll: false,
            afterEach: false,
            beforeAll: false,
            beforeEach: false,
            describe: false,
            expect: false,
            fdescribe: false,
            fit: false,
            it: false,
            jest: false,
            pit: false,
            require: false,
            test: false,
            xdescribe: false,
            xit: false,
            xtest: false
          },
          qunit: {
            asyncTest: false,
            deepEqual: false,
            equal: false,
            expect: false,
            module: false,
            notDeepEqual: false,
            notEqual: false,
            notOk: false,
            notPropEqual: false,
            notStrictEqual: false,
            ok: false,
            propEqual: false,
            QUnit: false,
            raises: false,
            start: false,
            stop: false,
            strictEqual: false,
            test: false,
            throws: false
          },
          phantomjs: {
            console: true,
            exports: true,
            phantom: true,
            require: true,
            WebPage: true
          },
          couch: {
            emit: false,
            exports: false,
            getRow: false,
            log: false,
            module: false,
            provides: false,
            require: false,
            respond: false,
            send: false,
            start: false,
            sum: false
          },
          rhino: {
            defineClass: false,
            deserialize: false,
            gc: false,
            help: false,
            importClass: false,
            importPackage: false,
            java: false,
            load: false,
            loadClass: false,
            Packages: false,
            print: false,
            quit: false,
            readFile: false,
            readUrl: false,
            runCommand: false,
            seal: false,
            serialize: false,
            spawn: false,
            sync: false,
            toint32: false,
            version: false
          },
          nashorn: {
            __DIR__: false,
            __FILE__: false,
            __LINE__: false,
            com: false,
            edu: false,
            exit: false,
            java: false,
            Java: false,
            javafx: false,
            JavaImporter: false,
            javax: false,
            JSAdapter: false,
            load: false,
            loadWithNewGlobal: false,
            org: false,
            Packages: false,
            print: false,
            quit: false
          },
          wsh: {
            ActiveXObject: true,
            Enumerator: true,
            GetObject: true,
            ScriptEngine: true,
            ScriptEngineBuildVersion: true,
            ScriptEngineMajorVersion: true,
            ScriptEngineMinorVersion: true,
            VBArray: true,
            WScript: true,
            WSH: true,
            XDomainRequest: true
          },
          jquery: { $: false, jQuery: false },
          yui: { Y: false, YUI: false, YUI_config: false },
          shelljs: {
            cat: false,
            cd: false,
            chmod: false,
            config: false,
            cp: false,
            dirs: false,
            echo: false,
            env: false,
            error: false,
            exec: false,
            exit: false,
            find: false,
            grep: false,
            ln: false,
            ls: false,
            mkdir: false,
            mv: false,
            popd: false,
            pushd: false,
            pwd: false,
            rm: false,
            sed: false,
            set: false,
            target: false,
            tempdir: false,
            test: false,
            touch: false,
            which: false
          },
          prototypejs: {
            $: false,
            $$: false,
            $A: false,
            $break: false,
            $continue: false,
            $F: false,
            $H: false,
            $R: false,
            $w: false,
            Abstract: false,
            Ajax: false,
            Autocompleter: false,
            Builder: false,
            Class: false,
            Control: false,
            Draggable: false,
            Draggables: false,
            Droppables: false,
            Effect: false,
            Element: false,
            Enumerable: false,
            Event: false,
            Field: false,
            Form: false,
            Hash: false,
            Insertion: false,
            ObjectRange: false,
            PeriodicalExecuter: false,
            Position: false,
            Prototype: false,
            Scriptaculous: false,
            Selector: false,
            Sortable: false,
            SortableObserver: false,
            Sound: false,
            Template: false,
            Toggle: false,
            Try: false
          },
          meteor: {
            _: false,
            $: false,
            Accounts: false,
            AccountsClient: false,
            AccountsCommon: false,
            AccountsServer: false,
            App: false,
            Assets: false,
            Blaze: false,
            check: false,
            Cordova: false,
            DDP: false,
            DDPRateLimiter: false,
            DDPServer: false,
            Deps: false,
            EJSON: false,
            Email: false,
            HTTP: false,
            Log: false,
            Match: false,
            Meteor: false,
            Mongo: false,
            MongoInternals: false,
            Npm: false,
            Package: false,
            Plugin: false,
            process: false,
            Random: false,
            ReactiveDict: false,
            ReactiveVar: false,
            Router: false,
            ServiceConfiguration: false,
            Session: false,
            share: false,
            Spacebars: false,
            Template: false,
            Tinytest: false,
            Tracker: false,
            UI: false,
            Utils: false,
            WebApp: false,
            WebAppInternals: false
          },
          mongo: {
            _isWindows: false,
            _rand: false,
            BulkWriteResult: false,
            cat: false,
            cd: false,
            connect: false,
            db: false,
            getHostName: false,
            getMemInfo: false,
            hostname: false,
            ISODate: false,
            listFiles: false,
            load: false,
            ls: false,
            md5sumFile: false,
            mkdir: false,
            Mongo: false,
            NumberInt: false,
            NumberLong: false,
            ObjectId: false,
            PlanCache: false,
            print: false,
            printjson: false,
            pwd: false,
            quit: false,
            removeFile: false,
            rs: false,
            sh: false,
            UUID: false,
            version: false,
            WriteResult: false
          },
          applescript: {
            $: false,
            Application: false,
            Automation: false,
            console: false,
            delay: false,
            Library: false,
            ObjC: false,
            ObjectSpecifier: false,
            Path: false,
            Progress: false,
            Ref: false
          },
          serviceworker: {
            Cache: false,
            caches: false,
            CacheStorage: false,
            Client: false,
            clients: false,
            Clients: false,
            ExtendableEvent: false,
            ExtendableMessageEvent: false,
            FetchEvent: false,
            importScripts: false,
            registration: false,
            self: false,
            ServiceWorker: false,
            ServiceWorkerContainer: false,
            ServiceWorkerGlobalScope: false,
            ServiceWorkerMessageEvent: false,
            ServiceWorkerRegistration: false,
            skipWaiting: false,
            WindowClient: false
          },
          atomtest: {
            advanceClock: false,
            fakeClearInterval: false,
            fakeClearTimeout: false,
            fakeSetInterval: false,
            fakeSetTimeout: false,
            resetTimeouts: false,
            waitsForPromise: false
          },
          embertest: {
            andThen: false,
            click: false,
            currentPath: false,
            currentRouteName: false,
            currentURL: false,
            fillIn: false,
            find: false,
            findWithAssert: false,
            keyEvent: false,
            pauseTest: false,
            resumeTest: false,
            triggerEvent: false,
            visit: false,
            wait: false
          },
          protractor: {
            $: false,
            $$: false,
            browser: false,
            by: false,
            By: false,
            DartObject: false,
            element: false,
            protractor: false
          },
          "shared-node-browser": {
            clearInterval: false,
            clearTimeout: false,
            console: false,
            setInterval: false,
            setTimeout: false
          },
          webextensions: { browser: false, chrome: false, opr: false },
          greasemonkey: {
            GM: false,
            GM_addStyle: false,
            GM_deleteValue: false,
            GM_getResourceText: false,
            GM_getResourceURL: false,
            GM_getValue: false,
            GM_info: false,
            GM_listValues: false,
            GM_log: false,
            GM_openInTab: false,
            GM_registerMenuCommand: false,
            GM_setClipboard: false,
            GM_setValue: false,
            GM_xmlhttpRequest: false,
            unsafeWindow: false
          },
          devtools: {
            $: false,
            $_: false,
            $$: false,
            $0: false,
            $1: false,
            $2: false,
            $3: false,
            $4: false,
            $x: false,
            chrome: false,
            clear: false,
            copy: false,
            debug: false,
            dir: false,
            dirxml: false,
            getEventListeners: false,
            inspect: false,
            keys: false,
            monitor: false,
            monitorEvents: false,
            profile: false,
            profileEnd: false,
            queryObjects: false,
            table: false,
            undebug: false,
            unmonitor: false,
            unmonitorEvents: false,
            values: false
          }
        };

        /***/
      },
      /* 387 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _sourceMap() {
          var data = _interopRequireDefault(__webpack_require__(147));

          _sourceMap = function _sourceMap() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var SourceMap = (function() {
          function SourceMap(opts, code) {
            this._cachedMap = null;
            this._code = code;
            this._opts = opts;
            this._rawMappings = [];
          }

          var _proto = SourceMap.prototype;

          _proto.get = function get() {
            if (!this._cachedMap) {
              var map = (this._cachedMap = new (_sourceMap()).default.SourceMapGenerator(
                {
                  sourceRoot: this._opts.sourceRoot
                }
              ));
              var code = this._code;

              if (typeof code === "string") {
                map.setSourceContent(this._opts.sourceFileName, code);
              } else if (typeof code === "object") {
                Object.keys(code).forEach(function(sourceFileName) {
                  map.setSourceContent(sourceFileName, code[sourceFileName]);
                });
              }

              this._rawMappings.forEach(map.addMapping, map);
            }

            return this._cachedMap.toJSON();
          };

          _proto.getRawMappings = function getRawMappings() {
            return this._rawMappings.slice();
          };

          _proto.mark = function mark(
            generatedLine,
            generatedColumn,
            line,
            column,
            identifierName,
            filename
          ) {
            if (this._lastGenLine !== generatedLine && line === null) return;

            if (
              this._lastGenLine === generatedLine &&
              this._lastSourceLine === line &&
              this._lastSourceColumn === column
            ) {
              return;
            }

            this._cachedMap = null;
            this._lastGenLine = generatedLine;
            this._lastSourceLine = line;
            this._lastSourceColumn = column;

            this._rawMappings.push({
              name: identifierName || undefined,
              generated: {
                line: generatedLine,
                column: generatedColumn
              },
              source:
                line == null
                  ? undefined
                  : filename || this._opts.sourceFileName,
              original:
                line == null
                  ? undefined
                  : {
                      line: line,
                      column: column
                    }
            });
          };

          return SourceMap;
        })();

        exports.default = SourceMap;

        /***/
      },
      /* 388 */
      /***/ function(module, exports) {
        var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(
          ""
        );

        exports.encode = function(number) {
          if (0 <= number && number < intToCharMap.length) {
            return intToCharMap[number];
          }

          throw new TypeError("Must be between 0 and 63: " + number);
        };

        exports.decode = function(charCode) {
          var bigA = 65;
          var bigZ = 90;
          var littleA = 97;
          var littleZ = 122;
          var zero = 48;
          var nine = 57;
          var plus = 43;
          var slash = 47;
          var littleOffset = 26;
          var numberOffset = 52;

          if (bigA <= charCode && charCode <= bigZ) {
            return charCode - bigA;
          }

          if (littleA <= charCode && charCode <= littleZ) {
            return charCode - littleA + littleOffset;
          }

          if (zero <= charCode && charCode <= nine) {
            return charCode - zero + numberOffset;
          }

          if (charCode == plus) {
            return 62;
          }

          if (charCode == slash) {
            return 63;
          }

          return -1;
        };

        /***/
      },
      /* 389 */
      /***/ function(module, exports, __webpack_require__) {
        var util = __webpack_require__(36);

        function generatedPositionAfter(mappingA, mappingB) {
          var lineA = mappingA.generatedLine;
          var lineB = mappingB.generatedLine;
          var columnA = mappingA.generatedColumn;
          var columnB = mappingB.generatedColumn;
          return (
            lineB > lineA ||
            (lineB == lineA && columnB >= columnA) ||
            util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0
          );
        }

        function MappingList() {
          this._array = [];
          this._sorted = true;
          this._last = {
            generatedLine: -1,
            generatedColumn: 0
          };
        }

        MappingList.prototype.unsortedForEach = function MappingList_forEach(
          aCallback,
          aThisArg
        ) {
          this._array.forEach(aCallback, aThisArg);
        };

        MappingList.prototype.add = function MappingList_add(aMapping) {
          if (generatedPositionAfter(this._last, aMapping)) {
            this._last = aMapping;

            this._array.push(aMapping);
          } else {
            this._sorted = false;

            this._array.push(aMapping);
          }
        };

        MappingList.prototype.toArray = function MappingList_toArray() {
          if (!this._sorted) {
            this._array.sort(util.compareByGeneratedPositionsInflated);

            this._sorted = true;
          }

          return this._array;
        };

        exports.MappingList = MappingList;

        /***/
      },
      /* 390 */
      /***/ function(module, exports, __webpack_require__) {
        var util = __webpack_require__(36);

        var binarySearch = __webpack_require__(391);

        var ArraySet = __webpack_require__(150).ArraySet;

        var base64VLQ = __webpack_require__(149);

        var quickSort = __webpack_require__(392).quickSort;

        function SourceMapConsumer(aSourceMap) {
          var sourceMap = aSourceMap;

          if (typeof aSourceMap === "string") {
            sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ""));
          }

          return sourceMap.sections != null
            ? new IndexedSourceMapConsumer(sourceMap)
            : new BasicSourceMapConsumer(sourceMap);
        }

        SourceMapConsumer.fromSourceMap = function(aSourceMap) {
          return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
        };

        SourceMapConsumer.prototype._version = 3;
        SourceMapConsumer.prototype.__generatedMappings = null;
        Object.defineProperty(
          SourceMapConsumer.prototype,
          "_generatedMappings",
          {
            get: function get() {
              if (!this.__generatedMappings) {
                this._parseMappings(this._mappings, this.sourceRoot);
              }

              return this.__generatedMappings;
            }
          }
        );
        SourceMapConsumer.prototype.__originalMappings = null;
        Object.defineProperty(
          SourceMapConsumer.prototype,
          "_originalMappings",
          {
            get: function get() {
              if (!this.__originalMappings) {
                this._parseMappings(this._mappings, this.sourceRoot);
              }

              return this.__originalMappings;
            }
          }
        );

        SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(
          aStr,
          index
        ) {
          var c = aStr.charAt(index);
          return c === ";" || c === ",";
        };

        SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(
          aStr,
          aSourceRoot
        ) {
          throw new Error("Subclasses must implement _parseMappings");
        };

        SourceMapConsumer.GENERATED_ORDER = 1;
        SourceMapConsumer.ORIGINAL_ORDER = 2;
        SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
        SourceMapConsumer.LEAST_UPPER_BOUND = 2;

        SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(
          aCallback,
          aContext,
          aOrder
        ) {
          var context = aContext || null;
          var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
          var mappings;

          switch (order) {
            case SourceMapConsumer.GENERATED_ORDER:
              mappings = this._generatedMappings;
              break;

            case SourceMapConsumer.ORIGINAL_ORDER:
              mappings = this._originalMappings;
              break;

            default:
              throw new Error("Unknown order of iteration.");
          }

          var sourceRoot = this.sourceRoot;
          mappings
            .map(function(mapping) {
              var source =
                mapping.source === null
                  ? null
                  : this._sources.at(mapping.source);

              if (source != null && sourceRoot != null) {
                source = util.join(sourceRoot, source);
              }

              return {
                source: source,
                generatedLine: mapping.generatedLine,
                generatedColumn: mapping.generatedColumn,
                originalLine: mapping.originalLine,
                originalColumn: mapping.originalColumn,
                name:
                  mapping.name === null ? null : this._names.at(mapping.name)
              };
            }, this)
            .forEach(aCallback, context);
        };

        SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(
          aArgs
        ) {
          var line = util.getArg(aArgs, "line");
          var needle = {
            source: util.getArg(aArgs, "source"),
            originalLine: line,
            originalColumn: util.getArg(aArgs, "column", 0)
          };

          if (this.sourceRoot != null) {
            needle.source = util.relative(this.sourceRoot, needle.source);
          }

          if (!this._sources.has(needle.source)) {
            return [];
          }

          needle.source = this._sources.indexOf(needle.source);
          var mappings = [];

          var index = this._findMapping(
            needle,
            this._originalMappings,
            "originalLine",
            "originalColumn",
            util.compareByOriginalPositions,
            binarySearch.LEAST_UPPER_BOUND
          );

          if (index >= 0) {
            var mapping = this._originalMappings[index];

            if (aArgs.column === undefined) {
              var originalLine = mapping.originalLine;

              while (mapping && mapping.originalLine === originalLine) {
                mappings.push({
                  line: util.getArg(mapping, "generatedLine", null),
                  column: util.getArg(mapping, "generatedColumn", null),
                  lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
                });
                mapping = this._originalMappings[++index];
              }
            } else {
              var originalColumn = mapping.originalColumn;

              while (
                mapping &&
                mapping.originalLine === line &&
                mapping.originalColumn == originalColumn
              ) {
                mappings.push({
                  line: util.getArg(mapping, "generatedLine", null),
                  column: util.getArg(mapping, "generatedColumn", null),
                  lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
                });
                mapping = this._originalMappings[++index];
              }
            }
          }

          return mappings;
        };

        exports.SourceMapConsumer = SourceMapConsumer;

        function BasicSourceMapConsumer(aSourceMap) {
          var sourceMap = aSourceMap;

          if (typeof aSourceMap === "string") {
            sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ""));
          }

          var version = util.getArg(sourceMap, "version");
          var sources = util.getArg(sourceMap, "sources");
          var names = util.getArg(sourceMap, "names", []);
          var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
          var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
          var mappings = util.getArg(sourceMap, "mappings");
          var file = util.getArg(sourceMap, "file", null);

          if (version != this._version) {
            throw new Error("Unsupported version: " + version);
          }

          sources = sources
            .map(String)
            .map(util.normalize)
            .map(function(source) {
              return sourceRoot &&
                util.isAbsolute(sourceRoot) &&
                util.isAbsolute(source)
                ? util.relative(sourceRoot, source)
                : source;
            });
          this._names = ArraySet.fromArray(names.map(String), true);
          this._sources = ArraySet.fromArray(sources, true);
          this.sourceRoot = sourceRoot;
          this.sourcesContent = sourcesContent;
          this._mappings = mappings;
          this.file = file;
        }

        BasicSourceMapConsumer.prototype = Object.create(
          SourceMapConsumer.prototype
        );
        BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

        BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(
          aSourceMap
        ) {
          var smc = Object.create(BasicSourceMapConsumer.prototype);
          var names = (smc._names = ArraySet.fromArray(
            aSourceMap._names.toArray(),
            true
          ));
          var sources = (smc._sources = ArraySet.fromArray(
            aSourceMap._sources.toArray(),
            true
          ));
          smc.sourceRoot = aSourceMap._sourceRoot;
          smc.sourcesContent = aSourceMap._generateSourcesContent(
            smc._sources.toArray(),
            smc.sourceRoot
          );
          smc.file = aSourceMap._file;

          var generatedMappings = aSourceMap._mappings.toArray().slice();

          var destGeneratedMappings = (smc.__generatedMappings = []);
          var destOriginalMappings = (smc.__originalMappings = []);

          for (var i = 0, length = generatedMappings.length; i < length; i++) {
            var srcMapping = generatedMappings[i];
            var destMapping = new Mapping();
            destMapping.generatedLine = srcMapping.generatedLine;
            destMapping.generatedColumn = srcMapping.generatedColumn;

            if (srcMapping.source) {
              destMapping.source = sources.indexOf(srcMapping.source);
              destMapping.originalLine = srcMapping.originalLine;
              destMapping.originalColumn = srcMapping.originalColumn;

              if (srcMapping.name) {
                destMapping.name = names.indexOf(srcMapping.name);
              }

              destOriginalMappings.push(destMapping);
            }

            destGeneratedMappings.push(destMapping);
          }

          quickSort(smc.__originalMappings, util.compareByOriginalPositions);
          return smc;
        };

        BasicSourceMapConsumer.prototype._version = 3;
        Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
          get: function get() {
            return this._sources.toArray().map(function(s) {
              return this.sourceRoot != null
                ? util.join(this.sourceRoot, s)
                : s;
            }, this);
          }
        });

        function Mapping() {
          this.generatedLine = 0;
          this.generatedColumn = 0;
          this.source = null;
          this.originalLine = null;
          this.originalColumn = null;
          this.name = null;
        }

        BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(
          aStr,
          aSourceRoot
        ) {
          var generatedLine = 1;
          var previousGeneratedColumn = 0;
          var previousOriginalLine = 0;
          var previousOriginalColumn = 0;
          var previousSource = 0;
          var previousName = 0;
          var length = aStr.length;
          var index = 0;
          var cachedSegments = {};
          var temp = {};
          var originalMappings = [];
          var generatedMappings = [];
          var mapping, str, segment, end, value;

          while (index < length) {
            if (aStr.charAt(index) === ";") {
              generatedLine++;
              index++;
              previousGeneratedColumn = 0;
            } else if (aStr.charAt(index) === ",") {
              index++;
            } else {
              mapping = new Mapping();
              mapping.generatedLine = generatedLine;

              for (end = index; end < length; end++) {
                if (this._charIsMappingSeparator(aStr, end)) {
                  break;
                }
              }

              str = aStr.slice(index, end);
              segment = cachedSegments[str];

              if (segment) {
                index += str.length;
              } else {
                segment = [];

                while (index < end) {
                  base64VLQ.decode(aStr, index, temp);
                  value = temp.value;
                  index = temp.rest;
                  segment.push(value);
                }

                if (segment.length === 2) {
                  throw new Error("Found a source, but no line and column");
                }

                if (segment.length === 3) {
                  throw new Error("Found a source and line, but no column");
                }

                cachedSegments[str] = segment;
              }

              mapping.generatedColumn = previousGeneratedColumn + segment[0];
              previousGeneratedColumn = mapping.generatedColumn;

              if (segment.length > 1) {
                mapping.source = previousSource + segment[1];
                previousSource += segment[1];
                mapping.originalLine = previousOriginalLine + segment[2];
                previousOriginalLine = mapping.originalLine;
                mapping.originalLine += 1;
                mapping.originalColumn = previousOriginalColumn + segment[3];
                previousOriginalColumn = mapping.originalColumn;

                if (segment.length > 4) {
                  mapping.name = previousName + segment[4];
                  previousName += segment[4];
                }
              }

              generatedMappings.push(mapping);

              if (typeof mapping.originalLine === "number") {
                originalMappings.push(mapping);
              }
            }
          }

          quickSort(
            generatedMappings,
            util.compareByGeneratedPositionsDeflated
          );
          this.__generatedMappings = generatedMappings;
          quickSort(originalMappings, util.compareByOriginalPositions);
          this.__originalMappings = originalMappings;
        };

        BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(
          aNeedle,
          aMappings,
          aLineName,
          aColumnName,
          aComparator,
          aBias
        ) {
          if (aNeedle[aLineName] <= 0) {
            throw new TypeError(
              "Line must be greater than or equal to 1, got " +
                aNeedle[aLineName]
            );
          }

          if (aNeedle[aColumnName] < 0) {
            throw new TypeError(
              "Column must be greater than or equal to 0, got " +
                aNeedle[aColumnName]
            );
          }

          return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
        };

        BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
          for (var index = 0; index < this._generatedMappings.length; ++index) {
            var mapping = this._generatedMappings[index];

            if (index + 1 < this._generatedMappings.length) {
              var nextMapping = this._generatedMappings[index + 1];

              if (mapping.generatedLine === nextMapping.generatedLine) {
                mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                continue;
              }
            }

            mapping.lastGeneratedColumn = Infinity;
          }
        };

        BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(
          aArgs
        ) {
          var needle = {
            generatedLine: util.getArg(aArgs, "line"),
            generatedColumn: util.getArg(aArgs, "column")
          };

          var index = this._findMapping(
            needle,
            this._generatedMappings,
            "generatedLine",
            "generatedColumn",
            util.compareByGeneratedPositionsDeflated,
            util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
          );

          if (index >= 0) {
            var mapping = this._generatedMappings[index];

            if (mapping.generatedLine === needle.generatedLine) {
              var source = util.getArg(mapping, "source", null);

              if (source !== null) {
                source = this._sources.at(source);

                if (this.sourceRoot != null) {
                  source = util.join(this.sourceRoot, source);
                }
              }

              var name = util.getArg(mapping, "name", null);

              if (name !== null) {
                name = this._names.at(name);
              }

              return {
                source: source,
                line: util.getArg(mapping, "originalLine", null),
                column: util.getArg(mapping, "originalColumn", null),
                name: name
              };
            }
          }

          return {
            source: null,
            line: null,
            column: null,
            name: null
          };
        };

        BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
          if (!this.sourcesContent) {
            return false;
          }

          return (
            this.sourcesContent.length >= this._sources.size() &&
            !this.sourcesContent.some(function(sc) {
              return sc == null;
            })
          );
        };

        BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(
          aSource,
          nullOnMissing
        ) {
          if (!this.sourcesContent) {
            return null;
          }

          if (this.sourceRoot != null) {
            aSource = util.relative(this.sourceRoot, aSource);
          }

          if (this._sources.has(aSource)) {
            return this.sourcesContent[this._sources.indexOf(aSource)];
          }

          var url;

          if (
            this.sourceRoot != null &&
            (url = util.urlParse(this.sourceRoot))
          ) {
            var fileUriAbsPath = aSource.replace(/^file:\/\//, "");

            if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
              return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
            }

            if (
              (!url.path || url.path == "/") &&
              this._sources.has("/" + aSource)
            ) {
              return this.sourcesContent[this._sources.indexOf("/" + aSource)];
            }
          }

          if (nullOnMissing) {
            return null;
          } else {
            throw new Error('"' + aSource + '" is not in the SourceMap.');
          }
        };

        BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(
          aArgs
        ) {
          var source = util.getArg(aArgs, "source");

          if (this.sourceRoot != null) {
            source = util.relative(this.sourceRoot, source);
          }

          if (!this._sources.has(source)) {
            return {
              line: null,
              column: null,
              lastColumn: null
            };
          }

          source = this._sources.indexOf(source);
          var needle = {
            source: source,
            originalLine: util.getArg(aArgs, "line"),
            originalColumn: util.getArg(aArgs, "column")
          };

          var index = this._findMapping(
            needle,
            this._originalMappings,
            "originalLine",
            "originalColumn",
            util.compareByOriginalPositions,
            util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
          );

          if (index >= 0) {
            var mapping = this._originalMappings[index];

            if (mapping.source === needle.source) {
              return {
                line: util.getArg(mapping, "generatedLine", null),
                column: util.getArg(mapping, "generatedColumn", null),
                lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
              };
            }
          }

          return {
            line: null,
            column: null,
            lastColumn: null
          };
        };

        exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

        function IndexedSourceMapConsumer(aSourceMap) {
          var sourceMap = aSourceMap;

          if (typeof aSourceMap === "string") {
            sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ""));
          }

          var version = util.getArg(sourceMap, "version");
          var sections = util.getArg(sourceMap, "sections");

          if (version != this._version) {
            throw new Error("Unsupported version: " + version);
          }

          this._sources = new ArraySet();
          this._names = new ArraySet();
          var lastOffset = {
            line: -1,
            column: 0
          };
          this._sections = sections.map(function(s) {
            if (s.url) {
              throw new Error(
                "Support for url field in sections not implemented."
              );
            }

            var offset = util.getArg(s, "offset");
            var offsetLine = util.getArg(offset, "line");
            var offsetColumn = util.getArg(offset, "column");

            if (
              offsetLine < lastOffset.line ||
              (offsetLine === lastOffset.line &&
                offsetColumn < lastOffset.column)
            ) {
              throw new Error(
                "Section offsets must be ordered and non-overlapping."
              );
            }

            lastOffset = offset;
            return {
              generatedOffset: {
                generatedLine: offsetLine + 1,
                generatedColumn: offsetColumn + 1
              },
              consumer: new SourceMapConsumer(util.getArg(s, "map"))
            };
          });
        }

        IndexedSourceMapConsumer.prototype = Object.create(
          SourceMapConsumer.prototype
        );
        IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
        IndexedSourceMapConsumer.prototype._version = 3;
        Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
          get: function get() {
            var sources = [];

            for (var i = 0; i < this._sections.length; i++) {
              for (
                var j = 0;
                j < this._sections[i].consumer.sources.length;
                j++
              ) {
                sources.push(this._sections[i].consumer.sources[j]);
              }
            }

            return sources;
          }
        });

        IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(
          aArgs
        ) {
          var needle = {
            generatedLine: util.getArg(aArgs, "line"),
            generatedColumn: util.getArg(aArgs, "column")
          };
          var sectionIndex = binarySearch.search(
            needle,
            this._sections,
            function(needle, section) {
              var cmp =
                needle.generatedLine - section.generatedOffset.generatedLine;

              if (cmp) {
                return cmp;
              }

              return (
                needle.generatedColumn - section.generatedOffset.generatedColumn
              );
            }
          );
          var section = this._sections[sectionIndex];

          if (!section) {
            return {
              source: null,
              line: null,
              column: null,
              name: null
            };
          }

          return section.consumer.originalPositionFor({
            line:
              needle.generatedLine -
              (section.generatedOffset.generatedLine - 1),
            column:
              needle.generatedColumn -
              (section.generatedOffset.generatedLine === needle.generatedLine
                ? section.generatedOffset.generatedColumn - 1
                : 0),
            bias: aArgs.bias
          });
        };

        IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
          return this._sections.every(function(s) {
            return s.consumer.hasContentsOfAllSources();
          });
        };

        IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(
          aSource,
          nullOnMissing
        ) {
          for (var i = 0; i < this._sections.length; i++) {
            var section = this._sections[i];
            var content = section.consumer.sourceContentFor(aSource, true);

            if (content) {
              return content;
            }
          }

          if (nullOnMissing) {
            return null;
          } else {
            throw new Error('"' + aSource + '" is not in the SourceMap.');
          }
        };

        IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(
          aArgs
        ) {
          for (var i = 0; i < this._sections.length; i++) {
            var section = this._sections[i];

            if (
              section.consumer.sources.indexOf(util.getArg(aArgs, "source")) ===
              -1
            ) {
              continue;
            }

            var generatedPosition = section.consumer.generatedPositionFor(
              aArgs
            );

            if (generatedPosition) {
              var ret = {
                line:
                  generatedPosition.line +
                  (section.generatedOffset.generatedLine - 1),
                column:
                  generatedPosition.column +
                  (section.generatedOffset.generatedLine ===
                  generatedPosition.line
                    ? section.generatedOffset.generatedColumn - 1
                    : 0)
              };
              return ret;
            }
          }

          return {
            line: null,
            column: null
          };
        };

        IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(
          aStr,
          aSourceRoot
        ) {
          this.__generatedMappings = [];
          this.__originalMappings = [];

          for (var i = 0; i < this._sections.length; i++) {
            var section = this._sections[i];
            var sectionMappings = section.consumer._generatedMappings;

            for (var j = 0; j < sectionMappings.length; j++) {
              var mapping = sectionMappings[j];

              var source = section.consumer._sources.at(mapping.source);

              if (section.consumer.sourceRoot !== null) {
                source = util.join(section.consumer.sourceRoot, source);
              }

              this._sources.add(source);

              source = this._sources.indexOf(source);

              var name = section.consumer._names.at(mapping.name);

              this._names.add(name);

              name = this._names.indexOf(name);
              var adjustedMapping = {
                source: source,
                generatedLine:
                  mapping.generatedLine +
                  (section.generatedOffset.generatedLine - 1),
                generatedColumn:
                  mapping.generatedColumn +
                  (section.generatedOffset.generatedLine ===
                  mapping.generatedLine
                    ? section.generatedOffset.generatedColumn - 1
                    : 0),
                originalLine: mapping.originalLine,
                originalColumn: mapping.originalColumn,
                name: name
              };

              this.__generatedMappings.push(adjustedMapping);

              if (typeof adjustedMapping.originalLine === "number") {
                this.__originalMappings.push(adjustedMapping);
              }
            }
          }

          quickSort(
            this.__generatedMappings,
            util.compareByGeneratedPositionsDeflated
          );
          quickSort(this.__originalMappings, util.compareByOriginalPositions);
        };

        exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

        /***/
      },
      /* 391 */
      /***/ function(module, exports) {
        exports.GREATEST_LOWER_BOUND = 1;
        exports.LEAST_UPPER_BOUND = 2;

        function recursiveSearch(
          aLow,
          aHigh,
          aNeedle,
          aHaystack,
          aCompare,
          aBias
        ) {
          var mid = Math.floor((aHigh - aLow) / 2) + aLow;
          var cmp = aCompare(aNeedle, aHaystack[mid], true);

          if (cmp === 0) {
            return mid;
          } else if (cmp > 0) {
            if (aHigh - mid > 1) {
              return recursiveSearch(
                mid,
                aHigh,
                aNeedle,
                aHaystack,
                aCompare,
                aBias
              );
            }

            if (aBias == exports.LEAST_UPPER_BOUND) {
              return aHigh < aHaystack.length ? aHigh : -1;
            } else {
              return mid;
            }
          } else {
            if (mid - aLow > 1) {
              return recursiveSearch(
                aLow,
                mid,
                aNeedle,
                aHaystack,
                aCompare,
                aBias
              );
            }

            if (aBias == exports.LEAST_UPPER_BOUND) {
              return mid;
            } else {
              return aLow < 0 ? -1 : aLow;
            }
          }
        }

        exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
          if (aHaystack.length === 0) {
            return -1;
          }

          var index = recursiveSearch(
            -1,
            aHaystack.length,
            aNeedle,
            aHaystack,
            aCompare,
            aBias || exports.GREATEST_LOWER_BOUND
          );

          if (index < 0) {
            return -1;
          }

          while (index - 1 >= 0) {
            if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
              break;
            }

            --index;
          }

          return index;
        };

        /***/
      },
      /* 392 */
      /***/ function(module, exports) {
        function swap(ary, x, y) {
          var temp = ary[x];
          ary[x] = ary[y];
          ary[y] = temp;
        }

        function randomIntInRange(low, high) {
          return Math.round(low + Math.random() * (high - low));
        }

        function doQuickSort(ary, comparator, p, r) {
          if (p < r) {
            var pivotIndex = randomIntInRange(p, r);
            var i = p - 1;
            swap(ary, pivotIndex, r);
            var pivot = ary[r];

            for (var j = p; j < r; j++) {
              if (comparator(ary[j], pivot) <= 0) {
                i += 1;
                swap(ary, i, j);
              }
            }

            swap(ary, i + 1, j);
            var q = i + 1;
            doQuickSort(ary, comparator, p, q - 1);
            doQuickSort(ary, comparator, q + 1, r);
          }
        }

        exports.quickSort = function(ary, comparator) {
          doQuickSort(ary, comparator, 0, ary.length - 1);
        };

        /***/
      },
      /* 393 */
      /***/ function(module, exports, __webpack_require__) {
        var SourceMapGenerator = __webpack_require__(148).SourceMapGenerator;

        var util = __webpack_require__(36);

        var REGEX_NEWLINE = /(\r?\n)/;
        var NEWLINE_CODE = 10;
        var isSourceNode = "$$$isSourceNode$$$";

        function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
          this.children = [];
          this.sourceContents = {};
          this.line = aLine == null ? null : aLine;
          this.column = aColumn == null ? null : aColumn;
          this.source = aSource == null ? null : aSource;
          this.name = aName == null ? null : aName;
          this[isSourceNode] = true;
          if (aChunks != null) this.add(aChunks);
        }

        SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(
          aGeneratedCode,
          aSourceMapConsumer,
          aRelativePath
        ) {
          var node = new SourceNode();
          var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
          var remainingLinesIndex = 0;

          var shiftNextLine = function shiftNextLine() {
            var lineContents = getNextLine();
            var newLine = getNextLine() || "";
            return lineContents + newLine;

            function getNextLine() {
              return remainingLinesIndex < remainingLines.length
                ? remainingLines[remainingLinesIndex++]
                : undefined;
            }
          };

          var lastGeneratedLine = 1,
            lastGeneratedColumn = 0;
          var lastMapping = null;
          aSourceMapConsumer.eachMapping(function(mapping) {
            if (lastMapping !== null) {
              if (lastGeneratedLine < mapping.generatedLine) {
                addMappingWithCode(lastMapping, shiftNextLine());
                lastGeneratedLine++;
                lastGeneratedColumn = 0;
              } else {
                var nextLine = remainingLines[remainingLinesIndex];
                var code = nextLine.substr(
                  0,
                  mapping.generatedColumn - lastGeneratedColumn
                );
                remainingLines[remainingLinesIndex] = nextLine.substr(
                  mapping.generatedColumn - lastGeneratedColumn
                );
                lastGeneratedColumn = mapping.generatedColumn;
                addMappingWithCode(lastMapping, code);
                lastMapping = mapping;
                return;
              }
            }

            while (lastGeneratedLine < mapping.generatedLine) {
              node.add(shiftNextLine());
              lastGeneratedLine++;
            }

            if (lastGeneratedColumn < mapping.generatedColumn) {
              var nextLine = remainingLines[remainingLinesIndex];
              node.add(nextLine.substr(0, mapping.generatedColumn));
              remainingLines[remainingLinesIndex] = nextLine.substr(
                mapping.generatedColumn
              );
              lastGeneratedColumn = mapping.generatedColumn;
            }

            lastMapping = mapping;
          }, this);

          if (remainingLinesIndex < remainingLines.length) {
            if (lastMapping) {
              addMappingWithCode(lastMapping, shiftNextLine());
            }

            node.add(remainingLines.splice(remainingLinesIndex).join(""));
          }

          aSourceMapConsumer.sources.forEach(function(sourceFile) {
            var content = aSourceMapConsumer.sourceContentFor(sourceFile);

            if (content != null) {
              if (aRelativePath != null) {
                sourceFile = util.join(aRelativePath, sourceFile);
              }

              node.setSourceContent(sourceFile, content);
            }
          });
          return node;

          function addMappingWithCode(mapping, code) {
            if (mapping === null || mapping.source === undefined) {
              node.add(code);
            } else {
              var source = aRelativePath
                ? util.join(aRelativePath, mapping.source)
                : mapping.source;
              node.add(
                new SourceNode(
                  mapping.originalLine,
                  mapping.originalColumn,
                  source,
                  code,
                  mapping.name
                )
              );
            }
          }
        };

        SourceNode.prototype.add = function SourceNode_add(aChunk) {
          if (Array.isArray(aChunk)) {
            aChunk.forEach(function(chunk) {
              this.add(chunk);
            }, this);
          } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
            if (aChunk) {
              this.children.push(aChunk);
            }
          } else {
            throw new TypeError(
              "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " +
                aChunk
            );
          }

          return this;
        };

        SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
          if (Array.isArray(aChunk)) {
            for (var i = aChunk.length - 1; i >= 0; i--) {
              this.prepend(aChunk[i]);
            }
          } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
            this.children.unshift(aChunk);
          } else {
            throw new TypeError(
              "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " +
                aChunk
            );
          }

          return this;
        };

        SourceNode.prototype.walk = function SourceNode_walk(aFn) {
          var chunk;

          for (var i = 0, len = this.children.length; i < len; i++) {
            chunk = this.children[i];

            if (chunk[isSourceNode]) {
              chunk.walk(aFn);
            } else {
              if (chunk !== "") {
                aFn(chunk, {
                  source: this.source,
                  line: this.line,
                  column: this.column,
                  name: this.name
                });
              }
            }
          }
        };

        SourceNode.prototype.join = function SourceNode_join(aSep) {
          var newChildren;
          var i;
          var len = this.children.length;

          if (len > 0) {
            newChildren = [];

            for (i = 0; i < len - 1; i++) {
              newChildren.push(this.children[i]);
              newChildren.push(aSep);
            }

            newChildren.push(this.children[i]);
            this.children = newChildren;
          }

          return this;
        };

        SourceNode.prototype.replaceRight = function SourceNode_replaceRight(
          aPattern,
          aReplacement
        ) {
          var lastChild = this.children[this.children.length - 1];

          if (lastChild[isSourceNode]) {
            lastChild.replaceRight(aPattern, aReplacement);
          } else if (typeof lastChild === "string") {
            this.children[this.children.length - 1] = lastChild.replace(
              aPattern,
              aReplacement
            );
          } else {
            this.children.push("".replace(aPattern, aReplacement));
          }

          return this;
        };

        SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(
          aSourceFile,
          aSourceContent
        ) {
          this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
        };

        SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(
          aFn
        ) {
          for (var i = 0, len = this.children.length; i < len; i++) {
            if (this.children[i][isSourceNode]) {
              this.children[i].walkSourceContents(aFn);
            }
          }

          var sources = Object.keys(this.sourceContents);

          for (var i = 0, len = sources.length; i < len; i++) {
            aFn(
              util.fromSetString(sources[i]),
              this.sourceContents[sources[i]]
            );
          }
        };

        SourceNode.prototype.toString = function SourceNode_toString() {
          var str = "";
          this.walk(function(chunk) {
            str += chunk;
          });
          return str;
        };

        SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(
          aArgs
        ) {
          var generated = {
            code: "",
            line: 1,
            column: 0
          };
          var map = new SourceMapGenerator(aArgs);
          var sourceMappingActive = false;
          var lastOriginalSource = null;
          var lastOriginalLine = null;
          var lastOriginalColumn = null;
          var lastOriginalName = null;
          this.walk(function(chunk, original) {
            generated.code += chunk;

            if (
              original.source !== null &&
              original.line !== null &&
              original.column !== null
            ) {
              if (
                lastOriginalSource !== original.source ||
                lastOriginalLine !== original.line ||
                lastOriginalColumn !== original.column ||
                lastOriginalName !== original.name
              ) {
                map.addMapping({
                  source: original.source,
                  original: {
                    line: original.line,
                    column: original.column
                  },
                  generated: {
                    line: generated.line,
                    column: generated.column
                  },
                  name: original.name
                });
              }

              lastOriginalSource = original.source;
              lastOriginalLine = original.line;
              lastOriginalColumn = original.column;
              lastOriginalName = original.name;
              sourceMappingActive = true;
            } else if (sourceMappingActive) {
              map.addMapping({
                generated: {
                  line: generated.line,
                  column: generated.column
                }
              });
              lastOriginalSource = null;
              sourceMappingActive = false;
            }

            for (var idx = 0, length = chunk.length; idx < length; idx++) {
              if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
                generated.line++;
                generated.column = 0;

                if (idx + 1 === length) {
                  lastOriginalSource = null;
                  sourceMappingActive = false;
                } else if (sourceMappingActive) {
                  map.addMapping({
                    source: original.source,
                    original: {
                      line: original.line,
                      column: original.column
                    },
                    generated: {
                      line: generated.line,
                      column: generated.column
                    },
                    name: original.name
                  });
                }
              } else {
                generated.column++;
              }
            }
          });
          this.walkSourceContents(function(sourceFile, sourceContent) {
            map.setSourceContent(sourceFile, sourceContent);
          });
          return {
            code: generated.code,
            map: map
          };
        };

        exports.SourceNode = SourceNode;

        /***/
      },
      /* 394 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _isInteger() {
          var data = _interopRequireDefault(__webpack_require__(395));

          _isInteger = function _isInteger() {
            return data;
          };

          return data;
        }

        function _repeat() {
          var data = _interopRequireDefault(__webpack_require__(143));

          _repeat = function _repeat() {
            return data;
          };

          return data;
        }

        var _buffer = _interopRequireDefault(__webpack_require__(396));

        var n = _interopRequireWildcard(__webpack_require__(151));

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var generatorFunctions = _interopRequireWildcard(
          __webpack_require__(400)
        );

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var SCIENTIFIC_NOTATION = /e/i;
        var ZERO_DECIMAL_INTEGER = /\.0+$/;
        var NON_DECIMAL_LITERAL = /^0[box]/;

        var Printer = (function() {
          function Printer(format, map) {
            this.inForStatementInitCounter = 0;
            this._printStack = [];
            this._indent = 0;
            this._insideAux = false;
            this._printedCommentStarts = {};
            this._parenPushNewlineState = null;
            this._noLineTerminator = false;
            this._printAuxAfterOnNextUserNode = false;
            this._printedComments = new WeakSet();
            this._endsWithInteger = false;
            this._endsWithWord = false;
            this.format = format || {};
            this._buf = new _buffer.default(map);
          }

          var _proto = Printer.prototype;

          _proto.generate = function generate(ast) {
            this.print(ast);

            this._maybeAddAuxComment();

            return this._buf.get();
          };

          _proto.indent = function indent() {
            if (this.format.compact || this.format.concise) return;
            this._indent++;
          };

          _proto.dedent = function dedent() {
            if (this.format.compact || this.format.concise) return;
            this._indent--;
          };

          _proto.semicolon = function semicolon(force) {
            if (force === void 0) {
              force = false;
            }

            this._maybeAddAuxComment();

            this._append(";", !force);
          };

          _proto.rightBrace = function rightBrace() {
            if (this.format.minified) {
              this._buf.removeLastSemicolon();
            }

            this.token("}");
          };

          _proto.space = function space(force) {
            if (force === void 0) {
              force = false;
            }

            if (this.format.compact) return;

            if (
              (this._buf.hasContent() &&
                !this.endsWith(" ") &&
                !this.endsWith("\n")) ||
              force
            ) {
              this._space();
            }
          };

          _proto.word = function word(str) {
            if (
              this._endsWithWord ||
              (this.endsWith("/") && str.indexOf("/") === 0)
            ) {
              this._space();
            }

            this._maybeAddAuxComment();

            this._append(str);

            this._endsWithWord = true;
          };

          _proto.number = function number(str) {
            this.word(str);
            this._endsWithInteger =
              (0, _isInteger().default)(+str) &&
              !NON_DECIMAL_LITERAL.test(str) &&
              !SCIENTIFIC_NOTATION.test(str) &&
              !ZERO_DECIMAL_INTEGER.test(str) &&
              str[str.length - 1] !== ".";
          };

          _proto.token = function token(str) {
            if (
              (str === "--" && this.endsWith("!")) ||
              (str[0] === "+" && this.endsWith("+")) ||
              (str[0] === "-" && this.endsWith("-")) ||
              (str[0] === "." && this._endsWithInteger)
            ) {
              this._space();
            }

            this._maybeAddAuxComment();

            this._append(str);
          };

          _proto.newline = function newline(i) {
            if (this.format.retainLines || this.format.compact) return;

            if (this.format.concise) {
              this.space();
              return;
            }

            if (this.endsWith("\n\n")) return;
            if (typeof i !== "number") i = 1;
            i = Math.min(2, i);
            if (this.endsWith("{\n") || this.endsWith(":\n")) i--;
            if (i <= 0) return;

            for (var j = 0; j < i; j++) {
              this._newline();
            }
          };

          _proto.endsWith = function endsWith(str) {
            return this._buf.endsWith(str);
          };

          _proto.removeTrailingNewline = function removeTrailingNewline() {
            this._buf.removeTrailingNewline();
          };

          _proto.source = function source(prop, loc) {
            this._catchUp(prop, loc);

            this._buf.source(prop, loc);
          };

          _proto.withSource = function withSource(prop, loc, cb) {
            this._catchUp(prop, loc);

            this._buf.withSource(prop, loc, cb);
          };

          _proto._space = function _space() {
            this._append(" ", true);
          };

          _proto._newline = function _newline() {
            this._append("\n", true);
          };

          _proto._append = function _append(str, queue) {
            if (queue === void 0) {
              queue = false;
            }

            this._maybeAddParen(str);

            this._maybeIndent(str);

            if (queue) this._buf.queue(str);
            else this._buf.append(str);
            this._endsWithWord = false;
            this._endsWithInteger = false;
          };

          _proto._maybeIndent = function _maybeIndent(str) {
            if (this._indent && this.endsWith("\n") && str[0] !== "\n") {
              this._buf.queue(this._getIndent());
            }
          };

          _proto._maybeAddParen = function _maybeAddParen(str) {
            var parenPushNewlineState = this._parenPushNewlineState;
            if (!parenPushNewlineState) return;
            this._parenPushNewlineState = null;
            var i;

            for (i = 0; i < str.length && str[i] === " "; i++) {
              continue;
            }

            if (i === str.length) return;
            var cha = str[i];

            if (cha !== "\n") {
              if (cha !== "/") return;
              if (i + 1 === str.length) return;
              var chaPost = str[i + 1];
              if (chaPost !== "/" && chaPost !== "*") return;
            }

            this.token("(");
            this.indent();
            parenPushNewlineState.printed = true;
          };

          _proto._catchUp = function _catchUp(prop, loc) {
            if (!this.format.retainLines) return;
            var pos = loc ? loc[prop] : null;

            if (pos && pos.line !== null) {
              var count = pos.line - this._buf.getCurrentLine();

              for (var i = 0; i < count; i++) {
                this._newline();
              }
            }
          };

          _proto._getIndent = function _getIndent() {
            return (0, _repeat().default)(
              this.format.indent.style,
              this._indent
            );
          };

          _proto.startTerminatorless = function startTerminatorless(isLabel) {
            if (isLabel === void 0) {
              isLabel = false;
            }

            if (isLabel) {
              this._noLineTerminator = true;
              return null;
            } else {
              return (this._parenPushNewlineState = {
                printed: false
              });
            }
          };

          _proto.endTerminatorless = function endTerminatorless(state) {
            this._noLineTerminator = false;

            if (state && state.printed) {
              this.dedent();
              this.newline();
              this.token(")");
            }
          };

          _proto.print = function print(node, parent) {
            var _this = this;

            if (!node) return;
            var oldConcise = this.format.concise;

            if (node._compact) {
              this.format.concise = true;
            }

            var printMethod = this[node.type];

            if (!printMethod) {
              throw new ReferenceError(
                "unknown node of type " +
                  JSON.stringify(node.type) +
                  " with constructor " +
                  JSON.stringify(node && node.constructor.name)
              );
            }

            this._printStack.push(node);

            var oldInAux = this._insideAux;
            this._insideAux = !node.loc;

            this._maybeAddAuxComment(this._insideAux && !oldInAux);

            var needsParens = n.needsParens(node, parent, this._printStack);

            if (
              this.format.retainFunctionParens &&
              node.type === "FunctionExpression" &&
              node.extra &&
              node.extra.parenthesized
            ) {
              needsParens = true;
            }

            if (needsParens) this.token("(");

            this._printLeadingComments(node, parent);

            var loc = t().isProgram(node) || t().isFile(node) ? null : node.loc;
            this.withSource("start", loc, function() {
              _this[node.type](node, parent);
            });

            this._printTrailingComments(node, parent);

            if (needsParens) this.token(")");

            this._printStack.pop();

            this.format.concise = oldConcise;
            this._insideAux = oldInAux;
          };

          _proto._maybeAddAuxComment = function _maybeAddAuxComment(
            enteredPositionlessNode
          ) {
            if (enteredPositionlessNode) this._printAuxBeforeComment();
            if (!this._insideAux) this._printAuxAfterComment();
          };

          _proto._printAuxBeforeComment = function _printAuxBeforeComment() {
            if (this._printAuxAfterOnNextUserNode) return;
            this._printAuxAfterOnNextUserNode = true;
            var comment = this.format.auxiliaryCommentBefore;

            if (comment) {
              this._printComment({
                type: "CommentBlock",
                value: comment
              });
            }
          };

          _proto._printAuxAfterComment = function _printAuxAfterComment() {
            if (!this._printAuxAfterOnNextUserNode) return;
            this._printAuxAfterOnNextUserNode = false;
            var comment = this.format.auxiliaryCommentAfter;

            if (comment) {
              this._printComment({
                type: "CommentBlock",
                value: comment
              });
            }
          };

          _proto.getPossibleRaw = function getPossibleRaw(node) {
            var extra = node.extra;

            if (
              extra &&
              extra.raw != null &&
              extra.rawValue != null &&
              node.value === extra.rawValue
            ) {
              return extra.raw;
            }
          };

          _proto.printJoin = function printJoin(nodes, parent, opts) {
            if (opts === void 0) {
              opts = {};
            }

            if (!nodes || !nodes.length) return;
            if (opts.indent) this.indent();
            var newlineOpts = {
              addNewlines: opts.addNewlines
            };

            for (var i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              if (!node) continue;
              if (opts.statement)
                this._printNewline(true, node, parent, newlineOpts);
              this.print(node, parent);

              if (opts.iterator) {
                opts.iterator(node, i);
              }

              if (opts.separator && i < nodes.length - 1) {
                opts.separator.call(this);
              }

              if (opts.statement)
                this._printNewline(false, node, parent, newlineOpts);
            }

            if (opts.indent) this.dedent();
          };

          _proto.printAndIndentOnComments = function printAndIndentOnComments(
            node,
            parent
          ) {
            var indent =
              node.leadingComments && node.leadingComments.length > 0;
            if (indent) this.indent();
            this.print(node, parent);
            if (indent) this.dedent();
          };

          _proto.printBlock = function printBlock(parent) {
            var node = parent.body;

            if (!t().isEmptyStatement(node)) {
              this.space();
            }

            this.print(node, parent);
          };

          _proto._printTrailingComments = function _printTrailingComments(
            node,
            parent
          ) {
            this._printComments(this._getComments(false, node, parent));
          };

          _proto._printLeadingComments = function _printLeadingComments(
            node,
            parent
          ) {
            this._printComments(this._getComments(true, node, parent));
          };

          _proto.printInnerComments = function printInnerComments(
            node,
            indent
          ) {
            if (indent === void 0) {
              indent = true;
            }

            if (!node.innerComments || !node.innerComments.length) return;
            if (indent) this.indent();

            this._printComments(node.innerComments);

            if (indent) this.dedent();
          };

          _proto.printSequence = function printSequence(nodes, parent, opts) {
            if (opts === void 0) {
              opts = {};
            }

            opts.statement = true;
            return this.printJoin(nodes, parent, opts);
          };

          _proto.printList = function printList(items, parent, opts) {
            if (opts === void 0) {
              opts = {};
            }

            if (opts.separator == null) {
              opts.separator = commaSeparator;
            }

            return this.printJoin(items, parent, opts);
          };

          _proto._printNewline = function _printNewline(
            leading,
            node,
            parent,
            opts
          ) {
            if (this.format.retainLines || this.format.compact) return;

            if (this.format.concise) {
              this.space();
              return;
            }

            var lines = 0;

            if (this._buf.hasContent()) {
              if (!leading) lines++;
              if (opts.addNewlines)
                lines += opts.addNewlines(leading, node) || 0;
              var needs = leading
                ? n.needsWhitespaceBefore
                : n.needsWhitespaceAfter;
              if (needs(node, parent)) lines++;
            }

            this.newline(lines);
          };

          _proto._getComments = function _getComments(leading, node) {
            return (
              (node &&
                (leading ? node.leadingComments : node.trailingComments)) ||
              []
            );
          };

          _proto._printComment = function _printComment(comment) {
            var _this2 = this;

            if (!this.format.shouldPrintComment(comment.value)) return;
            if (comment.ignore) return;
            if (this._printedComments.has(comment)) return;

            this._printedComments.add(comment);

            if (comment.start != null) {
              if (this._printedCommentStarts[comment.start]) return;
              this._printedCommentStarts[comment.start] = true;
            }

            var isBlockComment = comment.type === "CommentBlock";
            this.newline(
              this._buf.hasContent() &&
              !this._noLineTerminator &&
              isBlockComment
                ? 1
                : 0
            );
            if (!this.endsWith("[") && !this.endsWith("{")) this.space();
            var val =
              !isBlockComment && !this._noLineTerminator
                ? "//" + comment.value + "\n"
                : "/*" + comment.value + "*/";

            if (isBlockComment && this.format.indent.adjustMultilineComment) {
              var offset = comment.loc && comment.loc.start.column;

              if (offset) {
                var newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
                val = val.replace(newlineRegex, "\n");
              }

              var indentSize = Math.max(
                this._getIndent().length,
                this._buf.getCurrentColumn()
              );
              val = val.replace(
                /\n(?!$)/g,
                "\n" + (0, _repeat().default)(" ", indentSize)
              );
            }

            if (this.endsWith("/")) this._space();
            this.withSource("start", comment.loc, function() {
              _this2._append(val);
            });
            this.newline(isBlockComment && !this._noLineTerminator ? 1 : 0);
          };

          _proto._printComments = function _printComments(comments) {
            if (!comments || !comments.length) return;

            for (
              var _iterator = comments,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var _comment = _ref;

              this._printComment(_comment);
            }
          };

          return Printer;
        })();

        exports.default = Printer;
        Object.assign(Printer.prototype, generatorFunctions);

        function commaSeparator() {
          this.token(",");
          this.space();
        }

        /***/
      },
      /* 395 */
      /***/ function(module, exports, __webpack_require__) {
        var toInteger = __webpack_require__(45);

        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }

        module.exports = isInteger;

        /***/
      },
      /* 396 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _trimRight() {
          var data = _interopRequireDefault(__webpack_require__(397));

          _trimRight = function _trimRight() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var SPACES_RE = /^[ \t]+$/;

        var Buffer = (function() {
          function Buffer(map) {
            this._map = null;
            this._buf = [];
            this._last = "";
            this._queue = [];
            this._position = {
              line: 1,
              column: 0
            };
            this._sourcePosition = {
              identifierName: null,
              line: null,
              column: null,
              filename: null
            };
            this._map = map;
          }

          var _proto = Buffer.prototype;

          _proto.get = function get() {
            this._flush();

            var map = this._map;
            var result = {
              code: (0, _trimRight().default)(this._buf.join("")),
              map: null,
              rawMappings: map && map.getRawMappings()
            };

            if (map) {
              Object.defineProperty(result, "map", {
                configurable: true,
                enumerable: true,
                get: function get() {
                  return (this.map = map.get());
                },
                set: function set(value) {
                  Object.defineProperty(this, "map", {
                    value: value,
                    writable: true
                  });
                }
              });
            }

            return result;
          };

          _proto.append = function append(str) {
            this._flush();

            var _sourcePosition = this._sourcePosition,
              line = _sourcePosition.line,
              column = _sourcePosition.column,
              filename = _sourcePosition.filename,
              identifierName = _sourcePosition.identifierName;

            this._append(str, line, column, identifierName, filename);
          };

          _proto.queue = function queue(str) {
            if (str === "\n") {
              while (
                this._queue.length > 0 &&
                SPACES_RE.test(this._queue[0][0])
              ) {
                this._queue.shift();
              }
            }

            var _sourcePosition2 = this._sourcePosition,
              line = _sourcePosition2.line,
              column = _sourcePosition2.column,
              filename = _sourcePosition2.filename,
              identifierName = _sourcePosition2.identifierName;

            this._queue.unshift([str, line, column, identifierName, filename]);
          };

          _proto._flush = function _flush() {
            var item;

            while ((item = this._queue.pop())) {
              this._append.apply(this, item);
            }
          };

          _proto._append = function _append(
            str,
            line,
            column,
            identifierName,
            filename
          ) {
            if (this._map && str[0] !== "\n") {
              this._map.mark(
                this._position.line,
                this._position.column,
                line,
                column,
                identifierName,
                filename
              );
            }

            this._buf.push(str);

            this._last = str[str.length - 1];

            for (var i = 0; i < str.length; i++) {
              if (str[i] === "\n") {
                this._position.line++;
                this._position.column = 0;
              } else {
                this._position.column++;
              }
            }
          };

          _proto.removeTrailingNewline = function removeTrailingNewline() {
            if (this._queue.length > 0 && this._queue[0][0] === "\n") {
              this._queue.shift();
            }
          };

          _proto.removeLastSemicolon = function removeLastSemicolon() {
            if (this._queue.length > 0 && this._queue[0][0] === ";") {
              this._queue.shift();
            }
          };

          _proto.endsWith = function endsWith(suffix) {
            if (suffix.length === 1) {
              var last;

              if (this._queue.length > 0) {
                var str = this._queue[0][0];
                last = str[str.length - 1];
              } else {
                last = this._last;
              }

              return last === suffix;
            }

            var end =
              this._last +
              this._queue.reduce(function(acc, item) {
                return item[0] + acc;
              }, "");

            if (suffix.length <= end.length) {
              return end.slice(-suffix.length) === suffix;
            }

            return false;
          };

          _proto.hasContent = function hasContent() {
            return this._queue.length > 0 || !!this._last;
          };

          _proto.source = function source(prop, loc) {
            if (prop && !loc) return;
            var pos = loc ? loc[prop] : null;
            this._sourcePosition.identifierName =
              (loc && loc.identifierName) || null;
            this._sourcePosition.line = pos ? pos.line : null;
            this._sourcePosition.column = pos ? pos.column : null;
            this._sourcePosition.filename = (loc && loc.filename) || null;
          };

          _proto.withSource = function withSource(prop, loc, cb) {
            if (!this._map) return cb();
            var originalLine = this._sourcePosition.line;
            var originalColumn = this._sourcePosition.column;
            var originalFilename = this._sourcePosition.filename;
            var originalIdentifierName = this._sourcePosition.identifierName;
            this.source(prop, loc);
            cb();
            this._sourcePosition.line = originalLine;
            this._sourcePosition.column = originalColumn;
            this._sourcePosition.filename = originalFilename;
            this._sourcePosition.identifierName = originalIdentifierName;
          };

          _proto.getCurrentColumn = function getCurrentColumn() {
            var extra = this._queue.reduce(function(acc, item) {
              return item[0] + acc;
            }, "");

            var lastIndex = extra.lastIndexOf("\n");
            return lastIndex === -1
              ? this._position.column + extra.length
              : extra.length - 1 - lastIndex;
          };

          _proto.getCurrentLine = function getCurrentLine() {
            var extra = this._queue.reduce(function(acc, item) {
              return item[0] + acc;
            }, "");

            var count = 0;

            for (var i = 0; i < extra.length; i++) {
              if (extra[i] === "\n") count++;
            }

            return this._position.line + count;
          };

          return Buffer;
        })();

        exports.default = Buffer;

        /***/
      },
      /* 397 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = function(str) {
          var tail = str.length;

          while (/[\s\uFEFF\u00A0]/.test(str[tail - 1])) {
            tail--;
          }

          return str.slice(0, tail);
        };

        /***/
      },
      /* 398 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.list = exports.nodes = void 0;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function crawl(node, state) {
          if (state === void 0) {
            state = {};
          }

          if (t().isMemberExpression(node)) {
            crawl(node.object, state);
            if (node.computed) crawl(node.property, state);
          } else if (t().isBinary(node) || t().isAssignmentExpression(node)) {
            crawl(node.left, state);
            crawl(node.right, state);
          } else if (t().isCallExpression(node)) {
            state.hasCall = true;
            crawl(node.callee, state);
          } else if (t().isFunction(node)) {
            state.hasFunction = true;
          } else if (t().isIdentifier(node)) {
            state.hasHelper = state.hasHelper || isHelper(node.callee);
          }

          return state;
        }

        function isHelper(node) {
          if (t().isMemberExpression(node)) {
            return isHelper(node.object) || isHelper(node.property);
          } else if (t().isIdentifier(node)) {
            return node.name === "require" || node.name[0] === "_";
          } else if (t().isCallExpression(node)) {
            return isHelper(node.callee);
          } else if (t().isBinary(node) || t().isAssignmentExpression(node)) {
            return (
              (t().isIdentifier(node.left) && isHelper(node.left)) ||
              isHelper(node.right)
            );
          } else {
            return false;
          }
        }

        function isType(node) {
          return (
            t().isLiteral(node) ||
            t().isObjectExpression(node) ||
            t().isArrayExpression(node) ||
            t().isIdentifier(node) ||
            t().isMemberExpression(node)
          );
        }

        var nodes = {
          AssignmentExpression: function AssignmentExpression(node) {
            var state = crawl(node.right);

            if ((state.hasCall && state.hasHelper) || state.hasFunction) {
              return {
                before: state.hasFunction,
                after: true
              };
            }
          },
          SwitchCase: function SwitchCase(node, parent) {
            return {
              before: node.consequent.length || parent.cases[0] === node,
              after:
                !node.consequent.length &&
                parent.cases[parent.cases.length - 1] === node
            };
          },
          LogicalExpression: function LogicalExpression(node) {
            if (t().isFunction(node.left) || t().isFunction(node.right)) {
              return {
                after: true
              };
            }
          },
          Literal: function Literal(node) {
            if (node.value === "use strict") {
              return {
                after: true
              };
            }
          },
          CallExpression: function CallExpression(node) {
            if (t().isFunction(node.callee) || isHelper(node)) {
              return {
                before: true,
                after: true
              };
            }
          },
          VariableDeclaration: function VariableDeclaration(node) {
            for (var i = 0; i < node.declarations.length; i++) {
              var declar = node.declarations[i];
              var enabled = isHelper(declar.id) && !isType(declar.init);

              if (!enabled) {
                var state = crawl(declar.init);
                enabled =
                  (isHelper(declar.init) && state.hasCall) || state.hasFunction;
              }

              if (enabled) {
                return {
                  before: true,
                  after: true
                };
              }
            }
          },
          IfStatement: function IfStatement(node) {
            if (t().isBlockStatement(node.consequent)) {
              return {
                before: true,
                after: true
              };
            }
          }
        };
        exports.nodes = nodes;

        nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(
          node,
          parent
        ) {
          if (parent.properties[0] === node) {
            return {
              before: true
            };
          }
        };

        nodes.ObjectTypeCallProperty = function(node, parent) {
          if (
            parent.callProperties[0] === node &&
            (!parent.properties || !parent.properties.length)
          ) {
            return {
              before: true
            };
          }
        };

        nodes.ObjectTypeIndexer = function(node, parent) {
          if (
            parent.indexers[0] === node &&
            (!parent.properties || !parent.properties.length) &&
            (!parent.callProperties || !parent.callProperties.length)
          ) {
            return {
              before: true
            };
          }
        };

        var list = {
          VariableDeclaration: function VariableDeclaration(node) {
            return node.declarations.map(function(decl) {
              return decl.init;
            });
          },
          ArrayExpression: function ArrayExpression(node) {
            return node.elements;
          },
          ObjectExpression: function ObjectExpression(node) {
            return node.properties;
          }
        };
        exports.list = list;
        [
          ["Function", true],
          ["Class", true],
          ["Loop", true],
          ["LabeledStatement", true],
          ["SwitchStatement", true],
          ["TryStatement", true]
        ].forEach(function(_ref) {
          var type = _ref[0],
            amounts = _ref[1];

          if (typeof amounts === "boolean") {
            amounts = {
              after: amounts,
              before: amounts
            };
          }

          [type]
            .concat(t().FLIPPED_ALIAS_KEYS[type] || [])
            .forEach(function(type) {
              nodes[type] = function() {
                return amounts;
              };
            });
        });

        /***/
      },
      /* 399 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FunctionTypeAnnotation = exports.NullableTypeAnnotation = NullableTypeAnnotation;
        exports.UpdateExpression = UpdateExpression;
        exports.ObjectExpression = ObjectExpression;
        exports.DoExpression = DoExpression;
        exports.Binary = Binary;
        exports.IntersectionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;
        exports.TSAsExpression = TSAsExpression;
        exports.TSTypeAssertion = TSTypeAssertion;
        exports.BinaryExpression = BinaryExpression;
        exports.SequenceExpression = SequenceExpression;
        exports.AwaitExpression = exports.YieldExpression = YieldExpression;
        exports.ClassExpression = ClassExpression;
        exports.UnaryLike = UnaryLike;
        exports.FunctionExpression = FunctionExpression;
        exports.ArrowFunctionExpression = ArrowFunctionExpression;
        exports.ConditionalExpression = ConditionalExpression;
        exports.AssignmentExpression = AssignmentExpression;
        exports.NewExpression = NewExpression;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var PRECEDENCE = {
          "||": 0,
          "&&": 1,
          "|": 2,
          "^": 3,
          "&": 4,
          "==": 5,
          "===": 5,
          "!=": 5,
          "!==": 5,
          "<": 6,
          ">": 6,
          "<=": 6,
          ">=": 6,
          in: 6,
          instanceof: 6,
          ">>": 7,
          "<<": 7,
          ">>>": 7,
          "+": 8,
          "-": 8,
          "*": 9,
          "/": 9,
          "%": 9,
          "**": 10
        };

        var isClassExtendsClause = function isClassExtendsClause(node, parent) {
          return (
            (t().isClassDeclaration(parent) || t().isClassExpression(parent)) &&
            parent.superClass === node
          );
        };

        function NullableTypeAnnotation(node, parent) {
          return t().isArrayTypeAnnotation(parent);
        }

        function UpdateExpression(node, parent) {
          return (
            t().isMemberExpression(parent, {
              object: node
            }) ||
            t().isCallExpression(parent, {
              callee: node
            }) ||
            t().isNewExpression(parent, {
              callee: node
            }) ||
            isClassExtendsClause(node, parent)
          );
        }

        function ObjectExpression(node, parent, printStack) {
          return isFirstInStatement(printStack, {
            considerArrow: true
          });
        }

        function DoExpression(node, parent, printStack) {
          return isFirstInStatement(printStack);
        }

        function Binary(node, parent) {
          if (
            node.operator === "**" &&
            t().isBinaryExpression(parent, {
              operator: "**"
            })
          ) {
            return parent.left === node;
          }

          if (isClassExtendsClause(node, parent)) {
            return true;
          }

          if (
            ((t().isCallExpression(parent) || t().isNewExpression(parent)) &&
              parent.callee === node) ||
            t().isUnaryLike(parent) ||
            (t().isMemberExpression(parent) && parent.object === node) ||
            t().isAwaitExpression(parent)
          ) {
            return true;
          }

          if (t().isBinary(parent)) {
            var parentOp = parent.operator;
            var parentPos = PRECEDENCE[parentOp];
            var nodeOp = node.operator;
            var nodePos = PRECEDENCE[nodeOp];

            if (
              (parentPos === nodePos &&
                parent.right === node &&
                !t().isLogicalExpression(parent)) ||
              parentPos > nodePos
            ) {
              return true;
            }
          }

          return false;
        }

        function UnionTypeAnnotation(node, parent) {
          return (
            t().isArrayTypeAnnotation(parent) ||
            t().isNullableTypeAnnotation(parent) ||
            t().isIntersectionTypeAnnotation(parent) ||
            t().isUnionTypeAnnotation(parent)
          );
        }

        function TSAsExpression() {
          return true;
        }

        function TSTypeAssertion() {
          return true;
        }

        function BinaryExpression(node, parent) {
          return (
            node.operator === "in" &&
            (t().isVariableDeclarator(parent) || t().isFor(parent))
          );
        }

        function SequenceExpression(node, parent) {
          if (
            t().isForStatement(parent) ||
            t().isThrowStatement(parent) ||
            t().isReturnStatement(parent) ||
            (t().isIfStatement(parent) && parent.test === node) ||
            (t().isWhileStatement(parent) && parent.test === node) ||
            (t().isForInStatement(parent) && parent.right === node) ||
            (t().isSwitchStatement(parent) && parent.discriminant === node) ||
            (t().isExpressionStatement(parent) && parent.expression === node)
          ) {
            return false;
          }

          return true;
        }

        function YieldExpression(node, parent) {
          return (
            t().isBinary(parent) ||
            t().isUnaryLike(parent) ||
            t().isCallExpression(parent) ||
            t().isMemberExpression(parent) ||
            t().isNewExpression(parent) ||
            (t().isConditionalExpression(parent) && node === parent.test) ||
            isClassExtendsClause(node, parent)
          );
        }

        function ClassExpression(node, parent, printStack) {
          return isFirstInStatement(printStack, {
            considerDefaultExports: true
          });
        }

        function UnaryLike(node, parent) {
          return (
            t().isMemberExpression(parent, {
              object: node
            }) ||
            t().isCallExpression(parent, {
              callee: node
            }) ||
            t().isNewExpression(parent, {
              callee: node
            }) ||
            t().isBinaryExpression(parent, {
              operator: "**",
              left: node
            }) ||
            isClassExtendsClause(node, parent)
          );
        }

        function FunctionExpression(node, parent, printStack) {
          return isFirstInStatement(printStack, {
            considerDefaultExports: true
          });
        }

        function ArrowFunctionExpression(node, parent) {
          return (
            t().isExportDeclaration(parent) ||
            ConditionalExpression(node, parent)
          );
        }

        function ConditionalExpression(node, parent) {
          if (
            t().isUnaryLike(parent) ||
            t().isBinary(parent) ||
            t().isConditionalExpression(parent, {
              test: node
            }) ||
            t().isAwaitExpression(parent) ||
            t().isTaggedTemplateExpression(parent) ||
            t().isTSTypeAssertion(parent) ||
            t().isTSAsExpression(parent)
          ) {
            return true;
          }

          return UnaryLike(node, parent);
        }

        function AssignmentExpression(node) {
          if (t().isObjectPattern(node.left)) {
            return true;
          } else {
            return ConditionalExpression.apply(void 0, arguments);
          }
        }

        function NewExpression(node, parent) {
          return isClassExtendsClause(node, parent);
        }

        function isFirstInStatement(printStack, _temp) {
          var _ref = _temp === void 0 ? {} : _temp,
            _ref$considerArrow = _ref.considerArrow,
            considerArrow =
              _ref$considerArrow === void 0 ? false : _ref$considerArrow,
            _ref$considerDefaultE = _ref.considerDefaultExports,
            considerDefaultExports =
              _ref$considerDefaultE === void 0 ? false : _ref$considerDefaultE;

          var i = printStack.length - 1;
          var node = printStack[i];
          i--;
          var parent = printStack[i];

          while (i > 0) {
            if (
              t().isExpressionStatement(parent, {
                expression: node
              }) ||
              t().isTaggedTemplateExpression(parent) ||
              (considerDefaultExports &&
                t().isExportDefaultDeclaration(parent, {
                  declaration: node
                })) ||
              (considerArrow &&
                t().isArrowFunctionExpression(parent, {
                  body: node
                }))
            ) {
              return true;
            }

            if (
              t().isCallExpression(parent, {
                callee: node
              }) ||
              (t().isSequenceExpression(parent) &&
                parent.expressions[0] === node) ||
              t().isMemberExpression(parent, {
                object: node
              }) ||
              t().isConditional(parent, {
                test: node
              }) ||
              t().isBinary(parent, {
                left: node
              }) ||
              t().isAssignmentExpression(parent, {
                left: node
              })
            ) {
              node = parent;
              i--;
              parent = printStack[i];
            } else {
              return false;
            }
          }

          return false;
        }

        /***/
      },
      /* 400 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _templateLiterals = __webpack_require__(401);

        Object.keys(_templateLiterals).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _templateLiterals[key];
            }
          });
        });

        var _expressions = __webpack_require__(402);

        Object.keys(_expressions).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _expressions[key];
            }
          });
        });

        var _statements = __webpack_require__(403);

        Object.keys(_statements).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _statements[key];
            }
          });
        });

        var _classes = __webpack_require__(404);

        Object.keys(_classes).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _classes[key];
            }
          });
        });

        var _methods = __webpack_require__(405);

        Object.keys(_methods).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _methods[key];
            }
          });
        });

        var _modules = __webpack_require__(152);

        Object.keys(_modules).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _modules[key];
            }
          });
        });

        var _types = __webpack_require__(82);

        Object.keys(_types).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _types[key];
            }
          });
        });

        var _flow = __webpack_require__(410);

        Object.keys(_flow).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _flow[key];
            }
          });
        });

        var _base = __webpack_require__(411);

        Object.keys(_base).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _base[key];
            }
          });
        });

        var _jsx = __webpack_require__(412);

        Object.keys(_jsx).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _jsx[key];
            }
          });
        });

        var _typescript = __webpack_require__(413);

        Object.keys(_typescript).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          Object.defineProperty(exports, key, {
            enumerable: true,
            get: function get() {
              return _typescript[key];
            }
          });
        });

        /***/
      },
      /* 401 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TaggedTemplateExpression = TaggedTemplateExpression;
        exports.TemplateElement = TemplateElement;
        exports.TemplateLiteral = TemplateLiteral;

        function TaggedTemplateExpression(node) {
          this.print(node.tag, node);
          this.print(node.quasi, node);
        }

        function TemplateElement(node, parent) {
          var isFirst = parent.quasis[0] === node;
          var isLast = parent.quasis[parent.quasis.length - 1] === node;
          var value =
            (isFirst ? "`" : "}") + node.value.raw + (isLast ? "`" : "${");
          this.token(value);
        }

        function TemplateLiteral(node) {
          var quasis = node.quasis;

          for (var i = 0; i < quasis.length; i++) {
            this.print(quasis[i], node);

            if (i + 1 < quasis.length) {
              this.print(node.expressions[i], node);
            }
          }
        }

        /***/
      },
      /* 402 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UnaryExpression = UnaryExpression;
        exports.DoExpression = DoExpression;
        exports.ParenthesizedExpression = ParenthesizedExpression;
        exports.UpdateExpression = UpdateExpression;
        exports.ConditionalExpression = ConditionalExpression;
        exports.NewExpression = NewExpression;
        exports.SequenceExpression = SequenceExpression;
        exports.ThisExpression = ThisExpression;
        exports.Super = Super;
        exports.Decorator = Decorator;
        exports.OptionalMemberExpression = OptionalMemberExpression;
        exports.OptionalCallExpression = OptionalCallExpression;
        exports.CallExpression = CallExpression;
        exports.Import = Import;
        exports.EmptyStatement = EmptyStatement;
        exports.ExpressionStatement = ExpressionStatement;
        exports.AssignmentPattern = AssignmentPattern;
        exports.LogicalExpression = exports.BinaryExpression = exports.AssignmentExpression = AssignmentExpression;
        exports.BindExpression = BindExpression;
        exports.MemberExpression = MemberExpression;
        exports.MetaProperty = MetaProperty;
        exports.PrivateName = PrivateName;
        exports.AwaitExpression = exports.YieldExpression = void 0;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var n = _interopRequireWildcard(__webpack_require__(151));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function UnaryExpression(node) {
          if (
            node.operator === "void" ||
            node.operator === "delete" ||
            node.operator === "typeof"
          ) {
            this.word(node.operator);
            this.space();
          } else {
            this.token(node.operator);
          }

          this.print(node.argument, node);
        }

        function DoExpression(node) {
          this.word("do");
          this.space();
          this.print(node.body, node);
        }

        function ParenthesizedExpression(node) {
          this.token("(");
          this.print(node.expression, node);
          this.token(")");
        }

        function UpdateExpression(node) {
          if (node.prefix) {
            this.token(node.operator);
            this.print(node.argument, node);
          } else {
            this.startTerminatorless(true);
            this.print(node.argument, node);
            this.endTerminatorless();
            this.token(node.operator);
          }
        }

        function ConditionalExpression(node) {
          this.print(node.test, node);
          this.space();
          this.token("?");
          this.space();
          this.print(node.consequent, node);
          this.space();
          this.token(":");
          this.space();
          this.print(node.alternate, node);
        }

        function NewExpression(node, parent) {
          this.word("new");
          this.space();
          this.print(node.callee, node);

          if (
            this.format.minified &&
            node.arguments.length === 0 &&
            !node.optional &&
            !t().isCallExpression(parent, {
              callee: node
            }) &&
            !t().isMemberExpression(parent) &&
            !t().isNewExpression(parent)
          ) {
            return;
          }

          this.print(node.typeParameters, node);

          if (node.optional) {
            this.token("?.");
          }

          this.token("(");
          this.printList(node.arguments, node);
          this.token(")");
        }

        function SequenceExpression(node) {
          this.printList(node.expressions, node);
        }

        function ThisExpression() {
          this.word("this");
        }

        function Super() {
          this.word("super");
        }

        function Decorator(node) {
          this.token("@");
          this.print(node.callee, node);
          this.newline();
        }

        function OptionalMemberExpression(node) {
          this.print(node.object, node);

          if (!node.computed && t().isMemberExpression(node.property)) {
            throw new TypeError(
              "Got a MemberExpression for MemberExpression property"
            );
          }

          var computed = node.computed;

          if (
            t().isLiteral(node.property) &&
            typeof node.property.value === "number"
          ) {
            computed = true;
          }

          if (node.optional) {
            this.token("?.");
          }

          if (computed) {
            this.token("[");
            this.print(node.property, node);
            this.token("]");
          } else {
            if (!node.optional) {
              this.token(".");
            }

            this.print(node.property, node);
          }
        }

        function OptionalCallExpression(node) {
          this.print(node.callee, node);
          this.print(node.typeParameters, node);

          if (node.optional) {
            this.token("?.");
          }

          this.token("(");
          this.printList(node.arguments, node);
          this.token(")");
        }

        function CallExpression(node) {
          this.print(node.callee, node);
          this.print(node.typeParameters, node);
          this.token("(");
          this.printList(node.arguments, node);
          this.token(")");
        }

        function Import() {
          this.word("import");
        }

        function buildYieldAwait(keyword) {
          return function(node) {
            this.word(keyword);

            if (node.delegate) {
              this.token("*");
            }

            if (node.argument) {
              this.space();
              var terminatorState = this.startTerminatorless();
              this.print(node.argument, node);
              this.endTerminatorless(terminatorState);
            }
          };
        }

        var YieldExpression = buildYieldAwait("yield");
        exports.YieldExpression = YieldExpression;
        var AwaitExpression = buildYieldAwait("await");
        exports.AwaitExpression = AwaitExpression;

        function EmptyStatement() {
          this.semicolon(true);
        }

        function ExpressionStatement(node) {
          this.print(node.expression, node);
          this.semicolon();
        }

        function AssignmentPattern(node) {
          this.print(node.left, node);
          if (node.left.optional) this.token("?");
          this.print(node.left.typeAnnotation, node);
          this.space();
          this.token("=");
          this.space();
          this.print(node.right, node);
        }

        function AssignmentExpression(node, parent) {
          var parens =
            this.inForStatementInitCounter &&
            node.operator === "in" &&
            !n.needsParens(node, parent);

          if (parens) {
            this.token("(");
          }

          this.print(node.left, node);
          this.space();

          if (node.operator === "in" || node.operator === "instanceof") {
            this.word(node.operator);
          } else {
            this.token(node.operator);
          }

          this.space();
          this.print(node.right, node);

          if (parens) {
            this.token(")");
          }
        }

        function BindExpression(node) {
          this.print(node.object, node);
          this.token("::");
          this.print(node.callee, node);
        }

        function MemberExpression(node) {
          this.print(node.object, node);

          if (!node.computed && t().isMemberExpression(node.property)) {
            throw new TypeError(
              "Got a MemberExpression for MemberExpression property"
            );
          }

          var computed = node.computed;

          if (
            t().isLiteral(node.property) &&
            typeof node.property.value === "number"
          ) {
            computed = true;
          }

          if (computed) {
            this.token("[");
            this.print(node.property, node);
            this.token("]");
          } else {
            this.token(".");
            this.print(node.property, node);
          }
        }

        function MetaProperty(node) {
          this.print(node.meta, node);
          this.token(".");
          this.print(node.property, node);
        }

        function PrivateName(node) {
          this.token("#");
          this.print(node.id, node);
        }

        /***/
      },
      /* 403 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.WithStatement = WithStatement;
        exports.IfStatement = IfStatement;
        exports.ForStatement = ForStatement;
        exports.WhileStatement = WhileStatement;
        exports.DoWhileStatement = DoWhileStatement;
        exports.LabeledStatement = LabeledStatement;
        exports.TryStatement = TryStatement;
        exports.CatchClause = CatchClause;
        exports.SwitchStatement = SwitchStatement;
        exports.SwitchCase = SwitchCase;
        exports.DebuggerStatement = DebuggerStatement;
        exports.VariableDeclaration = VariableDeclaration;
        exports.VariableDeclarator = VariableDeclarator;
        exports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = void 0;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function WithStatement(node) {
          this.word("with");
          this.space();
          this.token("(");
          this.print(node.object, node);
          this.token(")");
          this.printBlock(node);
        }

        function IfStatement(node) {
          this.word("if");
          this.space();
          this.token("(");
          this.print(node.test, node);
          this.token(")");
          this.space();
          var needsBlock =
            node.alternate &&
            t().isIfStatement(getLastStatement(node.consequent));

          if (needsBlock) {
            this.token("{");
            this.newline();
            this.indent();
          }

          this.printAndIndentOnComments(node.consequent, node);

          if (needsBlock) {
            this.dedent();
            this.newline();
            this.token("}");
          }

          if (node.alternate) {
            if (this.endsWith("}")) this.space();
            this.word("else");
            this.space();
            this.printAndIndentOnComments(node.alternate, node);
          }
        }

        function getLastStatement(statement) {
          if (!t().isStatement(statement.body)) return statement;
          return getLastStatement(statement.body);
        }

        function ForStatement(node) {
          this.word("for");
          this.space();
          this.token("(");
          this.inForStatementInitCounter++;
          this.print(node.init, node);
          this.inForStatementInitCounter--;
          this.token(";");

          if (node.test) {
            this.space();
            this.print(node.test, node);
          }

          this.token(";");

          if (node.update) {
            this.space();
            this.print(node.update, node);
          }

          this.token(")");
          this.printBlock(node);
        }

        function WhileStatement(node) {
          this.word("while");
          this.space();
          this.token("(");
          this.print(node.test, node);
          this.token(")");
          this.printBlock(node);
        }

        var buildForXStatement = function buildForXStatement(op) {
          return function(node) {
            this.word("for");
            this.space();

            if (op === "of" && node.await) {
              this.word("await");
              this.space();
            }

            this.token("(");
            this.print(node.left, node);
            this.space();
            this.word(op);
            this.space();
            this.print(node.right, node);
            this.token(")");
            this.printBlock(node);
          };
        };

        var ForInStatement = buildForXStatement("in");
        exports.ForInStatement = ForInStatement;
        var ForOfStatement = buildForXStatement("of");
        exports.ForOfStatement = ForOfStatement;

        function DoWhileStatement(node) {
          this.word("do");
          this.space();
          this.print(node.body, node);
          this.space();
          this.word("while");
          this.space();
          this.token("(");
          this.print(node.test, node);
          this.token(")");
          this.semicolon();
        }

        function buildLabelStatement(prefix, key) {
          if (key === void 0) {
            key = "label";
          }

          return function(node) {
            this.word(prefix);
            var label = node[key];

            if (label) {
              this.space();
              var isLabel = key == "label";
              var terminatorState = this.startTerminatorless(isLabel);
              this.print(label, node);
              this.endTerminatorless(terminatorState);
            }

            this.semicolon();
          };
        }

        var ContinueStatement = buildLabelStatement("continue");
        exports.ContinueStatement = ContinueStatement;
        var ReturnStatement = buildLabelStatement("return", "argument");
        exports.ReturnStatement = ReturnStatement;
        var BreakStatement = buildLabelStatement("break");
        exports.BreakStatement = BreakStatement;
        var ThrowStatement = buildLabelStatement("throw", "argument");
        exports.ThrowStatement = ThrowStatement;

        function LabeledStatement(node) {
          this.print(node.label, node);
          this.token(":");
          this.space();
          this.print(node.body, node);
        }

        function TryStatement(node) {
          this.word("try");
          this.space();
          this.print(node.block, node);
          this.space();

          if (node.handlers) {
            this.print(node.handlers[0], node);
          } else {
            this.print(node.handler, node);
          }

          if (node.finalizer) {
            this.space();
            this.word("finally");
            this.space();
            this.print(node.finalizer, node);
          }
        }

        function CatchClause(node) {
          this.word("catch");
          this.space();

          if (node.param) {
            this.token("(");
            this.print(node.param, node);
            this.token(")");
            this.space();
          }

          this.print(node.body, node);
        }

        function SwitchStatement(node) {
          this.word("switch");
          this.space();
          this.token("(");
          this.print(node.discriminant, node);
          this.token(")");
          this.space();
          this.token("{");
          this.printSequence(node.cases, node, {
            indent: true,
            addNewlines: function addNewlines(leading, cas) {
              if (!leading && node.cases[node.cases.length - 1] === cas)
                return -1;
            }
          });
          this.token("}");
        }

        function SwitchCase(node) {
          if (node.test) {
            this.word("case");
            this.space();
            this.print(node.test, node);
            this.token(":");
          } else {
            this.word("default");
            this.token(":");
          }

          if (node.consequent.length) {
            this.newline();
            this.printSequence(node.consequent, node, {
              indent: true
            });
          }
        }

        function DebuggerStatement() {
          this.word("debugger");
          this.semicolon();
        }

        function variableDeclarationIndent() {
          this.token(",");
          this.newline();
          if (this.endsWith("\n"))
            for (var i = 0; i < 4; i++) {
              this.space(true);
            }
        }

        function constDeclarationIndent() {
          this.token(",");
          this.newline();
          if (this.endsWith("\n"))
            for (var i = 0; i < 6; i++) {
              this.space(true);
            }
        }

        function VariableDeclaration(node, parent) {
          if (node.declare) {
            this.word("declare");
            this.space();
          }

          this.word(node.kind);
          this.space();
          var hasInits = false;

          if (!t().isFor(parent)) {
            var _arr = node.declarations;

            for (var _i = 0; _i < _arr.length; _i++) {
              var declar = _arr[_i];

              if (declar.init) {
                hasInits = true;
              }
            }
          }

          var separator;

          if (hasInits) {
            separator =
              node.kind === "const"
                ? constDeclarationIndent
                : variableDeclarationIndent;
          }

          this.printList(node.declarations, node, {
            separator: separator
          });

          if (t().isFor(parent)) {
            if (parent.left === node || parent.init === node) return;
          }

          this.semicolon();
        }

        function VariableDeclarator(node) {
          this.print(node.id, node);
          if (node.definite) this.token("!");
          this.print(node.id.typeAnnotation, node);

          if (node.init) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.init, node);
          }
        }

        /***/
      },
      /* 404 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ClassExpression = exports.ClassDeclaration = ClassDeclaration;
        exports.ClassBody = ClassBody;
        exports.ClassProperty = ClassProperty;
        exports.ClassPrivateProperty = ClassPrivateProperty;
        exports.ClassMethod = ClassMethod;
        exports._classMethodHead = _classMethodHead;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function ClassDeclaration(node, parent) {
          if (
            !t().isExportDefaultDeclaration(parent) &&
            !t().isExportNamedDeclaration(parent)
          ) {
            this.printJoin(node.decorators, node);
          }

          if (node.declare) {
            this.word("declare");
            this.space();
          }

          if (node.abstract) {
            this.word("abstract");
            this.space();
          }

          this.word("class");

          if (node.id) {
            this.space();
            this.print(node.id, node);
          }

          this.print(node.typeParameters, node);

          if (node.superClass) {
            this.space();
            this.word("extends");
            this.space();
            this.print(node.superClass, node);
            this.print(node.superTypeParameters, node);
          }

          if (node.implements) {
            this.space();
            this.word("implements");
            this.space();
            this.printList(node.implements, node);
          }

          this.space();
          this.print(node.body, node);
        }

        function ClassBody(node) {
          this.token("{");
          this.printInnerComments(node);

          if (node.body.length === 0) {
            this.token("}");
          } else {
            this.newline();
            this.indent();
            this.printSequence(node.body, node);
            this.dedent();
            if (!this.endsWith("\n")) this.newline();
            this.rightBrace();
          }
        }

        function ClassProperty(node) {
          this.printJoin(node.decorators, node);

          if (node.accessibility) {
            this.word(node.accessibility);
            this.space();
          }

          if (node.static) {
            this.word("static");
            this.space();
          }

          if (node.abstract) {
            this.word("abstract");
            this.space();
          }

          if (node.readonly) {
            this.word("readonly");
            this.space();
          }

          if (node.computed) {
            this.token("[");
            this.print(node.key, node);
            this.token("]");
          } else {
            this._variance(node);

            this.print(node.key, node);
          }

          if (node.optional) {
            this.token("?");
          }

          if (node.definite) {
            this.token("!");
          }

          this.print(node.typeAnnotation, node);

          if (node.value) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.value, node);
          }

          this.semicolon();
        }

        function ClassPrivateProperty(node) {
          if (node.static) {
            this.word("static");
            this.space();
          }

          this.print(node.key, node);

          if (node.value) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.value, node);
          }

          this.semicolon();
        }

        function ClassMethod(node) {
          this._classMethodHead(node);

          this.space();
          this.print(node.body, node);
        }

        function _classMethodHead(node) {
          this.printJoin(node.decorators, node);

          if (node.accessibility) {
            this.word(node.accessibility);
            this.space();
          }

          if (node.abstract) {
            this.word("abstract");
            this.space();
          }

          if (node.static) {
            this.word("static");
            this.space();
          }

          this._methodHead(node);
        }

        /***/
      },
      /* 405 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports._params = _params;
        exports._parameters = _parameters;
        exports._param = _param;
        exports._methodHead = _methodHead;
        exports._predicate = _predicate;
        exports._functionHead = _functionHead;
        exports.FunctionDeclaration = exports.FunctionExpression = FunctionExpression;
        exports.ArrowFunctionExpression = ArrowFunctionExpression;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _params(node) {
          this.print(node.typeParameters, node);
          this.token("(");

          this._parameters(node.params, node);

          this.token(")");
          this.print(node.returnType, node);
        }

        function _parameters(parameters, parent) {
          for (var i = 0; i < parameters.length; i++) {
            this._param(parameters[i], parent);

            if (i < parameters.length - 1) {
              this.token(",");
              this.space();
            }
          }
        }

        function _param(parameter, parent) {
          this.printJoin(parameter.decorators, parameter);
          this.print(parameter, parent);
          if (parameter.optional) this.token("?");
          this.print(parameter.typeAnnotation, parameter);
        }

        function _methodHead(node) {
          var kind = node.kind;
          var key = node.key;

          if (kind === "get" || kind === "set") {
            this.word(kind);
            this.space();
          }

          if (node.async) {
            this.word("async");
            this.space();
          }

          if (kind === "method" || kind === "init") {
            if (node.generator) {
              this.token("*");
            }
          }

          if (node.computed) {
            this.token("[");
            this.print(key, node);
            this.token("]");
          } else {
            this.print(key, node);
          }

          if (node.optional) {
            this.token("?");
          }

          this._params(node);
        }

        function _predicate(node) {
          if (node.predicate) {
            if (!node.returnType) {
              this.token(":");
            }

            this.space();
            this.print(node.predicate, node);
          }
        }

        function _functionHead(node) {
          if (node.async) {
            this.word("async");
            this.space();
          }

          this.word("function");
          if (node.generator) this.token("*");
          this.space();

          if (node.id) {
            this.print(node.id, node);
          }

          this._params(node);

          this._predicate(node);
        }

        function FunctionExpression(node) {
          this._functionHead(node);

          this.space();
          this.print(node.body, node);
        }

        function ArrowFunctionExpression(node) {
          if (node.async) {
            this.word("async");
            this.space();
          }

          var firstParam = node.params[0];

          if (
            node.params.length === 1 &&
            t().isIdentifier(firstParam) &&
            !hasTypes(node, firstParam)
          ) {
            this.print(firstParam, node);
          } else {
            this._params(node);
          }

          this._predicate(node);

          this.space();
          this.token("=>");
          this.space();
          this.print(node.body, node);
        }

        function hasTypes(node, param) {
          return (
            node.typeParameters ||
            node.returnType ||
            param.typeAnnotation ||
            param.optional ||
            param.trailingComments
          );
        }

        /***/
      },
      /* 406 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(Buffer) {
          var object = {};
          var hasOwnProperty = object.hasOwnProperty;

          var forOwn = function forOwn(object, callback) {
            for (var key in object) {
              if (hasOwnProperty.call(object, key)) {
                callback(key, object[key]);
              }
            }
          };

          var extend = function extend(destination, source) {
            if (!source) {
              return destination;
            }

            forOwn(source, function(key, value) {
              destination[key] = value;
            });
            return destination;
          };

          var forEach = function forEach(array, callback) {
            var length = array.length;
            var index = -1;

            while (++index < length) {
              callback(array[index]);
            }
          };

          var toString = object.toString;
          var isArray = Array.isArray;
          var isBuffer = Buffer.isBuffer;

          var isObject = function isObject(value) {
            return toString.call(value) == "[object Object]";
          };

          var isString = function isString(value) {
            return (
              typeof value == "string" ||
              toString.call(value) == "[object String]"
            );
          };

          var isNumber = function isNumber(value) {
            return (
              typeof value == "number" ||
              toString.call(value) == "[object Number]"
            );
          };

          var isFunction = function isFunction(value) {
            return typeof value == "function";
          };

          var isMap = function isMap(value) {
            return toString.call(value) == "[object Map]";
          };

          var isSet = function isSet(value) {
            return toString.call(value) == "[object Set]";
          };

          var singleEscapes = {
            '"': '\\"',
            "'": "\\'",
            "\\": "\\\\",
            "\b": "\\b",
            "\f": "\\f",
            "\n": "\\n",
            "\r": "\\r",
            "\t": "\\t"
          };
          var regexSingleEscape = /["'\\\b\f\n\r\t]/;
          var regexDigit = /[0-9]/;
          var regexWhitelist = /[ !#-&\(-\[\]-~]/;

          var jsesc = function jsesc(argument, options) {
            var increaseIndentation = function increaseIndentation() {
              oldIndent = indent;
              ++options.indentLevel;
              indent = options.indent.repeat(options.indentLevel);
            };

            var defaults = {
              escapeEverything: false,
              minimal: false,
              isScriptContext: false,
              quotes: "single",
              wrap: false,
              es6: false,
              json: false,
              compact: true,
              lowercaseHex: false,
              numbers: "decimal",
              indent: "\t",
              indentLevel: 0,
              __inline1__: false,
              __inline2__: false
            };
            var json = options && options.json;

            if (json) {
              defaults.quotes = "double";
              defaults.wrap = true;
            }

            options = extend(defaults, options);

            if (
              options.quotes != "single" &&
              options.quotes != "double" &&
              options.quotes != "backtick"
            ) {
              options.quotes = "single";
            }

            var quote =
              options.quotes == "double"
                ? '"'
                : options.quotes == "backtick" ? "`" : "'";
            var compact = options.compact;
            var lowercaseHex = options.lowercaseHex;
            var indent = options.indent.repeat(options.indentLevel);
            var oldIndent = "";
            var inline1 = options.__inline1__;
            var inline2 = options.__inline2__;
            var newLine = compact ? "" : "\n";
            var result;
            var isEmpty = true;
            var useBinNumbers = options.numbers == "binary";
            var useOctNumbers = options.numbers == "octal";
            var useDecNumbers = options.numbers == "decimal";
            var useHexNumbers = options.numbers == "hexadecimal";

            if (json && argument && isFunction(argument.toJSON)) {
              argument = argument.toJSON();
            }

            if (!isString(argument)) {
              if (isMap(argument)) {
                if (argument.size == 0) {
                  return "new Map()";
                }

                if (!compact) {
                  options.__inline1__ = true;
                  options.__inline2__ = false;
                }

                return "new Map(" + jsesc(Array.from(argument), options) + ")";
              }

              if (isSet(argument)) {
                if (argument.size == 0) {
                  return "new Set()";
                }

                return "new Set(" + jsesc(Array.from(argument), options) + ")";
              }

              if (isBuffer(argument)) {
                if (argument.length == 0) {
                  return "Buffer.from([])";
                }

                return (
                  "Buffer.from(" + jsesc(Array.from(argument), options) + ")"
                );
              }

              if (isArray(argument)) {
                result = [];
                options.wrap = true;

                if (inline1) {
                  options.__inline1__ = false;
                  options.__inline2__ = true;
                }

                if (!inline2) {
                  increaseIndentation();
                }

                forEach(argument, function(value) {
                  isEmpty = false;

                  if (inline2) {
                    options.__inline2__ = false;
                  }

                  result.push(
                    (compact || inline2 ? "" : indent) + jsesc(value, options)
                  );
                });

                if (isEmpty) {
                  return "[]";
                }

                if (inline2) {
                  return "[" + result.join(", ") + "]";
                }

                return (
                  "[" +
                  newLine +
                  result.join("," + newLine) +
                  newLine +
                  (compact ? "" : oldIndent) +
                  "]"
                );
              } else if (isNumber(argument)) {
                if (json) {
                  return JSON.stringify(argument);
                }

                if (useDecNumbers) {
                  return String(argument);
                }

                if (useHexNumbers) {
                  var hexadecimal = argument.toString(16);

                  if (!lowercaseHex) {
                    hexadecimal = hexadecimal.toUpperCase();
                  }

                  return "0x" + hexadecimal;
                }

                if (useBinNumbers) {
                  return "0b" + argument.toString(2);
                }

                if (useOctNumbers) {
                  return "0o" + argument.toString(8);
                }
              } else if (!isObject(argument)) {
                if (json) {
                  return JSON.stringify(argument) || "null";
                }

                return String(argument);
              } else {
                result = [];
                options.wrap = true;
                increaseIndentation();
                forOwn(argument, function(key, value) {
                  isEmpty = false;
                  result.push(
                    (compact ? "" : indent) +
                      jsesc(key, options) +
                      ":" +
                      (compact ? "" : " ") +
                      jsesc(value, options)
                  );
                });

                if (isEmpty) {
                  return "{}";
                }

                return (
                  "{" +
                  newLine +
                  result.join("," + newLine) +
                  newLine +
                  (compact ? "" : oldIndent) +
                  "}"
                );
              }
            }

            var string = argument;
            var index = -1;
            var length = string.length;
            result = "";

            while (++index < length) {
              var character = string.charAt(index);

              if (options.es6) {
                var first = string.charCodeAt(index);

                if (first >= 0xd800 && first <= 0xdbff && length > index + 1) {
                  var second = string.charCodeAt(index + 1);

                  if (second >= 0xdc00 && second <= 0xdfff) {
                    var codePoint =
                      (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;

                    var _hexadecimal2 = codePoint.toString(16);

                    if (!lowercaseHex) {
                      _hexadecimal2 = _hexadecimal2.toUpperCase();
                    }

                    result += "\\u{" + _hexadecimal2 + "}";
                    ++index;
                    continue;
                  }
                }
              }

              if (!options.escapeEverything) {
                if (regexWhitelist.test(character)) {
                  result += character;
                  continue;
                }

                if (character == '"') {
                  result += quote == character ? '\\"' : character;
                  continue;
                }

                if (character == "`") {
                  result += quote == character ? "\\`" : character;
                  continue;
                }

                if (character == "'") {
                  result += quote == character ? "\\'" : character;
                  continue;
                }
              }

              if (
                character == "\0" &&
                !json &&
                !regexDigit.test(string.charAt(index + 1))
              ) {
                result += "\\0";
                continue;
              }

              if (regexSingleEscape.test(character)) {
                result += singleEscapes[character];
                continue;
              }

              var charCode = character.charCodeAt(0);

              if (options.minimal && charCode != 0x2028 && charCode != 0x2029) {
                result += character;
                continue;
              }

              var _hexadecimal = charCode.toString(16);

              if (!lowercaseHex) {
                _hexadecimal = _hexadecimal.toUpperCase();
              }

              var longhand = _hexadecimal.length > 2 || json;

              var escaped =
                "\\" +
                (longhand ? "u" : "x") +
                ("0000" + _hexadecimal).slice(longhand ? -4 : -2);

              result += escaped;
              continue;
            }

            if (options.wrap) {
              result = quote + result + quote;
            }

            if (quote == "`") {
              result = result.replace(/\$\{/g, "\\${");
            }

            if (options.isScriptContext) {
              return result
                .replace(/<\/(script|style)/gi, "<\\/$1")
                .replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--");
            }

            return result;
          };

          jsesc.version = "2.5.1";
          module.exports = jsesc;
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(153).Buffer));

        /***/
      },
      /* 407 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.byteLength = byteLength;
        exports.toByteArray = toByteArray;
        exports.fromByteArray = fromByteArray;
        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
        var code =
          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i];
          revLookup[code.charCodeAt(i)] = i;
        }

        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;

        function placeHoldersCount(b64) {
          var len = b64.length;

          if (len % 4 > 0) {
            throw new Error("Invalid string. Length must be a multiple of 4");
          }

          return b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
        }

        function byteLength(b64) {
          return b64.length * 3 / 4 - placeHoldersCount(b64);
        }

        function toByteArray(b64) {
          var i, l, tmp, placeHolders, arr;
          var len = b64.length;
          placeHolders = placeHoldersCount(b64);
          arr = new Arr(len * 3 / 4 - placeHolders);
          l = placeHolders > 0 ? len - 4 : len;
          var L = 0;

          for (i = 0; i < l; i += 4) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 18) |
              (revLookup[b64.charCodeAt(i + 1)] << 12) |
              (revLookup[b64.charCodeAt(i + 2)] << 6) |
              revLookup[b64.charCodeAt(i + 3)];
            arr[L++] = (tmp >> 16) & 0xff;
            arr[L++] = (tmp >> 8) & 0xff;
            arr[L++] = tmp & 0xff;
          }

          if (placeHolders === 2) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 2) |
              (revLookup[b64.charCodeAt(i + 1)] >> 4);
            arr[L++] = tmp & 0xff;
          } else if (placeHolders === 1) {
            tmp =
              (revLookup[b64.charCodeAt(i)] << 10) |
              (revLookup[b64.charCodeAt(i + 1)] << 4) |
              (revLookup[b64.charCodeAt(i + 2)] >> 2);
            arr[L++] = (tmp >> 8) & 0xff;
            arr[L++] = tmp & 0xff;
          }

          return arr;
        }

        function tripletToBase64(num) {
          return (
            lookup[(num >> 18) & 0x3f] +
            lookup[(num >> 12) & 0x3f] +
            lookup[(num >> 6) & 0x3f] +
            lookup[num & 0x3f]
          );
        }

        function encodeChunk(uint8, start, end) {
          var tmp;
          var output = [];

          for (var i = start; i < end; i += 3) {
            tmp =
              ((uint8[i] << 16) & 0xff0000) +
              ((uint8[i + 1] << 8) & 0xff00) +
              (uint8[i + 2] & 0xff);
            output.push(tripletToBase64(tmp));
          }

          return output.join("");
        }

        function fromByteArray(uint8) {
          var tmp;
          var len = uint8.length;
          var extraBytes = len % 3;
          var output = "";
          var parts = [];
          var maxChunkLength = 16383;

          for (
            var i = 0, len2 = len - extraBytes;
            i < len2;
            i += maxChunkLength
          ) {
            parts.push(
              encodeChunk(
                uint8,
                i,
                i + maxChunkLength > len2 ? len2 : i + maxChunkLength
              )
            );
          }

          if (extraBytes === 1) {
            tmp = uint8[len - 1];
            output += lookup[tmp >> 2];
            output += lookup[(tmp << 4) & 0x3f];
            output += "==";
          } else if (extraBytes === 2) {
            tmp = (uint8[len - 2] << 8) + uint8[len - 1];
            output += lookup[tmp >> 10];
            output += lookup[(tmp >> 4) & 0x3f];
            output += lookup[(tmp << 2) & 0x3f];
            output += "=";
          }

          parts.push(output);
          return parts.join("");
        }

        /***/
      },
      /* 408 */
      /***/ function(module, exports) {
        exports.read = function(buffer, offset, isLE, mLen, nBytes) {
          var e, m;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var nBits = -7;
          var i = isLE ? nBytes - 1 : 0;
          var d = isLE ? -1 : 1;
          var s = buffer[offset + i];
          i += d;
          e = s & ((1 << -nBits) - 1);
          s >>= -nBits;
          nBits += eLen;

          for (
            ;
            nBits > 0;
            e = e * 256 + buffer[offset + i], i += d, nBits -= 8
          ) {}

          m = e & ((1 << -nBits) - 1);
          e >>= -nBits;
          nBits += mLen;

          for (
            ;
            nBits > 0;
            m = m * 256 + buffer[offset + i], i += d, nBits -= 8
          ) {}

          if (e === 0) {
            e = 1 - eBias;
          } else if (e === eMax) {
            return m ? NaN : (s ? -1 : 1) * Infinity;
          } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
          }

          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };

        exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var i = isLE ? 0 : nBytes - 1;
          var d = isLE ? 1 : -1;
          var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
          value = Math.abs(value);

          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
          } else {
            e = Math.floor(Math.log(value) / Math.LN2);

            if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
            }

            if (e + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }

            if (value * c >= 2) {
              e++;
              c /= 2;
            }

            if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
            }
          }

          for (
            ;
            mLen >= 8;
            buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
          ) {}

          e = (e << mLen) | m;
          eLen += mLen;

          for (
            ;
            eLen > 0;
            buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
          ) {}

          buffer[offset + i - d] |= s * 128;
        };

        /***/
      },
      /* 409 */
      /***/ function(module, exports) {
        var toString = {}.toString;

        module.exports =
          Array.isArray ||
          function(arr) {
            return toString.call(arr) == "[object Array]";
          };

        /***/
      },
      /* 410 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AnyTypeAnnotation = AnyTypeAnnotation;
        exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
        exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
        exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
        exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
        exports.DeclareClass = DeclareClass;
        exports.DeclareFunction = DeclareFunction;
        exports.InferredPredicate = InferredPredicate;
        exports.DeclaredPredicate = DeclaredPredicate;
        exports.DeclareInterface = DeclareInterface;
        exports.DeclareModule = DeclareModule;
        exports.DeclareModuleExports = DeclareModuleExports;
        exports.DeclareTypeAlias = DeclareTypeAlias;
        exports.DeclareOpaqueType = DeclareOpaqueType;
        exports.DeclareVariable = DeclareVariable;
        exports.DeclareExportDeclaration = DeclareExportDeclaration;
        exports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
        exports.ExistsTypeAnnotation = ExistsTypeAnnotation;
        exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
        exports.FunctionTypeParam = FunctionTypeParam;
        exports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;
        exports._interfaceish = _interfaceish;
        exports._variance = _variance;
        exports.InterfaceDeclaration = InterfaceDeclaration;
        exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
        exports.MixedTypeAnnotation = MixedTypeAnnotation;
        exports.EmptyTypeAnnotation = EmptyTypeAnnotation;
        exports.NullableTypeAnnotation = NullableTypeAnnotation;
        exports.NumberTypeAnnotation = NumberTypeAnnotation;
        exports.StringTypeAnnotation = StringTypeAnnotation;
        exports.ThisTypeAnnotation = ThisTypeAnnotation;
        exports.TupleTypeAnnotation = TupleTypeAnnotation;
        exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
        exports.TypeAlias = TypeAlias;
        exports.TypeAnnotation = TypeAnnotation;
        exports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;
        exports.TypeParameter = TypeParameter;
        exports.OpaqueType = OpaqueType;
        exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
        exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
        exports.ObjectTypeIndexer = ObjectTypeIndexer;
        exports.ObjectTypeProperty = ObjectTypeProperty;
        exports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
        exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
        exports.UnionTypeAnnotation = UnionTypeAnnotation;
        exports.TypeCastExpression = TypeCastExpression;
        exports.Variance = Variance;
        exports.VoidTypeAnnotation = VoidTypeAnnotation;
        Object.defineProperty(exports, "NumberLiteralTypeAnnotation", {
          enumerable: true,
          get: function get() {
            return _types2.NumericLiteral;
          }
        });
        Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
          enumerable: true,
          get: function get() {
            return _types2.StringLiteral;
          }
        });

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var _modules = __webpack_require__(152);

        var _types2 = __webpack_require__(82);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function AnyTypeAnnotation() {
          this.word("any");
        }

        function ArrayTypeAnnotation(node) {
          this.print(node.elementType, node);
          this.token("[");
          this.token("]");
        }

        function BooleanTypeAnnotation() {
          this.word("boolean");
        }

        function BooleanLiteralTypeAnnotation(node) {
          this.word(node.value ? "true" : "false");
        }

        function NullLiteralTypeAnnotation() {
          this.word("null");
        }

        function DeclareClass(node, parent) {
          if (!t().isDeclareExportDeclaration(parent)) {
            this.word("declare");
            this.space();
          }

          this.word("class");
          this.space();

          this._interfaceish(node);
        }

        function DeclareFunction(node, parent) {
          if (!t().isDeclareExportDeclaration(parent)) {
            this.word("declare");
            this.space();
          }

          this.word("function");
          this.space();
          this.print(node.id, node);
          this.print(node.id.typeAnnotation.typeAnnotation, node);

          if (node.predicate) {
            this.space();
            this.print(node.predicate, node);
          }

          this.semicolon();
        }

        function InferredPredicate() {
          this.token("%");
          this.word("checks");
        }

        function DeclaredPredicate(node) {
          this.token("%");
          this.word("checks");
          this.token("(");
          this.print(node.value, node);
          this.token(")");
        }

        function DeclareInterface(node) {
          this.word("declare");
          this.space();
          this.InterfaceDeclaration(node);
        }

        function DeclareModule(node) {
          this.word("declare");
          this.space();
          this.word("module");
          this.space();
          this.print(node.id, node);
          this.space();
          this.print(node.body, node);
        }

        function DeclareModuleExports(node) {
          this.word("declare");
          this.space();
          this.word("module");
          this.token(".");
          this.word("exports");
          this.print(node.typeAnnotation, node);
        }

        function DeclareTypeAlias(node) {
          this.word("declare");
          this.space();
          this.TypeAlias(node);
        }

        function DeclareOpaqueType(node, parent) {
          if (!t().isDeclareExportDeclaration(parent)) {
            this.word("declare");
            this.space();
          }

          this.OpaqueType(node);
        }

        function DeclareVariable(node, parent) {
          if (!t().isDeclareExportDeclaration(parent)) {
            this.word("declare");
            this.space();
          }

          this.word("var");
          this.space();
          this.print(node.id, node);
          this.print(node.id.typeAnnotation, node);
          this.semicolon();
        }

        function DeclareExportDeclaration(node) {
          this.word("declare");
          this.space();
          this.word("export");
          this.space();

          if (node.default) {
            this.word("default");
            this.space();
          }

          FlowExportDeclaration.apply(this, arguments);
        }

        function DeclareExportAllDeclaration() {
          this.word("declare");
          this.space();

          _modules.ExportAllDeclaration.apply(this, arguments);
        }

        function FlowExportDeclaration(node) {
          if (node.declaration) {
            var declar = node.declaration;
            this.print(declar, node);
            if (!t().isStatement(declar)) this.semicolon();
          } else {
            this.token("{");

            if (node.specifiers.length) {
              this.space();
              this.printList(node.specifiers, node);
              this.space();
            }

            this.token("}");

            if (node.source) {
              this.space();
              this.word("from");
              this.space();
              this.print(node.source, node);
            }

            this.semicolon();
          }
        }

        function ExistsTypeAnnotation() {
          this.token("*");
        }

        function FunctionTypeAnnotation(node, parent) {
          this.print(node.typeParameters, node);
          this.token("(");
          this.printList(node.params, node);

          if (node.rest) {
            if (node.params.length) {
              this.token(",");
              this.space();
            }

            this.token("...");
            this.print(node.rest, node);
          }

          this.token(")");

          if (
            parent.type === "ObjectTypeCallProperty" ||
            parent.type === "DeclareFunction" ||
            (parent.type === "ObjectTypeProperty" && parent.method)
          ) {
            this.token(":");
          } else {
            this.space();
            this.token("=>");
          }

          this.space();
          this.print(node.returnType, node);
        }

        function FunctionTypeParam(node) {
          this.print(node.name, node);
          if (node.optional) this.token("?");

          if (node.name) {
            this.token(":");
            this.space();
          }

          this.print(node.typeAnnotation, node);
        }

        function InterfaceExtends(node) {
          this.print(node.id, node);
          this.print(node.typeParameters, node);
        }

        function _interfaceish(node) {
          this.print(node.id, node);
          this.print(node.typeParameters, node);

          if (node.extends.length) {
            this.space();
            this.word("extends");
            this.space();
            this.printList(node.extends, node);
          }

          if (node.mixins && node.mixins.length) {
            this.space();
            this.word("mixins");
            this.space();
            this.printList(node.mixins, node);
          }

          if (node.implements && node.implements.length) {
            this.space();
            this.word("implements");
            this.space();
            this.printList(node.implements, node);
          }

          this.space();
          this.print(node.body, node);
        }

        function _variance(node) {
          if (node.variance) {
            if (node.variance.kind === "plus") {
              this.token("+");
            } else if (node.variance.kind === "minus") {
              this.token("-");
            }
          }
        }

        function InterfaceDeclaration(node) {
          this.word("interface");
          this.space();

          this._interfaceish(node);
        }

        function andSeparator() {
          this.space();
          this.token("&");
          this.space();
        }

        function IntersectionTypeAnnotation(node) {
          this.printJoin(node.types, node, {
            separator: andSeparator
          });
        }

        function MixedTypeAnnotation() {
          this.word("mixed");
        }

        function EmptyTypeAnnotation() {
          this.word("empty");
        }

        function NullableTypeAnnotation(node) {
          this.token("?");
          this.print(node.typeAnnotation, node);
        }

        function NumberTypeAnnotation() {
          this.word("number");
        }

        function StringTypeAnnotation() {
          this.word("string");
        }

        function ThisTypeAnnotation() {
          this.word("this");
        }

        function TupleTypeAnnotation(node) {
          this.token("[");
          this.printList(node.types, node);
          this.token("]");
        }

        function TypeofTypeAnnotation(node) {
          this.word("typeof");
          this.space();
          this.print(node.argument, node);
        }

        function TypeAlias(node) {
          this.word("type");
          this.space();
          this.print(node.id, node);
          this.print(node.typeParameters, node);
          this.space();
          this.token("=");
          this.space();
          this.print(node.right, node);
          this.semicolon();
        }

        function TypeAnnotation(node) {
          this.token(":");
          this.space();
          if (node.optional) this.token("?");
          this.print(node.typeAnnotation, node);
        }

        function TypeParameterInstantiation(node) {
          this.token("<");
          this.printList(node.params, node, {});
          this.token(">");
        }

        function TypeParameter(node) {
          this._variance(node);

          this.word(node.name);

          if (node.bound) {
            this.print(node.bound, node);
          }

          if (node.default) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.default, node);
          }
        }

        function OpaqueType(node) {
          this.word("opaque");
          this.space();
          this.word("type");
          this.space();
          this.print(node.id, node);
          this.print(node.typeParameters, node);

          if (node.supertype) {
            this.token(":");
            this.space();
            this.print(node.supertype, node);
          }

          if (node.impltype) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.impltype, node);
          }

          this.semicolon();
        }

        function ObjectTypeAnnotation(node) {
          var _this = this;

          if (node.exact) {
            this.token("{|");
          } else {
            this.token("{");
          }

          var props = node.properties.concat(
            node.callProperties || [],
            node.indexers || []
          );

          if (props.length) {
            this.space();
            this.printJoin(props, node, {
              addNewlines: function addNewlines(leading) {
                if (leading && !props[0]) return 1;
              },
              indent: true,
              statement: true,
              iterator: function iterator() {
                if (props.length !== 1) {
                  _this.token(",");

                  _this.space();
                }
              }
            });
            this.space();
          }

          if (node.exact) {
            this.token("|}");
          } else {
            this.token("}");
          }
        }

        function ObjectTypeCallProperty(node) {
          if (node.static) {
            this.word("static");
            this.space();
          }

          this.print(node.value, node);
        }

        function ObjectTypeIndexer(node) {
          if (node.static) {
            this.word("static");
            this.space();
          }

          this._variance(node);

          this.token("[");

          if (node.id) {
            this.print(node.id, node);
            this.token(":");
            this.space();
          }

          this.print(node.key, node);
          this.token("]");
          this.token(":");
          this.space();
          this.print(node.value, node);
        }

        function ObjectTypeProperty(node) {
          if (node.static) {
            this.word("static");
            this.space();
          }

          this._variance(node);

          this.print(node.key, node);
          if (node.optional) this.token("?");

          if (!node.method) {
            this.token(":");
            this.space();
          }

          this.print(node.value, node);
        }

        function ObjectTypeSpreadProperty(node) {
          this.token("...");
          this.print(node.argument, node);
        }

        function QualifiedTypeIdentifier(node) {
          this.print(node.qualification, node);
          this.token(".");
          this.print(node.id, node);
        }

        function orSeparator() {
          this.space();
          this.token("|");
          this.space();
        }

        function UnionTypeAnnotation(node) {
          this.printJoin(node.types, node, {
            separator: orSeparator
          });
        }

        function TypeCastExpression(node) {
          this.token("(");
          this.print(node.expression, node);
          this.print(node.typeAnnotation, node);
          this.token(")");
        }

        function Variance(node) {
          if (node.kind === "plus") {
            this.token("+");
          } else {
            this.token("-");
          }
        }

        function VoidTypeAnnotation() {
          this.word("void");
        }

        /***/
      },
      /* 411 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.File = File;
        exports.Program = Program;
        exports.BlockStatement = BlockStatement;
        exports.Noop = Noop;
        exports.Directive = Directive;
        Object.defineProperty(exports, "DirectiveLiteral", {
          enumerable: true,
          get: function get() {
            return _types.StringLiteral;
          }
        });

        var _types = __webpack_require__(82);

        function File(node) {
          this.print(node.program, node);
        }

        function Program(node) {
          this.printInnerComments(node, false);
          this.printSequence(node.directives, node);
          if (node.directives && node.directives.length) this.newline();
          this.printSequence(node.body, node);
        }

        function BlockStatement(node) {
          this.token("{");
          this.printInnerComments(node);
          var hasDirectives = node.directives && node.directives.length;

          if (node.body.length || hasDirectives) {
            this.newline();
            this.printSequence(node.directives, node, {
              indent: true
            });
            if (hasDirectives) this.newline();
            this.printSequence(node.body, node, {
              indent: true
            });
            this.removeTrailingNewline();
            this.source("end", node.loc);
            if (!this.endsWith("\n")) this.newline();
            this.rightBrace();
          } else {
            this.source("end", node.loc);
            this.token("}");
          }
        }

        function Noop() {}

        function Directive(node) {
          this.print(node.value, node);
          this.semicolon();
        }

        /***/
      },
      /* 412 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.JSXAttribute = JSXAttribute;
        exports.JSXIdentifier = JSXIdentifier;
        exports.JSXNamespacedName = JSXNamespacedName;
        exports.JSXMemberExpression = JSXMemberExpression;
        exports.JSXSpreadAttribute = JSXSpreadAttribute;
        exports.JSXExpressionContainer = JSXExpressionContainer;
        exports.JSXSpreadChild = JSXSpreadChild;
        exports.JSXText = JSXText;
        exports.JSXElement = JSXElement;
        exports.JSXOpeningElement = JSXOpeningElement;
        exports.JSXClosingElement = JSXClosingElement;
        exports.JSXEmptyExpression = JSXEmptyExpression;
        exports.JSXFragment = JSXFragment;
        exports.JSXOpeningFragment = JSXOpeningFragment;
        exports.JSXClosingFragment = JSXClosingFragment;

        function JSXAttribute(node) {
          this.print(node.name, node);

          if (node.value) {
            this.token("=");
            this.print(node.value, node);
          }
        }

        function JSXIdentifier(node) {
          this.word(node.name);
        }

        function JSXNamespacedName(node) {
          this.print(node.namespace, node);
          this.token(":");
          this.print(node.name, node);
        }

        function JSXMemberExpression(node) {
          this.print(node.object, node);
          this.token(".");
          this.print(node.property, node);
        }

        function JSXSpreadAttribute(node) {
          this.token("{");
          this.token("...");
          this.print(node.argument, node);
          this.token("}");
        }

        function JSXExpressionContainer(node) {
          this.token("{");
          this.print(node.expression, node);
          this.token("}");
        }

        function JSXSpreadChild(node) {
          this.token("{");
          this.token("...");
          this.print(node.expression, node);
          this.token("}");
        }

        function JSXText(node) {
          var raw = this.getPossibleRaw(node);

          if (raw != null) {
            this.token(raw);
          } else {
            this.token(node.value);
          }
        }

        function JSXElement(node) {
          var open = node.openingElement;
          this.print(open, node);
          if (open.selfClosing) return;
          this.indent();
          var _arr = node.children;

          for (var _i = 0; _i < _arr.length; _i++) {
            var child = _arr[_i];
            this.print(child, node);
          }

          this.dedent();
          this.print(node.closingElement, node);
        }

        function spaceSeparator() {
          this.space();
        }

        function JSXOpeningElement(node) {
          this.token("<");
          this.print(node.name, node);

          if (node.attributes.length > 0) {
            this.space();
            this.printJoin(node.attributes, node, {
              separator: spaceSeparator
            });
          }

          if (node.selfClosing) {
            this.space();
            this.token("/>");
          } else {
            this.token(">");
          }
        }

        function JSXClosingElement(node) {
          this.token("</");
          this.print(node.name, node);
          this.token(">");
        }

        function JSXEmptyExpression(node) {
          this.printInnerComments(node);
        }

        function JSXFragment(node) {
          this.print(node.openingFragment, node);
          this.indent();
          var _arr2 = node.children;

          for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
            var child = _arr2[_i2];
            this.print(child, node);
          }

          this.dedent();
          this.print(node.closingFragment, node);
        }

        function JSXOpeningFragment() {
          this.token("<");
          this.token(">");
        }

        function JSXClosingFragment() {
          this.token("</");
          this.token(">");
        }

        /***/
      },
      /* 413 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TSTypeAnnotation = TSTypeAnnotation;
        exports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
        exports.TSTypeParameter = TSTypeParameter;
        exports.TSParameterProperty = TSParameterProperty;
        exports.TSDeclareFunction = TSDeclareFunction;
        exports.TSDeclareMethod = TSDeclareMethod;
        exports.TSQualifiedName = TSQualifiedName;
        exports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
        exports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
        exports.TSPropertySignature = TSPropertySignature;
        exports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
        exports.TSMethodSignature = TSMethodSignature;
        exports.TSIndexSignature = TSIndexSignature;
        exports.TSAnyKeyword = TSAnyKeyword;
        exports.TSNumberKeyword = TSNumberKeyword;
        exports.TSObjectKeyword = TSObjectKeyword;
        exports.TSBooleanKeyword = TSBooleanKeyword;
        exports.TSStringKeyword = TSStringKeyword;
        exports.TSSymbolKeyword = TSSymbolKeyword;
        exports.TSVoidKeyword = TSVoidKeyword;
        exports.TSUndefinedKeyword = TSUndefinedKeyword;
        exports.TSNullKeyword = TSNullKeyword;
        exports.TSNeverKeyword = TSNeverKeyword;
        exports.TSThisType = TSThisType;
        exports.TSFunctionType = TSFunctionType;
        exports.TSConstructorType = TSConstructorType;
        exports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;
        exports.TSTypeReference = TSTypeReference;
        exports.TSTypePredicate = TSTypePredicate;
        exports.TSTypeQuery = TSTypeQuery;
        exports.TSTypeLiteral = TSTypeLiteral;
        exports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;
        exports.tsPrintBraced = tsPrintBraced;
        exports.TSArrayType = TSArrayType;
        exports.TSTupleType = TSTupleType;
        exports.TSUnionType = TSUnionType;
        exports.TSIntersectionType = TSIntersectionType;
        exports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;
        exports.TSConditionalType = TSConditionalType;
        exports.TSInferType = TSInferType;
        exports.TSParenthesizedType = TSParenthesizedType;
        exports.TSTypeOperator = TSTypeOperator;
        exports.TSIndexedAccessType = TSIndexedAccessType;
        exports.TSMappedType = TSMappedType;
        exports.TSLiteralType = TSLiteralType;
        exports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
        exports.TSInterfaceDeclaration = TSInterfaceDeclaration;
        exports.TSInterfaceBody = TSInterfaceBody;
        exports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
        exports.TSAsExpression = TSAsExpression;
        exports.TSTypeAssertion = TSTypeAssertion;
        exports.TSEnumDeclaration = TSEnumDeclaration;
        exports.TSEnumMember = TSEnumMember;
        exports.TSModuleDeclaration = TSModuleDeclaration;
        exports.TSModuleBlock = TSModuleBlock;
        exports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
        exports.TSExternalModuleReference = TSExternalModuleReference;
        exports.TSNonNullExpression = TSNonNullExpression;
        exports.TSExportAssignment = TSExportAssignment;
        exports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
        exports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;

        function TSTypeAnnotation(node) {
          this.token(":");
          this.space();
          if (node.optional) this.token("?");
          this.print(node.typeAnnotation, node);
        }

        function TSTypeParameterInstantiation(node) {
          this.token("<");
          this.printList(node.params, node, {});
          this.token(">");
        }

        function TSTypeParameter(node) {
          this.word(node.name);

          if (node.constraint) {
            this.space();
            this.word("extends");
            this.space();
            this.print(node.constraint, node);
          }

          if (node.default) {
            this.space();
            this.token("=");
            this.space();
            this.print(node.default, node);
          }
        }

        function TSParameterProperty(node) {
          if (node.accessibility) {
            this.word(node.accessibility);
            this.space();
          }

          if (node.readonly) {
            this.word("readonly");
            this.space();
          }

          this._param(node.parameter);
        }

        function TSDeclareFunction(node) {
          if (node.declare) {
            this.word("declare");
            this.space();
          }

          this._functionHead(node);

          this.token(";");
        }

        function TSDeclareMethod(node) {
          this._classMethodHead(node);

          this.token(";");
        }

        function TSQualifiedName(node) {
          this.print(node.left, node);
          this.token(".");
          this.print(node.right, node);
        }

        function TSCallSignatureDeclaration(node) {
          this.tsPrintSignatureDeclarationBase(node);
        }

        function TSConstructSignatureDeclaration(node) {
          this.word("new");
          this.space();
          this.tsPrintSignatureDeclarationBase(node);
        }

        function TSPropertySignature(node) {
          var readonly = node.readonly,
            initializer = node.initializer;

          if (readonly) {
            this.word("readonly");
            this.space();
          }

          this.tsPrintPropertyOrMethodName(node);
          this.print(node.typeAnnotation, node);

          if (initializer) {
            this.space();
            this.token("=");
            this.space();
            this.print(initializer, node);
          }

          this.token(";");
        }

        function tsPrintPropertyOrMethodName(node) {
          if (node.computed) {
            this.token("[");
          }

          this.print(node.key, node);

          if (node.computed) {
            this.token("]");
          }

          if (node.optional) {
            this.token("?");
          }
        }

        function TSMethodSignature(node) {
          this.tsPrintPropertyOrMethodName(node);
          this.tsPrintSignatureDeclarationBase(node);
          this.token(";");
        }

        function TSIndexSignature(node) {
          var readonly = node.readonly;

          if (readonly) {
            this.word("readonly");
            this.space();
          }

          this.token("[");

          this._parameters(node.parameters, node);

          this.token("]");
          this.print(node.typeAnnotation, node);
          this.token(";");
        }

        function TSAnyKeyword() {
          this.word("any");
        }

        function TSNumberKeyword() {
          this.word("number");
        }

        function TSObjectKeyword() {
          this.word("object");
        }

        function TSBooleanKeyword() {
          this.word("boolean");
        }

        function TSStringKeyword() {
          this.word("string");
        }

        function TSSymbolKeyword() {
          this.word("symbol");
        }

        function TSVoidKeyword() {
          this.word("void");
        }

        function TSUndefinedKeyword() {
          this.word("undefined");
        }

        function TSNullKeyword() {
          this.word("null");
        }

        function TSNeverKeyword() {
          this.word("never");
        }

        function TSThisType() {
          this.word("this");
        }

        function TSFunctionType(node) {
          this.tsPrintFunctionOrConstructorType(node);
        }

        function TSConstructorType(node) {
          this.word("new");
          this.space();
          this.tsPrintFunctionOrConstructorType(node);
        }

        function tsPrintFunctionOrConstructorType(node) {
          var typeParameters = node.typeParameters,
            parameters = node.parameters;
          this.print(typeParameters, node);
          this.token("(");

          this._parameters(parameters, node);

          this.token(")");
          this.space();
          this.token("=>");
          this.space();
          this.print(node.typeAnnotation.typeAnnotation, node);
        }

        function TSTypeReference(node) {
          this.print(node.typeName, node);
          this.print(node.typeParameters, node);
        }

        function TSTypePredicate(node) {
          this.print(node.parameterName);
          this.space();
          this.word("is");
          this.space();
          this.print(node.typeAnnotation.typeAnnotation);
        }

        function TSTypeQuery(node) {
          this.word("typeof");
          this.space();
          this.print(node.exprName);
        }

        function TSTypeLiteral(node) {
          this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
        }

        function tsPrintTypeLiteralOrInterfaceBody(members, node) {
          this.tsPrintBraced(members, node);
        }

        function tsPrintBraced(members, node) {
          this.token("{");

          if (members.length) {
            this.indent();
            this.newline();

            for (
              var _iterator = members,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var member = _ref;
              this.print(member, node);
              this.newline();
            }

            this.dedent();
            this.rightBrace();
          } else {
            this.token("}");
          }
        }

        function TSArrayType(node) {
          this.print(node.elementType);
          this.token("[]");
        }

        function TSTupleType(node) {
          this.token("[");
          this.printList(node.elementTypes, node);
          this.token("]");
        }

        function TSUnionType(node) {
          this.tsPrintUnionOrIntersectionType(node, "|");
        }

        function TSIntersectionType(node) {
          this.tsPrintUnionOrIntersectionType(node, "&");
        }

        function tsPrintUnionOrIntersectionType(node, sep) {
          this.printJoin(node.types, node, {
            separator: function separator() {
              this.space();
              this.token(sep);
              this.space();
            }
          });
        }

        function TSConditionalType(node) {
          this.print(node.checkType);
          this.space();
          this.word("extends");
          this.space();
          this.print(node.extendsType);
          this.space();
          this.token("?");
          this.space();
          this.print(node.trueType);
          this.space();
          this.token(":");
          this.space();
          this.print(node.falseType);
        }

        function TSInferType(node) {
          this.token("infer");
          this.space();
          this.print(node.typeParameter);
        }

        function TSParenthesizedType(node) {
          this.token("(");
          this.print(node.typeAnnotation, node);
          this.token(")");
        }

        function TSTypeOperator(node) {
          this.token(node.operator);
          this.space();
          this.print(node.typeAnnotation, node);
        }

        function TSIndexedAccessType(node) {
          this.print(node.objectType, node);
          this.token("[");
          this.print(node.indexType, node);
          this.token("]");
        }

        function TSMappedType(node) {
          var readonly = node.readonly,
            typeParameter = node.typeParameter,
            optional = node.optional;
          this.token("{");
          this.space();

          if (readonly) {
            tokenIfPlusMinus(this, readonly);
            this.word("readonly");
            this.space();
          }

          this.token("[");
          this.word(typeParameter.name);
          this.space();
          this.word("in");
          this.space();
          this.print(typeParameter.constraint, typeParameter);
          this.token("]");

          if (optional) {
            tokenIfPlusMinus(this, optional);
            this.token("?");
          }

          this.token(":");
          this.space();
          this.print(node.typeAnnotation, node);
          this.space();
          this.token("}");
        }

        function tokenIfPlusMinus(self, tok) {
          if (tok !== true) {
            self.token(tok);
          }
        }

        function TSLiteralType(node) {
          this.print(node.literal, node);
        }

        function TSExpressionWithTypeArguments(node) {
          this.print(node.expression, node);
          this.print(node.typeParameters, node);
        }

        function TSInterfaceDeclaration(node) {
          var declare = node.declare,
            id = node.id,
            typeParameters = node.typeParameters,
            extendz = node.extends,
            body = node.body;

          if (declare) {
            this.word("declare");
            this.space();
          }

          this.word("interface");
          this.space();
          this.print(id, node);
          this.print(typeParameters, node);

          if (extendz) {
            this.space();
            this.word("extends");
            this.space();
            this.printList(extendz, node);
          }

          this.space();
          this.print(body, node);
        }

        function TSInterfaceBody(node) {
          this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
        }

        function TSTypeAliasDeclaration(node) {
          var declare = node.declare,
            id = node.id,
            typeParameters = node.typeParameters,
            typeAnnotation = node.typeAnnotation;

          if (declare) {
            this.word("declare");
            this.space();
          }

          this.word("type");
          this.space();
          this.print(id, node);
          this.print(typeParameters, node);
          this.space();
          this.token("=");
          this.space();
          this.print(typeAnnotation, node);
          this.token(";");
        }

        function TSAsExpression(node) {
          var expression = node.expression,
            typeAnnotation = node.typeAnnotation;
          this.print(expression, node);
          this.space();
          this.word("as");
          this.space();
          this.print(typeAnnotation, node);
        }

        function TSTypeAssertion(node) {
          var typeAnnotation = node.typeAnnotation,
            expression = node.expression;
          this.token("<");
          this.print(typeAnnotation, node);
          this.token(">");
          this.space();
          this.print(expression, node);
        }

        function TSEnumDeclaration(node) {
          var declare = node.declare,
            isConst = node.const,
            id = node.id,
            members = node.members;

          if (declare) {
            this.word("declare");
            this.space();
          }

          if (isConst) {
            this.word("const");
            this.space();
          }

          this.word("enum");
          this.space();
          this.print(id, node);
          this.space();
          this.tsPrintBraced(members, node);
        }

        function TSEnumMember(node) {
          var id = node.id,
            initializer = node.initializer;
          this.print(id, node);

          if (initializer) {
            this.space();
            this.token("=");
            this.space();
            this.print(initializer, node);
          }

          this.token(",");
        }

        function TSModuleDeclaration(node) {
          var declare = node.declare,
            id = node.id;

          if (declare) {
            this.word("declare");
            this.space();
          }

          if (!node.global) {
            this.word(id.type === "Identifier" ? "namespace" : "module");
            this.space();
          }

          this.print(id, node);

          if (!node.body) {
            this.token(";");
            return;
          }

          var body = node.body;

          while (body.type === "TSModuleDeclaration") {
            this.token(".");
            this.print(body.id, body);
            body = body.body;
          }

          this.space();
          this.print(body, node);
        }

        function TSModuleBlock(node) {
          this.tsPrintBraced(node.body, node);
        }

        function TSImportEqualsDeclaration(node) {
          var isExport = node.isExport,
            id = node.id,
            moduleReference = node.moduleReference;

          if (isExport) {
            this.word("export");
            this.space();
          }

          this.word("import");
          this.space();
          this.print(id, node);
          this.space();
          this.token("=");
          this.space();
          this.print(moduleReference, node);
          this.token(";");
        }

        function TSExternalModuleReference(node) {
          this.token("require(");
          this.print(node.expression, node);
          this.token(")");
        }

        function TSNonNullExpression(node) {
          this.print(node.expression, node);
          this.token("!");
        }

        function TSExportAssignment(node) {
          this.word("export");
          this.space();
          this.token("=");
          this.space();
          this.print(node.expression, node);
          this.token(";");
        }

        function TSNamespaceExportDeclaration(node) {
          this.word("export");
          this.space();
          this.word("as");
          this.space();
          this.word("namespace");
          this.space();
          this.print(node.id, node);
        }

        function tsPrintSignatureDeclarationBase(node) {
          var typeParameters = node.typeParameters,
            parameters = node.parameters;
          this.print(typeParameters, node);
          this.token("(");

          this._parameters(parameters, node);

          this.token(")");
          this.print(node.typeAnnotation, node);
        }

        /***/
      },
      /* 414 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.findParent = findParent;
        exports.find = find;
        exports.getFunctionParent = getFunctionParent;
        exports.getStatementParent = getStatementParent;
        exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
        exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
        exports.getAncestry = getAncestry;
        exports.isAncestor = isAncestor;
        exports.isDescendant = isDescendant;
        exports.inType = inType;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var _index = _interopRequireDefault(__webpack_require__(23));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function findParent(callback) {
          var path = this;

          while ((path = path.parentPath)) {
            if (callback(path)) return path;
          }

          return null;
        }

        function find(callback) {
          var path = this;

          do {
            if (callback(path)) return path;
          } while ((path = path.parentPath));

          return null;
        }

        function getFunctionParent() {
          return this.findParent(function(p) {
            return p.isFunction();
          });
        }

        function getStatementParent() {
          var path = this;

          do {
            if (
              !path.parentPath ||
              (Array.isArray(path.container) && path.isStatement())
            ) {
              break;
            } else {
              path = path.parentPath;
            }
          } while (path);

          if (path && (path.isProgram() || path.isFile())) {
            throw new Error(
              "File/Program node, we can't possibly find a statement parent to this"
            );
          }

          return path;
        }

        function getEarliestCommonAncestorFrom(paths) {
          return this.getDeepestCommonAncestorFrom(paths, function(
            deepest,
            i,
            ancestries
          ) {
            var earliest;
            var keys = t().VISITOR_KEYS[deepest.type];
            var _arr = ancestries;

            for (var _i = 0; _i < _arr.length; _i++) {
              var ancestry = _arr[_i];
              var path = ancestry[i + 1];

              if (!earliest) {
                earliest = path;
                continue;
              }

              if (path.listKey && earliest.listKey === path.listKey) {
                if (path.key < earliest.key) {
                  earliest = path;
                  continue;
                }
              }

              var earliestKeyIndex = keys.indexOf(earliest.parentKey);
              var currentKeyIndex = keys.indexOf(path.parentKey);

              if (earliestKeyIndex > currentKeyIndex) {
                earliest = path;
              }
            }

            return earliest;
          });
        }

        function getDeepestCommonAncestorFrom(paths, filter) {
          var _this = this;

          if (!paths.length) {
            return this;
          }

          if (paths.length === 1) {
            return paths[0];
          }

          var minDepth = Infinity;
          var lastCommonIndex, lastCommon;
          var ancestries = paths.map(function(path) {
            var ancestry = [];

            do {
              ancestry.unshift(path);
            } while ((path = path.parentPath) && path !== _this);

            if (ancestry.length < minDepth) {
              minDepth = ancestry.length;
            }

            return ancestry;
          });
          var first = ancestries[0];

          depthLoop: for (var i = 0; i < minDepth; i++) {
            var shouldMatch = first[i];
            var _arr2 = ancestries;

            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
              var ancestry = _arr2[_i2];

              if (ancestry[i] !== shouldMatch) {
                break depthLoop;
              }
            }

            lastCommonIndex = i;
            lastCommon = shouldMatch;
          }

          if (lastCommon) {
            if (filter) {
              return filter(lastCommon, lastCommonIndex, ancestries);
            } else {
              return lastCommon;
            }
          } else {
            throw new Error("Couldn't find intersection");
          }
        }

        function getAncestry() {
          var path = this;
          var paths = [];

          do {
            paths.push(path);
          } while ((path = path.parentPath));

          return paths;
        }

        function isAncestor(maybeDescendant) {
          return maybeDescendant.isDescendant(this);
        }

        function isDescendant(maybeAncestor) {
          return !!this.findParent(function(parent) {
            return parent === maybeAncestor;
          });
        }

        function inType() {
          var path = this;

          while (path) {
            var _arr3 = arguments;

            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
              var type = _arr3[_i3];
              if (path.node.type === type) return true;
            }

            path = path.parentPath;
          }

          return false;
        }

        /***/
      },
      /* 415 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getTypeAnnotation = getTypeAnnotation;
        exports._getTypeAnnotation = _getTypeAnnotation;
        exports.isBaseType = isBaseType;
        exports.couldBeBaseType = couldBeBaseType;
        exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
        exports.isGenericType = isGenericType;

        var inferers = _interopRequireWildcard(__webpack_require__(416));

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function getTypeAnnotation() {
          if (this.typeAnnotation) return this.typeAnnotation;
          var type = this._getTypeAnnotation() || t().anyTypeAnnotation();
          if (t().isTypeAnnotation(type)) type = type.typeAnnotation;
          return (this.typeAnnotation = type);
        }

        function _getTypeAnnotation() {
          var node = this.node;

          if (!node) {
            if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
              var declar = this.parentPath.parentPath;
              var declarParent = declar.parentPath;

              if (declar.key === "left" && declarParent.isForInStatement()) {
                return t().stringTypeAnnotation();
              }

              if (declar.key === "left" && declarParent.isForOfStatement()) {
                return t().anyTypeAnnotation();
              }

              return t().voidTypeAnnotation();
            } else {
              return;
            }
          }

          if (node.typeAnnotation) {
            return node.typeAnnotation;
          }

          var inferer = inferers[node.type];

          if (inferer) {
            return inferer.call(this, node);
          }

          inferer = inferers[this.parentPath.type];

          if (inferer && inferer.validParent) {
            return this.parentPath.getTypeAnnotation();
          }
        }

        function isBaseType(baseName, soft) {
          return _isBaseType(baseName, this.getTypeAnnotation(), soft);
        }

        function _isBaseType(baseName, type, soft) {
          if (baseName === "string") {
            return t().isStringTypeAnnotation(type);
          } else if (baseName === "number") {
            return t().isNumberTypeAnnotation(type);
          } else if (baseName === "boolean") {
            return t().isBooleanTypeAnnotation(type);
          } else if (baseName === "any") {
            return t().isAnyTypeAnnotation(type);
          } else if (baseName === "mixed") {
            return t().isMixedTypeAnnotation(type);
          } else if (baseName === "empty") {
            return t().isEmptyTypeAnnotation(type);
          } else if (baseName === "void") {
            return t().isVoidTypeAnnotation(type);
          } else {
            if (soft) {
              return false;
            } else {
              throw new Error("Unknown base type " + baseName);
            }
          }
        }

        function couldBeBaseType(name) {
          var type = this.getTypeAnnotation();
          if (t().isAnyTypeAnnotation(type)) return true;

          if (t().isUnionTypeAnnotation(type)) {
            var _arr = type.types;

            for (var _i = 0; _i < _arr.length; _i++) {
              var type2 = _arr[_i];

              if (
                t().isAnyTypeAnnotation(type2) ||
                _isBaseType(name, type2, true)
              ) {
                return true;
              }
            }

            return false;
          } else {
            return _isBaseType(name, type, true);
          }
        }

        function baseTypeStrictlyMatches(right) {
          var left = this.getTypeAnnotation();
          right = right.getTypeAnnotation();

          if (
            !t().isAnyTypeAnnotation(left) &&
            t().isFlowBaseAnnotation(left)
          ) {
            return right.type === left.type;
          }
        }

        function isGenericType(genericName) {
          var type = this.getTypeAnnotation();
          return (
            t().isGenericTypeAnnotation(type) &&
            t().isIdentifier(type.id, {
              name: genericName
            })
          );
        }

        /***/
      },
      /* 416 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.VariableDeclarator = VariableDeclarator;
        exports.TypeCastExpression = TypeCastExpression;
        exports.NewExpression = NewExpression;
        exports.TemplateLiteral = TemplateLiteral;
        exports.UnaryExpression = UnaryExpression;
        exports.BinaryExpression = BinaryExpression;
        exports.LogicalExpression = LogicalExpression;
        exports.ConditionalExpression = ConditionalExpression;
        exports.SequenceExpression = SequenceExpression;
        exports.AssignmentExpression = AssignmentExpression;
        exports.UpdateExpression = UpdateExpression;
        exports.StringLiteral = StringLiteral;
        exports.NumericLiteral = NumericLiteral;
        exports.BooleanLiteral = BooleanLiteral;
        exports.NullLiteral = NullLiteral;
        exports.RegExpLiteral = RegExpLiteral;
        exports.ObjectExpression = ObjectExpression;
        exports.ArrayExpression = ArrayExpression;
        exports.RestElement = RestElement;
        exports.ClassDeclaration = exports.ClassExpression = exports.FunctionDeclaration = exports.ArrowFunctionExpression = exports.FunctionExpression = Func;
        exports.CallExpression = CallExpression;
        exports.TaggedTemplateExpression = TaggedTemplateExpression;
        Object.defineProperty(exports, "Identifier", {
          enumerable: true,
          get: function get() {
            return _infererReference.default;
          }
        });

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var _infererReference = _interopRequireDefault(
          __webpack_require__(417)
        );

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function VariableDeclarator() {
          var id = this.get("id");
          if (!id.isIdentifier()) return;
          var init = this.get("init");
          var type = init.getTypeAnnotation();

          if (type && type.type === "AnyTypeAnnotation") {
            if (
              init.isCallExpression() &&
              init.get("callee").isIdentifier({
                name: "Array"
              }) &&
              !init.scope.hasBinding("Array", true)
            ) {
              type = ArrayExpression();
            }
          }

          return type;
        }

        function TypeCastExpression(node) {
          return node.typeAnnotation;
        }

        TypeCastExpression.validParent = true;

        function NewExpression(node) {
          if (this.get("callee").isIdentifier()) {
            return t().genericTypeAnnotation(node.callee);
          }
        }

        function TemplateLiteral() {
          return t().stringTypeAnnotation();
        }

        function UnaryExpression(node) {
          var operator = node.operator;

          if (operator === "void") {
            return t().voidTypeAnnotation();
          } else if (t().NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
            return t().numberTypeAnnotation();
          } else if (t().STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
            return t().stringTypeAnnotation();
          } else if (t().BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
            return t().booleanTypeAnnotation();
          }
        }

        function BinaryExpression(node) {
          var operator = node.operator;

          if (t().NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
            return t().numberTypeAnnotation();
          } else if (t().BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
            return t().booleanTypeAnnotation();
          } else if (operator === "+") {
            var right = this.get("right");
            var left = this.get("left");

            if (left.isBaseType("number") && right.isBaseType("number")) {
              return t().numberTypeAnnotation();
            } else if (
              left.isBaseType("string") ||
              right.isBaseType("string")
            ) {
              return t().stringTypeAnnotation();
            }

            return t().unionTypeAnnotation([
              t().stringTypeAnnotation(),
              t().numberTypeAnnotation()
            ]);
          }
        }

        function LogicalExpression() {
          return t().createUnionTypeAnnotation([
            this.get("left").getTypeAnnotation(),
            this.get("right").getTypeAnnotation()
          ]);
        }

        function ConditionalExpression() {
          return t().createUnionTypeAnnotation([
            this.get("consequent").getTypeAnnotation(),
            this.get("alternate").getTypeAnnotation()
          ]);
        }

        function SequenceExpression() {
          return this.get("expressions")
            .pop()
            .getTypeAnnotation();
        }

        function AssignmentExpression() {
          return this.get("right").getTypeAnnotation();
        }

        function UpdateExpression(node) {
          var operator = node.operator;

          if (operator === "++" || operator === "--") {
            return t().numberTypeAnnotation();
          }
        }

        function StringLiteral() {
          return t().stringTypeAnnotation();
        }

        function NumericLiteral() {
          return t().numberTypeAnnotation();
        }

        function BooleanLiteral() {
          return t().booleanTypeAnnotation();
        }

        function NullLiteral() {
          return t().nullLiteralTypeAnnotation();
        }

        function RegExpLiteral() {
          return t().genericTypeAnnotation(t().identifier("RegExp"));
        }

        function ObjectExpression() {
          return t().genericTypeAnnotation(t().identifier("Object"));
        }

        function ArrayExpression() {
          return t().genericTypeAnnotation(t().identifier("Array"));
        }

        function RestElement() {
          return ArrayExpression();
        }

        RestElement.validParent = true;

        function Func() {
          return t().genericTypeAnnotation(t().identifier("Function"));
        }

        var isArrayFrom = t().buildMatchMemberExpression("Array.from");
        var isObjectKeys = t().buildMatchMemberExpression("Object.keys");
        var isObjectValues = t().buildMatchMemberExpression("Object.values");
        var isObjectEntries = t().buildMatchMemberExpression("Object.entries");

        function CallExpression() {
          var callee = this.node.callee;

          if (isObjectKeys(callee)) {
            return t().arrayTypeAnnotation(t().stringTypeAnnotation());
          } else if (isArrayFrom(callee) || isObjectValues(callee)) {
            return t().arrayTypeAnnotation(t().anyTypeAnnotation());
          } else if (isObjectEntries(callee)) {
            return t().arrayTypeAnnotation(
              t().tupleTypeAnnotation([
                t().stringTypeAnnotation(),
                t().anyTypeAnnotation()
              ])
            );
          }

          return resolveCall(this.get("callee"));
        }

        function TaggedTemplateExpression() {
          return resolveCall(this.get("tag"));
        }

        function resolveCall(callee) {
          callee = callee.resolve();

          if (callee.isFunction()) {
            if (callee.is("async")) {
              if (callee.is("generator")) {
                return t().genericTypeAnnotation(
                  t().identifier("AsyncIterator")
                );
              } else {
                return t().genericTypeAnnotation(t().identifier("Promise"));
              }
            } else {
              if (callee.node.returnType) {
                return callee.node.returnType;
              } else {
              }
            }
          }
        }

        /***/
      },
      /* 417 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _default(node) {
          if (!this.isReferenced()) return;
          var binding = this.scope.getBinding(node.name);

          if (binding) {
            if (binding.identifier.typeAnnotation) {
              return binding.identifier.typeAnnotation;
            } else {
              return getTypeAnnotationBindingConstantViolations(
                binding,
                this,
                node.name
              );
            }
          }

          if (node.name === "undefined") {
            return t().voidTypeAnnotation();
          } else if (node.name === "NaN" || node.name === "Infinity") {
            return t().numberTypeAnnotation();
          } else if (node.name === "arguments") {
          }
        }

        function getTypeAnnotationBindingConstantViolations(
          binding,
          path,
          name
        ) {
          var types = [];
          var functionConstantViolations = [];
          var constantViolations = getConstantViolationsBefore(
            binding,
            path,
            functionConstantViolations
          );
          var testType = getConditionalAnnotation(binding, path, name);

          if (testType) {
            var testConstantViolations = getConstantViolationsBefore(
              binding,
              testType.ifStatement
            );
            constantViolations = constantViolations.filter(function(path) {
              return testConstantViolations.indexOf(path) < 0;
            });
            types.push(testType.typeAnnotation);
          }

          if (constantViolations.length) {
            constantViolations = constantViolations.concat(
              functionConstantViolations
            );
            var _arr = constantViolations;

            for (var _i = 0; _i < _arr.length; _i++) {
              var violation = _arr[_i];
              types.push(violation.getTypeAnnotation());
            }
          }

          if (types.length) {
            return t().createUnionTypeAnnotation(types);
          }
        }

        function getConstantViolationsBefore(binding, path, functions) {
          var violations = binding.constantViolations.slice();
          violations.unshift(binding.path);
          return violations.filter(function(violation) {
            violation = violation.resolve();

            var status = violation._guessExecutionStatusRelativeTo(path);

            if (functions && status === "function") functions.push(violation);
            return status === "before";
          });
        }

        function inferAnnotationFromBinaryExpression(name, path) {
          var operator = path.node.operator;
          var right = path.get("right").resolve();
          var left = path.get("left").resolve();
          var target;

          if (
            left.isIdentifier({
              name: name
            })
          ) {
            target = right;
          } else if (
            right.isIdentifier({
              name: name
            })
          ) {
            target = left;
          }

          if (target) {
            if (operator === "===") {
              return target.getTypeAnnotation();
            }

            if (t().BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
              return t().numberTypeAnnotation();
            }

            return;
          }

          if (operator !== "===" && operator !== "==") return;
          var typeofPath;
          var typePath;

          if (
            left.isUnaryExpression({
              operator: "typeof"
            })
          ) {
            typeofPath = left;
            typePath = right;
          } else if (
            right.isUnaryExpression({
              operator: "typeof"
            })
          ) {
            typeofPath = right;
            typePath = left;
          }

          if (!typeofPath) return;
          if (
            !typeofPath.get("argument").isIdentifier({
              name: name
            })
          )
            return;
          typePath = typePath.resolve();
          if (!typePath.isLiteral()) return;
          var typeValue = typePath.node.value;
          if (typeof typeValue !== "string") return;
          return t().createTypeAnnotationBasedOnTypeof(typeValue);
        }

        function getParentConditionalPath(binding, path, name) {
          var parentPath;

          while ((parentPath = path.parentPath)) {
            if (
              parentPath.isIfStatement() ||
              parentPath.isConditionalExpression()
            ) {
              if (path.key === "test") {
                return;
              }

              return parentPath;
            }

            if (parentPath.isFunction()) {
              if (parentPath.parentPath.scope.getBinding(name) !== binding)
                return;
            }

            path = parentPath;
          }
        }

        function getConditionalAnnotation(binding, path, name) {
          var ifStatement = getParentConditionalPath(binding, path, name);
          if (!ifStatement) return;
          var test = ifStatement.get("test");
          var paths = [test];
          var types = [];

          for (var i = 0; i < paths.length; i++) {
            var _path = paths[i];

            if (_path.isLogicalExpression()) {
              if (_path.node.operator === "&&") {
                paths.push(_path.get("left"));
                paths.push(_path.get("right"));
              }
            } else if (_path.isBinaryExpression()) {
              var type = inferAnnotationFromBinaryExpression(name, _path);
              if (type) types.push(type);
            }
          }

          if (types.length) {
            return {
              typeAnnotation: t().createUnionTypeAnnotation(types),
              ifStatement: ifStatement
            };
          }

          return getConditionalAnnotation(ifStatement, name);
        }

        /***/
      },
      /* 418 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.replaceWithMultiple = replaceWithMultiple;
        exports.replaceWithSourceString = replaceWithSourceString;
        exports.replaceWith = replaceWith;
        exports._replaceWith = _replaceWith;
        exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
        exports.replaceInline = replaceInline;

        function _codeFrame() {
          var data = __webpack_require__(50);

          _codeFrame = function _codeFrame() {
            return data;
          };

          return data;
        }

        var _index = _interopRequireDefault(__webpack_require__(8));

        var _index2 = _interopRequireDefault(__webpack_require__(23));

        function _babylon() {
          var data = __webpack_require__(83);

          _babylon = function _babylon() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var hoistVariablesVisitor = {
          Function: function Function(path) {
            path.skip();
          },
          VariableDeclaration: function VariableDeclaration(path) {
            if (path.node.kind !== "var") return;
            var bindings = path.getBindingIdentifiers();

            for (var key in bindings) {
              path.scope.push({
                id: bindings[key]
              });
            }

            var exprs = [];
            var _arr = path.node.declarations;

            for (var _i = 0; _i < _arr.length; _i++) {
              var declar = _arr[_i];

              if (declar.init) {
                exprs.push(
                  t().expressionStatement(
                    t().assignmentExpression("=", declar.id, declar.init)
                  )
                );
              }
            }

            path.replaceWithMultiple(exprs);
          }
        };

        function replaceWithMultiple(nodes) {
          this.resync();
          nodes = this._verifyNodeList(nodes);
          t().inheritLeadingComments(nodes[0], this.node);
          t().inheritTrailingComments(nodes[nodes.length - 1], this.node);
          this.node = this.container[this.key] = null;
          var paths = this.insertAfter(nodes);

          if (this.node) {
            this.requeue();
          } else {
            this.remove();
          }

          return paths;
        }

        function replaceWithSourceString(replacement) {
          this.resync();

          try {
            replacement = "(" + replacement + ")";
            replacement = (0, _babylon().parse)(replacement);
          } catch (err) {
            var loc = err.loc;

            if (loc) {
              err.message +=
                " - make sure this is an expression.\n" +
                (0, _codeFrame().codeFrameColumns)(replacement, {
                  start: {
                    line: loc.line,
                    column: loc.column + 1
                  }
                });
              err.code = "BABEL_REPLACE_SOURCE_ERROR";
            }

            throw err;
          }

          replacement = replacement.program.body[0].expression;

          _index.default.removeProperties(replacement);

          return this.replaceWith(replacement);
        }

        function replaceWith(replacement) {
          this.resync();

          if (this.removed) {
            throw new Error(
              "You can't replace this node, we've already removed it"
            );
          }

          if (replacement instanceof _index2.default) {
            replacement = replacement.node;
          }

          if (!replacement) {
            throw new Error(
              "You passed `path.replaceWith()` a falsy node, use `path.remove()` instead"
            );
          }

          if (this.node === replacement) {
            return [this];
          }

          if (this.isProgram() && !t().isProgram(replacement)) {
            throw new Error(
              "You can only replace a Program root node with another Program node"
            );
          }

          if (Array.isArray(replacement)) {
            throw new Error(
              "Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`"
            );
          }

          if (typeof replacement === "string") {
            throw new Error(
              "Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`"
            );
          }

          var nodePath = "";

          if (this.isNodeType("Statement") && t().isExpression(replacement)) {
            if (
              !this.canHaveVariableDeclarationOrExpression() &&
              !this.canSwapBetweenExpressionAndStatement(replacement) &&
              !this.parentPath.isExportDefaultDeclaration()
            ) {
              replacement = t().expressionStatement(replacement);
              nodePath = "expression";
            }
          }

          if (this.isNodeType("Expression") && t().isStatement(replacement)) {
            if (
              !this.canHaveVariableDeclarationOrExpression() &&
              !this.canSwapBetweenExpressionAndStatement(replacement)
            ) {
              return this.replaceExpressionWithStatements([replacement]);
            }
          }

          var oldNode = this.node;

          if (oldNode) {
            t().inheritsComments(replacement, oldNode);
            t().removeComments(oldNode);
          }

          this._replaceWith(replacement);

          this.type = replacement.type;
          this.setScope();
          this.requeue();
          return [nodePath ? this.get(nodePath) : this];
        }

        function _replaceWith(node) {
          if (!this.container) {
            throw new ReferenceError("Container is falsy");
          }

          if (this.inList) {
            t().validate(this.parent, this.key, [node]);
          } else {
            t().validate(this.parent, this.key, node);
          }

          this.debug("Replace with " + (node && node.type));
          this.node = this.container[this.key] = node;
        }

        function replaceExpressionWithStatements(nodes) {
          this.resync();
          var toSequenceExpression = t().toSequenceExpression(
            nodes,
            this.scope
          );

          if (toSequenceExpression) {
            return this.replaceWith(toSequenceExpression)[0].get("expressions");
          }

          var container = t().arrowFunctionExpression(
            [],
            t().blockStatement(nodes)
          );
          this.replaceWith(t().callExpression(container, []));
          this.traverse(hoistVariablesVisitor);
          var completionRecords = this.get("callee").getCompletionRecords();

          for (
            var _iterator = completionRecords,
              _isArray = Array.isArray(_iterator),
              _i2 = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i2 >= _iterator.length) break;
              _ref = _iterator[_i2++];
            } else {
              _i2 = _iterator.next();
              if (_i2.done) break;
              _ref = _i2.value;
            }

            var path = _ref;
            if (!path.isExpressionStatement()) continue;
            var loop = path.findParent(function(path) {
              return path.isLoop();
            });

            if (loop) {
              var uid = loop.getData("expressionReplacementReturnUid");

              if (!uid) {
                var _callee = this.get("callee");

                uid = _callee.scope.generateDeclaredUidIdentifier("ret");

                _callee
                  .get("body")
                  .pushContainer(
                    "body",
                    t().returnStatement(t().cloneNode(uid))
                  );

                loop.setData("expressionReplacementReturnUid", uid);
              } else {
                uid = t().identifier(uid.name);
              }

              path
                .get("expression")
                .replaceWith(
                  t().assignmentExpression(
                    "=",
                    t().cloneNode(uid),
                    path.node.expression
                  )
                );
            } else {
              path.replaceWith(t().returnStatement(path.node.expression));
            }
          }

          var callee = this.get("callee");
          callee.arrowFunctionToExpression();
          return callee.get("body.body");
        }

        function replaceInline(nodes) {
          this.resync();

          if (Array.isArray(nodes)) {
            if (Array.isArray(this.container)) {
              nodes = this._verifyNodeList(nodes);

              var paths = this._containerInsertAfter(nodes);

              this.remove();
              return paths;
            } else {
              return this.replaceWithMultiple(nodes);
            }
          } else {
            return this.replaceWith(nodes);
          }
        }

        /***/
      },
      /* 419 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.shouldHighlight = shouldHighlight;
        exports.getChalk = getChalk;
        exports.default = highlight;

        function _jsTokens() {
          var data = _interopRequireWildcard(__webpack_require__(420));

          _jsTokens = function _jsTokens() {
            return data;
          };

          return data;
        }

        function _esutils() {
          var data = _interopRequireDefault(__webpack_require__(72));

          _esutils = function _esutils() {
            return data;
          };

          return data;
        }

        function _chalk() {
          var data = _interopRequireDefault(__webpack_require__(421));

          _chalk = function _chalk() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function getDefs(chalk) {
          return {
            keyword: chalk.cyan,
            capitalized: chalk.yellow,
            jsx_tag: chalk.yellow,
            punctuator: chalk.yellow,
            number: chalk.magenta,
            string: chalk.green,
            regex: chalk.magenta,
            comment: chalk.grey,
            invalid: chalk.white.bgRed.bold
          };
        }

        var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
        var JSX_TAG = /^[a-z][\w-]*$/i;
        var BRACKET = /^[()[\]{}]$/;

        function getTokenType(match) {
          var _match$slice = match.slice(-2),
            offset = _match$slice[0],
            text = _match$slice[1];

          var token = (0, _jsTokens().matchToToken)(match);

          if (token.type === "name") {
            if (_esutils().default.keyword.isReservedWordES6(token.value)) {
              return "keyword";
            }

            if (
              JSX_TAG.test(token.value) &&
              (text[offset - 1] === "<" || text.substr(offset - 2, 2) == "</")
            ) {
              return "jsx_tag";
            }

            if (token.value[0] !== token.value[0].toLowerCase()) {
              return "capitalized";
            }
          }

          if (token.type === "punctuator" && BRACKET.test(token.value)) {
            return "bracket";
          }

          if (
            token.type === "invalid" &&
            (token.value === "@" || token.value === "#")
          ) {
            return "punctuator";
          }

          return token.type;
        }

        function highlightTokens(defs, text) {
          return text.replace(_jsTokens().default, function() {
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }

            var type = getTokenType(args);
            var colorize = defs[type];

            if (colorize) {
              return args[0]
                .split(NEWLINE)
                .map(function(str) {
                  return colorize(str);
                })
                .join("\n");
            } else {
              return args[0];
            }
          });
        }

        function shouldHighlight(options) {
          return _chalk().default.supportsColor || options.forceColor;
        }

        function getChalk(options) {
          var chalk = _chalk().default;

          if (options.forceColor) {
            chalk = new (_chalk()).default.constructor({
              enabled: true,
              level: 1
            });
          }

          return chalk;
        }

        function highlight(code, options) {
          if (options === void 0) {
            options = {};
          }

          if (shouldHighlight(options)) {
            var chalk = getChalk(options);
            var defs = getDefs(chalk);
            return highlightTokens(defs, code);
          } else {
            return code;
          }
        }

        /***/
      },
      /* 420 */
      /***/ function(module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyu]{1,5}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;

        exports.matchToToken = function(match) {
          var token = {
            type: "invalid",
            value: match[0]
          };
          if (match[1])
            (token.type = "string"), (token.closed = !!(match[3] || match[4]));
          else if (match[5]) token.type = "comment";
          else if (match[6])
            (token.type = "comment"), (token.closed = !!match[7]);
          else if (match[8]) token.type = "regex";
          else if (match[9]) token.type = "number";
          else if (match[10]) token.type = "name";
          else if (match[11]) token.type = "punctuator";
          else if (match[12]) token.type = "whitespace";
          return token;
        };

        /***/
      },
      /* 421 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(process) {
          var escapeStringRegexp = __webpack_require__(422);

          var ansiStyles = __webpack_require__(423);

          var stdoutColor = __webpack_require__(427).stdout;

          var template = __webpack_require__(428);

          var isSimpleWindowsTerm =
            process.platform === "win32" &&
            !({ NODE_ENV: "production" }.TERM || "")
              .toLowerCase()
              .startsWith("xterm");
          var levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
          var skipModels = new Set(["gray"]);
          var styles = Object.create(null);

          function applyOptions(obj, options) {
            options = options || {};
            var scLevel = stdoutColor ? stdoutColor.level : 0;
            obj.level = options.level === undefined ? scLevel : options.level;
            obj.enabled =
              "enabled" in options ? options.enabled : obj.level > 0;
          }

          function Chalk(options) {
            if (!this || !(this instanceof Chalk) || this.template) {
              var chalk = {};
              applyOptions(chalk, options);

              chalk.template = function() {
                var args = [].slice.call(arguments);
                return chalkTag.apply(null, [chalk.template].concat(args));
              };

              Object.setPrototypeOf(chalk, Chalk.prototype);
              Object.setPrototypeOf(chalk.template, chalk);
              chalk.template.constructor = Chalk;
              return chalk.template;
            }

            applyOptions(this, options);
          }

          if (isSimpleWindowsTerm) {
            ansiStyles.blue.open = "\x1B[94m";
          }

          var _arr = Object.keys(ansiStyles);

          var _loop = function _loop() {
            var key = _arr[_i];
            ansiStyles[key].closeRe = new RegExp(
              escapeStringRegexp(ansiStyles[key].close),
              "g"
            );
            styles[key] = {
              get: function get() {
                var codes = ansiStyles[key];
                return build.call(
                  this,
                  this._styles ? this._styles.concat(codes) : [codes],
                  this._empty,
                  key
                );
              }
            };
          };

          for (var _i = 0; _i < _arr.length; _i++) {
            _loop();
          }

          styles.visible = {
            get: function get() {
              return build.call(this, this._styles || [], true, "visible");
            }
          };
          ansiStyles.color.closeRe = new RegExp(
            escapeStringRegexp(ansiStyles.color.close),
            "g"
          );

          var _arr2 = Object.keys(ansiStyles.color.ansi);

          var _loop2 = function _loop2() {
            var model = _arr2[_i2];

            if (skipModels.has(model)) {
              return "continue";
            }

            styles[model] = {
              get: function get() {
                var level = this.level;
                return function() {
                  var open = ansiStyles.color[levelMapping[level]][model].apply(
                    null,
                    arguments
                  );
                  var codes = {
                    open: open,
                    close: ansiStyles.color.close,
                    closeRe: ansiStyles.color.closeRe
                  };
                  return build.call(
                    this,
                    this._styles ? this._styles.concat(codes) : [codes],
                    this._empty,
                    model
                  );
                };
              }
            };
          };

          for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
            var _ret = _loop2();

            if (_ret === "continue") continue;
          }

          ansiStyles.bgColor.closeRe = new RegExp(
            escapeStringRegexp(ansiStyles.bgColor.close),
            "g"
          );

          var _arr3 = Object.keys(ansiStyles.bgColor.ansi);

          var _loop3 = function _loop3() {
            var model = _arr3[_i3];

            if (skipModels.has(model)) {
              return "continue";
            }

            var bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
            styles[bgModel] = {
              get: function get() {
                var level = this.level;
                return function() {
                  var open = ansiStyles.bgColor[levelMapping[level]][
                    model
                  ].apply(null, arguments);
                  var codes = {
                    open: open,
                    close: ansiStyles.bgColor.close,
                    closeRe: ansiStyles.bgColor.closeRe
                  };
                  return build.call(
                    this,
                    this._styles ? this._styles.concat(codes) : [codes],
                    this._empty,
                    model
                  );
                };
              }
            };
          };

          for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
            var _ret2 = _loop3();

            if (_ret2 === "continue") continue;
          }

          var proto = Object.defineProperties(function() {}, styles);

          function build(_styles, _empty, key) {
            var builder = function builder() {
              return applyStyle.apply(builder, arguments);
            };

            builder._styles = _styles;
            builder._empty = _empty;
            var self = this;
            Object.defineProperty(builder, "level", {
              enumerable: true,
              get: function get() {
                return self.level;
              },
              set: function set(level) {
                self.level = level;
              }
            });
            Object.defineProperty(builder, "enabled", {
              enumerable: true,
              get: function get() {
                return self.enabled;
              },
              set: function set(enabled) {
                self.enabled = enabled;
              }
            });
            builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
            builder.__proto__ = proto;
            return builder;
          }

          function applyStyle() {
            var args = arguments;
            var argsLen = args.length;
            var str = String(arguments[0]);

            if (argsLen === 0) {
              return "";
            }

            if (argsLen > 1) {
              for (var a = 1; a < argsLen; a++) {
                str += " " + args[a];
              }
            }

            if (!this.enabled || this.level <= 0 || !str) {
              return this._empty ? "" : str;
            }

            var originalDim = ansiStyles.dim.open;

            if (isSimpleWindowsTerm && this.hasGrey) {
              ansiStyles.dim.open = "";
            }

            for (
              var _iterator = this._styles.slice().reverse(),
                _isArray = Array.isArray(_iterator),
                _i4 = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i4 >= _iterator.length) break;
                _ref = _iterator[_i4++];
              } else {
                _i4 = _iterator.next();
                if (_i4.done) break;
                _ref = _i4.value;
              }

              var code = _ref;
              str =
                code.open + str.replace(code.closeRe, code.open) + code.close;
              str = str.replace(/\r?\n/g, code.close + "$&" + code.open);
            }

            ansiStyles.dim.open = originalDim;
            return str;
          }

          function chalkTag(chalk, strings) {
            if (!Array.isArray(strings)) {
              return [].slice.call(arguments, 1).join(" ");
            }

            var args = [].slice.call(arguments, 2);
            var parts = [strings.raw[0]];

            for (var i = 1; i < strings.length; i++) {
              parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
              parts.push(String(strings.raw[i]));
            }

            return template(chalk, parts.join(""));
          }

          Object.defineProperties(Chalk.prototype, styles);
          module.exports = Chalk();
          module.exports.supportsColor = stdoutColor;
          module.exports.default = module.exports;
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(12)));

        /***/
      },
      /* 422 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

        module.exports = function(str) {
          if (typeof str !== "string") {
            throw new TypeError("Expected a string");
          }

          return str.replace(matchOperatorsRe, "\\$&");
        };

        /***/
      },
      /* 423 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(module) {
          var colorConvert = __webpack_require__(424);

          var wrapAnsi16 = function wrapAnsi16(fn, offset) {
            return function() {
              var code = fn.apply(colorConvert, arguments);
              return "\x1B[" + (code + offset) + "m";
            };
          };

          var wrapAnsi256 = function wrapAnsi256(fn, offset) {
            return function() {
              var code = fn.apply(colorConvert, arguments);
              return "\x1B[" + (38 + offset) + ";5;" + code + "m";
            };
          };

          var wrapAnsi16m = function wrapAnsi16m(fn, offset) {
            return function() {
              var rgb = fn.apply(colorConvert, arguments);
              return (
                "\x1B[" +
                (38 + offset) +
                ";2;" +
                rgb[0] +
                ";" +
                rgb[1] +
                ";" +
                rgb[2] +
                "m"
              );
            };
          };

          function assembleStyles() {
            var codes = new Map();
            var styles = {
              modifier: {
                reset: [0, 0],
                bold: [1, 22],
                dim: [2, 22],
                italic: [3, 23],
                underline: [4, 24],
                inverse: [7, 27],
                hidden: [8, 28],
                strikethrough: [9, 29]
              },
              color: {
                black: [30, 39],
                red: [31, 39],
                green: [32, 39],
                yellow: [33, 39],
                blue: [34, 39],
                magenta: [35, 39],
                cyan: [36, 39],
                white: [37, 39],
                gray: [90, 39],
                redBright: [91, 39],
                greenBright: [92, 39],
                yellowBright: [93, 39],
                blueBright: [94, 39],
                magentaBright: [95, 39],
                cyanBright: [96, 39],
                whiteBright: [97, 39]
              },
              bgColor: {
                bgBlack: [40, 49],
                bgRed: [41, 49],
                bgGreen: [42, 49],
                bgYellow: [43, 49],
                bgBlue: [44, 49],
                bgMagenta: [45, 49],
                bgCyan: [46, 49],
                bgWhite: [47, 49],
                bgBlackBright: [100, 49],
                bgRedBright: [101, 49],
                bgGreenBright: [102, 49],
                bgYellowBright: [103, 49],
                bgBlueBright: [104, 49],
                bgMagentaBright: [105, 49],
                bgCyanBright: [106, 49],
                bgWhiteBright: [107, 49]
              }
            };
            styles.color.grey = styles.color.gray;

            var _arr = Object.keys(styles);

            for (var _i = 0; _i < _arr.length; _i++) {
              var groupName = _arr[_i];
              var group = styles[groupName];

              var _arr3 = Object.keys(group);

              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var styleName = _arr3[_i3];
                var style = group[styleName];
                styles[styleName] = {
                  open: "\x1B[" + style[0] + "m",
                  close: "\x1B[" + style[1] + "m"
                };
                group[styleName] = styles[styleName];
                codes.set(style[0], style[1]);
              }

              Object.defineProperty(styles, groupName, {
                value: group,
                enumerable: false
              });
              Object.defineProperty(styles, "codes", {
                value: codes,
                enumerable: false
              });
            }

            var ansi2ansi = function ansi2ansi(n) {
              return n;
            };

            var rgb2rgb = function rgb2rgb(r, g, b) {
              return [r, g, b];
            };

            styles.color.close = "\x1B[39m";
            styles.bgColor.close = "\x1B[49m";
            styles.color.ansi = {
              ansi: wrapAnsi16(ansi2ansi, 0)
            };
            styles.color.ansi256 = {
              ansi256: wrapAnsi256(ansi2ansi, 0)
            };
            styles.color.ansi16m = {
              rgb: wrapAnsi16m(rgb2rgb, 0)
            };
            styles.bgColor.ansi = {
              ansi: wrapAnsi16(ansi2ansi, 10)
            };
            styles.bgColor.ansi256 = {
              ansi256: wrapAnsi256(ansi2ansi, 10)
            };
            styles.bgColor.ansi16m = {
              rgb: wrapAnsi16m(rgb2rgb, 10)
            };

            var _arr2 = Object.keys(colorConvert);

            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
              var key = _arr2[_i2];

              if (typeof colorConvert[key] !== "object") {
                continue;
              }

              var suite = colorConvert[key];

              if (key === "ansi16") {
                key = "ansi";
              }

              if ("ansi16" in suite) {
                styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
                styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
              }

              if ("ansi256" in suite) {
                styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
                styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
              }

              if ("rgb" in suite) {
                styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
                styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
              }
            }

            return styles;
          }

          Object.defineProperty(module, "exports", {
            enumerable: true,
            get: assembleStyles
          });
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(26)(module)));

        /***/
      },
      /* 424 */
      /***/ function(module, exports, __webpack_require__) {
        var conversions = __webpack_require__(154);

        var route = __webpack_require__(426);

        var convert = {};
        var models = Object.keys(conversions);

        function wrapRaw(fn) {
          var wrappedFn = function wrappedFn(args) {
            if (args === undefined || args === null) {
              return args;
            }

            if (arguments.length > 1) {
              args = Array.prototype.slice.call(arguments);
            }

            return fn(args);
          };

          if ("conversion" in fn) {
            wrappedFn.conversion = fn.conversion;
          }

          return wrappedFn;
        }

        function wrapRounded(fn) {
          var wrappedFn = function wrappedFn(args) {
            if (args === undefined || args === null) {
              return args;
            }

            if (arguments.length > 1) {
              args = Array.prototype.slice.call(arguments);
            }

            var result = fn(args);

            if (typeof result === "object") {
              for (var len = result.length, i = 0; i < len; i++) {
                result[i] = Math.round(result[i]);
              }
            }

            return result;
          };

          if ("conversion" in fn) {
            wrappedFn.conversion = fn.conversion;
          }

          return wrappedFn;
        }

        models.forEach(function(fromModel) {
          convert[fromModel] = {};
          Object.defineProperty(convert[fromModel], "channels", {
            value: conversions[fromModel].channels
          });
          Object.defineProperty(convert[fromModel], "labels", {
            value: conversions[fromModel].labels
          });
          var routes = route(fromModel);
          var routeModels = Object.keys(routes);
          routeModels.forEach(function(toModel) {
            var fn = routes[toModel];
            convert[fromModel][toModel] = wrapRounded(fn);
            convert[fromModel][toModel].raw = wrapRaw(fn);
          });
        });
        module.exports = convert;

        /***/
      },
      /* 425 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = {
          aliceblue: [240, 248, 255],
          antiquewhite: [250, 235, 215],
          aqua: [0, 255, 255],
          aquamarine: [127, 255, 212],
          azure: [240, 255, 255],
          beige: [245, 245, 220],
          bisque: [255, 228, 196],
          black: [0, 0, 0],
          blanchedalmond: [255, 235, 205],
          blue: [0, 0, 255],
          blueviolet: [138, 43, 226],
          brown: [165, 42, 42],
          burlywood: [222, 184, 135],
          cadetblue: [95, 158, 160],
          chartreuse: [127, 255, 0],
          chocolate: [210, 105, 30],
          coral: [255, 127, 80],
          cornflowerblue: [100, 149, 237],
          cornsilk: [255, 248, 220],
          crimson: [220, 20, 60],
          cyan: [0, 255, 255],
          darkblue: [0, 0, 139],
          darkcyan: [0, 139, 139],
          darkgoldenrod: [184, 134, 11],
          darkgray: [169, 169, 169],
          darkgreen: [0, 100, 0],
          darkgrey: [169, 169, 169],
          darkkhaki: [189, 183, 107],
          darkmagenta: [139, 0, 139],
          darkolivegreen: [85, 107, 47],
          darkorange: [255, 140, 0],
          darkorchid: [153, 50, 204],
          darkred: [139, 0, 0],
          darksalmon: [233, 150, 122],
          darkseagreen: [143, 188, 143],
          darkslateblue: [72, 61, 139],
          darkslategray: [47, 79, 79],
          darkslategrey: [47, 79, 79],
          darkturquoise: [0, 206, 209],
          darkviolet: [148, 0, 211],
          deeppink: [255, 20, 147],
          deepskyblue: [0, 191, 255],
          dimgray: [105, 105, 105],
          dimgrey: [105, 105, 105],
          dodgerblue: [30, 144, 255],
          firebrick: [178, 34, 34],
          floralwhite: [255, 250, 240],
          forestgreen: [34, 139, 34],
          fuchsia: [255, 0, 255],
          gainsboro: [220, 220, 220],
          ghostwhite: [248, 248, 255],
          gold: [255, 215, 0],
          goldenrod: [218, 165, 32],
          gray: [128, 128, 128],
          green: [0, 128, 0],
          greenyellow: [173, 255, 47],
          grey: [128, 128, 128],
          honeydew: [240, 255, 240],
          hotpink: [255, 105, 180],
          indianred: [205, 92, 92],
          indigo: [75, 0, 130],
          ivory: [255, 255, 240],
          khaki: [240, 230, 140],
          lavender: [230, 230, 250],
          lavenderblush: [255, 240, 245],
          lawngreen: [124, 252, 0],
          lemonchiffon: [255, 250, 205],
          lightblue: [173, 216, 230],
          lightcoral: [240, 128, 128],
          lightcyan: [224, 255, 255],
          lightgoldenrodyellow: [250, 250, 210],
          lightgray: [211, 211, 211],
          lightgreen: [144, 238, 144],
          lightgrey: [211, 211, 211],
          lightpink: [255, 182, 193],
          lightsalmon: [255, 160, 122],
          lightseagreen: [32, 178, 170],
          lightskyblue: [135, 206, 250],
          lightslategray: [119, 136, 153],
          lightslategrey: [119, 136, 153],
          lightsteelblue: [176, 196, 222],
          lightyellow: [255, 255, 224],
          lime: [0, 255, 0],
          limegreen: [50, 205, 50],
          linen: [250, 240, 230],
          magenta: [255, 0, 255],
          maroon: [128, 0, 0],
          mediumaquamarine: [102, 205, 170],
          mediumblue: [0, 0, 205],
          mediumorchid: [186, 85, 211],
          mediumpurple: [147, 112, 219],
          mediumseagreen: [60, 179, 113],
          mediumslateblue: [123, 104, 238],
          mediumspringgreen: [0, 250, 154],
          mediumturquoise: [72, 209, 204],
          mediumvioletred: [199, 21, 133],
          midnightblue: [25, 25, 112],
          mintcream: [245, 255, 250],
          mistyrose: [255, 228, 225],
          moccasin: [255, 228, 181],
          navajowhite: [255, 222, 173],
          navy: [0, 0, 128],
          oldlace: [253, 245, 230],
          olive: [128, 128, 0],
          olivedrab: [107, 142, 35],
          orange: [255, 165, 0],
          orangered: [255, 69, 0],
          orchid: [218, 112, 214],
          palegoldenrod: [238, 232, 170],
          palegreen: [152, 251, 152],
          paleturquoise: [175, 238, 238],
          palevioletred: [219, 112, 147],
          papayawhip: [255, 239, 213],
          peachpuff: [255, 218, 185],
          peru: [205, 133, 63],
          pink: [255, 192, 203],
          plum: [221, 160, 221],
          powderblue: [176, 224, 230],
          purple: [128, 0, 128],
          rebeccapurple: [102, 51, 153],
          red: [255, 0, 0],
          rosybrown: [188, 143, 143],
          royalblue: [65, 105, 225],
          saddlebrown: [139, 69, 19],
          salmon: [250, 128, 114],
          sandybrown: [244, 164, 96],
          seagreen: [46, 139, 87],
          seashell: [255, 245, 238],
          sienna: [160, 82, 45],
          silver: [192, 192, 192],
          skyblue: [135, 206, 235],
          slateblue: [106, 90, 205],
          slategray: [112, 128, 144],
          slategrey: [112, 128, 144],
          snow: [255, 250, 250],
          springgreen: [0, 255, 127],
          steelblue: [70, 130, 180],
          tan: [210, 180, 140],
          teal: [0, 128, 128],
          thistle: [216, 191, 216],
          tomato: [255, 99, 71],
          turquoise: [64, 224, 208],
          violet: [238, 130, 238],
          wheat: [245, 222, 179],
          white: [255, 255, 255],
          whitesmoke: [245, 245, 245],
          yellow: [255, 255, 0],
          yellowgreen: [154, 205, 50]
        };

        /***/
      },
      /* 426 */
      /***/ function(module, exports, __webpack_require__) {
        var conversions = __webpack_require__(154);

        function buildGraph() {
          var graph = {};
          var models = Object.keys(conversions);

          for (var len = models.length, i = 0; i < len; i++) {
            graph[models[i]] = {
              distance: -1,
              parent: null
            };
          }

          return graph;
        }

        function deriveBFS(fromModel) {
          var graph = buildGraph();
          var queue = [fromModel];
          graph[fromModel].distance = 0;

          while (queue.length) {
            var current = queue.pop();
            var adjacents = Object.keys(conversions[current]);

            for (var len = adjacents.length, i = 0; i < len; i++) {
              var adjacent = adjacents[i];
              var node = graph[adjacent];

              if (node.distance === -1) {
                node.distance = graph[current].distance + 1;
                node.parent = current;
                queue.unshift(adjacent);
              }
            }
          }

          return graph;
        }

        function link(from, to) {
          return function(args) {
            return to(from(args));
          };
        }

        function wrapConversion(toModel, graph) {
          var path = [graph[toModel].parent, toModel];
          var fn = conversions[graph[toModel].parent][toModel];
          var cur = graph[toModel].parent;

          while (graph[cur].parent) {
            path.unshift(graph[cur].parent);
            fn = link(conversions[graph[cur].parent][cur], fn);
            cur = graph[cur].parent;
          }

          fn.conversion = path;
          return fn;
        }

        module.exports = function(fromModel) {
          var graph = deriveBFS(fromModel);
          var conversion = {};
          var models = Object.keys(graph);

          for (var len = models.length, i = 0; i < len; i++) {
            var toModel = models[i];
            var node = graph[toModel];

            if (node.parent === null) {
              continue;
            }

            conversion[toModel] = wrapConversion(toModel, graph);
          }

          return conversion;
        };

        /***/
      },
      /* 427 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = {
          stdout: false,
          stderr: false
        };

        /***/
      },
      /* 428 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
        var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
        var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
        var ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
        var ESCAPES = new Map([
          ["n", "\n"],
          ["r", "\r"],
          ["t", "\t"],
          ["b", "\b"],
          ["f", "\f"],
          ["v", "\v"],
          ["0", "\0"],
          ["\\", "\\"],
          ["e", "\x1B"],
          ["a", "\x07"]
        ]);

        function unescape(c) {
          if (
            (c[0] === "u" && c.length === 5) ||
            (c[0] === "x" && c.length === 3)
          ) {
            return String.fromCharCode(parseInt(c.slice(1), 16));
          }

          return ESCAPES.get(c) || c;
        }

        function parseArguments(name, args) {
          var results = [];
          var chunks = args.trim().split(/\s*,\s*/g);
          var matches;

          for (
            var _iterator = chunks,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var chunk = _ref;

            if (!isNaN(chunk)) {
              results.push(Number(chunk));
            } else if ((matches = chunk.match(STRING_REGEX))) {
              results.push(
                matches[2].replace(ESCAPE_REGEX, function(m, escape, chr) {
                  return escape ? unescape(escape) : chr;
                })
              );
            } else {
              throw new Error(
                "Invalid Chalk template style argument: " +
                  chunk +
                  " (in style '" +
                  name +
                  "')"
              );
            }
          }

          return results;
        }

        function parseStyle(style) {
          STYLE_REGEX.lastIndex = 0;
          var results = [];
          var matches;

          while ((matches = STYLE_REGEX.exec(style)) !== null) {
            var name = matches[1];

            if (matches[2]) {
              var args = parseArguments(name, matches[2]);
              results.push([name].concat(args));
            } else {
              results.push([name]);
            }
          }

          return results;
        }

        function buildStyle(chalk, styles) {
          var enabled = {};

          for (
            var _iterator2 = styles,
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2
                ? _iterator2
                : _iterator2[Symbol.iterator]();
            ;

          ) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var layer = _ref2;

            for (
              var _iterator3 = layer.styles,
                _isArray3 = Array.isArray(_iterator3),
                _i4 = 0,
                _iterator3 = _isArray3
                  ? _iterator3
                  : _iterator3[Symbol.iterator]();
              ;

            ) {
              var _ref3;

              if (_isArray3) {
                if (_i4 >= _iterator3.length) break;
                _ref3 = _iterator3[_i4++];
              } else {
                _i4 = _iterator3.next();
                if (_i4.done) break;
                _ref3 = _i4.value;
              }

              var style = _ref3;
              enabled[style[0]] = layer.inverse ? null : style.slice(1);
            }
          }

          var current = chalk;

          var _arr = Object.keys(enabled);

          for (var _i3 = 0; _i3 < _arr.length; _i3++) {
            var styleName = _arr[_i3];

            if (Array.isArray(enabled[styleName])) {
              if (!(styleName in current)) {
                throw new Error("Unknown Chalk style: " + styleName);
              }

              if (enabled[styleName].length > 0) {
                current = current[styleName].apply(current, enabled[styleName]);
              } else {
                current = current[styleName];
              }
            }
          }

          return current;
        }

        module.exports = function(chalk, tmp) {
          var styles = [];
          var chunks = [];
          var chunk = [];
          tmp.replace(TEMPLATE_REGEX, function(
            m,
            escapeChar,
            inverse,
            style,
            close,
            chr
          ) {
            if (escapeChar) {
              chunk.push(unescape(escapeChar));
            } else if (style) {
              var str = chunk.join("");
              chunk = [];
              chunks.push(
                styles.length === 0 ? str : buildStyle(chalk, styles)(str)
              );
              styles.push({
                inverse: inverse,
                styles: parseStyle(style)
              });
            } else if (close) {
              if (styles.length === 0) {
                throw new Error("Found extraneous } in Chalk template literal");
              }

              chunks.push(buildStyle(chalk, styles)(chunk.join("")));
              chunk = [];
              styles.pop();
            } else {
              chunk.push(chr);
            }
          });
          chunks.push(chunk.join(""));

          if (styles.length > 0) {
            var errMsg =
              "Chalk template literal is missing " +
              styles.length +
              " closing bracket" +
              (styles.length === 1 ? "" : "s") +
              " (`}`)";
            throw new Error(errMsg);
          }

          return chunks.join("");
        };

        /***/
      },
      /* 429 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(global) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.evaluateTruthy = evaluateTruthy;
          exports.evaluate = evaluate;
          var VALID_CALLEES = ["String", "Number", "Math"];
          var INVALID_METHODS = ["random"];

          function evaluateTruthy() {
            var res = this.evaluate();
            if (res.confident) return !!res.value;
          }

          function deopt(path, state) {
            if (!state.confident) return;
            state.deoptPath = path;
            state.confident = false;
          }

          function evaluateCached(path, state) {
            var node = path.node;
            var seen = state.seen;

            if (seen.has(node)) {
              var existing = seen.get(node);

              if (existing.resolved) {
                return existing.value;
              } else {
                deopt(path, state);
                return;
              }
            } else {
              var item = {
                resolved: false
              };
              seen.set(node, item);

              var val = _evaluate(path, state);

              if (state.confident) {
                item.resolved = true;
                item.value = val;
              }

              return val;
            }
          }

          function _evaluate(path, state) {
            if (!state.confident) return;
            var node = path.node;

            if (path.isSequenceExpression()) {
              var exprs = path.get("expressions");
              return evaluateCached(exprs[exprs.length - 1], state);
            }

            if (
              path.isStringLiteral() ||
              path.isNumericLiteral() ||
              path.isBooleanLiteral()
            ) {
              return node.value;
            }

            if (path.isNullLiteral()) {
              return null;
            }

            if (path.isTemplateLiteral()) {
              return evaluateQuasis(path, node.quasis, state);
            }

            if (
              path.isTaggedTemplateExpression() &&
              path.get("tag").isMemberExpression()
            ) {
              var object = path.get("tag.object");
              var name = object.node.name;
              var property = path.get("tag.property");

              if (
                object.isIdentifier() &&
                name === "String" &&
                !path.scope.getBinding(name, true) &&
                property.isIdentifier &&
                property.node.name === "raw"
              ) {
                return evaluateQuasis(path, node.quasi.quasis, state, true);
              }
            }

            if (path.isConditionalExpression()) {
              var testResult = evaluateCached(path.get("test"), state);
              if (!state.confident) return;

              if (testResult) {
                return evaluateCached(path.get("consequent"), state);
              } else {
                return evaluateCached(path.get("alternate"), state);
              }
            }

            if (path.isExpressionWrapper()) {
              return evaluateCached(path.get("expression"), state);
            }

            if (
              path.isMemberExpression() &&
              !path.parentPath.isCallExpression({
                callee: node
              })
            ) {
              var _property = path.get("property");

              var _object = path.get("object");

              if (_object.isLiteral() && _property.isIdentifier()) {
                var value = _object.node.value;
                var type = typeof value;

                if (type === "number" || type === "string") {
                  return value[_property.node.name];
                }
              }
            }

            if (path.isReferencedIdentifier()) {
              var binding = path.scope.getBinding(node.name);

              if (binding && binding.constantViolations.length > 0) {
                return deopt(binding.path, state);
              }

              if (binding && path.node.start < binding.path.node.end) {
                return deopt(binding.path, state);
              }

              if (binding && binding.hasValue) {
                return binding.value;
              } else {
                if (node.name === "undefined") {
                  return binding ? deopt(binding.path, state) : undefined;
                } else if (node.name === "Infinity") {
                  return binding ? deopt(binding.path, state) : Infinity;
                } else if (node.name === "NaN") {
                  return binding ? deopt(binding.path, state) : NaN;
                }

                var resolved = path.resolve();

                if (resolved === path) {
                  return deopt(path, state);
                } else {
                  return evaluateCached(resolved, state);
                }
              }
            }

            if (
              path.isUnaryExpression({
                prefix: true
              })
            ) {
              if (node.operator === "void") {
                return undefined;
              }

              var argument = path.get("argument");

              if (
                node.operator === "typeof" &&
                (argument.isFunction() || argument.isClass())
              ) {
                return "function";
              }

              var arg = evaluateCached(argument, state);
              if (!state.confident) return;

              switch (node.operator) {
                case "!":
                  return !arg;

                case "+":
                  return +arg;

                case "-":
                  return -arg;

                case "~":
                  return ~arg;

                case "typeof":
                  return typeof arg;
              }
            }

            if (path.isArrayExpression()) {
              var arr = [];
              var elems = path.get("elements");

              for (
                var _iterator = elems,
                  _isArray = Array.isArray(_iterator),
                  _i = 0,
                  _iterator = _isArray
                    ? _iterator
                    : _iterator[Symbol.iterator]();
                ;

              ) {
                var _ref;

                if (_isArray) {
                  if (_i >= _iterator.length) break;
                  _ref = _iterator[_i++];
                } else {
                  _i = _iterator.next();
                  if (_i.done) break;
                  _ref = _i.value;
                }

                var elem = _ref;
                var elemValue = elem.evaluate();

                if (elemValue.confident) {
                  arr.push(elemValue.value);
                } else {
                  return deopt(elem, state);
                }
              }

              return arr;
            }

            if (path.isObjectExpression()) {
              var obj = {};
              var props = path.get("properties");

              for (
                var _iterator2 = props,
                  _isArray2 = Array.isArray(_iterator2),
                  _i2 = 0,
                  _iterator2 = _isArray2
                    ? _iterator2
                    : _iterator2[Symbol.iterator]();
                ;

              ) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var prop = _ref2;

                if (prop.isObjectMethod() || prop.isSpreadElement()) {
                  return deopt(prop, state);
                }

                var keyPath = prop.get("key");
                var key = keyPath;

                if (prop.node.computed) {
                  key = key.evaluate();

                  if (!key.confident) {
                    return deopt(keyPath, state);
                  }

                  key = key.value;
                } else if (key.isIdentifier()) {
                  key = key.node.name;
                } else {
                  key = key.node.value;
                }

                var valuePath = prop.get("value");

                var _value = valuePath.evaluate();

                if (!_value.confident) {
                  return deopt(valuePath, state);
                }

                _value = _value.value;
                obj[key] = _value;
              }

              return obj;
            }

            if (path.isLogicalExpression()) {
              var wasConfident = state.confident;
              var left = evaluateCached(path.get("left"), state);
              var leftConfident = state.confident;
              state.confident = wasConfident;
              var right = evaluateCached(path.get("right"), state);
              var rightConfident = state.confident;
              state.confident = leftConfident && rightConfident;

              switch (node.operator) {
                case "||":
                  if (left && leftConfident) {
                    state.confident = true;
                    return left;
                  }

                  if (!state.confident) return;
                  return left || right;

                case "&&":
                  if ((!left && leftConfident) || (!right && rightConfident)) {
                    state.confident = true;
                  }

                  if (!state.confident) return;
                  return left && right;
              }
            }

            if (path.isBinaryExpression()) {
              var _left = evaluateCached(path.get("left"), state);

              if (!state.confident) return;

              var _right = evaluateCached(path.get("right"), state);

              if (!state.confident) return;

              switch (node.operator) {
                case "-":
                  return _left - _right;

                case "+":
                  return _left + _right;

                case "/":
                  return _left / _right;

                case "*":
                  return _left * _right;

                case "%":
                  return _left % _right;

                case "**":
                  return Math.pow(_left, _right);

                case "<":
                  return _left < _right;

                case ">":
                  return _left > _right;

                case "<=":
                  return _left <= _right;

                case ">=":
                  return _left >= _right;

                case "==":
                  return _left == _right;

                case "!=":
                  return _left != _right;

                case "===":
                  return _left === _right;

                case "!==":
                  return _left !== _right;

                case "|":
                  return _left | _right;

                case "&":
                  return _left & _right;

                case "^":
                  return _left ^ _right;

                case "<<":
                  return _left << _right;

                case ">>":
                  return _left >> _right;

                case ">>>":
                  return _left >>> _right;
              }
            }

            if (path.isCallExpression()) {
              var callee = path.get("callee");
              var context;
              var func;

              if (
                callee.isIdentifier() &&
                !path.scope.getBinding(callee.node.name, true) &&
                VALID_CALLEES.indexOf(callee.node.name) >= 0
              ) {
                func = global[node.callee.name];
              }

              if (callee.isMemberExpression()) {
                var _object2 = callee.get("object");

                var _property2 = callee.get("property");

                if (
                  _object2.isIdentifier() &&
                  _property2.isIdentifier() &&
                  VALID_CALLEES.indexOf(_object2.node.name) >= 0 &&
                  INVALID_METHODS.indexOf(_property2.node.name) < 0
                ) {
                  context = global[_object2.node.name];
                  func = context[_property2.node.name];
                }

                if (_object2.isLiteral() && _property2.isIdentifier()) {
                  var _type = typeof _object2.node.value;

                  if (_type === "string" || _type === "number") {
                    context = _object2.node.value;
                    func = context[_property2.node.name];
                  }
                }
              }

              if (func) {
                var args = path.get("arguments").map(function(arg) {
                  return evaluateCached(arg, state);
                });
                if (!state.confident) return;
                return func.apply(context, args);
              }
            }

            deopt(path, state);
          }

          function evaluateQuasis(path, quasis, state, raw) {
            if (raw === void 0) {
              raw = false;
            }

            var str = "";
            var i = 0;
            var exprs = path.get("expressions");

            for (
              var _iterator3 = quasis,
                _isArray3 = Array.isArray(_iterator3),
                _i3 = 0,
                _iterator3 = _isArray3
                  ? _iterator3
                  : _iterator3[Symbol.iterator]();
              ;

            ) {
              var _ref3;

              if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
              }

              var elem = _ref3;
              if (!state.confident) break;
              str += raw ? elem.value.raw : elem.value.cooked;
              var expr = exprs[i++];
              if (expr) str += String(evaluateCached(expr, state));
            }

            if (!state.confident) return;
            return str;
          }

          function evaluate() {
            var state = {
              confident: true,
              deoptPath: null,
              seen: new Map()
            };
            var value = evaluateCached(this, state);
            if (!state.confident) value = undefined;
            return {
              confident: state.confident,
              deopt: state.deoptPath,
              value: value
            };
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(18)));

        /***/
      },
      /* 430 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.toComputedKey = toComputedKey;
        exports.ensureBlock = ensureBlock;
        exports.arrowFunctionToShadowed = arrowFunctionToShadowed;
        exports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
        exports.arrowFunctionToExpression = arrowFunctionToExpression;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _helperFunctionName() {
          var data = _interopRequireDefault(__webpack_require__(20));

          _helperFunctionName = function _helperFunctionName() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function toComputedKey() {
          var node = this.node;
          var key;

          if (this.isMemberExpression()) {
            key = node.property;
          } else if (this.isProperty() || this.isMethod()) {
            key = node.key;
          } else {
            throw new ReferenceError("todo");
          }

          if (!node.computed) {
            if (t().isIdentifier(key)) key = t().stringLiteral(key.name);
          }

          return key;
        }

        function ensureBlock() {
          var body = this.get("body");
          var bodyNode = body.node;

          if (Array.isArray(body)) {
            throw new Error("Can't convert array path to a block statement");
          }

          if (!bodyNode) {
            throw new Error("Can't convert node without a body");
          }

          if (body.isBlockStatement()) {
            return bodyNode;
          }

          var statements = [];
          var stringPath = "body";
          var key;
          var listKey;

          if (body.isStatement()) {
            listKey = "body";
            key = 0;
            statements.push(body.node);
          } else {
            stringPath += ".body.0";

            if (this.isFunction()) {
              key = "argument";
              statements.push(t().returnStatement(body.node));
            } else {
              key = "expression";
              statements.push(t().expressionStatement(body.node));
            }
          }

          this.node.body = t().blockStatement(statements);
          var parentPath = this.get(stringPath);
          body.setup(
            parentPath,
            listKey ? parentPath.node[listKey] : parentPath.node,
            listKey,
            key
          );
          return this.node;
        }

        function arrowFunctionToShadowed() {
          if (!this.isArrowFunctionExpression()) return;
          this.arrowFunctionToExpression();
        }

        function unwrapFunctionEnvironment() {
          if (
            !this.isArrowFunctionExpression() &&
            !this.isFunctionExpression() &&
            !this.isFunctionDeclaration()
          ) {
            throw this.buildCodeFrameError(
              "Can only unwrap the environment of a function."
            );
          }

          hoistFunctionEnvironment(this);
        }

        function arrowFunctionToExpression(_temp) {
          var _ref = _temp === void 0 ? {} : _temp,
            _ref$allowInsertArrow = _ref.allowInsertArrow,
            allowInsertArrow =
              _ref$allowInsertArrow === void 0 ? true : _ref$allowInsertArrow,
            _ref$specCompliant = _ref.specCompliant,
            specCompliant =
              _ref$specCompliant === void 0 ? false : _ref$specCompliant;

          if (!this.isArrowFunctionExpression()) {
            throw this.buildCodeFrameError(
              "Cannot convert non-arrow function to a function expression."
            );
          }

          var thisBinding = hoistFunctionEnvironment(
            this,
            specCompliant,
            allowInsertArrow
          );
          this.ensureBlock();
          this.node.type = "FunctionExpression";

          if (specCompliant) {
            var checkBinding = thisBinding
              ? null
              : this.parentPath.scope.generateUidIdentifier("arrowCheckId");

            if (checkBinding) {
              this.parentPath.scope.push({
                id: checkBinding,
                init: t().objectExpression([])
              });
            }

            this.get("body").unshiftContainer(
              "body",
              t().expressionStatement(
                t().callExpression(this.hub.file.addHelper("newArrowCheck"), [
                  t().thisExpression(),
                  checkBinding
                    ? t().identifier(checkBinding.name)
                    : t().identifier(thisBinding)
                ])
              )
            );
            this.replaceWith(
              t().callExpression(
                t().memberExpression(
                  (0, _helperFunctionName().default)(this, true) || this.node,
                  t().identifier("bind")
                ),
                [
                  checkBinding
                    ? t().identifier(checkBinding.name)
                    : t().thisExpression()
                ]
              )
            );
          }
        }

        function hoistFunctionEnvironment(
          fnPath,
          specCompliant,
          allowInsertArrow
        ) {
          if (specCompliant === void 0) {
            specCompliant = false;
          }

          if (allowInsertArrow === void 0) {
            allowInsertArrow = true;
          }

          var thisEnvFn = fnPath.findParent(function(p) {
            return (
              (p.isFunction() && !p.isArrowFunctionExpression()) ||
              p.isProgram() ||
              p.isClassProperty({
                static: false
              })
            );
          });
          var inConstructor =
            thisEnvFn && thisEnvFn.node.kind === "constructor";

          if (thisEnvFn.isClassProperty()) {
            throw fnPath.buildCodeFrameError(
              "Unable to transform arrow inside class property"
            );
          }

          var _getScopeInformation = getScopeInformation(fnPath),
            thisPaths = _getScopeInformation.thisPaths,
            argumentsPaths = _getScopeInformation.argumentsPaths,
            newTargetPaths = _getScopeInformation.newTargetPaths,
            superProps = _getScopeInformation.superProps,
            superCalls = _getScopeInformation.superCalls;

          if (inConstructor && superCalls.length > 0) {
            if (!allowInsertArrow) {
              throw superCalls[0].buildCodeFrameError(
                "Unable to handle nested super() usage in arrow"
              );
            }

            var allSuperCalls = [];
            thisEnvFn.traverse({
              Function: function Function(child) {
                if (child.isArrowFunctionExpression()) return;
                child.skip();
              },
              ClassProperty: function ClassProperty(child) {
                if (child.node.static) return;
                child.skip();
              },
              CallExpression: function CallExpression(child) {
                if (!child.get("callee").isSuper()) return;
                allSuperCalls.push(child);
              }
            });
            var superBinding = getSuperBinding(thisEnvFn);
            allSuperCalls.forEach(function(superCall) {
              var callee = t().identifier(superBinding);
              callee.loc = superCall.node.callee.loc;
              superCall.get("callee").replaceWith(callee);
            });
          }

          var thisBinding;

          if (thisPaths.length > 0 || specCompliant) {
            thisBinding = getThisBinding(thisEnvFn, inConstructor);

            if (!specCompliant || (inConstructor && hasSuperClass(thisEnvFn))) {
              thisPaths.forEach(function(thisChild) {
                var thisRef = thisChild.isJSX()
                  ? t().jsxIdentifier(thisBinding)
                  : t().identifier(thisBinding);
                thisRef.loc = thisChild.node.loc;
                thisChild.replaceWith(thisRef);
              });
              if (specCompliant) thisBinding = null;
            }
          }

          if (argumentsPaths.length > 0) {
            var argumentsBinding = getBinding(
              thisEnvFn,
              "arguments",
              function() {
                return t().identifier("arguments");
              }
            );
            argumentsPaths.forEach(function(argumentsChild) {
              var argsRef = t().identifier(argumentsBinding);
              argsRef.loc = argumentsChild.node.loc;
              argumentsChild.replaceWith(argsRef);
            });
          }

          if (newTargetPaths.length > 0) {
            var newTargetBinding = getBinding(
              thisEnvFn,
              "newtarget",
              function() {
                return t().metaProperty(
                  t().identifier("new"),
                  t().identifier("target")
                );
              }
            );
            newTargetPaths.forEach(function(targetChild) {
              var targetRef = t().identifier(newTargetBinding);
              targetRef.loc = targetChild.node.loc;
              targetChild.replaceWith(targetRef);
            });
          }

          if (superProps.length > 0) {
            if (!allowInsertArrow) {
              throw superProps[0].buildCodeFrameError(
                "Unable to handle nested super.prop usage"
              );
            }

            var flatSuperProps = superProps.reduce(function(acc, superProp) {
              return acc.concat(standardizeSuperProperty(superProp));
            }, []);
            flatSuperProps.forEach(function(superProp) {
              var key = superProp.node.computed
                ? ""
                : superProp.get("property").node.name;

              if (
                superProp.parentPath.isCallExpression({
                  callee: superProp.node
                })
              ) {
                var _superBinding = getSuperPropCallBinding(thisEnvFn, key);

                if (superProp.node.computed) {
                  var prop = superProp.get("property").node;
                  superProp.replaceWith(t().identifier(_superBinding));
                  superProp.parentPath.node.arguments.unshift(prop);
                } else {
                  superProp.replaceWith(t().identifier(_superBinding));
                }
              } else {
                var isAssignment = superProp.parentPath.isAssignmentExpression({
                  left: superProp.node
                });

                var _superBinding2 = getSuperPropBinding(
                  thisEnvFn,
                  isAssignment,
                  key
                );

                var args = [];

                if (superProp.node.computed) {
                  args.push(superProp.get("property").node);
                }

                if (isAssignment) {
                  var value = superProp.parentPath.node.right;
                  args.push(value);
                  superProp.parentPath.replaceWith(
                    t().callExpression(t().identifier(_superBinding2), args)
                  );
                } else {
                  superProp.replaceWith(
                    t().callExpression(t().identifier(_superBinding2), args)
                  );
                }
              }
            });
          }

          return thisBinding;
        }

        function standardizeSuperProperty(superProp) {
          if (
            superProp.parentPath.isAssignmentExpression() &&
            superProp.parentPath.node.operator !== "="
          ) {
            var assignmentPath = superProp.parentPath;
            var op = assignmentPath.node.operator.slice(0, -1);
            var value = assignmentPath.node.right;
            assignmentPath.node.operator = "=";

            if (superProp.node.computed) {
              var tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
              assignmentPath
                .get("left")
                .replaceWith(
                  t().memberExpression(
                    superProp.node.object,
                    t().assignmentExpression("=", tmp, superProp.node.property),
                    true
                  )
                );
              assignmentPath
                .get("right")
                .replaceWith(
                  t().binaryExpression(
                    op,
                    t().memberExpression(
                      superProp.node.object,
                      t().identifier(tmp.name),
                      true
                    ),
                    value
                  )
                );
            } else {
              assignmentPath
                .get("left")
                .replaceWith(
                  t().memberExpression(
                    superProp.node.object,
                    superProp.node.property
                  )
                );
              assignmentPath
                .get("right")
                .replaceWith(
                  t().binaryExpression(
                    op,
                    t().memberExpression(
                      superProp.node.object,
                      t().identifier(superProp.node.property.name)
                    ),
                    value
                  )
                );
            }

            return [
              assignmentPath.get("left"),
              assignmentPath.get("right").get("left")
            ];
          } else if (superProp.parentPath.isUpdateExpression()) {
            var updateExpr = superProp.parentPath;

            var _tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");

            var computedKey = superProp.node.computed
              ? superProp.scope.generateDeclaredUidIdentifier("prop")
              : null;
            var parts = [
              t().assignmentExpression(
                "=",
                _tmp,
                t().memberExpression(
                  superProp.node.object,
                  computedKey
                    ? t().assignmentExpression(
                        "=",
                        computedKey,
                        superProp.node.property
                      )
                    : superProp.node.property,
                  superProp.node.computed
                )
              ),
              t().assignmentExpression(
                "=",
                t().memberExpression(
                  superProp.node.object,
                  computedKey
                    ? t().identifier(computedKey.name)
                    : superProp.node.property,
                  superProp.node.computed
                ),
                t().binaryExpression(
                  "+",
                  t().identifier(_tmp.name),
                  t().numericLiteral(1)
                )
              )
            ];

            if (!superProp.parentPath.node.prefix) {
              parts.push(t().identifier(_tmp.name));
            }

            updateExpr.replaceWith(t().sequenceExpression(parts));
            var left = updateExpr.get("expressions.0.right");
            var right = updateExpr.get("expressions.1.left");
            return [left, right];
          }

          return [superProp];
        }

        function hasSuperClass(thisEnvFn) {
          return (
            thisEnvFn.isClassMethod() &&
            !!thisEnvFn.parentPath.parentPath.node.superClass
          );
        }

        function getThisBinding(thisEnvFn, inConstructor) {
          return getBinding(thisEnvFn, "this", function(thisBinding) {
            if (!inConstructor || !hasSuperClass(thisEnvFn))
              return t().thisExpression();
            var supers = new WeakSet();
            thisEnvFn.traverse({
              Function: function Function(child) {
                if (child.isArrowFunctionExpression()) return;
                child.skip();
              },
              ClassProperty: function ClassProperty(child) {
                if (child.node.static) return;
                child.skip();
              },
              CallExpression: function CallExpression(child) {
                if (!child.get("callee").isSuper()) return;
                if (supers.has(child.node)) return;
                supers.add(child.node);
                child.replaceWith(
                  t().assignmentExpression(
                    "=",
                    t().identifier(thisBinding),
                    child.node
                  )
                );
              }
            });
          });
        }

        function getSuperBinding(thisEnvFn) {
          return getBinding(thisEnvFn, "supercall", function() {
            var argsBinding = thisEnvFn.scope.generateUidIdentifier("args");
            return t().arrowFunctionExpression(
              [t().restElement(argsBinding)],
              t().callExpression(t().super(), [
                t().spreadElement(t().identifier(argsBinding.name))
              ])
            );
          });
        }

        function getSuperPropCallBinding(thisEnvFn, propName) {
          return getBinding(
            thisEnvFn,
            "superprop_call:" + (propName || ""),
            function() {
              var argsBinding = thisEnvFn.scope.generateUidIdentifier("args");
              var argsList = [t().restElement(argsBinding)];
              var fnBody;

              if (propName) {
                fnBody = t().callExpression(
                  t().memberExpression(t().super(), t().identifier(propName)),
                  [t().spreadElement(t().identifier(argsBinding.name))]
                );
              } else {
                var method = thisEnvFn.scope.generateUidIdentifier("prop");
                argsList.unshift(method);
                fnBody = t().callExpression(
                  t().memberExpression(
                    t().super(),
                    t().identifier(method.name),
                    true
                  ),
                  [t().spreadElement(t().identifier(argsBinding.name))]
                );
              }

              return t().arrowFunctionExpression(argsList, fnBody);
            }
          );
        }

        function getSuperPropBinding(thisEnvFn, isAssignment, propName) {
          var op = isAssignment ? "set" : "get";
          return getBinding(
            thisEnvFn,
            "superprop_" + op + ":" + (propName || ""),
            function() {
              var argsList = [];
              var fnBody;

              if (propName) {
                fnBody = t().memberExpression(
                  t().super(),
                  t().identifier(propName)
                );
              } else {
                var method = thisEnvFn.scope.generateUidIdentifier("prop");
                argsList.unshift(method);
                fnBody = t().memberExpression(
                  t().super(),
                  t().identifier(method.name),
                  true
                );
              }

              if (isAssignment) {
                var valueIdent = thisEnvFn.scope.generateUidIdentifier("value");
                argsList.push(valueIdent);
                fnBody = t().assignmentExpression(
                  "=",
                  fnBody,
                  t().identifier(valueIdent.name)
                );
              }

              return t().arrowFunctionExpression(argsList, fnBody);
            }
          );
        }

        function getBinding(thisEnvFn, key, init) {
          var cacheKey = "binding:" + key;
          var data = thisEnvFn.getData(cacheKey);

          if (!data) {
            var id = thisEnvFn.scope.generateUidIdentifier(key);
            data = id.name;
            thisEnvFn.setData(cacheKey, data);
            thisEnvFn.scope.push({
              id: id,
              init: init(data)
            });
          }

          return data;
        }

        function getScopeInformation(fnPath) {
          var thisPaths = [];
          var argumentsPaths = [];
          var newTargetPaths = [];
          var superProps = [];
          var superCalls = [];
          fnPath.traverse({
            ClassProperty: function ClassProperty(child) {
              if (child.node.static) return;
              child.skip();
            },
            Function: function Function(child) {
              if (child.isArrowFunctionExpression()) return;
              child.skip();
            },
            ThisExpression: function ThisExpression(child) {
              thisPaths.push(child);
            },
            JSXIdentifier: function JSXIdentifier(child) {
              if (child.node.name !== "this") return;

              if (
                !child.parentPath.isJSXMemberExpression({
                  object: child.node
                }) &&
                !child.parentPath.isJSXOpeningElement({
                  name: child.node
                })
              ) {
                return;
              }

              thisPaths.push(child);
            },
            CallExpression: function CallExpression(child) {
              if (child.get("callee").isSuper()) superCalls.push(child);
            },
            MemberExpression: function MemberExpression(child) {
              if (child.get("object").isSuper()) superProps.push(child);
            },
            ReferencedIdentifier: function ReferencedIdentifier(child) {
              if (child.node.name !== "arguments") return;
              argumentsPaths.push(child);
            },
            MetaProperty: function MetaProperty(child) {
              if (
                !child.get("meta").isIdentifier({
                  name: "new"
                })
              )
                return;
              if (
                !child.get("property").isIdentifier({
                  name: "target"
                })
              )
                return;
              newTargetPaths.push(child);
            }
          });
          return {
            thisPaths: thisPaths,
            argumentsPaths: argumentsPaths,
            newTargetPaths: newTargetPaths,
            superProps: superProps,
            superCalls: superCalls
          };
        }

        /***/
      },
      /* 431 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _default(node) {
          var params = node.params;

          for (var i = 0; i < params.length; i++) {
            var param = params[i];

            if (t().isAssignmentPattern(param) || t().isRestElement(param)) {
              return i;
            }
          }

          return params.length;
        }

        /***/
      },
      /* 432 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.program = exports.expression = exports.statement = exports.statements = exports.smart = void 0;

        function makeStatementFormatter(fn) {
          return {
            code: function code(str) {
              return "/* @babel/template */;\n" + str;
            },
            validate: function validate() {},
            unwrap: function unwrap(ast) {
              return fn(ast.program.body.slice(1));
            }
          };
        }

        var smart = makeStatementFormatter(function(body) {
          if (body.length > 1) {
            return body;
          } else {
            return body[0];
          }
        });
        exports.smart = smart;
        var statements = makeStatementFormatter(function(body) {
          return body;
        });
        exports.statements = statements;
        var statement = makeStatementFormatter(function(body) {
          if (body.length === 0) {
            throw new Error("Found nothing to return.");
          }

          if (body.length > 1) {
            throw new Error("Found multiple statements but wanted one");
          }

          return body[0];
        });
        exports.statement = statement;
        var expression = {
          code: function code(str) {
            return "(\n" + str + "\n)";
          },
          validate: function validate(_ref) {
            var program = _ref.program;

            if (program.body.length > 1) {
              throw new Error("Found multiple statements but wanted one");
            }

            var expression = program.body[0].expression;

            if (expression.start === 0) {
              throw new Error("Parse result included parens.");
            }
          },
          unwrap: function unwrap(ast) {
            return ast.program.body[0].expression;
          }
        };
        exports.expression = expression;
        var program = {
          code: function code(str) {
            return str;
          },
          validate: function validate() {},
          unwrap: function unwrap(ast) {
            return ast.program;
          }
        };
        exports.program = program;

        /***/
      },
      /* 433 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = createTemplateBuilder;

        var _options = __webpack_require__(84);

        var _string = _interopRequireDefault(__webpack_require__(434));

        var _literal = _interopRequireDefault(__webpack_require__(435));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var NO_PLACEHOLDER = (0, _options.validate)({
          placeholderPattern: false
        });

        function createTemplateBuilder(formatter, defaultOpts) {
          var templateFnCache = new WeakMap();
          var templateAstCache = new WeakMap();
          var cachedOpts = defaultOpts || (0, _options.validate)(null);
          return Object.assign(
            function(tpl) {
              for (
                var _len = arguments.length,
                  args = new Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key];
              }

              if (typeof tpl === "string") {
                if (args.length > 1)
                  throw new Error("Unexpected extra params.");
                return extendedTrace(
                  (0, _string.default)(
                    formatter,
                    tpl,
                    (0, _options.merge)(
                      cachedOpts,
                      (0, _options.validate)(args[0])
                    )
                  )
                );
              } else if (Array.isArray(tpl)) {
                var builder = templateFnCache.get(tpl);

                if (!builder) {
                  builder = (0, _literal.default)(formatter, tpl, cachedOpts);
                  templateFnCache.set(tpl, builder);
                }

                return extendedTrace(builder(args));
              } else if (typeof tpl === "object" && tpl) {
                if (args.length > 0)
                  throw new Error("Unexpected extra params.");
                return createTemplateBuilder(
                  formatter,
                  (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl))
                );
              }

              throw new Error("Unexpected template param " + typeof tpl);
            },
            {
              ast: function ast(tpl) {
                for (
                  var _len2 = arguments.length,
                    args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                    _key2 = 1;
                  _key2 < _len2;
                  _key2++
                ) {
                  args[_key2 - 1] = arguments[_key2];
                }

                if (typeof tpl === "string") {
                  if (args.length > 1)
                    throw new Error("Unexpected extra params.");
                  return (0, _string.default)(
                    formatter,
                    tpl,
                    (0, _options.merge)(
                      (0, _options.merge)(
                        cachedOpts,
                        (0, _options.validate)(args[0])
                      ),
                      NO_PLACEHOLDER
                    )
                  )();
                } else if (Array.isArray(tpl)) {
                  var builder = templateAstCache.get(tpl);

                  if (!builder) {
                    builder = (0, _literal.default)(
                      formatter,
                      tpl,
                      (0, _options.merge)(cachedOpts, NO_PLACEHOLDER)
                    );
                    templateAstCache.set(tpl, builder);
                  }

                  return builder(args)();
                }

                throw new Error("Unexpected template param " + typeof tpl);
              }
            }
          );
        }

        function extendedTrace(fn) {
          var rootStack = "";

          try {
            throw new Error();
          } catch (error) {
            if (error.stack) {
              rootStack = error.stack
                .split("\n")
                .slice(3)
                .join("\n");
            }
          }

          return function(arg) {
            try {
              return fn(arg);
            } catch (err) {
              err.stack += "\n    =============\n" + rootStack;
              throw err;
            }
          };
        }

        /***/
      },
      /* 434 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = stringTemplate;

        var _options = __webpack_require__(84);

        var _parse = _interopRequireDefault(__webpack_require__(155));

        var _populate = _interopRequireDefault(__webpack_require__(156));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function stringTemplate(formatter, code, opts) {
          code = formatter.code(code);
          var metadata;
          return function(arg) {
            var replacements = (0, _options.normalizeReplacements)(arg);
            if (!metadata)
              metadata = (0, _parse.default)(formatter, code, opts);
            return formatter.unwrap(
              (0, _populate.default)(metadata, replacements)
            );
          };
        }

        /***/
      },
      /* 435 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = literalTemplate;

        var _options = __webpack_require__(84);

        var _parse = _interopRequireDefault(__webpack_require__(155));

        var _populate = _interopRequireDefault(__webpack_require__(156));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function literalTemplate(formatter, tpl, opts) {
          var _buildLiteralData = buildLiteralData(formatter, tpl, opts),
            metadata = _buildLiteralData.metadata,
            names = _buildLiteralData.names;

          return function(arg) {
            var defaultReplacements = arg.reduce(function(acc, replacement, i) {
              acc[names[i]] = replacement;
              return acc;
            }, {});
            return function(arg) {
              var replacements = (0, _options.normalizeReplacements)(arg);

              if (replacements) {
                Object.keys(replacements).forEach(function(key) {
                  if (
                    Object.prototype.hasOwnProperty.call(
                      defaultReplacements,
                      key
                    )
                  ) {
                    throw new Error("Unexpected replacement overlap.");
                  }
                });
              }

              return formatter.unwrap(
                (0, _populate.default)(
                  metadata,
                  replacements
                    ? Object.assign(replacements, defaultReplacements)
                    : defaultReplacements
                )
              );
            };
          };
        }

        function buildLiteralData(formatter, tpl, opts) {
          var names;
          var nameSet;
          var metadata;
          var prefix = "";

          do {
            prefix += "$";
            var result = buildTemplateCode(tpl, prefix);
            names = result.names;
            nameSet = new Set(names);
            metadata = (0, _parse.default)(
              formatter,
              formatter.code(result.code),
              {
                parser: opts.parser,
                placeholderWhitelist: new Set(
                  result.names.concat(
                    opts.placeholderWhitelist
                      ? Array.from(opts.placeholderWhitelist)
                      : []
                  )
                ),
                placeholderPattern: opts.placeholderPattern,
                preserveComments: opts.preserveComments
              }
            );
          } while (
            metadata.placeholders.some(function(placeholder) {
              return placeholder.isDuplicate && nameSet.has(placeholder.name);
            })
          );

          return {
            metadata: metadata,
            names: names
          };
        }

        function buildTemplateCode(tpl, prefix) {
          var names = [];
          var code = tpl[0];

          for (var i = 1; i < tpl.length; i++) {
            var value = "" + prefix + (i - 1);
            names.push(value);
            code += value + tpl[i];
          }

          return {
            names: names,
            code: code
          };
        }

        /***/
      },
      /* 436 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.matchesPattern = matchesPattern;
        exports.has = has;
        exports.isStatic = isStatic;
        exports.isnt = isnt;
        exports.equals = equals;
        exports.isNodeType = isNodeType;
        exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
        exports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
        exports.isCompletionRecord = isCompletionRecord;
        exports.isStatementOrBlock = isStatementOrBlock;
        exports.referencesImport = referencesImport;
        exports.getSource = getSource;
        exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
        exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
        exports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
        exports.resolve = resolve;
        exports._resolve = _resolve;
        exports.isConstantExpression = isConstantExpression;
        exports.isInStrictMode = isInStrictMode;
        exports.is = void 0;

        function _includes() {
          var data = _interopRequireDefault(__webpack_require__(79));

          _includes = function _includes() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function matchesPattern(pattern, allowPartial) {
          return t().matchesPattern(this.node, pattern, allowPartial);
        }

        function has(key) {
          var val = this.node && this.node[key];

          if (val && Array.isArray(val)) {
            return !!val.length;
          } else {
            return !!val;
          }
        }

        function isStatic() {
          return this.scope.isStatic(this.node);
        }

        var is = has;
        exports.is = is;

        function isnt(key) {
          return !this.has(key);
        }

        function equals(key, value) {
          return this.node[key] === value;
        }

        function isNodeType(type) {
          return t().isType(this.type, type);
        }

        function canHaveVariableDeclarationOrExpression() {
          return (
            (this.key === "init" || this.key === "left") &&
            this.parentPath.isFor()
          );
        }

        function canSwapBetweenExpressionAndStatement(replacement) {
          if (
            this.key !== "body" ||
            !this.parentPath.isArrowFunctionExpression()
          ) {
            return false;
          }

          if (this.isExpression()) {
            return t().isBlockStatement(replacement);
          } else if (this.isBlockStatement()) {
            return t().isExpression(replacement);
          }

          return false;
        }

        function isCompletionRecord(allowInsideFunction) {
          var path = this;
          var first = true;

          do {
            var container = path.container;

            if (path.isFunction() && !first) {
              return !!allowInsideFunction;
            }

            first = false;

            if (Array.isArray(container) && path.key !== container.length - 1) {
              return false;
            }
          } while ((path = path.parentPath) && !path.isProgram());

          return true;
        }

        function isStatementOrBlock() {
          if (
            this.parentPath.isLabeledStatement() ||
            t().isBlockStatement(this.container)
          ) {
            return false;
          } else {
            return (0, _includes().default)(
              t().STATEMENT_OR_BLOCK_KEYS,
              this.key
            );
          }
        }

        function referencesImport(moduleSource, importName) {
          if (!this.isReferencedIdentifier()) return false;
          var binding = this.scope.getBinding(this.node.name);
          if (!binding || binding.kind !== "module") return false;
          var path = binding.path;
          var parent = path.parentPath;
          if (!parent.isImportDeclaration()) return false;

          if (parent.node.source.value === moduleSource) {
            if (!importName) return true;
          } else {
            return false;
          }

          if (path.isImportDefaultSpecifier() && importName === "default") {
            return true;
          }

          if (path.isImportNamespaceSpecifier() && importName === "*") {
            return true;
          }

          if (
            path.isImportSpecifier() &&
            path.node.imported.name === importName
          ) {
            return true;
          }

          return false;
        }

        function getSource() {
          var node = this.node;

          if (node.end) {
            return this.hub.file.code.slice(node.start, node.end);
          } else {
            return "";
          }
        }

        function willIMaybeExecuteBefore(target) {
          return this._guessExecutionStatusRelativeTo(target) !== "after";
        }

        function _guessExecutionStatusRelativeTo(target) {
          var targetFuncParent =
            target.scope.getFunctionParent() || target.scope.getProgramParent();
          var selfFuncParent =
            this.scope.getFunctionParent() || target.scope.getProgramParent();

          if (targetFuncParent.node !== selfFuncParent.node) {
            var status = this._guessExecutionStatusRelativeToDifferentFunctions(
              targetFuncParent
            );

            if (status) {
              return status;
            } else {
              target = targetFuncParent.path;
            }
          }

          var targetPaths = target.getAncestry();
          if (targetPaths.indexOf(this) >= 0) return "after";
          var selfPaths = this.getAncestry();
          var commonPath;
          var targetIndex;
          var selfIndex;

          for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {
            var selfPath = selfPaths[selfIndex];
            targetIndex = targetPaths.indexOf(selfPath);

            if (targetIndex >= 0) {
              commonPath = selfPath;
              break;
            }
          }

          if (!commonPath) {
            return "before";
          }

          var targetRelationship = targetPaths[targetIndex - 1];
          var selfRelationship = selfPaths[selfIndex - 1];

          if (!targetRelationship || !selfRelationship) {
            return "before";
          }

          if (
            targetRelationship.listKey &&
            targetRelationship.container === selfRelationship.container
          ) {
            return targetRelationship.key > selfRelationship.key
              ? "before"
              : "after";
          }

          var keys = t().VISITOR_KEYS[commonPath.type];
          var targetKeyPosition = keys.indexOf(targetRelationship.key);
          var selfKeyPosition = keys.indexOf(selfRelationship.key);
          return targetKeyPosition > selfKeyPosition ? "before" : "after";
        }

        function _guessExecutionStatusRelativeToDifferentFunctions(
          targetFuncParent
        ) {
          var targetFuncPath = targetFuncParent.path;
          if (!targetFuncPath.isFunctionDeclaration()) return;
          var binding = targetFuncPath.scope.getBinding(
            targetFuncPath.node.id.name
          );
          if (!binding.references) return "before";
          var referencePaths = binding.referencePaths;

          for (
            var _iterator = referencePaths,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var path = _ref;

            if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
              return;
            }
          }

          var allStatus;

          for (
            var _iterator2 = referencePaths,
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2
                ? _iterator2
                : _iterator2[Symbol.iterator]();
            ;

          ) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var _path = _ref2;
            var childOfFunction = !!_path.find(function(path) {
              return path.node === targetFuncPath.node;
            });
            if (childOfFunction) continue;

            var status = this._guessExecutionStatusRelativeTo(_path);

            if (allStatus) {
              if (allStatus !== status) return;
            } else {
              allStatus = status;
            }
          }

          return allStatus;
        }

        function resolve(dangerous, resolved) {
          return this._resolve(dangerous, resolved) || this;
        }

        function _resolve(dangerous, resolved) {
          if (resolved && resolved.indexOf(this) >= 0) return;
          resolved = resolved || [];
          resolved.push(this);

          if (this.isVariableDeclarator()) {
            if (this.get("id").isIdentifier()) {
              return this.get("init").resolve(dangerous, resolved);
            } else {
            }
          } else if (this.isReferencedIdentifier()) {
            var binding = this.scope.getBinding(this.node.name);
            if (!binding) return;
            if (!binding.constant) return;
            if (binding.kind === "module") return;

            if (binding.path !== this) {
              var ret = binding.path.resolve(dangerous, resolved);
              if (
                this.find(function(parent) {
                  return parent.node === ret.node;
                })
              )
                return;
              return ret;
            }
          } else if (this.isTypeCastExpression()) {
            return this.get("expression").resolve(dangerous, resolved);
          } else if (dangerous && this.isMemberExpression()) {
            var targetKey = this.toComputedKey();
            if (!t().isLiteral(targetKey)) return;
            var targetName = targetKey.value;
            var target = this.get("object").resolve(dangerous, resolved);

            if (target.isObjectExpression()) {
              var props = target.get("properties");
              var _arr = props;

              for (var _i3 = 0; _i3 < _arr.length; _i3++) {
                var prop = _arr[_i3];
                if (!prop.isProperty()) continue;
                var key = prop.get("key");
                var match =
                  prop.isnt("computed") &&
                  key.isIdentifier({
                    name: targetName
                  });
                match =
                  match ||
                  key.isLiteral({
                    value: targetName
                  });
                if (match)
                  return prop.get("value").resolve(dangerous, resolved);
              }
            } else if (target.isArrayExpression() && !isNaN(+targetName)) {
              var elems = target.get("elements");
              var elem = elems[targetName];
              if (elem) return elem.resolve(dangerous, resolved);
            }
          }
        }

        function isConstantExpression() {
          if (this.isIdentifier()) {
            var binding = this.scope.getBinding(this.node.name);

            if (!binding) {
              return false;
            }

            return (
              binding.constant &&
              binding.path.get("init").isConstantExpression()
            );
          }

          if (this.isLiteral()) {
            if (this.isRegExpLiteral()) {
              return false;
            }

            if (this.isTemplateLiteral()) {
              return this.get("expressions").every(function(expression) {
                return expression.isConstantExpression();
              });
            }

            return true;
          }

          if (this.isUnaryExpression()) {
            if (this.get("operator").node !== "void") {
              return false;
            }

            return this.get("argument").isConstantExpression();
          }

          if (this.isBinaryExpression()) {
            return (
              this.get("left").isConstantExpression() &&
              this.get("right").isConstantExpression()
            );
          }

          return false;
        }

        function isInStrictMode() {
          var start = this.isProgram() ? this : this.parentPath;
          var strictParent = start.find(function(path) {
            if (
              path.isProgram({
                sourceType: "module"
              })
            )
              return true;
            if (path.isClass()) return true;
            if (!path.isProgram() && !path.isFunction()) return false;

            if (
              path.isArrowFunctionExpression() &&
              !path.get("body").isBlockStatement()
            ) {
              return false;
            }

            var node = path.node;
            if (path.isFunction()) node = node.body;

            for (
              var _iterator3 = node.directives,
                _isArray3 = Array.isArray(_iterator3),
                _i4 = 0,
                _iterator3 = _isArray3
                  ? _iterator3
                  : _iterator3[Symbol.iterator]();
              ;

            ) {
              var _ref3;

              if (_isArray3) {
                if (_i4 >= _iterator3.length) break;
                _ref3 = _iterator3[_i4++];
              } else {
                _i4 = _iterator3.next();
                if (_i4.done) break;
                _ref3 = _i4.value;
              }

              var directive = _ref3;

              if (directive.value.value === "use strict") {
                return true;
              }
            }
          });
          return !!strictParent;
        }

        /***/
      },
      /* 437 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.call = call;
        exports._call = _call;
        exports.isBlacklisted = isBlacklisted;
        exports.visit = visit;
        exports.skip = skip;
        exports.skipKey = skipKey;
        exports.stop = stop;
        exports.setScope = setScope;
        exports.setContext = setContext;
        exports.resync = resync;
        exports._resyncParent = _resyncParent;
        exports._resyncKey = _resyncKey;
        exports._resyncList = _resyncList;
        exports._resyncRemoved = _resyncRemoved;
        exports.popContext = popContext;
        exports.pushContext = pushContext;
        exports.setup = setup;
        exports.setKey = setKey;
        exports.requeue = requeue;
        exports._getQueueContexts = _getQueueContexts;

        var _index = _interopRequireDefault(__webpack_require__(8));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function call(key) {
          var opts = this.opts;
          this.debug(key);

          if (this.node) {
            if (this._call(opts[key])) return true;
          }

          if (this.node) {
            return this._call(
              opts[this.node.type] && opts[this.node.type][key]
            );
          }

          return false;
        }

        function _call(fns) {
          if (!fns) return false;

          for (
            var _iterator = fns,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var fn = _ref;
            if (!fn) continue;
            var node = this.node;
            if (!node) return true;
            var ret = fn.call(this.state, this, this.state);

            if (
              ret &&
              typeof ret === "object" &&
              typeof ret.then === "function"
            ) {
              throw new Error(
                "You appear to be using a plugin with an async traversal visitor, " +
                  "which your current version of Babel does not support." +
                  "If you're using a published plugin, you may need to upgrade " +
                  "your @babel/core version."
              );
            }

            if (ret) {
              throw new Error(
                "Unexpected return value from visitor method " + fn
              );
            }

            if (this.node !== node) return true;
            if (this.shouldStop || this.shouldSkip || this.removed) return true;
          }

          return false;
        }

        function isBlacklisted() {
          var blacklist = this.opts.blacklist;
          return blacklist && blacklist.indexOf(this.node.type) > -1;
        }

        function visit() {
          if (!this.node) {
            return false;
          }

          if (this.isBlacklisted()) {
            return false;
          }

          if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
            return false;
          }

          if (this.call("enter") || this.shouldSkip) {
            this.debug("Skip...");
            return this.shouldStop;
          }

          this.debug("Recursing into...");

          _index.default.node(
            this.node,
            this.opts,
            this.scope,
            this.state,
            this,
            this.skipKeys
          );

          this.call("exit");
          return this.shouldStop;
        }

        function skip() {
          this.shouldSkip = true;
        }

        function skipKey(key) {
          this.skipKeys[key] = true;
        }

        function stop() {
          this.shouldStop = true;
          this.shouldSkip = true;
        }

        function setScope() {
          if (this.opts && this.opts.noScope) return;
          var path = this.parentPath;
          var target;

          while (path && !target) {
            if (path.opts && path.opts.noScope) return;
            target = path.scope;
            path = path.parentPath;
          }

          this.scope = this.getScope(target);
          if (this.scope) this.scope.init();
        }

        function setContext(context) {
          this.shouldSkip = false;
          this.shouldStop = false;
          this.removed = false;
          this.skipKeys = {};

          if (context) {
            this.context = context;
            this.state = context.state;
            this.opts = context.opts;
          }

          this.setScope();
          return this;
        }

        function resync() {
          if (this.removed) return;

          this._resyncParent();

          this._resyncList();

          this._resyncKey();
        }

        function _resyncParent() {
          if (this.parentPath) {
            this.parent = this.parentPath.node;
          }
        }

        function _resyncKey() {
          if (!this.container) return;
          if (this.node === this.container[this.key]) return;

          if (Array.isArray(this.container)) {
            for (var i = 0; i < this.container.length; i++) {
              if (this.container[i] === this.node) {
                return this.setKey(i);
              }
            }
          } else {
            for (var key in this.container) {
              if (this.container[key] === this.node) {
                return this.setKey(key);
              }
            }
          }

          this.key = null;
        }

        function _resyncList() {
          if (!this.parent || !this.inList) return;
          var newContainer = this.parent[this.listKey];
          if (this.container === newContainer) return;
          this.container = newContainer || null;
        }

        function _resyncRemoved() {
          if (
            this.key == null ||
            !this.container ||
            this.container[this.key] !== this.node
          ) {
            this._markRemoved();
          }
        }

        function popContext() {
          this.contexts.pop();

          if (this.contexts.length > 0) {
            this.setContext(this.contexts[this.contexts.length - 1]);
          } else {
            this.setContext(undefined);
          }
        }

        function pushContext(context) {
          this.contexts.push(context);
          this.setContext(context);
        }

        function setup(parentPath, container, listKey, key) {
          this.inList = !!listKey;
          this.listKey = listKey;
          this.parentKey = listKey || key;
          this.container = container;
          this.parentPath = parentPath || this.parentPath;
          this.setKey(key);
        }

        function setKey(key) {
          this.key = key;
          this.node = this.container[this.key];
          this.type = this.node && this.node.type;
        }

        function requeue(pathToQueue) {
          if (pathToQueue === void 0) {
            pathToQueue = this;
          }

          if (pathToQueue.removed) return;
          var contexts = this.contexts;

          for (
            var _iterator2 = contexts,
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2
                ? _iterator2
                : _iterator2[Symbol.iterator]();
            ;

          ) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var context = _ref2;
            context.maybeQueue(pathToQueue);
          }
        }

        function _getQueueContexts() {
          var path = this;
          var contexts = this.contexts;

          while (!contexts.length) {
            path = path.parentPath;
            if (!path) break;
            contexts = path.contexts;
          }

          return contexts;
        }

        /***/
      },
      /* 438 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.remove = remove;
        exports._removeFromScope = _removeFromScope;
        exports._callRemovalHooks = _callRemovalHooks;
        exports._remove = _remove;
        exports._markRemoved = _markRemoved;
        exports._assertUnremoved = _assertUnremoved;

        var _removalHooks = __webpack_require__(439);

        function remove() {
          this._assertUnremoved();

          this.resync();

          this._removeFromScope();

          if (this._callRemovalHooks()) {
            this._markRemoved();

            return;
          }

          this.shareCommentsWithSiblings();

          this._remove();

          this._markRemoved();
        }

        function _removeFromScope() {
          var _this = this;

          var bindings = this.getBindingIdentifiers();
          Object.keys(bindings).forEach(function(name) {
            return _this.scope.removeBinding(name);
          });
        }

        function _callRemovalHooks() {
          var _arr = _removalHooks.hooks;

          for (var _i = 0; _i < _arr.length; _i++) {
            var fn = _arr[_i];
            if (fn(this, this.parentPath)) return true;
          }
        }

        function _remove() {
          if (Array.isArray(this.container)) {
            this.container.splice(this.key, 1);
            this.updateSiblingKeys(this.key, -1);
          } else {
            this._replaceWith(null);
          }
        }

        function _markRemoved() {
          this.shouldSkip = true;
          this.removed = true;
          this.node = null;
        }

        function _assertUnremoved() {
          if (this.removed) {
            throw this.buildCodeFrameError(
              "NodePath has been removed so is read-only."
            );
          }
        }

        /***/
      },
      /* 439 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.hooks = void 0;
        var hooks = [
          function(self, parent) {
            var removeParent =
              (self.key === "test" &&
                (parent.isWhile() || parent.isSwitchCase())) ||
              (self.key === "declaration" && parent.isExportDeclaration()) ||
              (self.key === "body" && parent.isLabeledStatement()) ||
              (self.listKey === "declarations" &&
                parent.isVariableDeclaration() &&
                parent.node.declarations.length === 1) ||
              (self.key === "expression" && parent.isExpressionStatement());

            if (removeParent) {
              parent.remove();
              return true;
            }
          },
          function(self, parent) {
            if (
              parent.isSequenceExpression() &&
              parent.node.expressions.length === 1
            ) {
              parent.replaceWith(parent.node.expressions[0]);
              return true;
            }
          },
          function(self, parent) {
            if (parent.isBinary()) {
              if (self.key === "left") {
                parent.replaceWith(parent.node.right);
              } else {
                parent.replaceWith(parent.node.left);
              }

              return true;
            }
          },
          function(self, parent) {
            if (
              (parent.isIfStatement() &&
                (self.key === "consequent" || self.key === "alternate")) ||
              (self.key === "body" &&
                (parent.isLoop() || parent.isArrowFunctionExpression()))
            ) {
              self.replaceWith({
                type: "BlockStatement",
                body: []
              });
              return true;
            }
          }
        ];
        exports.hooks = hooks;

        /***/
      },
      /* 440 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.insertBefore = insertBefore;
        exports._containerInsert = _containerInsert;
        exports._containerInsertBefore = _containerInsertBefore;
        exports._containerInsertAfter = _containerInsertAfter;
        exports.insertAfter = insertAfter;
        exports.updateSiblingKeys = updateSiblingKeys;
        exports._verifyNodeList = _verifyNodeList;
        exports.unshiftContainer = unshiftContainer;
        exports.pushContainer = pushContainer;
        exports.hoist = hoist;

        var _cache = __webpack_require__(49);

        var _hoister = _interopRequireDefault(__webpack_require__(441));

        var _index = _interopRequireDefault(__webpack_require__(23));

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function insertBefore(nodes) {
          this._assertUnremoved();

          nodes = this._verifyNodeList(nodes);
          var parentPath = this.parentPath;

          if (
            parentPath.isExpressionStatement() ||
            parentPath.isLabeledStatement() ||
            parentPath.isExportNamedDeclaration() ||
            (parentPath.isExportDefaultDeclaration() && this.isDeclaration())
          ) {
            return parentPath.insertBefore(nodes);
          } else if (
            (this.isNodeType("Expression") &&
              this.listKey !== "params" &&
              this.listKey !== "arguments") ||
            (parentPath.isForStatement() && this.key === "init")
          ) {
            if (this.node) nodes.push(this.node);
            return this.replaceExpressionWithStatements(nodes);
          } else if (Array.isArray(this.container)) {
            return this._containerInsertBefore(nodes);
          } else if (this.isStatementOrBlock()) {
            var shouldInsertCurrentNode =
              this.node &&
              (!this.isExpressionStatement() || this.node.expression != null);
            this.replaceWith(
              t().blockStatement(shouldInsertCurrentNode ? [this.node] : [])
            );
            return this.unshiftContainer("body", nodes);
          } else {
            throw new Error(
              "We don't know what to do with this node type. " +
                "We were previously a Statement but we can't fit in here?"
            );
          }
        }

        function _containerInsert(from, nodes) {
          var _container;

          this.updateSiblingKeys(from, nodes.length);
          var paths = [];

          (_container = this.container).splice.apply(
            _container,
            [from, 0].concat(nodes)
          );

          for (var i = 0; i < nodes.length; i++) {
            var to = from + i;
            var path = this.getSibling(to);
            paths.push(path);

            if (this.context && this.context.queue) {
              path.pushContext(this.context);
            }
          }

          var contexts = this._getQueueContexts();

          for (var _i = 0; _i < paths.length; _i++) {
            var _path = paths[_i];

            _path.setScope();

            _path.debug("Inserted.");

            for (
              var _iterator = contexts,
                _isArray = Array.isArray(_iterator),
                _i2 = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i2 >= _iterator.length) break;
                _ref = _iterator[_i2++];
              } else {
                _i2 = _iterator.next();
                if (_i2.done) break;
                _ref = _i2.value;
              }

              var context = _ref;
              context.maybeQueue(_path, true);
            }
          }

          return paths;
        }

        function _containerInsertBefore(nodes) {
          return this._containerInsert(this.key, nodes);
        }

        function _containerInsertAfter(nodes) {
          return this._containerInsert(this.key + 1, nodes);
        }

        function insertAfter(nodes) {
          this._assertUnremoved();

          nodes = this._verifyNodeList(nodes);
          var parentPath = this.parentPath;

          if (
            parentPath.isExpressionStatement() ||
            parentPath.isLabeledStatement() ||
            parentPath.isExportNamedDeclaration() ||
            (parentPath.isExportDefaultDeclaration() && this.isDeclaration())
          ) {
            return parentPath.insertAfter(nodes);
          } else if (
            this.isNodeType("Expression") ||
            (parentPath.isForStatement() && this.key === "init")
          ) {
            if (this.node) {
              var scope = this.scope;

              if (
                parentPath.isMethod({
                  computed: true,
                  key: this.node
                })
              ) {
                scope = scope.parent;
              }

              var temp = scope.generateDeclaredUidIdentifier();
              nodes.unshift(
                t().expressionStatement(
                  t().assignmentExpression("=", t().cloneNode(temp), this.node)
                )
              );
              nodes.push(t().expressionStatement(t().cloneNode(temp)));
            }

            return this.replaceExpressionWithStatements(nodes);
          } else if (Array.isArray(this.container)) {
            return this._containerInsertAfter(nodes);
          } else if (this.isStatementOrBlock()) {
            var shouldInsertCurrentNode =
              this.node &&
              (!this.isExpressionStatement() || this.node.expression != null);
            this.replaceWith(
              t().blockStatement(shouldInsertCurrentNode ? [this.node] : [])
            );
            return this.pushContainer("body", nodes);
          } else {
            throw new Error(
              "We don't know what to do with this node type. " +
                "We were previously a Statement but we can't fit in here?"
            );
          }
        }

        function updateSiblingKeys(fromIndex, incrementBy) {
          if (!this.parent) return;

          var paths = _cache.path.get(this.parent);

          for (var i = 0; i < paths.length; i++) {
            var path = paths[i];

            if (path.key >= fromIndex) {
              path.key += incrementBy;
            }
          }
        }

        function _verifyNodeList(nodes) {
          if (!nodes) {
            return [];
          }

          if (nodes.constructor !== Array) {
            nodes = [nodes];
          }

          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            var msg = void 0;

            if (!node) {
              msg = "has falsy node";
            } else if (typeof node !== "object") {
              msg = "contains a non-object node";
            } else if (!node.type) {
              msg = "without a type";
            } else if (node instanceof _index.default) {
              msg = "has a NodePath when it expected a raw object";
            }

            if (msg) {
              var type = Array.isArray(node) ? "array" : typeof node;
              throw new Error(
                "Node list " +
                  msg +
                  " with the index of " +
                  i +
                  " and type of " +
                  type
              );
            }
          }

          return nodes;
        }

        function unshiftContainer(listKey, nodes) {
          this._assertUnremoved();

          nodes = this._verifyNodeList(nodes);

          var path = _index.default.get({
            parentPath: this,
            parent: this.node,
            container: this.node[listKey],
            listKey: listKey,
            key: 0
          });

          return path.insertBefore(nodes);
        }

        function pushContainer(listKey, nodes) {
          this._assertUnremoved();

          nodes = this._verifyNodeList(nodes);
          var container = this.node[listKey];

          var path = _index.default.get({
            parentPath: this,
            parent: this.node,
            container: container,
            listKey: listKey,
            key: container.length
          });

          return path.replaceWithMultiple(nodes);
        }

        function hoist(scope) {
          if (scope === void 0) {
            scope = this.scope;
          }

          var hoister = new _hoister.default(this, scope);
          return hoister.run();
        }

        /***/
      },
      /* 441 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var referenceVisitor = {
          ReferencedIdentifier: function ReferencedIdentifier(path, state) {
            if (
              path.isJSXIdentifier() &&
              t().react.isCompatTag(path.node.name) &&
              !path.parentPath.isJSXMemberExpression()
            ) {
              return;
            }

            if (path.node.name === "this") {
              var scope = path.scope;

              do {
                if (
                  scope.path.isFunction() &&
                  !scope.path.isArrowFunctionExpression()
                ) {
                  break;
                }
              } while ((scope = scope.parent));

              if (scope) state.breakOnScopePaths.push(scope.path);
            }

            var binding = path.scope.getBinding(path.node.name);
            if (!binding) return;
            if (binding !== state.scope.getBinding(path.node.name)) return;
            state.bindings[path.node.name] = binding;
          }
        };

        var PathHoister = (function() {
          function PathHoister(path, scope) {
            this.breakOnScopePaths = [];
            this.bindings = {};
            this.scopes = [];
            this.scope = scope;
            this.path = path;
            this.attachAfter = false;
          }

          var _proto = PathHoister.prototype;

          _proto.isCompatibleScope = function isCompatibleScope(scope) {
            for (var key in this.bindings) {
              var binding = this.bindings[key];

              if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
                return false;
              }
            }

            return true;
          };

          _proto.getCompatibleScopes = function getCompatibleScopes() {
            var scope = this.path.scope;

            do {
              if (this.isCompatibleScope(scope)) {
                this.scopes.push(scope);
              } else {
                break;
              }

              if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
                break;
              }
            } while ((scope = scope.parent));
          };

          _proto.getAttachmentPath = function getAttachmentPath() {
            var path = this._getAttachmentPath();

            if (!path) return;
            var targetScope = path.scope;

            if (targetScope.path === path) {
              targetScope = path.scope.parent;
            }

            if (targetScope.path.isProgram() || targetScope.path.isFunction()) {
              for (var name in this.bindings) {
                if (!targetScope.hasOwnBinding(name)) continue;
                var binding = this.bindings[name];

                if (
                  binding.kind === "param" ||
                  binding.path.parentKey === "params"
                ) {
                  continue;
                }

                var bindingParentPath = this.getAttachmentParentForPath(
                  binding.path
                );

                if (bindingParentPath.key >= path.key) {
                  this.attachAfter = true;
                  path = binding.path;
                  var _arr = binding.constantViolations;

                  for (var _i = 0; _i < _arr.length; _i++) {
                    var violationPath = _arr[_i];

                    if (
                      this.getAttachmentParentForPath(violationPath).key >
                      path.key
                    ) {
                      path = violationPath;
                    }
                  }
                }
              }
            }

            return path;
          };

          _proto._getAttachmentPath = function _getAttachmentPath() {
            var scopes = this.scopes;
            var scope = scopes.pop();
            if (!scope) return;

            if (scope.path.isFunction()) {
              if (this.hasOwnParamBindings(scope)) {
                if (this.scope === scope) return;
                var bodies = scope.path.get("body").get("body");

                for (var i = 0; i < bodies.length; i++) {
                  if (bodies[i].node._blockHoist) continue;
                  return bodies[i];
                }
              } else {
                return this.getNextScopeAttachmentParent();
              }
            } else if (scope.path.isProgram()) {
              return this.getNextScopeAttachmentParent();
            }
          };

          _proto.getNextScopeAttachmentParent = function getNextScopeAttachmentParent() {
            var scope = this.scopes.pop();
            if (scope) return this.getAttachmentParentForPath(scope.path);
          };

          _proto.getAttachmentParentForPath = function getAttachmentParentForPath(
            path
          ) {
            do {
              if (
                !path.parentPath ||
                (Array.isArray(path.container) && path.isStatement())
              ) {
                return path;
              }
            } while ((path = path.parentPath));
          };

          _proto.hasOwnParamBindings = function hasOwnParamBindings(scope) {
            for (var name in this.bindings) {
              if (!scope.hasOwnBinding(name)) continue;
              var binding = this.bindings[name];
              if (binding.kind === "param" && binding.constant) return true;
            }

            return false;
          };

          _proto.run = function run() {
            this.path.traverse(referenceVisitor, this);
            this.getCompatibleScopes();
            var attachTo = this.getAttachmentPath();
            if (!attachTo) return;
            if (attachTo.getFunctionParent() === this.path.getFunctionParent())
              return;
            var uid = attachTo.scope.generateUidIdentifier("ref");
            var declarator = t().variableDeclarator(uid, this.path.node);
            var insertFn = this.attachAfter ? "insertAfter" : "insertBefore";

            var _attachTo$insertFn = attachTo[insertFn]([
                attachTo.isVariableDeclarator()
                  ? declarator
                  : t().variableDeclaration("var", [declarator])
              ]),
              attached = _attachTo$insertFn[0];

            var parent = this.path.parentPath;

            if (
              parent.isJSXElement() &&
              this.path.container === parent.node.children
            ) {
              uid = t().JSXExpressionContainer(uid);
            }

            this.path.replaceWith(t().cloneNode(uid));
            return attachTo.isVariableDeclarator()
              ? attached.get("init")
              : attached.get("declarations.0.init");
          };

          return PathHoister;
        })();

        exports.default = PathHoister;

        /***/
      },
      /* 442 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getOpposite = getOpposite;
        exports.getCompletionRecords = getCompletionRecords;
        exports.getSibling = getSibling;
        exports.getPrevSibling = getPrevSibling;
        exports.getNextSibling = getNextSibling;
        exports.getAllNextSiblings = getAllNextSiblings;
        exports.getAllPrevSiblings = getAllPrevSiblings;
        exports.get = get;
        exports._getKey = _getKey;
        exports._getPattern = _getPattern;
        exports.getBindingIdentifiers = getBindingIdentifiers;
        exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
        exports.getBindingIdentifierPaths = getBindingIdentifierPaths;
        exports.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;

        var _index = _interopRequireDefault(__webpack_require__(23));

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function getOpposite() {
          if (this.key === "left") {
            return this.getSibling("right");
          } else if (this.key === "right") {
            return this.getSibling("left");
          }
        }

        function addCompletionRecords(path, paths) {
          if (path) return paths.concat(path.getCompletionRecords());
          return paths;
        }

        function getCompletionRecords() {
          var paths = [];

          if (this.isIfStatement()) {
            paths = addCompletionRecords(this.get("consequent"), paths);
            paths = addCompletionRecords(this.get("alternate"), paths);
          } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {
            paths = addCompletionRecords(this.get("body"), paths);
          } else if (this.isProgram() || this.isBlockStatement()) {
            paths = addCompletionRecords(this.get("body").pop(), paths);
          } else if (this.isFunction()) {
            return this.get("body").getCompletionRecords();
          } else if (this.isTryStatement()) {
            paths = addCompletionRecords(this.get("block"), paths);
            paths = addCompletionRecords(this.get("handler"), paths);
            paths = addCompletionRecords(this.get("finalizer"), paths);
          } else if (this.isCatchClause()) {
            paths = addCompletionRecords(this.get("body"), paths);
          } else {
            paths.push(this);
          }

          return paths;
        }

        function getSibling(key) {
          return _index.default.get({
            parentPath: this.parentPath,
            parent: this.parent,
            container: this.container,
            listKey: this.listKey,
            key: key
          });
        }

        function getPrevSibling() {
          return this.getSibling(this.key - 1);
        }

        function getNextSibling() {
          return this.getSibling(this.key + 1);
        }

        function getAllNextSiblings() {
          var _key = this.key;
          var sibling = this.getSibling(++_key);
          var siblings = [];

          while (sibling.node) {
            siblings.push(sibling);
            sibling = this.getSibling(++_key);
          }

          return siblings;
        }

        function getAllPrevSiblings() {
          var _key = this.key;
          var sibling = this.getSibling(--_key);
          var siblings = [];

          while (sibling.node) {
            siblings.push(sibling);
            sibling = this.getSibling(--_key);
          }

          return siblings;
        }

        function get(key, context) {
          if (context === true) context = this.context;
          var parts = key.split(".");

          if (parts.length === 1) {
            return this._getKey(key, context);
          } else {
            return this._getPattern(parts, context);
          }
        }

        function _getKey(key, context) {
          var _this = this;

          var node = this.node;
          var container = node[key];

          if (Array.isArray(container)) {
            return container.map(function(_, i) {
              return _index.default
                .get({
                  listKey: key,
                  parentPath: _this,
                  parent: node,
                  container: container,
                  key: i
                })
                .setContext(context);
            });
          } else {
            return _index.default
              .get({
                parentPath: this,
                parent: node,
                container: node,
                key: key
              })
              .setContext(context);
          }
        }

        function _getPattern(parts, context) {
          var path = this;
          var _arr = parts;

          for (var _i = 0; _i < _arr.length; _i++) {
            var part = _arr[_i];

            if (part === ".") {
              path = path.parentPath;
            } else {
              if (Array.isArray(path)) {
                path = path[part];
              } else {
                path = path.get(part, context);
              }
            }
          }

          return path;
        }

        function getBindingIdentifiers(duplicates) {
          return t().getBindingIdentifiers(this.node, duplicates);
        }

        function getOuterBindingIdentifiers(duplicates) {
          return t().getOuterBindingIdentifiers(this.node, duplicates);
        }

        function getBindingIdentifierPaths(duplicates, outerOnly) {
          if (duplicates === void 0) {
            duplicates = false;
          }

          if (outerOnly === void 0) {
            outerOnly = false;
          }

          var path = this;
          var search = [].concat(path);
          var ids = Object.create(null);

          while (search.length) {
            var id = search.shift();
            if (!id) continue;
            if (!id.node) continue;
            var keys = t().getBindingIdentifiers.keys[id.node.type];

            if (id.isIdentifier()) {
              if (duplicates) {
                var _ids = (ids[id.node.name] = ids[id.node.name] || []);

                _ids.push(id);
              } else {
                ids[id.node.name] = id;
              }

              continue;
            }

            if (id.isExportDeclaration()) {
              var declaration = id.get("declaration");

              if (declaration.isDeclaration()) {
                search.push(declaration);
              }

              continue;
            }

            if (outerOnly) {
              if (id.isFunctionDeclaration()) {
                search.push(id.get("id"));
                continue;
              }

              if (id.isFunctionExpression()) {
                continue;
              }
            }

            if (keys) {
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var child = id.get(key);

                if (Array.isArray(child) || child.node) {
                  search = search.concat(child);
                }
              }
            }
          }

          return ids;
        }

        function getOuterBindingIdentifierPaths(duplicates) {
          return this.getBindingIdentifierPaths(duplicates, true);
        }

        /***/
      },
      /* 443 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
        exports.addComment = addComment;
        exports.addComments = addComments;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function shareCommentsWithSiblings() {
          if (typeof this.key === "string") return;
          var node = this.node;
          if (!node) return;
          var trailing = node.trailingComments;
          var leading = node.leadingComments;
          if (!trailing && !leading) return;
          var prev = this.getSibling(this.key - 1);
          var next = this.getSibling(this.key + 1);
          var hasPrev = Boolean(prev.node);
          var hasNext = Boolean(next.node);

          if (hasPrev && hasNext) {
          } else if (hasPrev) {
            prev.addComments("trailing", trailing);
          } else if (hasNext) {
            next.addComments("leading", leading);
          }
        }

        function addComment(type, content, line) {
          t().addComment(this.node, type, content, line);
        }

        function addComments(type, comments) {
          t().addComments(this.node, type, comments);
        }

        /***/
      },
      /* 444 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.explode = explode;
        exports.verify = verify;
        exports.merge = merge;

        var virtualTypes = _interopRequireWildcard(__webpack_require__(102));

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _clone() {
          var data = _interopRequireDefault(__webpack_require__(105));

          _clone = function _clone() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function explode(visitor) {
          if (visitor._exploded) return visitor;
          visitor._exploded = true;

          for (var nodeType in visitor) {
            if (shouldIgnoreKey(nodeType)) continue;
            var parts = nodeType.split("|");
            if (parts.length === 1) continue;
            var fns = visitor[nodeType];
            delete visitor[nodeType];

            for (
              var _iterator = parts,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var part = _ref;
              visitor[part] = fns;
            }
          }

          verify(visitor);
          delete visitor.__esModule;
          ensureEntranceObjects(visitor);
          ensureCallbackArrays(visitor);

          var _arr = Object.keys(visitor);

          for (var _i2 = 0; _i2 < _arr.length; _i2++) {
            var _nodeType3 = _arr[_i2];
            if (shouldIgnoreKey(_nodeType3)) continue;
            var wrapper = virtualTypes[_nodeType3];
            if (!wrapper) continue;
            var _fns2 = visitor[_nodeType3];

            for (var type in _fns2) {
              _fns2[type] = wrapCheck(wrapper, _fns2[type]);
            }

            delete visitor[_nodeType3];

            if (wrapper.types) {
              var _arr2 = wrapper.types;

              for (var _i4 = 0; _i4 < _arr2.length; _i4++) {
                var _type = _arr2[_i4];

                if (visitor[_type]) {
                  mergePair(visitor[_type], _fns2);
                } else {
                  visitor[_type] = _fns2;
                }
              }
            } else {
              mergePair(visitor, _fns2);
            }
          }

          for (var _nodeType in visitor) {
            if (shouldIgnoreKey(_nodeType)) continue;
            var _fns = visitor[_nodeType];

            var aliases = t().FLIPPED_ALIAS_KEYS[_nodeType];

            var deprecratedKey = t().DEPRECATED_KEYS[_nodeType];

            if (deprecratedKey) {
              console.trace(
                "Visitor defined for " +
                  _nodeType +
                  " but it has been renamed to " +
                  deprecratedKey
              );
              aliases = [deprecratedKey];
            }

            if (!aliases) continue;
            delete visitor[_nodeType];

            for (
              var _iterator2 = aliases,
                _isArray2 = Array.isArray(_iterator2),
                _i3 = 0,
                _iterator2 = _isArray2
                  ? _iterator2
                  : _iterator2[Symbol.iterator]();
              ;

            ) {
              var _ref2;

              if (_isArray2) {
                if (_i3 >= _iterator2.length) break;
                _ref2 = _iterator2[_i3++];
              } else {
                _i3 = _iterator2.next();
                if (_i3.done) break;
                _ref2 = _i3.value;
              }

              var alias = _ref2;
              var existing = visitor[alias];

              if (existing) {
                mergePair(existing, _fns);
              } else {
                visitor[alias] = (0, _clone().default)(_fns);
              }
            }
          }

          for (var _nodeType2 in visitor) {
            if (shouldIgnoreKey(_nodeType2)) continue;
            ensureCallbackArrays(visitor[_nodeType2]);
          }

          return visitor;
        }

        function verify(visitor) {
          if (visitor._verified) return;

          if (typeof visitor === "function") {
            throw new Error(
              "You passed `traverse()` a function when it expected a visitor object, " +
                "are you sure you didn't mean `{ enter: Function }`?"
            );
          }

          for (var nodeType in visitor) {
            if (nodeType === "enter" || nodeType === "exit") {
              validateVisitorMethods(nodeType, visitor[nodeType]);
            }

            if (shouldIgnoreKey(nodeType)) continue;

            if (t().TYPES.indexOf(nodeType) < 0) {
              throw new Error(
                "You gave us a visitor for the node type " +
                  nodeType +
                  " but it's not a valid type"
              );
            }

            var visitors = visitor[nodeType];

            if (typeof visitors === "object") {
              for (var visitorKey in visitors) {
                if (visitorKey === "enter" || visitorKey === "exit") {
                  validateVisitorMethods(
                    nodeType + "." + visitorKey,
                    visitors[visitorKey]
                  );
                } else {
                  throw new Error(
                    "You passed `traverse()` a visitor object with the property " +
                      (nodeType +
                        " that has the invalid property " +
                        visitorKey)
                  );
                }
              }
            }
          }

          visitor._verified = true;
        }

        function validateVisitorMethods(path, val) {
          var fns = [].concat(val);

          for (
            var _iterator3 = fns,
              _isArray3 = Array.isArray(_iterator3),
              _i5 = 0,
              _iterator3 = _isArray3
                ? _iterator3
                : _iterator3[Symbol.iterator]();
            ;

          ) {
            var _ref3;

            if (_isArray3) {
              if (_i5 >= _iterator3.length) break;
              _ref3 = _iterator3[_i5++];
            } else {
              _i5 = _iterator3.next();
              if (_i5.done) break;
              _ref3 = _i5.value;
            }

            var fn = _ref3;

            if (typeof fn !== "function") {
              throw new TypeError(
                "Non-function found defined in " +
                  path +
                  " with type " +
                  typeof fn
              );
            }
          }
        }

        function merge(visitors, states, wrapper) {
          if (states === void 0) {
            states = [];
          }

          var rootVisitor = {};

          for (var i = 0; i < visitors.length; i++) {
            var visitor = visitors[i];
            var state = states[i];
            explode(visitor);

            for (var type in visitor) {
              var visitorType = visitor[type];

              if (state || wrapper) {
                visitorType = wrapWithStateOrWrapper(
                  visitorType,
                  state,
                  wrapper
                );
              }

              var nodeVisitor = (rootVisitor[type] = rootVisitor[type] || {});
              mergePair(nodeVisitor, visitorType);
            }
          }

          return rootVisitor;
        }

        function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
          var newVisitor = {};

          var _loop = function _loop(key) {
            var fns = oldVisitor[key];
            if (!Array.isArray(fns)) return "continue";
            fns = fns.map(function(fn) {
              var newFn = fn;

              if (state) {
                newFn = function newFn(path) {
                  return fn.call(state, path, state);
                };
              }

              if (wrapper) {
                newFn = wrapper(state.key, key, newFn);
              }

              return newFn;
            });
            newVisitor[key] = fns;
          };

          for (var key in oldVisitor) {
            var _ret = _loop(key);

            if (_ret === "continue") continue;
          }

          return newVisitor;
        }

        function ensureEntranceObjects(obj) {
          for (var key in obj) {
            if (shouldIgnoreKey(key)) continue;
            var fns = obj[key];

            if (typeof fns === "function") {
              obj[key] = {
                enter: fns
              };
            }
          }
        }

        function ensureCallbackArrays(obj) {
          if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
          if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
        }

        function wrapCheck(wrapper, fn) {
          var newFn = function newFn(path) {
            if (wrapper.checkPath(path)) {
              return fn.apply(this, arguments);
            }
          };

          newFn.toString = function() {
            return fn.toString();
          };

          return newFn;
        }

        function shouldIgnoreKey(key) {
          if (key[0] === "_") return true;
          if (key === "enter" || key === "exit" || key === "shouldSkip")
            return true;

          if (key === "blacklist" || key === "noScope" || key === "skipKeys") {
            return true;
          }

          return false;
        }

        function mergePair(dest, src) {
          for (var key in src) {
            dest[key] = [].concat(dest[key] || [], src[key]);
          }
        }

        /***/
      },
      /* 445 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var Hub = function Hub(file) {
          this.file = file;
        };

        exports.default = Hub;

        /***/
      },
      /* 446 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _template() {
          var data = _interopRequireDefault(__webpack_require__(21));

          _template = function _template() {
            return data;
          };

          return data;
        }

        var _templateObject = _taggedTemplateLiteralLoose([
            '\n  export default function _typeof(obj) {\n    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {\n      _typeof = function (obj) { return typeof obj; };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype\n          ? "symbol"\n          : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n'
          ]),
          _templateObject2 = _taggedTemplateLiteralLoose([
            '\n  var REACT_ELEMENT_TYPE;\n\n  export default function _createRawReactElement(type, props, key, children) {\n    if (!REACT_ELEMENT_TYPE) {\n      REACT_ELEMENT_TYPE = (\n        typeof Symbol === "function" && Symbol.for && Symbol.for("react.element")\n      ) || 0xeac7;\n    }\n\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      // If we\'re going to assign props.children, we create a new object now\n      // to avoid mutating defaultProps.\n      props = {\n        children: void 0,\n      };\n    }\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = new Array(childrenLength);\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : \'\' + key,\n      ref: null,\n      props: props,\n      _owner: null,\n    };\n  }\n'
          ]),
          _templateObject3 = _taggedTemplateLiteralLoose([
            '\n  export default function _asyncIterator(iterable) {\n    var method\n    if (typeof Symbol === "function") {\n      if (Symbol.asyncIterator) {\n        method = iterable[Symbol.asyncIterator]\n        if (method != null) return method.call(iterable);\n      }\n      if (Symbol.iterator) {\n        method = iterable[Symbol.iterator]\n        if (method != null) return method.call(iterable);\n      }\n    }\n    throw new TypeError("Object is not async iterable");\n  }\n'
          ]),
          _templateObject4 = _taggedTemplateLiteralLoose([
            "\n  export default function _AwaitValue(value) {\n    this.wrapped = value;\n  }\n"
          ]),
          _templateObject5 = _taggedTemplateLiteralLoose([
            '\n  import AwaitValue from "AwaitValue";\n\n  export default function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null,\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg)\n        var value = result.value;\n        var wrappedAwait = value instanceof AwaitValue;\n\n        Promise.resolve(wrappedAwait ? value.wrapped : value).then(\n          function (arg) {\n            if (wrappedAwait) {\n              resume("next", arg);\n              return\n            }\n\n            settle(result.done ? "return" : "normal", arg);\n          },\n          function (err) { resume("throw", err); });\n      } catch (err) {\n        settle("throw", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case "return":\n          front.resolve({ value: value, done: true });\n          break;\n        case "throw":\n          front.reject(value);\n          break;\n        default:\n          front.resolve({ value: value, done: false });\n          break;\n      }\n\n      front = front.next;\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    // Hide "return" method if generator return is not supported\n    if (typeof gen.return !== "function") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === "function" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () { return this; };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };\n  AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };\n  AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };\n'
          ]),
          _templateObject6 = _taggedTemplateLiteralLoose([
            '\n  import AsyncGenerator from "AsyncGenerator";\n\n  export default function _wrapAsyncGenerator(fn) {\n    return function () {\n      return new AsyncGenerator(fn.apply(this, arguments));\n    };\n  }\n'
          ]),
          _templateObject7 = _taggedTemplateLiteralLoose([
            '\n  import AwaitValue from "AwaitValue";\n\n  export default function _awaitAsyncGenerator(value) {\n    return new AwaitValue(value);\n  }\n'
          ]),
          _templateObject8 = _taggedTemplateLiteralLoose([
            '\n  export default function _asyncGeneratorDelegate(inner, awaitWrap) {\n    var iter = {}, waiting = false;\n\n    function pump(key, value) {\n      waiting = true;\n      value = new Promise(function (resolve) { resolve(inner[key](value)); });\n      return { done: false, value: awaitWrap(value) };\n    };\n\n    if (typeof Symbol === "function" && Symbol.iterator) {\n      iter[Symbol.iterator] = function () { return this; };\n    }\n\n    iter.next = function (value) {\n      if (waiting) {\n        waiting = false;\n        return value;\n      }\n      return pump("next", value);\n    };\n\n    if (typeof inner.throw === "function") {\n      iter.throw = function (value) {\n        if (waiting) {\n          waiting = false;\n          throw value;\n        }\n        return pump("throw", value);\n      };\n    }\n\n    if (typeof inner.return === "function") {\n      iter.return = function (value) {\n        return pump("return", value);\n      };\n    }\n\n    return iter;\n  }\n'
          ]),
          _templateObject9 = _taggedTemplateLiteralLoose([
            '\n  export default function _asyncToGenerator(fn) {\n    return function () {\n      var self = this, args = arguments;\n      return new Promise(function (resolve, reject) {\n        var gen = fn.apply(self, args);\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            Promise.resolve(value).then(_next, _throw);\n          }\n        }\n        function _next(value) { step("next", value); }\n        function _throw(err) { step("throw", err); }\n\n        _next();\n      });\n    };\n  }\n'
          ]),
          _templateObject10 = _taggedTemplateLiteralLoose([
            '\n  export default function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError("Cannot call a class as a function");\n    }\n  }\n'
          ]),
          _templateObject11 = _taggedTemplateLiteralLoose([
            '\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i ++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ("value" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  export default function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n'
          ]),
          _templateObject12 = _taggedTemplateLiteralLoose([
            '\n  export default function _defineEnumerableProperties(obj, descs) {\n    for (var key in descs) {\n      var desc = descs[key];\n      desc.configurable = desc.enumerable = true;\n      if ("value" in desc) desc.writable = true;\n      Object.defineProperty(obj, key, desc);\n    }\n\n    // Symbols are not enumerated over by for-in loops. If native\n    // Symbols are available, fetch all of the descs object\'s own\n    // symbol properties and define them on our target object too.\n    if (Object.getOwnPropertySymbols) {\n      var objectSymbols = Object.getOwnPropertySymbols(descs);\n      for (var i = 0; i < objectSymbols.length; i++) {\n        var sym = objectSymbols[i];\n        var desc = descs[sym];\n        desc.configurable = desc.enumerable = true;\n        if ("value" in desc) desc.writable = true;\n        Object.defineProperty(obj, sym, desc);\n      }\n    }\n    return obj;\n  }\n'
          ]),
          _templateObject13 = _taggedTemplateLiteralLoose([
            "\n  export default function _defaults(obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n    return obj;\n  }\n"
          ]),
          _templateObject14 = _taggedTemplateLiteralLoose([
            "\n  export default function _defineProperty(obj, key, value) {\n    // Shortcircuit the slow defineProperty path when possible.\n    // We are trying to avoid issues where setters defined on the\n    // prototype cause side effects under the fast path of simple\n    // assignment. By checking for existence of the property with\n    // the in operator, we can optimize most of this overhead away.\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n"
          ]),
          _templateObject15 = _taggedTemplateLiteralLoose([
            "\n  export default function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n"
          ]),
          _templateObject16 = _taggedTemplateLiteralLoose([
            "\n  import defineProperty from \"defineProperty\";\n\n  export default function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = (arguments[i] != null) ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n      }\n      ownKeys.forEach(function(key) {\n        defineProperty(target, key, source[key]);\n      });\n    }\n    return target;\n  }\n"
          ]),
          _templateObject17 = _taggedTemplateLiteralLoose([
            '\n  import setPrototypeOf from "setPrototypeOf";\n\n  export default function _inherits(subClass, superClass) {\n    if (typeof superClass !== "function" && superClass !== null) {\n      throw new TypeError("Super expression must either be null or a function");\n    }\n    setPrototypeOf(subClass.prototype, superClass && superClass.prototype);\n    if (superClass) setPrototypeOf(subClass, superClass);\n  }\n'
          ]),
          _templateObject18 = _taggedTemplateLiteralLoose([
            "\n  export default function _inheritsLoose(subClass, superClass) {\n    subClass.prototype.__proto__ = superClass && superClass.prototype;\n    subClass.__proto__ = superClass;\n  }\n"
          ]),
          _templateObject19 = _taggedTemplateLiteralLoose([
            "\n  export default function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) {\n      return o.__proto__;\n    };\n    return _getPrototypeOf(o);\n  }\n"
          ]),
          _templateObject20 = _taggedTemplateLiteralLoose([
            "\n  export default function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n    return _setPrototypeOf(o, p);\n  }\n"
          ]),
          _templateObject21 = _taggedTemplateLiteralLoose([
            '\n  import setPrototypeOf from "setPrototypeOf";\n\n  export default function _construct(Parent, args, Class) {\n    if (typeof Reflect !== "undefined" && Reflect.construct) {\n      _construct = Reflect.construct;\n    } else {\n      _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Parent.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n    // Avoid issues with Class being present but undefined when it wasn\'t\n    // present in the original call.\n    return _construct.apply(null, arguments);\n  }\n'
          ]),
          _templateObject22 = _taggedTemplateLiteralLoose([
            '\n  import _gPO from "getPrototypeOf";\n  import _sPO from "setPrototypeOf";\n  import construct from "construct";\n\n  export default function _wrapNativeSuper(Class) {\n    var _cache = typeof Map === "function" ? new Map() : undefined;\n\n    _wrapNativeSuper = function _wrapNativeSuper(Class) {\n      if (typeof Class !== "function") {\n        throw new TypeError("Super expression must either be null or a function");\n      }\n      if (typeof _cache !== "undefined") {\n        if (_cache.has(Class)) return _cache.get(Class);\n        _cache.set(Class, Wrapper);\n      }\n      function Wrapper() {}\n      Wrapper.prototype = Object.create(Class.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: false,\n          writable: true,\n          configurable: true,\n        }\n      });\n      return _sPO(\n        Wrapper,\n        _sPO(\n          function Super() {\n            return construct(Class, arguments, _gPO(this).constructor);\n          },\n          Class\n        )\n      );\n    }\n\n    return _wrapNativeSuper(Class)\n  }\n'
          ]),
          _templateObject23 = _taggedTemplateLiteralLoose([
            '\n  export default function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {\n      return right[Symbol.hasInstance](left);\n    } else {\n      return left instanceof right;\n    }\n  }\n'
          ]),
          _templateObject24 = _taggedTemplateLiteralLoose([
            "\n  export default function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  }\n"
          ]),
          _templateObject25 = _taggedTemplateLiteralLoose([
            "\n  export default function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor\n              ? Object.getOwnPropertyDescriptor(obj, key)\n              : {};\n            if (desc.get || desc.set) {\n              Object.defineProperty(newObj, key, desc);\n            } else {\n              newObj[key] = obj[key];\n            }\n          }\n        }\n      }\n      newObj.default = obj;\n      return newObj;\n    }\n  }\n"
          ]),
          _templateObject26 = _taggedTemplateLiteralLoose([
            '\n  export default function _newArrowCheck(innerThis, boundThis) {\n    if (innerThis !== boundThis) {\n      throw new TypeError("Cannot instantiate an arrow function");\n    }\n  }\n'
          ]),
          _templateObject27 = _taggedTemplateLiteralLoose([
            '\n  export default function _objectDestructuringEmpty(obj) {\n    if (obj == null) throw new TypeError("Cannot destructure undefined");\n  }\n'
          ]),
          _templateObject28 = _taggedTemplateLiteralLoose([
            "\n  export default function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n"
          ]),
          _templateObject29 = _taggedTemplateLiteralLoose([
            "\n  export default function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n  }\n"
          ]),
          _templateObject30 = _taggedTemplateLiteralLoose([
            '\n  import assertThisInitialized from "assertThisInitialized";\n\n  export default function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === "object" || typeof call === "function")) {\n      return call;\n    }\n    return assertThisInitialized(self);\n  }\n'
          ]),
          _templateObject31 = _taggedTemplateLiteralLoose([
            '\n  import getPrototypeOf from "getPrototypeOf";\n\n  export default function _superPropBase(object, property) {\n    // Yes, this throws if object is null to being with, that\'s on purpose.\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = getPrototypeOf(object);\n      if (object === null) break;\n    }\n    return object;\n  }\n'
          ]),
          _templateObject32 = _taggedTemplateLiteralLoose([
            '\n  import getPrototypeOf from "getPrototypeOf";\n  import superPropBase from "superPropBase";\n\n  export default function _get(target, property, receiver) {\n    if (typeof Reflect !== "undefined" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = superPropBase(target, property);\n\n        if (!base) return;\n\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n    return _get(target, property, receiver || target);\n  }\n'
          ]),
          _templateObject33 = _taggedTemplateLiteralLoose([
            '\n  import getPrototypeOf from "getPrototypeOf";\n  import superPropBase from "superPropBase";\n  import defineProperty from "defineProperty";\n\n  function set(target, property, value, receiver) {\n    if (typeof Reflect !== "undefined" && Reflect.set) {\n      set = Reflect.set;\n    } else {\n      set = function set(target, property, value, receiver) {\n        var base = superPropBase(target, property);\n        var desc;\n\n        if (base) {\n          desc = Object.getOwnPropertyDescriptor(base, property);\n          if (desc.set) {\n            desc.set.call(receiver, value);\n            return true;\n          } else if (!desc.writable) {\n            // Both getter and non-writable fall into this.\n            return false;\n          }\n        }\n\n        // Without a super that defines the property, spec boils down to\n        // "define on receiver" for some reason.\n        desc = Object.getOwnPropertyDescriptor(receiver, property);\n        if (desc) {\n          if (!desc.writable) {\n            // Setter, getter, and non-writable fall into this.\n            return false;\n          }\n\n          desc.value = value;\n          Object.defineProperty(receiver, property, desc);\n        } else {\n          // Avoid setters that may be defined on Sub\'s prototype, but not on\n          // the instance.\n          defineProperty(receiver, property, value);\n        }\n\n        return true;\n      };\n    }\n\n    return set(target, property, value, receiver);\n  }\n\n  export default function _set(target, property, value, receiver, isStrict) {\n    const s = set(target, property, value, receiver || target);\n    if (!s && isStrict) {\n      throw new Error(\'failed to set property\');\n    }\n\n    return value;\n  }\n'
          ]),
          _templateObject34 = _taggedTemplateLiteralLoose([
            "\n  export default function _taggedTemplateLiteral(strings, raw) {\n    if (!raw) { raw = strings.slice(0); }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: { value: Object.freeze(raw) }\n    }));\n  }\n"
          ]),
          _templateObject35 = _taggedTemplateLiteralLoose([
            "\n  export default function _taggedTemplateLiteralLoose(strings, raw) {\n    if (!raw) { raw = strings.slice(0); }\n    strings.raw = raw;\n    return strings;\n  }\n"
          ]),
          _templateObject36 = _taggedTemplateLiteralLoose([
            '\n  import undef from "temporalUndefined";\n\n  export default function _temporalRef(val, name) {\n    if (val === undef) {\n      throw new ReferenceError(name + " is not defined - temporal dead zone");\n    } else {\n      return val;\n    }\n  }\n'
          ]),
          _templateObject37 = _taggedTemplateLiteralLoose(
            [
              '\n  export default function _readOnlyError(name) {\n    throw new Error("\\"" + name + "\\" is read-only");\n  }\n'
            ],
            [
              '\n  export default function _readOnlyError(name) {\n    throw new Error("\\\\"" + name + "\\\\" is read-only");\n  }\n'
            ]
          ),
          _templateObject38 = _taggedTemplateLiteralLoose(
            [
              '\n  export default function _classNameTDZError(name) {\n    throw new Error("Class \\"" + name + "\\" cannot be referenced in computed property keys.");\n  }\n'
            ],
            [
              '\n  export default function _classNameTDZError(name) {\n    throw new Error("Class \\\\"" + name + "\\\\" cannot be referenced in computed property keys.");\n  }\n'
            ]
          ),
          _templateObject39 = _taggedTemplateLiteralLoose([
            "\n  export default {};\n"
          ]),
          _templateObject40 = _taggedTemplateLiteralLoose([
            '\n  import arrayWithHoles from "arrayWithHoles";\n  import iterableToArrayLimit from "iterableToArrayLimit";\n  import nonIterableRest from "nonIterableRest";\n\n  export default function _slicedToArray(arr, i) {\n    return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n  }\n'
          ]),
          _templateObject41 = _taggedTemplateLiteralLoose([
            '\n  import arrayWithHoles from "arrayWithHoles";\n  import iterableToArrayLimitLoose from "iterableToArrayLimitLoose";\n  import nonIterableRest from "nonIterableRest";\n\n  export default function _slicedToArrayLoose(arr, i) {\n    return arrayWithHoles(arr) || iterableToArrayLimitLoose(arr, i) || nonIterableRest();\n  }\n'
          ]),
          _templateObject42 = _taggedTemplateLiteralLoose([
            '\n  import arrayWithHoles from "arrayWithHoles";\n  import iterableToArray from "iterableToArray";\n  import nonIterableRest from "nonIterableRest";\n\n  export default function _toArray(arr) {\n    return arrayWithHoles(arr) || iterableToArray(arr) || nonIterableRest();\n  }\n'
          ]),
          _templateObject43 = _taggedTemplateLiteralLoose([
            '\n  import arrayWithoutHoles from "arrayWithoutHoles";\n  import iterableToArray from "iterableToArray";\n  import nonIterableSpread from "nonIterableSpread";\n\n  export default function _toConsumableArray(arr) {\n    return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n  }\n'
          ]),
          _templateObject44 = _taggedTemplateLiteralLoose([
            "\n  export default function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n      return arr2;\n    }\n  }\n"
          ]),
          _templateObject45 = _taggedTemplateLiteralLoose([
            "\n  export default function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n"
          ]),
          _templateObject46 = _taggedTemplateLiteralLoose([
            '\n  export default function _iterableToArray(iter) {\n    if (\n      Symbol.iterator in Object(iter) ||\n      Object.prototype.toString.call(iter) === "[object Arguments]"\n    ) return Array.from(iter);\n  }\n'
          ]),
          _templateObject47 = _taggedTemplateLiteralLoose(
            [
              '\n  export default function _iterableToArrayLimit(arr, i) {\n    // this is an expanded form of `for...of` that properly supports abrupt completions of\n    // iterators etc. variable names have been minimised to reduce the size of this massive\n    // helper. sometimes spec compliancy is annoying :(\n    //\n    // _n = _iteratorNormalCompletion\n    // _d = _didIteratorError\n    // _e = _iteratorError\n    // _i = _iterator\n    // _s = _step\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i["return"] != null) _i["return"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n'
            ],
            [
              '\n  export default function _iterableToArrayLimit(arr, i) {\n    // this is an expanded form of \\`for...of\\` that properly supports abrupt completions of\n    // iterators etc. variable names have been minimised to reduce the size of this massive\n    // helper. sometimes spec compliancy is annoying :(\n    //\n    // _n = _iteratorNormalCompletion\n    // _d = _didIteratorError\n    // _e = _iteratorError\n    // _i = _iterator\n    // _s = _step\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i["return"] != null) _i["return"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n'
            ]
          ),
          _templateObject48 = _taggedTemplateLiteralLoose([
            "\n  export default function _iterableToArrayLimitLoose(arr, i) {\n    var _arr = [];\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n      if (i && _arr.length === i) break;\n    }\n    return _arr;\n  }\n"
          ]),
          _templateObject49 = _taggedTemplateLiteralLoose([
            '\n  export default function _nonIterableSpread() {\n    throw new TypeError("Invalid attempt to spread non-iterable instance");\n  }\n'
          ]),
          _templateObject50 = _taggedTemplateLiteralLoose([
            '\n  export default function _nonIterableRest() {\n    throw new TypeError("Invalid attempt to destructure non-iterable instance");\n  }\n'
          ]),
          _templateObject51 = _taggedTemplateLiteralLoose([
            "\n  export default function _skipFirstGeneratorNext(fn) {\n    return function () {\n      var it = fn.apply(this, arguments);\n      it.next();\n      return it;\n    }\n  }\n"
          ]),
          _templateObject52 = _taggedTemplateLiteralLoose([
            '\n  export default function _toPropertyKey(key) {\n    if (typeof key === "symbol") {\n      return key;\n    } else {\n      return String(key);\n    }\n  }\n'
          ]),
          _templateObject53 = _taggedTemplateLiteralLoose([
            "\n    export default function _initializerWarningHelper(descriptor, context){\n        throw new Error(\n          'Decorating class property failed. Please ensure that ' +\n          'proposal-class-properties is enabled and set to use loose mode. ' +\n          'To use proposal-class-properties in spec mode with decorators, wait for ' +\n          'the next major version of decorators in stage 2.'\n        );\n    }\n"
          ]),
          _templateObject54 = _taggedTemplateLiteralLoose([
            "\n    export default function _initializerDefineProperty(target, property, descriptor, context){\n        if (!descriptor) return;\n\n        Object.defineProperty(target, property, {\n            enumerable: descriptor.enumerable,\n            configurable: descriptor.configurable,\n            writable: descriptor.writable,\n            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,\n        });\n    }\n"
          ]),
          _templateObject55 = _taggedTemplateLiteralLoose([
            "\n    export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){\n        var desc = {};\n        Object['ke' + 'ys'](descriptor).forEach(function(key){\n            desc[key] = descriptor[key];\n        });\n        desc.enumerable = !!desc.enumerable;\n        desc.configurable = !!desc.configurable;\n        if ('value' in desc || desc.initializer){\n            desc.writable = true;\n        }\n\n        desc = decorators.slice().reverse().reduce(function(desc, decorator){\n            return decorator(target, property, desc) || desc;\n        }, desc);\n\n        if (context && desc.initializer !== void 0){\n            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n            desc.initializer = undefined;\n        }\n\n        if (desc.initializer === void 0){\n            // This is a hack to avoid this being processed by 'transform-runtime'.\n            // See issue #9.\n            Object['define' + 'Property'](target, property, desc);\n            desc = null;\n        }\n\n        return desc;\n    }\n"
          ]);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _taggedTemplateLiteralLoose(strings, raw) {
          if (!raw) {
            raw = strings.slice(0);
          }

          strings.raw = raw;
          return strings;
        }

        var helpers = {};
        var _default = helpers;
        exports.default = _default;

        helpers.typeof = function() {
          return _template().default.program.ast(_templateObject);
        };

        helpers.jsx = function() {
          return _template().default.program.ast(_templateObject2);
        };

        helpers.asyncIterator = function() {
          return _template().default.program.ast(_templateObject3);
        };

        helpers.AwaitValue = function() {
          return _template().default.program.ast(_templateObject4);
        };

        helpers.AsyncGenerator = function() {
          return _template().default.program.ast(_templateObject5);
        };

        helpers.wrapAsyncGenerator = function() {
          return _template().default.program.ast(_templateObject6);
        };

        helpers.awaitAsyncGenerator = function() {
          return _template().default.program.ast(_templateObject7);
        };

        helpers.asyncGeneratorDelegate = function() {
          return _template().default.program.ast(_templateObject8);
        };

        helpers.asyncToGenerator = function() {
          return _template().default.program.ast(_templateObject9);
        };

        helpers.classCallCheck = function() {
          return _template().default.program.ast(_templateObject10);
        };

        helpers.createClass = function() {
          return _template().default.program.ast(_templateObject11);
        };

        helpers.defineEnumerableProperties = function() {
          return _template().default.program.ast(_templateObject12);
        };

        helpers.defaults = function() {
          return _template().default.program.ast(_templateObject13);
        };

        helpers.defineProperty = function() {
          return _template().default.program.ast(_templateObject14);
        };

        helpers.extends = function() {
          return _template().default.program.ast(_templateObject15);
        };

        helpers.objectSpread = function() {
          return _template().default.program.ast(_templateObject16);
        };

        helpers.inherits = function() {
          return _template().default.program.ast(_templateObject17);
        };

        helpers.inheritsLoose = function() {
          return _template().default.program.ast(_templateObject18);
        };

        helpers.getPrototypeOf = function() {
          return _template().default.program.ast(_templateObject19);
        };

        helpers.setPrototypeOf = function() {
          return _template().default.program.ast(_templateObject20);
        };

        helpers.construct = function() {
          return _template().default.program.ast(_templateObject21);
        };

        helpers.wrapNativeSuper = function() {
          return _template().default.program.ast(_templateObject22);
        };

        helpers.instanceof = function() {
          return _template().default.program.ast(_templateObject23);
        };

        helpers.interopRequireDefault = function() {
          return _template().default.program.ast(_templateObject24);
        };

        helpers.interopRequireWildcard = function() {
          return _template().default.program.ast(_templateObject25);
        };

        helpers.newArrowCheck = function() {
          return _template().default.program.ast(_templateObject26);
        };

        helpers.objectDestructuringEmpty = function() {
          return _template().default.program.ast(_templateObject27);
        };

        helpers.objectWithoutProperties = function() {
          return _template().default.program.ast(_templateObject28);
        };

        helpers.assertThisInitialized = function() {
          return _template().default.program.ast(_templateObject29);
        };

        helpers.possibleConstructorReturn = function() {
          return _template().default.program.ast(_templateObject30);
        };

        helpers.superPropBase = function() {
          return _template().default.program.ast(_templateObject31);
        };

        helpers.get = function() {
          return _template().default.program.ast(_templateObject32);
        };

        helpers.set = function() {
          return _template().default.program.ast(_templateObject33);
        };

        helpers.taggedTemplateLiteral = function() {
          return _template().default.program.ast(_templateObject34);
        };

        helpers.taggedTemplateLiteralLoose = function() {
          return _template().default.program.ast(_templateObject35);
        };

        helpers.temporalRef = function() {
          return _template().default.program.ast(_templateObject36);
        };

        helpers.readOnlyError = function() {
          return _template().default.program.ast(_templateObject37);
        };

        helpers.classNameTDZError = function() {
          return _template().default.program.ast(_templateObject38);
        };

        helpers.temporalUndefined = function() {
          return _template().default.program.ast(_templateObject39);
        };

        helpers.slicedToArray = function() {
          return _template().default.program.ast(_templateObject40);
        };

        helpers.slicedToArrayLoose = function() {
          return _template().default.program.ast(_templateObject41);
        };

        helpers.toArray = function() {
          return _template().default.program.ast(_templateObject42);
        };

        helpers.toConsumableArray = function() {
          return _template().default.program.ast(_templateObject43);
        };

        helpers.arrayWithoutHoles = function() {
          return _template().default.program.ast(_templateObject44);
        };

        helpers.arrayWithHoles = function() {
          return _template().default.program.ast(_templateObject45);
        };

        helpers.iterableToArray = function() {
          return _template().default.program.ast(_templateObject46);
        };

        helpers.iterableToArrayLimit = function() {
          return _template().default.program.ast(_templateObject47);
        };

        helpers.iterableToArrayLimitLoose = function() {
          return _template().default.program.ast(_templateObject48);
        };

        helpers.nonIterableSpread = function() {
          return _template().default.program.ast(_templateObject49);
        };

        helpers.nonIterableRest = function() {
          return _template().default.program.ast(_templateObject50);
        };

        helpers.skipFirstGeneratorNext = function() {
          return _template().default.program.ast(_templateObject51);
        };

        helpers.toPropertyKey = function() {
          return _template().default.program.ast(_templateObject52);
        };

        helpers.initializerWarningHelper = function() {
          return _template().default.program.ast(_templateObject53);
        };

        helpers.initializerDefineProperty = function() {
          return _template().default.program.ast(_templateObject54);
        };

        helpers.applyDecoratedDescriptor = function() {
          return _template().default.program.ast(_templateObject55);
        };

        /***/
      },
      /* 447 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function helpers() {
          var data = _interopRequireWildcard(__webpack_require__(101));

          helpers = function helpers() {
            return data;
          };

          return data;
        }

        function _generator() {
          var data = _interopRequireDefault(__webpack_require__(81));

          _generator = function _generator() {
            return data;
          };

          return data;
        }

        function _template() {
          var data = _interopRequireDefault(__webpack_require__(21));

          _template = function _template() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var _templateObject = _taggedTemplateLiteralLoose([
          '\n    (function (root, factory) {\n      if (typeof define === "function" && define.amd) {\n        define(AMD_ARGUMENTS, factory);\n      } else if (typeof exports === "object") {\n        factory(COMMON_ARGUMENTS);\n      } else {\n        factory(BROWSER_ARGUMENTS);\n      }\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n      FACTORY_BODY\n    });\n  '
        ]);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _taggedTemplateLiteralLoose(strings, raw) {
          if (!raw) {
            raw = strings.slice(0);
          }

          strings.raw = raw;
          return strings;
        }

        var buildUmdWrapper = function buildUmdWrapper(replacements) {
          return (0, _template().default)(_templateObject)(replacements);
        };

        function buildGlobal(whitelist) {
          var namespace = t().identifier("babelHelpers");
          var body = [];
          var container = t().functionExpression(
            null,
            [t().identifier("global")],
            t().blockStatement(body)
          );
          var tree = t().program([
            t().expressionStatement(
              t().callExpression(container, [
                t().conditionalExpression(
                  t().binaryExpression(
                    "===",
                    t().unaryExpression("typeof", t().identifier("global")),
                    t().stringLiteral("undefined")
                  ),
                  t().identifier("self"),
                  t().identifier("global")
                )
              ])
            )
          ]);
          body.push(
            t().variableDeclaration("var", [
              t().variableDeclarator(
                namespace,
                t().assignmentExpression(
                  "=",
                  t().memberExpression(t().identifier("global"), namespace),
                  t().objectExpression([])
                )
              )
            ])
          );
          buildHelpers(body, namespace, whitelist);
          return tree;
        }

        function buildModule(whitelist) {
          var body = [];
          var refs = buildHelpers(body, null, whitelist);
          body.unshift(
            t().exportNamedDeclaration(
              null,
              Object.keys(refs).map(function(name) {
                return t().exportSpecifier(
                  t().cloneNode(refs[name]),
                  t().identifier(name)
                );
              })
            )
          );
          return t().program(body, [], "module");
        }

        function buildUmd(whitelist) {
          var namespace = t().identifier("babelHelpers");
          var body = [];
          body.push(
            t().variableDeclaration("var", [
              t().variableDeclarator(namespace, t().identifier("global"))
            ])
          );
          buildHelpers(body, namespace, whitelist);
          return t().program([
            buildUmdWrapper({
              FACTORY_PARAMETERS: t().identifier("global"),
              BROWSER_ARGUMENTS: t().assignmentExpression(
                "=",
                t().memberExpression(t().identifier("root"), namespace),
                t().objectExpression([])
              ),
              COMMON_ARGUMENTS: t().identifier("exports"),
              AMD_ARGUMENTS: t().arrayExpression([
                t().stringLiteral("exports")
              ]),
              FACTORY_BODY: body,
              UMD_ROOT: t().identifier("this")
            })
          ]);
        }

        function buildVar(whitelist) {
          var namespace = t().identifier("babelHelpers");
          var body = [];
          body.push(
            t().variableDeclaration("var", [
              t().variableDeclarator(namespace, t().objectExpression([]))
            ])
          );
          var tree = t().program(body);
          buildHelpers(body, namespace, whitelist);
          body.push(t().expressionStatement(namespace));
          return tree;
        }

        function buildHelpers(body, namespace, whitelist) {
          var getHelperReference = function getHelperReference(name) {
            return namespace
              ? t().memberExpression(namespace, t().identifier(name))
              : t().identifier("_" + name);
          };

          var refs = {};
          helpers().list.forEach(function(name) {
            if (whitelist && whitelist.indexOf(name) < 0) return;
            var ref = (refs[name] = getHelperReference(name));

            var _helpers$get = helpers().get(name, getHelperReference, ref),
              nodes = _helpers$get.nodes;

            body.push.apply(body, nodes);
          });
          return refs;
        }

        function _default(whitelist, outputType) {
          if (outputType === void 0) {
            outputType = "global";
          }

          var tree;
          var build = {
            global: buildGlobal,
            module: buildModule,
            umd: buildUmd,
            var: buildVar
          }[outputType];

          if (build) {
            tree = build(whitelist);
          } else {
            throw new Error("Unsupported output type " + outputType);
          }

          return (0, _generator().default)(tree).code;
        }

        /***/
      },
      /* 448 */
      /***/ function(module, exports) {
        module.exports = {
          name: "@babel/core",
          version: "7.0.0-beta.45",
          description: "Babel compiler core.",
          main: "./lib/index.js",
          author: "Sebastian McKenzie <sebmck@gmail.com>",
          homepage: "https://babeljs.io/",
          license: "MIT",
          repository:
            "https://github.com/babel/babel/tree/master/packages/babel-core",
          keywords: [
            "6to5",
            "babel",
            "classes",
            "const",
            "es6",
            "harmony",
            "let",
            "modules",
            "transpile",
            "transpiler",
            "var",
            "babel-core",
            "compiler"
          ],
          browser: {
            "./lib/config/files/index.js":
              "./lib/config/files/index-browser.js",
            "./lib/transform-file.js": "./lib/transform-file-browser.js",
            "./lib/transform-file-sync.js":
              "./lib/transform-file-sync-browser.js"
          },
          dependencies: {
            "@babel/code-frame": "7.0.0-beta.45",
            "@babel/generator": "7.0.0-beta.45",
            "@babel/helpers": "7.0.0-beta.45",
            "@babel/template": "7.0.0-beta.45",
            "@babel/traverse": "7.0.0-beta.45",
            "@babel/types": "7.0.0-beta.45",
            babylon: "7.0.0-beta.45",
            "convert-source-map": "^1.1.0",
            debug: "^3.1.0",
            json5: "^0.5.0",
            lodash: "^4.2.0",
            micromatch: "^2.3.11",
            resolve: "^1.3.2",
            semver: "^5.4.1",
            "source-map": "^0.5.0"
          },
          devDependencies: {
            "@babel/helper-transform-fixture-test-runner": "7.0.0-beta.45",
            "@babel/register": "7.0.0-beta.45"
          }
        };

        /***/
      },
      /* 449 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = loadFullConfig;

        var _util = __webpack_require__(158);

        var context = _interopRequireWildcard(__webpack_require__(2));

        var _plugin = _interopRequireDefault(__webpack_require__(86));

        var _item = __webpack_require__(51);

        var _configChain = __webpack_require__(160);

        function _traverse() {
          var data = _interopRequireDefault(__webpack_require__(8));

          _traverse = function _traverse() {
            return data;
          };

          return data;
        }

        var _caching = __webpack_require__(87);

        var _options = __webpack_require__(90);

        var _plugins = __webpack_require__(486);

        var _configApi = _interopRequireDefault(__webpack_require__(487));

        var _partial = _interopRequireDefault(__webpack_require__(164));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function loadFullConfig(inputOpts) {
          var result = (0, _partial.default)(inputOpts);

          if (!result) {
            return null;
          }

          var options = result.options,
            context = result.context;
          var optionDefaults = {};
          var passes = [[]];

          try {
            var plugins = options.plugins,
              presets = options.presets;

            if (!plugins || !presets) {
              throw new Error("Assertion failure - plugins and presets exist");
            }

            var ignored = (function recurseDescriptors(config, pass) {
              var plugins = config.plugins.map(function(descriptor) {
                return loadPluginDescriptor(descriptor, context);
              });
              var presets = config.presets.map(function(descriptor) {
                return {
                  preset: loadPresetDescriptor(descriptor, context),
                  pass: descriptor.ownPass ? [] : pass
                };
              });

              if (presets.length > 0) {
                passes.splice.apply(
                  passes,
                  [1, 0].concat(
                    presets
                      .map(function(o) {
                        return o.pass;
                      })
                      .filter(function(p) {
                        return p !== pass;
                      })
                  )
                );

                for (
                  var _iterator = presets,
                    _isArray = Array.isArray(_iterator),
                    _i = 0,
                    _iterator = _isArray
                      ? _iterator
                      : _iterator[Symbol.iterator]();
                  ;

                ) {
                  var _ref2;

                  if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref2 = _iterator[_i++];
                  } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref2 = _i.value;
                  }

                  var _ref3 = _ref2;
                  var preset = _ref3.preset,
                    _pass = _ref3.pass;
                  if (!preset) return true;

                  var _ignored = recurseDescriptors(
                    {
                      plugins: preset.plugins,
                      presets: preset.presets
                    },
                    _pass
                  );

                  if (_ignored) return true;
                  preset.options.forEach(function(opts) {
                    (0, _util.mergeOptions)(optionDefaults, opts);
                  });
                }
              }

              if (plugins.length > 0) {
                pass.unshift.apply(pass, plugins);
              }
            })(
              {
                plugins: plugins.map(function(item) {
                  var desc = (0, _item.getItemDescriptor)(item);

                  if (!desc) {
                    throw new Error("Assertion failure - must be config item");
                  }

                  return desc;
                }),
                presets: presets.map(function(item) {
                  var desc = (0, _item.getItemDescriptor)(item);

                  if (!desc) {
                    throw new Error("Assertion failure - must be config item");
                  }

                  return desc;
                })
              },
              passes[0]
            );

            if (ignored) return null;
          } catch (e) {
            if (!/^\[BABEL\]/.test(e.message)) {
              e.message =
                "[BABEL] " + (context.filename || "unknown") + ": " + e.message;
            }

            throw e;
          }

          var opts = optionDefaults;
          (0, _util.mergeOptions)(opts, options);
          opts.plugins = passes[0];
          opts.presets = passes
            .slice(1)
            .filter(function(plugins) {
              return plugins.length > 0;
            })
            .map(function(plugins) {
              return {
                plugins: plugins
              };
            });
          opts.passPerPreset = opts.presets.length > 0;
          return {
            options: opts,
            passes: passes
          };
        }

        var loadDescriptor = (0, _caching.makeWeakCache)(function(
          _ref4,
          cache
        ) {
          var value = _ref4.value,
            options = _ref4.options,
            dirname = _ref4.dirname,
            alias = _ref4.alias;
          if (options === false) throw new Error("Assertion failure");
          options = options || {};
          var item = value;

          if (typeof value === "function") {
            var api = Object.assign(
              {},
              context,
              (0, _configApi.default)(cache)
            );

            try {
              item = value(api, options, dirname);
            } catch (e) {
              if (alias) {
                e.message +=
                  " (While processing: " + JSON.stringify(alias) + ")";
              }

              throw e;
            }
          }

          if (!item || typeof item !== "object") {
            throw new Error("Plugin/Preset did not return an object.");
          }

          if (typeof item.then === "function") {
            throw new Error(
              "You appear to be using an async plugin, " +
                "which your current version of Babel does not support." +
                "If you're using a published plugin, " +
                "you may need to upgrade your @babel/core version."
            );
          }

          return {
            value: item,
            options: options,
            dirname: dirname,
            alias: alias
          };
        });

        function loadPluginDescriptor(descriptor, context) {
          if (descriptor.value instanceof _plugin.default) {
            if (descriptor.options) {
              throw new Error(
                "Passed options to an existing Plugin instance will not work."
              );
            }

            return descriptor.value;
          }

          return instantiatePlugin(
            loadDescriptor(descriptor, context),
            context
          );
        }

        var instantiatePlugin = (0, _caching.makeWeakCache)(function(
          _ref5,
          cache
        ) {
          var value = _ref5.value,
            options = _ref5.options,
            dirname = _ref5.dirname,
            alias = _ref5.alias;
          var pluginObj = (0, _plugins.validatePluginObject)(value);
          var plugin = Object.assign({}, pluginObj);

          if (plugin.visitor) {
            plugin.visitor = _traverse().default.explode(
              Object.assign({}, plugin.visitor)
            );
          }

          if (plugin.inherits) {
            var inheritsDescriptor = {
              name: undefined,
              alias: alias + "$inherits",
              value: plugin.inherits,
              options: options,
              dirname: dirname
            };
            var inherits = cache.invalidate(function(data) {
              return loadPluginDescriptor(inheritsDescriptor, data);
            });
            plugin.pre = chain(inherits.pre, plugin.pre);
            plugin.post = chain(inherits.post, plugin.post);
            plugin.manipulateOptions = chain(
              inherits.manipulateOptions,
              plugin.manipulateOptions
            );
            plugin.visitor = _traverse().default.visitors.merge([
              inherits.visitor || {},
              plugin.visitor || {}
            ]);
          }

          return new _plugin.default(plugin, options, alias);
        });

        var loadPresetDescriptor = function loadPresetDescriptor(
          descriptor,
          context
        ) {
          return (0, _configChain.buildPresetChain)(
            instantiatePreset(loadDescriptor(descriptor, context)),
            context
          );
        };

        var instantiatePreset = (0, _caching.makeWeakCache)(function(_ref6) {
          var value = _ref6.value,
            dirname = _ref6.dirname,
            alias = _ref6.alias;
          return {
            options: (0, _options.validate)("preset", value),
            alias: alias,
            dirname: dirname
          };
        });

        function chain(a, b) {
          var fns = [a, b].filter(Boolean);
          if (fns.length <= 1) return fns[0];
          return function() {
            for (
              var _len = arguments.length, args = new Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key];
            }

            for (
              var _iterator2 = fns,
                _isArray2 = Array.isArray(_iterator2),
                _i2 = 0,
                _iterator2 = _isArray2
                  ? _iterator2
                  : _iterator2[Symbol.iterator]();
              ;

            ) {
              var _ref7;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref7 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref7 = _i2.value;
              }

              var fn = _ref7;
              fn.apply(this, args);
            }
          };
        }

        /***/
      },
      /* 450 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var expand = __webpack_require__(451);

        var utils = __webpack_require__(88);

        function micromatch(files, patterns, opts) {
          if (!files || !patterns) return [];
          opts = opts || {};

          if (typeof opts.cache === "undefined") {
            opts.cache = true;
          }

          if (!Array.isArray(patterns)) {
            return match(files, patterns, opts);
          }

          var len = patterns.length,
            i = 0;
          var omit = [],
            keep = [];

          while (len--) {
            var glob = patterns[i++];

            if (typeof glob === "string" && glob.charCodeAt(0) === 33) {
              omit.push.apply(omit, match(files, glob.slice(1), opts));
            } else {
              keep.push.apply(keep, match(files, glob, opts));
            }
          }

          return utils.diff(keep, omit);
        }

        function match(files, pattern, opts) {
          if (utils.typeOf(files) !== "string" && !Array.isArray(files)) {
            throw new Error(msg("match", "files", "a string or array"));
          }

          files = utils.arrayify(files);
          opts = opts || {};
          var negate = opts.negate || false;
          var orig = pattern;

          if (typeof pattern === "string") {
            negate = pattern.charAt(0) === "!";

            if (negate) {
              pattern = pattern.slice(1);
            }

            if (opts.nonegate === true) {
              negate = false;
            }
          }

          var _isMatch = matcher(pattern, opts);

          var len = files.length,
            i = 0;
          var res = [];

          while (i < len) {
            var file = files[i++];
            var fp = utils.unixify(file, opts);

            if (!_isMatch(fp)) {
              continue;
            }

            res.push(fp);
          }

          if (res.length === 0) {
            if (opts.failglob === true) {
              throw new Error(
                'micromatch.match() found no matches for: "' + orig + '".'
              );
            }

            if (opts.nonull || opts.nullglob) {
              res.push(utils.unescapeGlob(orig));
            }
          }

          if (negate) {
            res = utils.diff(files, res);
          }

          if (opts.ignore && opts.ignore.length) {
            pattern = opts.ignore;
            opts = utils.omit(opts, ["ignore"]);
            res = utils.diff(res, micromatch(res, pattern, opts));
          }

          if (opts.nodupes) {
            return utils.unique(res);
          }

          return res;
        }

        function filter(patterns, opts) {
          if (!Array.isArray(patterns) && typeof patterns !== "string") {
            throw new TypeError(msg("filter", "patterns", "a string or array"));
          }

          patterns = utils.arrayify(patterns);
          var len = patterns.length,
            i = 0;
          var patternMatchers = Array(len);

          while (i < len) {
            patternMatchers[i] = matcher(patterns[i++], opts);
          }

          return function(fp) {
            if (fp == null) return [];
            var len = patternMatchers.length,
              i = 0;
            var res = true;
            fp = utils.unixify(fp, opts);

            while (i < len) {
              var fn = patternMatchers[i++];

              if (!fn(fp)) {
                res = false;
                break;
              }
            }

            return res;
          };
        }

        function isMatch(fp, pattern, opts) {
          if (typeof fp !== "string") {
            throw new TypeError(msg("isMatch", "filepath", "a string"));
          }

          fp = utils.unixify(fp, opts);

          if (utils.typeOf(pattern) === "object") {
            return matcher(fp, pattern);
          }

          return matcher(pattern, opts)(fp);
        }

        function contains(fp, pattern, opts) {
          if (typeof fp !== "string") {
            throw new TypeError(msg("contains", "pattern", "a string"));
          }

          opts = opts || {};
          opts.contains = pattern !== "";
          fp = utils.unixify(fp, opts);

          if (opts.contains && !utils.isGlob(pattern)) {
            return fp.indexOf(pattern) !== -1;
          }

          return matcher(pattern, opts)(fp);
        }

        function any(fp, patterns, opts) {
          if (!Array.isArray(patterns) && typeof patterns !== "string") {
            throw new TypeError(msg("any", "patterns", "a string or array"));
          }

          patterns = utils.arrayify(patterns);
          var len = patterns.length;
          fp = utils.unixify(fp, opts);

          while (len--) {
            var isMatch = matcher(patterns[len], opts);

            if (isMatch(fp)) {
              return true;
            }
          }

          return false;
        }

        function matchKeys(obj, glob, options) {
          if (utils.typeOf(obj) !== "object") {
            throw new TypeError(
              msg("matchKeys", "first argument", "an object")
            );
          }

          var fn = matcher(glob, options);
          var res = {};

          for (var key in obj) {
            if (obj.hasOwnProperty(key) && fn(key)) {
              res[key] = obj[key];
            }
          }

          return res;
        }

        function matcher(pattern, opts) {
          if (typeof pattern === "function") {
            return pattern;
          }

          if (pattern instanceof RegExp) {
            return function(fp) {
              return pattern.test(fp);
            };
          }

          if (typeof pattern !== "string") {
            throw new TypeError(
              msg("matcher", "pattern", "a string, regex, or function")
            );
          }

          pattern = utils.unixify(pattern, opts);

          if (!utils.isGlob(pattern)) {
            return utils.matchPath(pattern, opts);
          }

          var re = makeRe(pattern, opts);

          if (opts && opts.matchBase) {
            return utils.hasFilename(re, opts);
          }

          return function(fp) {
            fp = utils.unixify(fp, opts);
            return re.test(fp);
          };
        }

        function toRegex(glob, options) {
          var opts = Object.create(options || {});
          var flags = opts.flags || "";

          if (opts.nocase && flags.indexOf("i") === -1) {
            flags += "i";
          }

          var parsed = expand(glob, opts);
          opts.negated = opts.negated || parsed.negated;
          opts.negate = opts.negated;
          glob = wrapGlob(parsed.pattern, opts);
          var re;

          try {
            re = new RegExp(glob, flags);
            return re;
          } catch (err) {
            err.reason = "micromatch invalid regex: (" + re + ")";
            if (opts.strict) throw new SyntaxError(err);
          }

          return /$^/;
        }

        function wrapGlob(glob, opts) {
          var prefix = opts && !opts.contains ? "^" : "";
          var after = opts && !opts.contains ? "$" : "";
          glob = "(?:" + glob + ")" + after;

          if (opts && opts.negate) {
            return prefix + ("(?!^" + glob + ").*$");
          }

          return prefix + glob;
        }

        function makeRe(glob, opts) {
          if (utils.typeOf(glob) !== "string") {
            throw new Error(msg("makeRe", "glob", "a string"));
          }

          return utils.cache(toRegex, glob, opts);
        }

        function msg(method, what, type) {
          return (
            "micromatch." + method + "(): " + what + " should be " + type + "."
          );
        }

        micromatch.any = any;
        micromatch.braces = micromatch.braceExpand = utils.braces;
        micromatch.contains = contains;
        micromatch.expand = expand;
        micromatch.filter = filter;
        micromatch.isMatch = isMatch;
        micromatch.makeRe = makeRe;
        micromatch.match = match;
        micromatch.matcher = matcher;
        micromatch.matchKeys = matchKeys;
        module.exports = micromatch;

        /***/
      },
      /* 451 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var utils = __webpack_require__(88);

        var Glob = __webpack_require__(483);

        module.exports = expand;

        function expand(pattern, options) {
          if (typeof pattern !== "string") {
            throw new TypeError(
              "micromatch.expand(): argument should be a string."
            );
          }

          var glob = new Glob(pattern, options || {});
          var opts = glob.options;

          if (!utils.isGlob(pattern)) {
            glob.pattern = glob.pattern.replace(/([\/.])/g, "\\$1");
            return glob;
          }

          glob.pattern = glob.pattern.replace(/(\+)(?!\()/g, "\\$1");
          glob.pattern = glob.pattern.split("$").join("\\$");

          if (
            typeof opts.braces !== "boolean" &&
            typeof opts.nobraces !== "boolean"
          ) {
            opts.braces = true;
          }

          if (glob.pattern === ".*") {
            return {
              pattern: "\\." + star,
              tokens: tok,
              options: opts
            };
          }

          if (glob.pattern === "*") {
            return {
              pattern: oneStar(opts.dot),
              tokens: tok,
              options: opts
            };
          }

          glob.parse();
          var tok = glob.tokens;
          tok.is.negated = opts.negated;

          if (
            (opts.dotfiles === true || tok.is.dotfile) &&
            opts.dot !== false
          ) {
            opts.dotfiles = true;
            opts.dot = true;
          }

          if ((opts.dotdirs === true || tok.is.dotdir) && opts.dot !== false) {
            opts.dotdirs = true;
            opts.dot = true;
          }

          if (/[{,]\./.test(glob.pattern)) {
            opts.makeRe = false;
            opts.dot = true;
          }

          if (opts.nonegate !== true) {
            opts.negated = glob.negated;
          }

          if (
            glob.pattern.charAt(0) === "." &&
            glob.pattern.charAt(1) !== "/"
          ) {
            glob.pattern = "\\" + glob.pattern;
          }

          glob.track("before braces");

          if (tok.is.braces) {
            glob.braces();
          }

          glob.track("after braces");
          glob.track("before extglob");

          if (tok.is.extglob) {
            glob.extglob();
          }

          glob.track("after extglob");
          glob.track("before brackets");

          if (tok.is.brackets) {
            glob.brackets();
          }

          glob.track("after brackets");

          glob._replace("[!", "[^");

          glob._replace("(?", "(%~");

          glob._replace(/\[\]/, "\\[\\]");

          glob._replace("/[", "/" + (opts.dot ? dotfiles : nodot) + "[", true);

          glob._replace(
            "/?",
            "/" + (opts.dot ? dotfiles : nodot) + "[^/]",
            true
          );

          glob._replace("/.", "/(?=.)\\.", true);

          glob._replace(/^(\w):([\\\/]+?)/gi, "(?=.)$1:$2", true);

          if (glob.pattern.indexOf("[^") !== -1) {
            glob.pattern = negateSlash(glob.pattern);
          }

          if (opts.globstar !== false && glob.pattern === "**") {
            glob.pattern = globstar(opts.dot);
          } else {
            glob.pattern = balance(glob.pattern, "[", "]");
            glob.escape(glob.pattern);

            if (tok.is.globstar) {
              glob.pattern = collapse(glob.pattern, "/**");
              glob.pattern = collapse(glob.pattern, "**/");

              glob._replace("/**/", "(?:/" + globstar(opts.dot) + "/|/)", true);

              glob._replace(/\*{2,}/g, "**");

              glob._replace(/(\w+)\*(?!\/)/g, "$1[^/]*?", true);

              glob._replace(
                /\*\*\/\*(\w)/g,
                globstar(opts.dot) +
                  "\\/" +
                  (opts.dot ? dotfiles : nodot) +
                  "[^/]*?$1",
                true
              );

              if (opts.dot !== true) {
                glob._replace(/\*\*\/(.)/g, "(?:**\\/|)$1");
              }

              if (tok.path.dirname !== "" || /,\*\*|\*\*,/.test(glob.orig)) {
                glob._replace("**", globstar(opts.dot), true);
              }
            }

            glob._replace(/\/\*$/, "\\/" + oneStar(opts.dot), true);

            glob._replace(/(?!\/)\*$/, star, true);

            glob._replace(/([^\/]+)\*/, "$1" + oneStar(true), true);

            glob._replace("*", oneStar(opts.dot), true);

            glob._replace("?.", "?\\.", true);

            glob._replace("?:", "?:", true);

            glob._replace(/\?+/g, function(match) {
              var len = match.length;

              if (len === 1) {
                return qmark;
              }

              return qmark + "{" + len + "}";
            });

            glob._replace(/\.([*\w]+)/g, "\\.$1");

            glob._replace(/\[\^[\\\/]+\]/g, qmark);

            glob._replace(/\/+/g, "\\/");

            glob._replace(/\\{2,}/g, "\\");
          }

          glob.unescape(glob.pattern);

          glob._replace("__UNESC_STAR__", "*");

          glob._replace("?.", "?\\.");

          glob._replace("[^\\/]", qmark);

          if (glob.pattern.length > 1) {
            if (/^[\[?*]/.test(glob.pattern)) {
              glob.pattern = (opts.dot ? dotfiles : nodot) + glob.pattern;
            }
          }

          return glob;
        }

        function collapse(str, ch) {
          var res = str.split(ch);
          var isFirst = res[0] === "";
          var isLast = res[res.length - 1] === "";
          res = res.filter(Boolean);
          if (isFirst) res.unshift("");
          if (isLast) res.push("");
          return res.join(ch);
        }

        function negateSlash(str) {
          return str.replace(/\[\^([^\]]*?)\]/g, function(match, inner) {
            if (inner.indexOf("/") === -1) {
              inner = "\\/" + inner;
            }

            return "[^" + inner + "]";
          });
        }

        function balance(str, a, b) {
          var aarr = str.split(a);
          var alen = aarr.join("").length;
          var blen = str.split(b).join("").length;

          if (alen !== blen) {
            str = aarr.join("\\" + a);
            return str.split(b).join("\\" + b);
          }

          return str;
        }

        var qmark = "[^/]";
        var star = qmark + "*?";
        var nodot = "(?!\\.)(?=.)";
        var dotfileGlob = "(?:\\/|^)\\.{1,2}($|\\/)";
        var dotfiles = "(?!" + dotfileGlob + ")(?=.)";
        var twoStarDot = "(?:(?!" + dotfileGlob + ").)*?";

        function oneStar(dotfile) {
          return dotfile ? "(?!" + dotfileGlob + ")(?=.)" + star : nodot + star;
        }

        function globstar(dotfile) {
          if (dotfile) {
            return twoStarDot;
          }

          return "(?:(?!(?:\\/|^)\\.).)*?";
        }

        /***/
      },
      /* 452 */
      /***/ function(module, exports) {
        module.exports = function filenameRegex() {
          return /([^\\\/]+)$/;
        };

        /***/
      },
      /* 453 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var flatten = __webpack_require__(454);

        var slice = [].slice;

        function diff(arr, arrays) {
          var argsLen = arguments.length;
          var len = arr.length,
            i = -1;
          var res = [],
            arrays;

          if (argsLen === 1) {
            return arr;
          }

          if (argsLen > 2) {
            arrays = flatten(slice.call(arguments, 1));
          }

          while (++i < len) {
            if (!~arrays.indexOf(arr[i])) {
              res.push(arr[i]);
            }
          }

          return res;
        }

        module.exports = diff;

        /***/
      },
      /* 454 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = function(arr) {
          return flat(arr, []);
        };

        function flat(arr, res) {
          var i = 0,
            cur;
          var len = arr.length;

          for (; i < len; i++) {
            cur = arr[i];
            Array.isArray(cur) ? flat(cur, res) : res.push(cur);
          }

          return res;
        }

        /***/
      },
      /* 455 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = function unique(arr) {
          if (!Array.isArray(arr)) {
            throw new TypeError("array-unique expects an array.");
          }

          var len = arr.length;
          var i = -1;

          while (i++ < len) {
            var j = i + 1;

            for (; j < arr.length; ++j) {
              if (arr[i] === arr[j]) {
                arr.splice(j--, 1);
              }
            }
          }

          return arr;
        };

        /***/
      },
      /* 456 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var expand = __webpack_require__(457);

        var repeat = __webpack_require__(162);

        var tokens = __webpack_require__(466);

        module.exports = function(str, options) {
          if (typeof str !== "string") {
            throw new Error("braces expects a string");
          }

          return braces(str, options);
        };

        function braces(str, arr, options) {
          if (str === "") {
            return [];
          }

          if (!Array.isArray(arr)) {
            options = arr;
            arr = [];
          }

          var opts = options || {};
          arr = arr || [];

          if (typeof opts.nodupes === "undefined") {
            opts.nodupes = true;
          }

          var fn = opts.fn;
          var es6;

          if (typeof opts === "function") {
            fn = opts;
            opts = {};
          }

          if (!(patternRe instanceof RegExp)) {
            patternRe = patternRegex();
          }

          var matches = str.match(patternRe) || [];
          var m = matches[0];

          switch (m) {
            case "\\,":
              return escapeCommas(str, arr, opts);

            case "\\.":
              return escapeDots(str, arr, opts);

            case "/.":
              return escapePaths(str, arr, opts);

            case " ":
              return splitWhitespace(str);

            case "{,}":
              return exponential(str, opts, braces);

            case "{}":
              return emptyBraces(str, arr, opts);

            case "\\{":
            case "\\}":
              return escapeBraces(str, arr, opts);

            case "${":
              if (!/\{[^{]+\{/.test(str)) {
                return arr.concat(str);
              } else {
                es6 = true;
                str = tokens.before(str, es6Regex());
              }
          }

          if (!(braceRe instanceof RegExp)) {
            braceRe = braceRegex();
          }

          var match = braceRe.exec(str);

          if (match == null) {
            return [str];
          }

          var outter = match[1];
          var inner = match[2];

          if (inner === "") {
            return [str];
          }

          var segs, segsLength;

          if (inner.indexOf("..") !== -1) {
            segs = expand(inner, opts, fn) || inner.split(",");
            segsLength = segs.length;
          } else if (inner[0] === '"' || inner[0] === "'") {
            return arr.concat(str.split(/['"]/).join(""));
          } else {
            segs = inner.split(",");

            if (opts.makeRe) {
              return braces(str.replace(outter, wrap(segs, "|")), opts);
            }

            segsLength = segs.length;

            if (segsLength === 1 && opts.bash) {
              segs[0] = wrap(segs[0], "\\");
            }
          }

          var len = segs.length;
          var i = 0,
            val;

          while (len--) {
            var path = segs[i++];

            if (/(\.[^.\/])/.test(path)) {
              if (segsLength > 1) {
                return segs;
              } else {
                return [str];
              }
            }

            val = splice(str, outter, path);

            if (/\{[^{}]+?\}/.test(val)) {
              arr = braces(val, arr, opts);
            } else if (val !== "") {
              if (opts.nodupes && arr.indexOf(val) !== -1) {
                continue;
              }

              arr.push(es6 ? tokens.after(val) : val);
            }
          }

          if (opts.strict) {
            return filter(arr, filterEmpty);
          }

          return arr;
        }

        function exponential(str, options, fn) {
          if (typeof options === "function") {
            fn = options;
            options = null;
          }

          var opts = options || {};
          var esc = "__ESC_EXP__";
          var exp = 0;
          var res;
          var parts = str.split("{,}");

          if (opts.nodupes) {
            return fn(parts.join(""), opts);
          }

          exp = parts.length - 1;
          res = fn(parts.join(esc), opts);
          var len = res.length;
          var arr = [];
          var i = 0;

          while (len--) {
            var ele = res[i++];
            var idx = ele.indexOf(esc);

            if (idx === -1) {
              arr.push(ele);
            } else {
              ele = ele.split("__ESC_EXP__").join("");

              if (!!ele && opts.nodupes !== false) {
                arr.push(ele);
              } else {
                var num = Math.pow(2, exp);
                arr.push.apply(arr, repeat(ele, num));
              }
            }
          }

          return arr;
        }

        function wrap(val, ch) {
          if (ch === "|") {
            return "(" + val.join(ch) + ")";
          }

          if (ch === ",") {
            return "{" + val.join(ch) + "}";
          }

          if (ch === "-") {
            return "[" + val.join(ch) + "]";
          }

          if (ch === "\\") {
            return "\\{" + val + "\\}";
          }
        }

        function emptyBraces(str, arr, opts) {
          return braces(str.split("{}").join("\\{\\}"), arr, opts);
        }

        function filterEmpty(ele) {
          return !!ele && ele !== "\\";
        }

        function splitWhitespace(str) {
          var segs = str.split(" ");
          var len = segs.length;
          var res = [];
          var i = 0;

          while (len--) {
            res.push.apply(res, braces(segs[i++]));
          }

          return res;
        }

        function escapeBraces(str, arr, opts) {
          if (!/\{[^{]+\{/.test(str)) {
            return arr.concat(str.split("\\").join(""));
          } else {
            str = str.split("\\{").join("__LT_BRACE__");
            str = str.split("\\}").join("__RT_BRACE__");
            return map(braces(str, arr, opts), function(ele) {
              ele = ele.split("__LT_BRACE__").join("{");
              return ele.split("__RT_BRACE__").join("}");
            });
          }
        }

        function escapeDots(str, arr, opts) {
          if (!/[^\\]\..+\\\./.test(str)) {
            return arr.concat(str.split("\\").join(""));
          } else {
            str = str.split("\\.").join("__ESC_DOT__");
            return map(braces(str, arr, opts), function(ele) {
              return ele.split("__ESC_DOT__").join(".");
            });
          }
        }

        function escapePaths(str, arr, opts) {
          str = str.split("/.").join("__ESC_PATH__");
          return map(braces(str, arr, opts), function(ele) {
            return ele.split("__ESC_PATH__").join("/.");
          });
        }

        function escapeCommas(str, arr, opts) {
          if (!/\w,/.test(str)) {
            return arr.concat(str.split("\\").join(""));
          } else {
            str = str.split("\\,").join("__ESC_COMMA__");
            return map(braces(str, arr, opts), function(ele) {
              return ele.split("__ESC_COMMA__").join(",");
            });
          }
        }

        function patternRegex() {
          return /\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\,(?=.*[{}])|\/\.(?=.*[{}])|\\\.(?={)|\\{|\\}/;
        }

        function braceRegex() {
          return /.*(\\?\{([^}]+)\})/;
        }

        function es6Regex() {
          return /\$\{([^}]+)\}/;
        }

        var braceRe;
        var patternRe;

        function splice(str, token, replacement) {
          var i = str.indexOf(token);
          return str.substr(0, i) + replacement + str.substr(i + token.length);
        }

        function map(arr, fn) {
          if (arr == null) {
            return [];
          }

          var len = arr.length;
          var res = new Array(len);
          var i = -1;

          while (++i < len) {
            res[i] = fn(arr[i], i, arr);
          }

          return res;
        }

        function filter(arr, cb) {
          if (arr == null) return [];

          if (typeof cb !== "function") {
            throw new TypeError("braces: filter expects a callback function.");
          }

          var len = arr.length;
          var res = arr.slice();
          var i = 0;

          while (len--) {
            if (!cb(arr[len], i++)) {
              res.splice(len, 1);
            }
          }

          return res;
        }

        /***/
      },
      /* 457 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var fill = __webpack_require__(458);

        module.exports = function expandRange(str, options, fn) {
          if (typeof str !== "string") {
            throw new TypeError("expand-range expects a string.");
          }

          if (typeof options === "function") {
            fn = options;
            options = {};
          }

          if (typeof options === "boolean") {
            options = {};
            options.makeRe = true;
          }

          var opts = options || {};
          var args = str.split("..");
          var len = args.length;

          if (len > 3) {
            return str;
          }

          if (len === 1) {
            return args;
          }

          if (typeof fn === "boolean" && fn === true) {
            opts.makeRe = true;
          }

          args.push(opts);
          return fill.apply(null, args.concat(fn));
        };

        /***/
      },
      /* 458 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var isObject = __webpack_require__(459);

        var isNumber = __webpack_require__(461);

        var randomize = __webpack_require__(462);

        var repeatStr = __webpack_require__(465);

        var repeat = __webpack_require__(162);

        module.exports = fillRange;

        function fillRange(a, b, step, options, fn) {
          if (a == null || b == null) {
            throw new Error(
              "fill-range expects the first and second args to be strings."
            );
          }

          if (typeof step === "function") {
            fn = step;
            options = {};
            step = null;
          }

          if (typeof options === "function") {
            fn = options;
            options = {};
          }

          if (isObject(step)) {
            options = step;
            step = "";
          }

          var expand,
            regex = false,
            sep = "";
          var opts = options || {};

          if (typeof opts.silent === "undefined") {
            opts.silent = true;
          }

          step = step || opts.step;
          var origA = a,
            origB = b;
          b = b.toString() === "-0" ? 0 : b;

          if (opts.optimize || opts.makeRe) {
            step = step ? (step += "~") : step;
            expand = true;
            regex = true;
            sep = "~";
          }

          if (typeof step === "string") {
            var match = stepRe().exec(step);

            if (match) {
              var i = match.index;
              var m = match[0];

              if (m === "+") {
                return repeat(a, b);
              } else if (m === "?") {
                return [randomize(a, b)];
              } else if (m === ">") {
                step = step.substr(0, i) + step.substr(i + 1);
                expand = true;
              } else if (m === "|") {
                step = step.substr(0, i) + step.substr(i + 1);
                expand = true;
                regex = true;
                sep = m;
              } else if (m === "~") {
                step = step.substr(0, i) + step.substr(i + 1);
                expand = true;
                regex = true;
                sep = m;
              }
            } else if (!isNumber(step)) {
              if (!opts.silent) {
                throw new TypeError("fill-range: invalid step.");
              }

              return null;
            }
          }

          if (/[.&*()[\]^%$#@!]/.test(a) || /[.&*()[\]^%$#@!]/.test(b)) {
            if (!opts.silent) {
              throw new RangeError("fill-range: invalid range arguments.");
            }

            return null;
          }

          if (!noAlphaNum(a) || !noAlphaNum(b) || hasBoth(a) || hasBoth(b)) {
            if (!opts.silent) {
              throw new RangeError("fill-range: invalid range arguments.");
            }

            return null;
          }

          var isNumA = isNumber(zeros(a));
          var isNumB = isNumber(zeros(b));

          if ((!isNumA && isNumB) || (isNumA && !isNumB)) {
            if (!opts.silent) {
              throw new TypeError(
                "fill-range: first range argument is incompatible with second."
              );
            }

            return null;
          }

          var isNum = isNumA;
          var num = formatStep(step);

          if (isNum) {
            a = +a;
            b = +b;
          } else {
            a = a.charCodeAt(0);
            b = b.charCodeAt(0);
          }

          var isDescending = a > b;

          if (a < 0 || b < 0) {
            expand = false;
            regex = false;
          }

          var padding = isPadded(origA, origB);
          var res,
            pad,
            arr = [];
          var ii = 0;

          if (regex) {
            if (shouldExpand(a, b, num, isNum, padding, opts)) {
              if (sep === "|" || sep === "~") {
                sep = detectSeparator(a, b, num, isNum, isDescending);
              }

              return wrap([origA, origB], sep, opts);
            }
          }

          while (isDescending ? a >= b : a <= b) {
            if (padding && isNum) {
              pad = padding(a);
            }

            if (typeof fn === "function") {
              res = fn(a, isNum, pad, ii++);
            } else if (!isNum) {
              if (regex && isInvalidChar(a)) {
                res = null;
              } else {
                res = String.fromCharCode(a);
              }
            } else {
              res = formatPadding(a, pad);
            }

            if (res !== null) arr.push(res);

            if (isDescending) {
              a -= num;
            } else {
              a += num;
            }
          }

          if ((regex || expand) && !opts.noexpand) {
            if (sep === "|" || sep === "~") {
              sep = detectSeparator(a, b, num, isNum, isDescending);
            }

            if (arr.length === 1 || a < 0 || b < 0) {
              return arr;
            }

            return wrap(arr, sep, opts);
          }

          return arr;
        }

        function wrap(arr, sep, opts) {
          if (sep === "~") {
            sep = "-";
          }

          var str = arr.join(sep);
          var pre = opts && opts.regexPrefix;

          if (sep === "|") {
            str = pre ? pre + str : str;
            str = "(" + str + ")";
          }

          if (sep === "-") {
            str = pre && pre === "^" ? pre + str : str;
            str = "[" + str + "]";
          }

          return [str];
        }

        function isCharClass(a, b, step, isNum, isDescending) {
          if (isDescending) {
            return false;
          }

          if (isNum) {
            return a <= 9 && b <= 9;
          }

          if (a < b) {
            return step === 1;
          }

          return false;
        }

        function shouldExpand(a, b, num, isNum, padding, opts) {
          if (isNum && (a > 9 || b > 9)) {
            return false;
          }

          return !padding && num === 1 && a < b;
        }

        function detectSeparator(a, b, step, isNum, isDescending) {
          var isChar = isCharClass(a, b, step, isNum, isDescending);

          if (!isChar) {
            return "|";
          }

          return "~";
        }

        function formatStep(step) {
          return Math.abs(step >> 0) || 1;
        }

        function formatPadding(ch, pad) {
          var res = pad ? pad + ch : ch;

          if (pad && ch.toString().charAt(0) === "-") {
            res = "-" + pad + ch.toString().substr(1);
          }

          return res.toString();
        }

        function isInvalidChar(str) {
          var ch = toStr(str);
          return (
            ch === "\\" ||
            ch === "[" ||
            ch === "]" ||
            ch === "^" ||
            ch === "(" ||
            ch === ")" ||
            ch === "`"
          );
        }

        function toStr(ch) {
          return String.fromCharCode(ch);
        }

        function stepRe() {
          return /\?|>|\||\+|\~/g;
        }

        function noAlphaNum(val) {
          return /[a-z0-9]/i.test(val);
        }

        function hasBoth(val) {
          return /[a-z][0-9]|[0-9][a-z]/i.test(val);
        }

        function zeros(val) {
          if (/^-*0+$/.test(val.toString())) {
            return "0";
          }

          return val;
        }

        function hasZeros(val) {
          return /[^.]\.|^-*0+[0-9]/.test(val);
        }

        function isPadded(origA, origB) {
          if (hasZeros(origA) || hasZeros(origB)) {
            var alen = length(origA);
            var blen = length(origB);
            var len = alen >= blen ? alen : blen;
            return function(a) {
              return repeatStr("0", len - length(a));
            };
          }

          return false;
        }

        function length(val) {
          return val.toString().length;
        }

        /***/
      },
      /* 459 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var isArray = __webpack_require__(460);

        module.exports = function isObject(val) {
          return (
            val != null && typeof val === "object" && isArray(val) === false
          );
        };

        /***/
      },
      /* 460 */
      /***/ function(module, exports) {
        var toString = {}.toString;

        module.exports =
          Array.isArray ||
          function(arr) {
            return toString.call(arr) == "[object Array]";
          };

        /***/
      },
      /* 461 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var typeOf = __webpack_require__(89);

        module.exports = function isNumber(num) {
          var type = typeOf(num);

          if (type !== "number" && type !== "string") {
            return false;
          }

          var n = +num;
          return n - n + 1 >= 0 && num !== "";
        };

        /***/
      },
      /* 462 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var isNumber = __webpack_require__(463);

        var typeOf = __webpack_require__(464);

        module.exports = randomatic;
        var type = {
          lower: "abcdefghijklmnopqrstuvwxyz",
          upper: "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
          number: "0123456789",
          special: "~!@#$%^&()_+-={}[];',."
        };
        type.all = type.lower + type.upper + type.number + type.special;

        function randomatic(pattern, length, options) {
          if (typeof pattern === "undefined") {
            throw new Error("randomatic expects a string or number.");
          }

          var custom = false;

          if (arguments.length === 1) {
            if (typeof pattern === "string") {
              length = pattern.length;
            } else if (isNumber(pattern)) {
              options = {};
              length = pattern;
              pattern = "*";
            }
          }

          if (typeOf(length) === "object" && length.hasOwnProperty("chars")) {
            options = length;
            pattern = options.chars;
            length = pattern.length;
            custom = true;
          }

          var opts = options || {};
          var mask = "";
          var res = "";
          if (pattern.indexOf("?") !== -1) mask += opts.chars;
          if (pattern.indexOf("a") !== -1) mask += type.lower;
          if (pattern.indexOf("A") !== -1) mask += type.upper;
          if (pattern.indexOf("0") !== -1) mask += type.number;
          if (pattern.indexOf("!") !== -1) mask += type.special;
          if (pattern.indexOf("*") !== -1) mask += type.all;
          if (custom) mask += pattern;

          while (length--) {
            res += mask.charAt(parseInt(Math.random() * mask.length, 10));
          }

          return res;
        }

        /***/
      },
      /* 463 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var typeOf = __webpack_require__(89);

        module.exports = function isNumber(num) {
          var type = typeOf(num);

          if (type === "string") {
            if (!num.trim()) return false;
          } else if (type !== "number") {
            return false;
          }

          return num - num + 1 >= 0;
        };

        /***/
      },
      /* 464 */
      /***/ function(module, exports, __webpack_require__) {
        var isBuffer = __webpack_require__(161);

        var toString = Object.prototype.toString;

        module.exports = function kindOf(val) {
          if (typeof val === "undefined") {
            return "undefined";
          }

          if (val === null) {
            return "null";
          }

          if (val === true || val === false || val instanceof Boolean) {
            return "boolean";
          }

          if (typeof val === "string" || val instanceof String) {
            return "string";
          }

          if (typeof val === "number" || val instanceof Number) {
            return "number";
          }

          if (typeof val === "function" || val instanceof Function) {
            return "function";
          }

          if (typeof Array.isArray !== "undefined" && Array.isArray(val)) {
            return "array";
          }

          if (val instanceof RegExp) {
            return "regexp";
          }

          if (val instanceof Date) {
            return "date";
          }

          var type = toString.call(val);

          if (type === "[object RegExp]") {
            return "regexp";
          }

          if (type === "[object Date]") {
            return "date";
          }

          if (type === "[object Arguments]") {
            return "arguments";
          }

          if (type === "[object Error]") {
            return "error";
          }

          if (type === "[object Promise]") {
            return "promise";
          }

          if (isBuffer(val)) {
            return "buffer";
          }

          if (type === "[object Set]") {
            return "set";
          }

          if (type === "[object WeakSet]") {
            return "weakset";
          }

          if (type === "[object Map]") {
            return "map";
          }

          if (type === "[object WeakMap]") {
            return "weakmap";
          }

          if (type === "[object Symbol]") {
            return "symbol";
          }

          if (type === "[object Int8Array]") {
            return "int8array";
          }

          if (type === "[object Uint8Array]") {
            return "uint8array";
          }

          if (type === "[object Uint8ClampedArray]") {
            return "uint8clampedarray";
          }

          if (type === "[object Int16Array]") {
            return "int16array";
          }

          if (type === "[object Uint16Array]") {
            return "uint16array";
          }

          if (type === "[object Int32Array]") {
            return "int32array";
          }

          if (type === "[object Uint32Array]") {
            return "uint32array";
          }

          if (type === "[object Float32Array]") {
            return "float32array";
          }

          if (type === "[object Float64Array]") {
            return "float64array";
          }

          return "object";
        };

        /***/
      },
      /* 465 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var res = "";
        var cache;
        module.exports = repeat;

        function repeat(str, num) {
          if (typeof str !== "string") {
            throw new TypeError("expected a string");
          }

          if (num === 1) return str;
          if (num === 2) return str + str;
          var max = str.length * num;

          if (cache !== str || typeof cache === "undefined") {
            cache = str;
            res = "";
          } else if (res.length >= max) {
            return res.substr(0, max);
          }

          while (max > res.length && num > 1) {
            if (num & 1) {
              res += str;
            }

            num >>= 1;
            str += str;
          }

          res += str;
          res = res.substr(0, max);
          return res;
        }

        /***/
      },
      /* 466 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.before = function before(str, re) {
          return str.replace(re, function(match) {
            var id = randomize();
            cache[id] = match;
            return "__ID" + id + "__";
          });
        };

        exports.after = function after(str) {
          return str.replace(/__ID(.{5})__/g, function(_, id) {
            return cache[id];
          });
        };

        function randomize() {
          return Math.random()
            .toString()
            .slice(2, 7);
        }

        var cache = {};

        /***/
      },
      /* 467 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var isPosixBracket = __webpack_require__(468);

        var POSIX = {
          alnum: "a-zA-Z0-9",
          alpha: "a-zA-Z",
          blank: " \\t",
          cntrl: "\\x00-\\x1F\\x7F",
          digit: "0-9",
          graph: "\\x21-\\x7E",
          lower: "a-z",
          print: "\\x20-\\x7E",
          punct: "-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
          space: " \\t\\r\\n\\v\\f",
          upper: "A-Z",
          word: "A-Za-z0-9_",
          xdigit: "A-Fa-f0-9"
        };
        module.exports = brackets;

        function brackets(str) {
          if (!isPosixBracket(str)) {
            return str;
          }

          var negated = false;

          if (str.indexOf("[^") !== -1) {
            negated = true;
            str = str.split("[^").join("[");
          }

          if (str.indexOf("[!") !== -1) {
            negated = true;
            str = str.split("[!").join("[");
          }

          var a = str.split("[");
          var b = str.split("]");
          var imbalanced = a.length !== b.length;
          var parts = str.split(/(?::\]\[:|\[?\[:|:\]\]?)/);
          var len = parts.length,
            i = 0;
          var end = "",
            beg = "";
          var res = [];

          while (len--) {
            var inner = parts[i++];

            if (inner === "^[!" || inner === "[!") {
              inner = "";
              negated = true;
            }

            var prefix = negated ? "^" : "";
            var ch = POSIX[inner];

            if (ch) {
              res.push("[" + prefix + ch + "]");
            } else if (inner) {
              if (/^\[?\w-\w\]?$/.test(inner)) {
                if (i === parts.length) {
                  res.push("[" + prefix + inner);
                } else if (i === 1) {
                  res.push(prefix + inner + "]");
                } else {
                  res.push(prefix + inner);
                }
              } else {
                if (i === 1) {
                  beg += inner;
                } else if (i === parts.length) {
                  end += inner;
                } else {
                  res.push("[" + prefix + inner + "]");
                }
              }
            }
          }

          var result = res.join("|");
          var rlen = res.length || 1;

          if (rlen > 1) {
            result = "(?:" + result + ")";
            rlen = 1;
          }

          if (beg) {
            rlen++;

            if (beg.charAt(0) === "[") {
              if (imbalanced) {
                beg = "\\[" + beg.slice(1);
              } else {
                beg += "]";
              }
            }

            result = beg + result;
          }

          if (end) {
            rlen++;

            if (end.slice(-1) === "]") {
              if (imbalanced) {
                end = end.slice(0, end.length - 1) + "\\]";
              } else {
                end = "[" + end;
              }
            }

            result += end;
          }

          if (rlen > 1) {
            result = result.split("][").join("]|[");

            if (result.indexOf("|") !== -1 && !/\(\?/.test(result)) {
              result = "(?:" + result + ")";
            }
          }

          result = result.replace(/\[+=|=\]+/g, "\\b");
          return result;
        }

        brackets.makeRe = function(pattern) {
          try {
            return new RegExp(brackets(pattern));
          } catch (err) {}
        };

        brackets.isMatch = function(str, pattern) {
          try {
            return brackets.makeRe(pattern).test(str);
          } catch (err) {
            return false;
          }
        };

        brackets.match = function(arr, pattern) {
          var len = arr.length,
            i = 0;
          var res = arr.slice();
          var re = brackets.makeRe(pattern);

          while (i < len) {
            var ele = arr[i++];

            if (!re.test(ele)) {
              continue;
            }

            res.splice(i, 1);
          }

          return res;
        };

        /***/
      },
      /* 468 */
      /***/ function(module, exports) {
        module.exports = function isPosixBracket(str) {
          return (
            typeof str === "string" && /\[([:.=+])(?:[^\[\]]|)+\1\]/.test(str)
          );
        };

        /***/
      },
      /* 469 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var isExtglob = __webpack_require__(52);

        var re,
          cache = {};
        module.exports = extglob;

        function extglob(str, opts) {
          opts = opts || {};
          var o = {},
            i = 0;
          str = str.replace(/!\(([^\w*()])/g, "$1!(");
          str = str.replace(/([*\/])\.!\([*]\)/g, function(m, ch) {
            if (ch === "/") {
              return escape("\\/[^.]+");
            }

            return escape("[^.]+");
          });
          var key =
            str +
            String(!!opts.regex) +
            String(!!opts.contains) +
            String(!!opts.escape);

          if (cache.hasOwnProperty(key)) {
            return cache[key];
          }

          if (!(re instanceof RegExp)) {
            re = regex();
          }

          opts.negate = false;
          var m;

          while ((m = re.exec(str))) {
            var prefix = m[1];
            var inner = m[3];

            if (prefix === "!") {
              opts.negate = true;
            }

            var id = "__EXTGLOB_" + i++ + "__";
            o[id] = wrap(inner, prefix, opts.escape);
            str = str.split(m[0]).join(id);
          }

          var keys = Object.keys(o);
          var len = keys.length;

          while (len--) {
            var prop = keys[len];
            str = str.split(prop).join(o[prop]);
          }

          var result = opts.regex
            ? toRegex(str, opts.contains, opts.negate)
            : str;
          result = result.split(".").join("\\.");
          return (cache[key] = result);
        }

        function wrap(inner, prefix, esc) {
          if (esc) inner = escape(inner);

          switch (prefix) {
            case "!":
              return "(?!" + inner + ")[^/]" + (esc ? "%%%~" : "*?");

            case "@":
              return "(?:" + inner + ")";

            case "+":
              return "(?:" + inner + ")+";

            case "*":
              return "(?:" + inner + ")" + (esc ? "%%" : "*");

            case "?":
              return "(?:" + inner + "|)";

            default:
              return inner;
          }
        }

        function escape(str) {
          str = str.split("*").join("[^/]%%%~");
          str = str.split(".").join("\\.");
          return str;
        }

        function regex() {
          return /(\\?[@?!+*$]\\?)(\(([^()]*?)\))/;
        }

        function negate(str) {
          return "(?!^" + str + ").*$";
        }

        function toRegex(pattern, contains, isNegated) {
          var prefix = contains ? "^" : "";
          var after = contains ? "$" : "";
          pattern = "(?:" + pattern + ")" + after;

          if (isNegated) {
            pattern = prefix + negate(pattern);
          }

          return new RegExp(prefix + pattern);
        }

        /***/
      },
      /* 470 */
      /***/ function(module, exports, __webpack_require__) {
        var removeTrailingSeparator = __webpack_require__(471);

        module.exports = function normalizePath(str, stripTrailing) {
          if (typeof str !== "string") {
            throw new TypeError("expected a string");
          }

          str = str.replace(/[\\\/]+/g, "/");

          if (stripTrailing !== false) {
            str = removeTrailingSeparator(str);
          }

          return str;
        };

        /***/
      },
      /* 471 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process) {
          var isWin = process.platform === "win32";

          module.exports = function(str) {
            var i = str.length - 1;

            if (i < 2) {
              return str;
            }

            while (isSeparator(str, i)) {
              i--;
            }

            return str.substr(0, i + 1);
          };

          function isSeparator(str, i) {
            var char = str[i];
            return i > 0 && (char === "/" || (isWin && char === "\\"));
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(12)));

        /***/
      },
      /* 472 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var isObject = __webpack_require__(473);

        var forOwn = __webpack_require__(474);

        module.exports = function omit(obj, keys) {
          if (!isObject(obj)) return {};
          keys = [].concat.apply([], [].slice.call(arguments, 1));
          var last = keys[keys.length - 1];
          var res = {},
            fn;

          if (typeof last === "function") {
            fn = keys.pop();
          }

          var isFunction = typeof fn === "function";

          if (!keys.length && !isFunction) {
            return obj;
          }

          forOwn(obj, function(value, key) {
            if (keys.indexOf(key) === -1) {
              if (!isFunction) {
                res[key] = value;
              } else if (fn(value, key, obj)) {
                res[key] = value;
              }
            }
          });
          return res;
        };

        /***/
      },
      /* 473 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = function isExtendable(val) {
          return (
            typeof val !== "undefined" &&
            val !== null &&
            (typeof val === "object" || typeof val === "function")
          );
        };

        /***/
      },
      /* 474 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var forIn = __webpack_require__(475);

        var hasOwn = Object.prototype.hasOwnProperty;

        module.exports = function forOwn(obj, fn, thisArg) {
          forIn(obj, function(val, key) {
            if (hasOwn.call(obj, key)) {
              return fn.call(thisArg, obj[key], key, obj);
            }
          });
        };

        /***/
      },
      /* 475 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = function forIn(obj, fn, thisArg) {
          for (var key in obj) {
            if (fn.call(thisArg, obj[key], key, obj) === false) {
              break;
            }
          }
        };

        /***/
      },
      /* 476 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var isGlob = __webpack_require__(53);

        var findBase = __webpack_require__(477);

        var extglob = __webpack_require__(52);

        var dotfile = __webpack_require__(479);

        var cache = (module.exports.cache = {});

        module.exports = function parseGlob(glob) {
          if (cache.hasOwnProperty(glob)) {
            return cache[glob];
          }

          var tok = {};
          tok.orig = glob;
          tok.is = {};
          glob = escape(glob);
          var parsed = findBase(glob);
          tok.is.glob = parsed.isGlob;
          tok.glob = parsed.glob;
          tok.base = parsed.base;
          var segs = /([^\/]*)$/.exec(glob);
          tok.path = {};
          tok.path.dirname = "";
          tok.path.basename = segs[1] || "";
          tok.path.dirname = glob.split(tok.path.basename).join("") || "";
          var basename = (tok.path.basename || "").split(".") || "";
          tok.path.filename = basename[0] || "";
          tok.path.extname = basename.slice(1).join(".") || "";
          tok.path.ext = "";

          if (isGlob(tok.path.dirname) && !tok.path.basename) {
            if (!/\/$/.test(tok.glob)) {
              tok.path.basename = tok.glob;
            }

            tok.path.dirname = tok.base;
          }

          if (glob.indexOf("/") === -1 && !tok.is.globstar) {
            tok.path.dirname = "";
            tok.path.basename = tok.orig;
          }

          var dot = tok.path.basename.indexOf(".");

          if (dot !== -1) {
            tok.path.filename = tok.path.basename.slice(0, dot);
            tok.path.extname = tok.path.basename.slice(dot);
          }

          if (tok.path.extname.charAt(0) === ".") {
            var exts = tok.path.extname.split(".");
            tok.path.ext = exts[exts.length - 1];
          }

          tok.glob = unescape(tok.glob);
          tok.path.dirname = unescape(tok.path.dirname);
          tok.path.basename = unescape(tok.path.basename);
          tok.path.filename = unescape(tok.path.filename);
          tok.path.extname = unescape(tok.path.extname);
          var is = glob && tok.is.glob;
          tok.is.negated = glob && glob.charAt(0) === "!";
          tok.is.extglob = glob && extglob(glob);
          tok.is.braces = has(is, glob, "{");
          tok.is.brackets = has(is, glob, "[:");
          tok.is.globstar = has(is, glob, "**");
          tok.is.dotfile =
            dotfile(tok.path.basename) || dotfile(tok.path.filename);
          tok.is.dotdir = dotdir(tok.path.dirname);
          return (cache[glob] = tok);
        };

        function dotdir(base) {
          if (base.indexOf("/.") !== -1) {
            return true;
          }

          if (base.charAt(0) === "." && base.charAt(1) !== "/") {
            return true;
          }

          return false;
        }

        function has(is, glob, ch) {
          return is && glob.indexOf(ch) !== -1;
        }

        function escape(str) {
          var re = /\{([^{}]*?)}|\(([^()]*?)\)|\[([^\[\]]*?)\]/g;
          return str.replace(re, function(outter, braces, parens, brackets) {
            var inner = braces || parens || brackets;

            if (!inner) {
              return outter;
            }

            return outter.split(inner).join(esc(inner));
          });
        }

        function esc(str) {
          str = str.split("/").join("__SLASH__");
          str = str.split(".").join("__DOT__");
          return str;
        }

        function unescape(str) {
          str = str.split("__SLASH__").join("/");
          str = str.split("__DOT__").join(".");
          return str;
        }

        /***/
      },
      /* 477 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var path = __webpack_require__(7);

        var parent = __webpack_require__(478);

        var isGlob = __webpack_require__(53);

        module.exports = function globBase(pattern) {
          if (typeof pattern !== "string") {
            throw new TypeError("glob-base expects a string.");
          }

          var res = {};
          res.base = parent(pattern);
          res.isGlob = isGlob(pattern);

          if (res.base !== ".") {
            res.glob = pattern.substr(res.base.length);

            if (res.glob.charAt(0) === "/") {
              res.glob = res.glob.substr(1);
            }
          } else {
            res.glob = pattern;
          }

          if (!res.isGlob) {
            res.base = dirname(pattern);
            res.glob =
              res.base !== "." ? pattern.substr(res.base.length) : pattern;
          }

          if (res.glob.substr(0, 2) === "./") {
            res.glob = res.glob.substr(2);
          }

          if (res.glob.charAt(0) === "/") {
            res.glob = res.glob.substr(1);
          }

          return res;
        };

        function dirname(glob) {
          if (glob.slice(-1) === "/") return glob;
          return path.dirname(glob);
        }

        /***/
      },
      /* 478 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var path = __webpack_require__(7);

        var isglob = __webpack_require__(53);

        module.exports = function globParent(str) {
          str += "a";

          do {
            str = path.dirname(str);
          } while (isglob(str));

          return str;
        };

        /***/
      },
      /* 479 */
      /***/ function(module, exports) {
        module.exports = function(str) {
          if (str.charCodeAt(0) === 46 && str.indexOf("/", 1) === -1) {
            return true;
          }

          var slash = str.lastIndexOf("/");
          return slash !== -1 ? str.charCodeAt(slash + 1) === 46 : false;
        };

        /***/
      },
      /* 480 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var equal = __webpack_require__(481);

        var basic = {};
        var cache = {};
        module.exports = regexCache;

        function regexCache(fn, str, opts) {
          var key = "_default_",
            regex,
            cached;

          if (!str && !opts) {
            if (typeof fn !== "function") {
              return fn;
            }

            return basic[key] || (basic[key] = fn(str));
          }

          var isString = typeof str === "string";

          if (isString) {
            if (!opts) {
              return basic[str] || (basic[str] = fn(str));
            }

            key = str;
          } else {
            opts = str;
          }

          cached = cache[key];

          if (cached && equal(cached.opts, opts)) {
            return cached.regex;
          }

          memo(key, opts, (regex = fn(str, opts)));
          return regex;
        }

        function memo(key, opts, regex) {
          cache[key] = {
            regex: regex,
            opts: opts
          };
        }

        module.exports.cache = cache;
        module.exports.basic = basic;

        /***/
      },
      /* 481 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var isPrimitive = __webpack_require__(482);

        module.exports = function isEqual(a, b) {
          if (!a && !b) {
            return true;
          }

          if ((!a && b) || (a && !b)) {
            return false;
          }

          var numKeysA = 0,
            numKeysB = 0,
            key;

          for (key in b) {
            numKeysB++;

            if (
              !isPrimitive(b[key]) ||
              !a.hasOwnProperty(key) ||
              a[key] !== b[key]
            ) {
              return false;
            }
          }

          for (key in a) {
            numKeysA++;
          }

          return numKeysA === numKeysB;
        };

        /***/
      },
      /* 482 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        module.exports = function isPrimitive(value) {
          return (
            value == null ||
            (typeof value !== "function" && typeof value !== "object")
          );
        };

        /***/
      },
      /* 483 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var chars = __webpack_require__(484);

        var utils = __webpack_require__(88);

        var Glob = (module.exports = function Glob(pattern, options) {
          if (!(this instanceof Glob)) {
            return new Glob(pattern, options);
          }

          this.options = options || {};
          this.pattern = pattern;
          this.history = [];
          this.tokens = {};
          this.init(pattern);
        });

        Glob.prototype.init = function(pattern) {
          this.orig = pattern;
          this.negated = this.isNegated();
          this.options.track = this.options.track || false;
          this.options.makeRe = true;
        };

        Glob.prototype.track = function(msg) {
          if (this.options.track) {
            this.history.push({
              msg: msg,
              pattern: this.pattern
            });
          }
        };

        Glob.prototype.isNegated = function() {
          if (this.pattern.charCodeAt(0) === 33) {
            this.pattern = this.pattern.slice(1);
            return true;
          }

          return false;
        };

        Glob.prototype.braces = function() {
          if (this.options.nobraces !== true && this.options.nobrace !== true) {
            var a = this.pattern.match(/[\{\(\[]/g);
            var b = this.pattern.match(/[\}\)\]]/g);

            if (a && b && a.length !== b.length) {
              this.options.makeRe = false;
            }

            var expanded = utils.braces(this.pattern, this.options);
            this.pattern = expanded.join("|");
          }
        };

        Glob.prototype.brackets = function() {
          if (this.options.nobrackets !== true) {
            this.pattern = utils.brackets(this.pattern);
          }
        };

        Glob.prototype.extglob = function() {
          if (this.options.noextglob === true) return;

          if (utils.isExtglob(this.pattern)) {
            this.pattern = utils.extglob(this.pattern, {
              escape: true
            });
          }
        };

        Glob.prototype.parse = function(pattern) {
          this.tokens = utils.parseGlob(pattern || this.pattern, true);
          return this.tokens;
        };

        Glob.prototype._replace = function(a, b, escape) {
          this.track('before (find): "' + a + '" (replace with): "' + b + '"');
          if (escape) b = esc(b);

          if (a && b && typeof a === "string") {
            this.pattern = this.pattern.split(a).join(b);
          } else {
            this.pattern = this.pattern.replace(a, b);
          }

          this.track("after");
        };

        Glob.prototype.escape = function(str) {
          this.track("before escape: ");
          var re = /["\\](['"]?[^"'\\]['"]?)/g;
          this.pattern = str.replace(re, function($0, $1) {
            var o = chars.ESC;
            var ch = o && o[$1];

            if (ch) {
              return ch;
            }

            if (/[a-z]/i.test($0)) {
              return $0.split("\\").join("");
            }

            return $0;
          });
          this.track("after escape: ");
        };

        Glob.prototype.unescape = function(str) {
          var re = /__([A-Z]+)_([A-Z]+)__/g;
          this.pattern = str.replace(re, function($0, $1) {
            return chars[$1][$0];
          });
          this.pattern = unesc(this.pattern);
        };

        function esc(str) {
          str = str.split("?").join("%~");
          str = str.split("*").join("%%");
          return str;
        }

        function unesc(str) {
          str = str.split("%~").join("?");
          str = str.split("%%").join("*");
          return str;
        }

        /***/
      },
      /* 484 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var chars = {},
          unesc,
          temp;

        function reverse(object, prepender) {
          return Object.keys(object).reduce(function(reversed, key) {
            var newKey = prepender ? prepender + key : key;
            reversed[object[key]] = newKey;
            return reversed;
          }, {});
        }

        chars.escapeRegex = {
          "?": /\?/g,
          "@": /\@/g,
          "!": /\!/g,
          "+": /\+/g,
          "*": /\*/g,
          "(": /\(/g,
          ")": /\)/g,
          "[": /\[/g,
          "]": /\]/g
        };
        chars.ESC = {
          "?": "__UNESC_QMRK__",
          "@": "__UNESC_AMPE__",
          "!": "__UNESC_EXCL__",
          "+": "__UNESC_PLUS__",
          "*": "__UNESC_STAR__",
          ",": "__UNESC_COMMA__",
          "(": "__UNESC_LTPAREN__",
          ")": "__UNESC_RTPAREN__",
          "[": "__UNESC_LTBRACK__",
          "]": "__UNESC_RTBRACK__"
        };
        chars.UNESC = unesc || (unesc = reverse(chars.ESC, "\\"));
        chars.ESC_TEMP = {
          "?": "__TEMP_QMRK__",
          "@": "__TEMP_AMPE__",
          "!": "__TEMP_EXCL__",
          "*": "__TEMP_STAR__",
          "+": "__TEMP_PLUS__",
          ",": "__TEMP_COMMA__",
          "(": "__TEMP_LTPAREN__",
          ")": "__TEMP_RTPAREN__",
          "[": "__TEMP_LTBRACK__",
          "]": "__TEMP_RTBRACK__"
        };
        chars.TEMP = temp || (temp = reverse(chars.ESC_TEMP));
        module.exports = chars;

        /***/
      },
      /* 485 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;
        var _default = {
          auxiliaryComment: {
            message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
          },
          blacklist: {
            message:
              "Put the specific transforms you want in the `plugins` option"
          },
          breakConfig: {
            message: "This is not a necessary option in Babel 6"
          },
          experimental: {
            message:
              "Put the specific transforms you want in the `plugins` option"
          },
          externalHelpers: {
            message:
              "Use the `external-helpers` plugin instead. " +
              "Check out http://babeljs.io/docs/plugins/external-helpers/"
          },
          extra: {
            message: ""
          },
          jsxPragma: {
            message:
              "use the `pragma` option in the `react-jsx` plugin. " +
              "Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
          },
          loose: {
            message:
              "Specify the `loose` option for the relevant plugin you are using " +
              "or use a preset that sets the option."
          },
          metadataUsedHelpers: {
            message: "Not required anymore as this is enabled by default"
          },
          modules: {
            message:
              "Use the corresponding module transform plugin in the `plugins` option. " +
              "Check out http://babeljs.io/docs/plugins/#modules"
          },
          nonStandard: {
            message:
              "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. " +
              "Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"
          },
          optional: {
            message:
              "Put the specific transforms you want in the `plugins` option"
          },
          sourceMapName: {
            message:
              "The `sourceMapName` option has been removed because it makes more sense for the " +
              "tooling that calls Babel to assign `map.file` themselves."
          },
          stage: {
            message:
              "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
          },
          whitelist: {
            message:
              "Put the specific transforms you want in the `plugins` option"
          },
          resolveModuleSource: {
            version: 6,
            message:
              "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"
          },
          metadata: {
            version: 6,
            message:
              "Generated plugin metadata is always included in the output result"
          },
          sourceMapTarget: {
            version: 6,
            message:
              "The `sourceMapTarget` option has been removed because it makes more sense for the tooling " +
              "that calls Babel to assign `map.file` themselves."
          }
        };
        exports.default = _default;

        /***/
      },
      /* 486 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.validatePluginObject = validatePluginObject;

        var _optionAssertions = __webpack_require__(163);

        var VALIDATORS = {
          name: _optionAssertions.assertString,
          manipulateOptions: _optionAssertions.assertFunction,
          pre: _optionAssertions.assertFunction,
          post: _optionAssertions.assertFunction,
          inherits: _optionAssertions.assertFunction,
          visitor: assertVisitorMap,
          parserOverride: _optionAssertions.assertFunction,
          generatorOverride: _optionAssertions.assertFunction
        };

        function assertVisitorMap(key, value) {
          var obj = (0, _optionAssertions.assertObject)(key, value);

          if (obj) {
            Object.keys(obj).forEach(function(prop) {
              return assertVisitorHandler(prop, obj[prop]);
            });

            if (obj.enter || obj.exit) {
              throw new Error(
                "." +
                  key +
                  ' cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.'
              );
            }
          }

          return obj;
        }

        function assertVisitorHandler(key, value) {
          if (value && typeof value === "object") {
            Object.keys(value).forEach(function(handler) {
              if (handler !== "enter" && handler !== "exit") {
                throw new Error(
                  '.visitor["' +
                    key +
                    '"] may only have .enter and/or .exit handlers.'
                );
              }
            });
          } else if (typeof value !== "function") {
            throw new Error('.visitor["' + key + '"] must be a function');
          }

          return value;
        }

        function validatePluginObject(obj) {
          Object.keys(obj).forEach(function(key) {
            var validator = VALIDATORS[key];
            if (validator) validator(key, obj[key]);
            else throw new Error("." + key + " is not a valid Plugin property");
          });
          return obj;
        }

        /***/
      },
      /* 487 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = makeAPI;

        function _semver() {
          var data = _interopRequireDefault(__webpack_require__(488));

          _semver = function _semver() {
            return data;
          };

          return data;
        }

        var _ = __webpack_require__(2);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function makeAPI(cache) {
          var env = function env(value) {
            return cache.using(function(data) {
              if (typeof value === "undefined") return data.envName;
              if (typeof value === "function") return value(data.envName);
              if (!Array.isArray(value)) value = [value];
              return value.some(function(entry) {
                if (typeof entry !== "string") {
                  throw new Error("Unexpected non-string value");
                }

                return entry === data.envName;
              });
            });
          };

          return {
            version: _.version,
            cache: cache.simple(),
            env: env,
            async: function async() {
              return false;
            },
            assertVersion: assertVersion
          };
        }

        function assertVersion(range) {
          if (typeof range === "number") {
            if (!Number.isInteger(range)) {
              throw new Error("Expected string or integer value.");
            }

            range = "^" + range + ".0.0-0";
          }

          if (typeof range !== "string") {
            throw new Error("Expected string or integer value.");
          }

          if (_semver().default.satisfies(_.version, range)) return;
          var limit = Error.stackTraceLimit;

          if (typeof limit === "number" && limit < 25) {
            Error.stackTraceLimit = 25;
          }

          var err = new Error(
            'Requires Babel "' +
              range +
              '", but was loaded with "' +
              _.version +
              '". ' +
              "If you are sure you have a compatible version of @babel/core, " +
              "it is likely that something in your build process is loading the " +
              "wrong version. Inspect the stack trace of this error to look for " +
              'the first entry that doesn\'t mention "@babel/core" or "babel-core" ' +
              "to see what is calling Babel."
          );

          if (typeof limit === "number") {
            Error.stackTraceLimit = limit;
          }

          throw Object.assign(err, {
            code: "BABEL_VERSION_UNSUPPORTED",
            version: _.version,
            range: range
          });
        }

        /***/
      },
      /* 488 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(process) {
          exports = module.exports = SemVer;
          var debug;
          if (
            typeof process === "object" && { NODE_ENV: "production" } &&
            { NODE_ENV: "production" }.NODE_DEBUG &&
            /\bsemver\b/i.test({ NODE_ENV: "production" }.NODE_DEBUG)
          )
            debug = function debug() {
              var args = Array.prototype.slice.call(arguments, 0);
              args.unshift("SEMVER");
              console.log.apply(console, args);
            };
          else debug = function debug() {};
          exports.SEMVER_SPEC_VERSION = "2.0.0";
          var MAX_LENGTH = 256;
          var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
          var MAX_SAFE_COMPONENT_LENGTH = 16;
          var re = (exports.re = []);
          var src = (exports.src = []);
          var R = 0;
          var NUMERICIDENTIFIER = R++;
          src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
          var NUMERICIDENTIFIERLOOSE = R++;
          src[NUMERICIDENTIFIERLOOSE] = "[0-9]+";
          var NONNUMERICIDENTIFIER = R++;
          src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
          var MAINVERSION = R++;
          src[MAINVERSION] =
            "(" +
            src[NUMERICIDENTIFIER] +
            ")\\." +
            "(" +
            src[NUMERICIDENTIFIER] +
            ")\\." +
            "(" +
            src[NUMERICIDENTIFIER] +
            ")";
          var MAINVERSIONLOOSE = R++;
          src[MAINVERSIONLOOSE] =
            "(" +
            src[NUMERICIDENTIFIERLOOSE] +
            ")\\." +
            "(" +
            src[NUMERICIDENTIFIERLOOSE] +
            ")\\." +
            "(" +
            src[NUMERICIDENTIFIERLOOSE] +
            ")";
          var PRERELEASEIDENTIFIER = R++;
          src[PRERELEASEIDENTIFIER] =
            "(?:" +
            src[NUMERICIDENTIFIER] +
            "|" +
            src[NONNUMERICIDENTIFIER] +
            ")";
          var PRERELEASEIDENTIFIERLOOSE = R++;
          src[PRERELEASEIDENTIFIERLOOSE] =
            "(?:" +
            src[NUMERICIDENTIFIERLOOSE] +
            "|" +
            src[NONNUMERICIDENTIFIER] +
            ")";
          var PRERELEASE = R++;
          src[PRERELEASE] =
            "(?:-(" +
            src[PRERELEASEIDENTIFIER] +
            "(?:\\." +
            src[PRERELEASEIDENTIFIER] +
            ")*))";
          var PRERELEASELOOSE = R++;
          src[PRERELEASELOOSE] =
            "(?:-?(" +
            src[PRERELEASEIDENTIFIERLOOSE] +
            "(?:\\." +
            src[PRERELEASEIDENTIFIERLOOSE] +
            ")*))";
          var BUILDIDENTIFIER = R++;
          src[BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
          var BUILD = R++;
          src[BUILD] =
            "(?:\\+(" +
            src[BUILDIDENTIFIER] +
            "(?:\\." +
            src[BUILDIDENTIFIER] +
            ")*))";
          var FULL = R++;
          var FULLPLAIN =
            "v?" + src[MAINVERSION] + src[PRERELEASE] + "?" + src[BUILD] + "?";
          src[FULL] = "^" + FULLPLAIN + "$";
          var LOOSEPLAIN =
            "[v=\\s]*" +
            src[MAINVERSIONLOOSE] +
            src[PRERELEASELOOSE] +
            "?" +
            src[BUILD] +
            "?";
          var LOOSE = R++;
          src[LOOSE] = "^" + LOOSEPLAIN + "$";
          var GTLT = R++;
          src[GTLT] = "((?:<|>)?=?)";
          var XRANGEIDENTIFIERLOOSE = R++;
          src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
          var XRANGEIDENTIFIER = R++;
          src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
          var XRANGEPLAIN = R++;
          src[XRANGEPLAIN] =
            "[v=\\s]*(" +
            src[XRANGEIDENTIFIER] +
            ")" +
            "(?:\\.(" +
            src[XRANGEIDENTIFIER] +
            ")" +
            "(?:\\.(" +
            src[XRANGEIDENTIFIER] +
            ")" +
            "(?:" +
            src[PRERELEASE] +
            ")?" +
            src[BUILD] +
            "?" +
            ")?)?";
          var XRANGEPLAINLOOSE = R++;
          src[XRANGEPLAINLOOSE] =
            "[v=\\s]*(" +
            src[XRANGEIDENTIFIERLOOSE] +
            ")" +
            "(?:\\.(" +
            src[XRANGEIDENTIFIERLOOSE] +
            ")" +
            "(?:\\.(" +
            src[XRANGEIDENTIFIERLOOSE] +
            ")" +
            "(?:" +
            src[PRERELEASELOOSE] +
            ")?" +
            src[BUILD] +
            "?" +
            ")?)?";
          var XRANGE = R++;
          src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
          var XRANGELOOSE = R++;
          src[XRANGELOOSE] =
            "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";
          var COERCE = R++;
          src[COERCE] =
            "(?:^|[^\\d])" +
            "(\\d{1," +
            MAX_SAFE_COMPONENT_LENGTH +
            "})" +
            "(?:\\.(\\d{1," +
            MAX_SAFE_COMPONENT_LENGTH +
            "}))?" +
            "(?:\\.(\\d{1," +
            MAX_SAFE_COMPONENT_LENGTH +
            "}))?" +
            "(?:$|[^\\d])";
          var LONETILDE = R++;
          src[LONETILDE] = "(?:~>?)";
          var TILDETRIM = R++;
          src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
          re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
          var tildeTrimReplace = "$1~";
          var TILDE = R++;
          src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
          var TILDELOOSE = R++;
          src[TILDELOOSE] = "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";
          var LONECARET = R++;
          src[LONECARET] = "(?:\\^)";
          var CARETTRIM = R++;
          src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
          re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
          var caretTrimReplace = "$1^";
          var CARET = R++;
          src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
          var CARETLOOSE = R++;
          src[CARETLOOSE] = "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";
          var COMPARATORLOOSE = R++;
          src[COMPARATORLOOSE] =
            "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
          var COMPARATOR = R++;
          src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";
          var COMPARATORTRIM = R++;
          src[COMPARATORTRIM] =
            "(\\s*)" +
            src[GTLT] +
            "\\s*(" +
            LOOSEPLAIN +
            "|" +
            src[XRANGEPLAIN] +
            ")";
          re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
          var comparatorTrimReplace = "$1$2$3";
          var HYPHENRANGE = R++;
          src[HYPHENRANGE] =
            "^\\s*(" +
            src[XRANGEPLAIN] +
            ")" +
            "\\s+-\\s+" +
            "(" +
            src[XRANGEPLAIN] +
            ")" +
            "\\s*$";
          var HYPHENRANGELOOSE = R++;
          src[HYPHENRANGELOOSE] =
            "^\\s*(" +
            src[XRANGEPLAINLOOSE] +
            ")" +
            "\\s+-\\s+" +
            "(" +
            src[XRANGEPLAINLOOSE] +
            ")" +
            "\\s*$";
          var STAR = R++;
          src[STAR] = "(<|>)?=?\\s*\\*";

          for (var i = 0; i < R; i++) {
            debug(i, src[i]);
            if (!re[i]) re[i] = new RegExp(src[i]);
          }

          exports.parse = parse;

          function parse(version, loose) {
            if (version instanceof SemVer) return version;
            if (typeof version !== "string") return null;
            if (version.length > MAX_LENGTH) return null;
            var r = loose ? re[LOOSE] : re[FULL];
            if (!r.test(version)) return null;

            try {
              return new SemVer(version, loose);
            } catch (er) {
              return null;
            }
          }

          exports.valid = valid;

          function valid(version, loose) {
            var v = parse(version, loose);
            return v ? v.version : null;
          }

          exports.clean = clean;

          function clean(version, loose) {
            var s = parse(version.trim().replace(/^[=v]+/, ""), loose);
            return s ? s.version : null;
          }

          exports.SemVer = SemVer;

          function SemVer(version, loose) {
            if (version instanceof SemVer) {
              if (version.loose === loose) return version;
              else version = version.version;
            } else if (typeof version !== "string") {
              throw new TypeError("Invalid Version: " + version);
            }

            if (version.length > MAX_LENGTH)
              throw new TypeError(
                "version is longer than " + MAX_LENGTH + " characters"
              );
            if (!(this instanceof SemVer)) return new SemVer(version, loose);
            debug("SemVer", version, loose);
            this.loose = loose;
            var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);
            if (!m) throw new TypeError("Invalid Version: " + version);
            this.raw = version;
            this.major = +m[1];
            this.minor = +m[2];
            this.patch = +m[3];
            if (this.major > MAX_SAFE_INTEGER || this.major < 0)
              throw new TypeError("Invalid major version");
            if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
              throw new TypeError("Invalid minor version");
            if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
              throw new TypeError("Invalid patch version");
            if (!m[4]) this.prerelease = [];
            else
              this.prerelease = m[4].split(".").map(function(id) {
                if (/^[0-9]+$/.test(id)) {
                  var num = +id;
                  if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
                }

                return id;
              });
            this.build = m[5] ? m[5].split(".") : [];
            this.format();
          }

          SemVer.prototype.format = function() {
            this.version = this.major + "." + this.minor + "." + this.patch;
            if (this.prerelease.length)
              this.version += "-" + this.prerelease.join(".");
            return this.version;
          };

          SemVer.prototype.toString = function() {
            return this.version;
          };

          SemVer.prototype.compare = function(other) {
            debug("SemVer.compare", this.version, this.loose, other);
            if (!(other instanceof SemVer))
              other = new SemVer(other, this.loose);
            return this.compareMain(other) || this.comparePre(other);
          };

          SemVer.prototype.compareMain = function(other) {
            if (!(other instanceof SemVer))
              other = new SemVer(other, this.loose);
            return (
              compareIdentifiers(this.major, other.major) ||
              compareIdentifiers(this.minor, other.minor) ||
              compareIdentifiers(this.patch, other.patch)
            );
          };

          SemVer.prototype.comparePre = function(other) {
            if (!(other instanceof SemVer))
              other = new SemVer(other, this.loose);
            if (this.prerelease.length && !other.prerelease.length) return -1;
            else if (!this.prerelease.length && other.prerelease.length)
              return 1;
            else if (!this.prerelease.length && !other.prerelease.length)
              return 0;
            var i = 0;

            do {
              var a = this.prerelease[i];
              var b = other.prerelease[i];
              debug("prerelease compare", i, a, b);
              if (a === undefined && b === undefined) return 0;
              else if (b === undefined) return 1;
              else if (a === undefined) return -1;
              else if (a === b) continue;
              else return compareIdentifiers(a, b);
            } while (++i);
          };

          SemVer.prototype.inc = function(release, identifier) {
            switch (release) {
              case "premajor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor = 0;
                this.major++;
                this.inc("pre", identifier);
                break;

              case "preminor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor++;
                this.inc("pre", identifier);
                break;

              case "prepatch":
                this.prerelease.length = 0;
                this.inc("patch", identifier);
                this.inc("pre", identifier);
                break;

              case "prerelease":
                if (this.prerelease.length === 0) this.inc("patch", identifier);
                this.inc("pre", identifier);
                break;

              case "major":
                if (
                  this.minor !== 0 ||
                  this.patch !== 0 ||
                  this.prerelease.length === 0
                )
                  this.major++;
                this.minor = 0;
                this.patch = 0;
                this.prerelease = [];
                break;

              case "minor":
                if (this.patch !== 0 || this.prerelease.length === 0)
                  this.minor++;
                this.patch = 0;
                this.prerelease = [];
                break;

              case "patch":
                if (this.prerelease.length === 0) this.patch++;
                this.prerelease = [];
                break;

              case "pre":
                if (this.prerelease.length === 0) this.prerelease = [0];
                else {
                  var i = this.prerelease.length;

                  while (--i >= 0) {
                    if (typeof this.prerelease[i] === "number") {
                      this.prerelease[i]++;
                      i = -2;
                    }
                  }

                  if (i === -1) this.prerelease.push(0);
                }

                if (identifier) {
                  if (this.prerelease[0] === identifier) {
                    if (isNaN(this.prerelease[1]))
                      this.prerelease = [identifier, 0];
                  } else this.prerelease = [identifier, 0];
                }

                break;

              default:
                throw new Error("invalid increment argument: " + release);
            }

            this.format();
            this.raw = this.version;
            return this;
          };

          exports.inc = inc;

          function inc(version, release, loose, identifier) {
            if (typeof loose === "string") {
              identifier = loose;
              loose = undefined;
            }

            try {
              return new SemVer(version, loose).inc(release, identifier)
                .version;
            } catch (er) {
              return null;
            }
          }

          exports.diff = diff;

          function diff(version1, version2) {
            if (eq(version1, version2)) {
              return null;
            } else {
              var v1 = parse(version1);
              var v2 = parse(version2);

              if (v1.prerelease.length || v2.prerelease.length) {
                for (var key in v1) {
                  if (key === "major" || key === "minor" || key === "patch") {
                    if (v1[key] !== v2[key]) {
                      return "pre" + key;
                    }
                  }
                }

                return "prerelease";
              }

              for (var key in v1) {
                if (key === "major" || key === "minor" || key === "patch") {
                  if (v1[key] !== v2[key]) {
                    return key;
                  }
                }
              }
            }
          }

          exports.compareIdentifiers = compareIdentifiers;
          var numeric = /^[0-9]+$/;

          function compareIdentifiers(a, b) {
            var anum = numeric.test(a);
            var bnum = numeric.test(b);

            if (anum && bnum) {
              a = +a;
              b = +b;
            }

            return anum && !bnum
              ? -1
              : bnum && !anum ? 1 : a < b ? -1 : a > b ? 1 : 0;
          }

          exports.rcompareIdentifiers = rcompareIdentifiers;

          function rcompareIdentifiers(a, b) {
            return compareIdentifiers(b, a);
          }

          exports.major = major;

          function major(a, loose) {
            return new SemVer(a, loose).major;
          }

          exports.minor = minor;

          function minor(a, loose) {
            return new SemVer(a, loose).minor;
          }

          exports.patch = patch;

          function patch(a, loose) {
            return new SemVer(a, loose).patch;
          }

          exports.compare = compare;

          function compare(a, b, loose) {
            return new SemVer(a, loose).compare(new SemVer(b, loose));
          }

          exports.compareLoose = compareLoose;

          function compareLoose(a, b) {
            return compare(a, b, true);
          }

          exports.rcompare = rcompare;

          function rcompare(a, b, loose) {
            return compare(b, a, loose);
          }

          exports.sort = sort;

          function sort(list, loose) {
            return list.sort(function(a, b) {
              return exports.compare(a, b, loose);
            });
          }

          exports.rsort = rsort;

          function rsort(list, loose) {
            return list.sort(function(a, b) {
              return exports.rcompare(a, b, loose);
            });
          }

          exports.gt = gt;

          function gt(a, b, loose) {
            return compare(a, b, loose) > 0;
          }

          exports.lt = lt;

          function lt(a, b, loose) {
            return compare(a, b, loose) < 0;
          }

          exports.eq = eq;

          function eq(a, b, loose) {
            return compare(a, b, loose) === 0;
          }

          exports.neq = neq;

          function neq(a, b, loose) {
            return compare(a, b, loose) !== 0;
          }

          exports.gte = gte;

          function gte(a, b, loose) {
            return compare(a, b, loose) >= 0;
          }

          exports.lte = lte;

          function lte(a, b, loose) {
            return compare(a, b, loose) <= 0;
          }

          exports.cmp = cmp;

          function cmp(a, op, b, loose) {
            var ret;

            switch (op) {
              case "===":
                if (typeof a === "object") a = a.version;
                if (typeof b === "object") b = b.version;
                ret = a === b;
                break;

              case "!==":
                if (typeof a === "object") a = a.version;
                if (typeof b === "object") b = b.version;
                ret = a !== b;
                break;

              case "":
              case "=":
              case "==":
                ret = eq(a, b, loose);
                break;

              case "!=":
                ret = neq(a, b, loose);
                break;

              case ">":
                ret = gt(a, b, loose);
                break;

              case ">=":
                ret = gte(a, b, loose);
                break;

              case "<":
                ret = lt(a, b, loose);
                break;

              case "<=":
                ret = lte(a, b, loose);
                break;

              default:
                throw new TypeError("Invalid operator: " + op);
            }

            return ret;
          }

          exports.Comparator = Comparator;

          function Comparator(comp, loose) {
            if (comp instanceof Comparator) {
              if (comp.loose === loose) return comp;
              else comp = comp.value;
            }

            if (!(this instanceof Comparator))
              return new Comparator(comp, loose);
            debug("comparator", comp, loose);
            this.loose = loose;
            this.parse(comp);
            if (this.semver === ANY) this.value = "";
            else this.value = this.operator + this.semver.version;
            debug("comp", this);
          }

          var ANY = {};

          Comparator.prototype.parse = function(comp) {
            var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
            var m = comp.match(r);
            if (!m) throw new TypeError("Invalid comparator: " + comp);
            this.operator = m[1];
            if (this.operator === "=") this.operator = "";
            if (!m[2]) this.semver = ANY;
            else this.semver = new SemVer(m[2], this.loose);
          };

          Comparator.prototype.toString = function() {
            return this.value;
          };

          Comparator.prototype.test = function(version) {
            debug("Comparator.test", version, this.loose);
            if (this.semver === ANY) return true;
            if (typeof version === "string")
              version = new SemVer(version, this.loose);
            return cmp(version, this.operator, this.semver, this.loose);
          };

          Comparator.prototype.intersects = function(comp, loose) {
            if (!(comp instanceof Comparator)) {
              throw new TypeError("a Comparator is required");
            }

            var rangeTmp;

            if (this.operator === "") {
              rangeTmp = new Range(comp.value, loose);
              return satisfies(this.value, rangeTmp, loose);
            } else if (comp.operator === "") {
              rangeTmp = new Range(this.value, loose);
              return satisfies(comp.semver, rangeTmp, loose);
            }

            var sameDirectionIncreasing =
              (this.operator === ">=" || this.operator === ">") &&
              (comp.operator === ">=" || comp.operator === ">");
            var sameDirectionDecreasing =
              (this.operator === "<=" || this.operator === "<") &&
              (comp.operator === "<=" || comp.operator === "<");
            var sameSemVer = this.semver.version === comp.semver.version;
            var differentDirectionsInclusive =
              (this.operator === ">=" || this.operator === "<=") &&
              (comp.operator === ">=" || comp.operator === "<=");
            var oppositeDirectionsLessThan =
              cmp(this.semver, "<", comp.semver, loose) &&
              (this.operator === ">=" || this.operator === ">") &&
              (comp.operator === "<=" || comp.operator === "<");
            var oppositeDirectionsGreaterThan =
              cmp(this.semver, ">", comp.semver, loose) &&
              (this.operator === "<=" || this.operator === "<") &&
              (comp.operator === ">=" || comp.operator === ">");
            return (
              sameDirectionIncreasing ||
              sameDirectionDecreasing ||
              (sameSemVer && differentDirectionsInclusive) ||
              oppositeDirectionsLessThan ||
              oppositeDirectionsGreaterThan
            );
          };

          exports.Range = Range;

          function Range(range, loose) {
            if (range instanceof Range) {
              if (range.loose === loose) {
                return range;
              } else {
                return new Range(range.raw, loose);
              }
            }

            if (range instanceof Comparator) {
              return new Range(range.value, loose);
            }

            if (!(this instanceof Range)) return new Range(range, loose);
            this.loose = loose;
            this.raw = range;
            this.set = range
              .split(/\s*\|\|\s*/)
              .map(function(range) {
                return this.parseRange(range.trim());
              }, this)
              .filter(function(c) {
                return c.length;
              });

            if (!this.set.length) {
              throw new TypeError("Invalid SemVer Range: " + range);
            }

            this.format();
          }

          Range.prototype.format = function() {
            this.range = this.set
              .map(function(comps) {
                return comps.join(" ").trim();
              })
              .join("||")
              .trim();
            return this.range;
          };

          Range.prototype.toString = function() {
            return this.range;
          };

          Range.prototype.parseRange = function(range) {
            var loose = this.loose;
            range = range.trim();
            debug("range", range, loose);
            var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
            range = range.replace(hr, hyphenReplace);
            debug("hyphen replace", range);
            range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
            debug("comparator trim", range, re[COMPARATORTRIM]);
            range = range.replace(re[TILDETRIM], tildeTrimReplace);
            range = range.replace(re[CARETTRIM], caretTrimReplace);
            range = range.split(/\s+/).join(" ");
            var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
            var set = range
              .split(" ")
              .map(function(comp) {
                return parseComparator(comp, loose);
              })
              .join(" ")
              .split(/\s+/);

            if (this.loose) {
              set = set.filter(function(comp) {
                return !!comp.match(compRe);
              });
            }

            set = set.map(function(comp) {
              return new Comparator(comp, loose);
            });
            return set;
          };

          Range.prototype.intersects = function(range, loose) {
            if (!(range instanceof Range)) {
              throw new TypeError("a Range is required");
            }

            return this.set.some(function(thisComparators) {
              return thisComparators.every(function(thisComparator) {
                return range.set.some(function(rangeComparators) {
                  return rangeComparators.every(function(rangeComparator) {
                    return thisComparator.intersects(rangeComparator, loose);
                  });
                });
              });
            });
          };

          exports.toComparators = toComparators;

          function toComparators(range, loose) {
            return new Range(range, loose).set.map(function(comp) {
              return comp
                .map(function(c) {
                  return c.value;
                })
                .join(" ")
                .trim()
                .split(" ");
            });
          }

          function parseComparator(comp, loose) {
            debug("comp", comp);
            comp = replaceCarets(comp, loose);
            debug("caret", comp);
            comp = replaceTildes(comp, loose);
            debug("tildes", comp);
            comp = replaceXRanges(comp, loose);
            debug("xrange", comp);
            comp = replaceStars(comp, loose);
            debug("stars", comp);
            return comp;
          }

          function isX(id) {
            return !id || id.toLowerCase() === "x" || id === "*";
          }

          function replaceTildes(comp, loose) {
            return comp
              .trim()
              .split(/\s+/)
              .map(function(comp) {
                return replaceTilde(comp, loose);
              })
              .join(" ");
          }

          function replaceTilde(comp, loose) {
            var r = loose ? re[TILDELOOSE] : re[TILDE];
            return comp.replace(r, function(_, M, m, p, pr) {
              debug("tilde", comp, _, M, m, p, pr);
              var ret;
              if (isX(M)) ret = "";
              else if (isX(m)) ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
              else if (isX(p))
                ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
              else if (pr) {
                debug("replaceTilde pr", pr);
                if (pr.charAt(0) !== "-") pr = "-" + pr;
                ret =
                  ">=" +
                  M +
                  "." +
                  m +
                  "." +
                  p +
                  pr +
                  " <" +
                  M +
                  "." +
                  (+m + 1) +
                  ".0";
              } else
                ret =
                  ">=" +
                  M +
                  "." +
                  m +
                  "." +
                  p +
                  " <" +
                  M +
                  "." +
                  (+m + 1) +
                  ".0";
              debug("tilde return", ret);
              return ret;
            });
          }

          function replaceCarets(comp, loose) {
            return comp
              .trim()
              .split(/\s+/)
              .map(function(comp) {
                return replaceCaret(comp, loose);
              })
              .join(" ");
          }

          function replaceCaret(comp, loose) {
            debug("caret", comp, loose);
            var r = loose ? re[CARETLOOSE] : re[CARET];
            return comp.replace(r, function(_, M, m, p, pr) {
              debug("caret", comp, _, M, m, p, pr);
              var ret;
              if (isX(M)) ret = "";
              else if (isX(m)) ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
              else if (isX(p)) {
                if (M === "0")
                  ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
                else ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
              } else if (pr) {
                debug("replaceCaret pr", pr);
                if (pr.charAt(0) !== "-") pr = "-" + pr;

                if (M === "0") {
                  if (m === "0")
                    ret =
                      ">=" +
                      M +
                      "." +
                      m +
                      "." +
                      p +
                      pr +
                      " <" +
                      M +
                      "." +
                      m +
                      "." +
                      (+p + 1);
                  else
                    ret =
                      ">=" +
                      M +
                      "." +
                      m +
                      "." +
                      p +
                      pr +
                      " <" +
                      M +
                      "." +
                      (+m + 1) +
                      ".0";
                } else
                  ret =
                    ">=" +
                    M +
                    "." +
                    m +
                    "." +
                    p +
                    pr +
                    " <" +
                    (+M + 1) +
                    ".0.0";
              } else {
                debug("no pr");

                if (M === "0") {
                  if (m === "0")
                    ret =
                      ">=" +
                      M +
                      "." +
                      m +
                      "." +
                      p +
                      " <" +
                      M +
                      "." +
                      m +
                      "." +
                      (+p + 1);
                  else
                    ret =
                      ">=" +
                      M +
                      "." +
                      m +
                      "." +
                      p +
                      " <" +
                      M +
                      "." +
                      (+m + 1) +
                      ".0";
                } else
                  ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
              }
              debug("caret return", ret);
              return ret;
            });
          }

          function replaceXRanges(comp, loose) {
            debug("replaceXRanges", comp, loose);
            return comp
              .split(/\s+/)
              .map(function(comp) {
                return replaceXRange(comp, loose);
              })
              .join(" ");
          }

          function replaceXRange(comp, loose) {
            comp = comp.trim();
            var r = loose ? re[XRANGELOOSE] : re[XRANGE];
            return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
              debug("xRange", comp, ret, gtlt, M, m, p, pr);
              var xM = isX(M);
              var xm = xM || isX(m);
              var xp = xm || isX(p);
              var anyX = xp;
              if (gtlt === "=" && anyX) gtlt = "";

              if (xM) {
                if (gtlt === ">" || gtlt === "<") {
                  ret = "<0.0.0";
                } else {
                  ret = "*";
                }
              } else if (gtlt && anyX) {
                if (xm) m = 0;
                if (xp) p = 0;

                if (gtlt === ">") {
                  gtlt = ">=";

                  if (xm) {
                    M = +M + 1;
                    m = 0;
                    p = 0;
                  } else if (xp) {
                    m = +m + 1;
                    p = 0;
                  }
                } else if (gtlt === "<=") {
                  gtlt = "<";
                  if (xm) M = +M + 1;
                  else m = +m + 1;
                }

                ret = gtlt + M + "." + m + "." + p;
              } else if (xm) {
                ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
              } else if (xp) {
                ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
              }

              debug("xRange return", ret);
              return ret;
            });
          }

          function replaceStars(comp, loose) {
            debug("replaceStars", comp, loose);
            return comp.trim().replace(re[STAR], "");
          }

          function hyphenReplace(
            $0,
            from,
            fM,
            fm,
            fp,
            fpr,
            fb,
            to,
            tM,
            tm,
            tp,
            tpr,
            tb
          ) {
            if (isX(fM)) from = "";
            else if (isX(fm)) from = ">=" + fM + ".0.0";
            else if (isX(fp)) from = ">=" + fM + "." + fm + ".0";
            else from = ">=" + from;
            if (isX(tM)) to = "";
            else if (isX(tm)) to = "<" + (+tM + 1) + ".0.0";
            else if (isX(tp)) to = "<" + tM + "." + (+tm + 1) + ".0";
            else if (tpr) to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
            else to = "<=" + to;
            return (from + " " + to).trim();
          }

          Range.prototype.test = function(version) {
            if (!version) return false;
            if (typeof version === "string")
              version = new SemVer(version, this.loose);

            for (var i = 0; i < this.set.length; i++) {
              if (testSet(this.set[i], version)) return true;
            }

            return false;
          };

          function testSet(set, version) {
            for (var i = 0; i < set.length; i++) {
              if (!set[i].test(version)) return false;
            }

            if (version.prerelease.length) {
              for (var i = 0; i < set.length; i++) {
                debug(set[i].semver);
                if (set[i].semver === ANY) continue;

                if (set[i].semver.prerelease.length > 0) {
                  var allowed = set[i].semver;
                  if (
                    allowed.major === version.major &&
                    allowed.minor === version.minor &&
                    allowed.patch === version.patch
                  )
                    return true;
                }
              }

              return false;
            }

            return true;
          }

          exports.satisfies = satisfies;

          function satisfies(version, range, loose) {
            try {
              range = new Range(range, loose);
            } catch (er) {
              return false;
            }

            return range.test(version);
          }

          exports.maxSatisfying = maxSatisfying;

          function maxSatisfying(versions, range, loose) {
            var max = null;
            var maxSV = null;

            try {
              var rangeObj = new Range(range, loose);
            } catch (er) {
              return null;
            }

            versions.forEach(function(v) {
              if (rangeObj.test(v)) {
                if (!max || maxSV.compare(v) === -1) {
                  max = v;
                  maxSV = new SemVer(max, loose);
                }
              }
            });
            return max;
          }

          exports.minSatisfying = minSatisfying;

          function minSatisfying(versions, range, loose) {
            var min = null;
            var minSV = null;

            try {
              var rangeObj = new Range(range, loose);
            } catch (er) {
              return null;
            }

            versions.forEach(function(v) {
              if (rangeObj.test(v)) {
                if (!min || minSV.compare(v) === 1) {
                  min = v;
                  minSV = new SemVer(min, loose);
                }
              }
            });
            return min;
          }

          exports.validRange = validRange;

          function validRange(range, loose) {
            try {
              return new Range(range, loose).range || "*";
            } catch (er) {
              return null;
            }
          }

          exports.ltr = ltr;

          function ltr(version, range, loose) {
            return outside(version, range, "<", loose);
          }

          exports.gtr = gtr;

          function gtr(version, range, loose) {
            return outside(version, range, ">", loose);
          }

          exports.outside = outside;

          function outside(version, range, hilo, loose) {
            version = new SemVer(version, loose);
            range = new Range(range, loose);
            var gtfn, ltefn, ltfn, comp, ecomp;

            switch (hilo) {
              case ">":
                gtfn = gt;
                ltefn = lte;
                ltfn = lt;
                comp = ">";
                ecomp = ">=";
                break;

              case "<":
                gtfn = lt;
                ltefn = gte;
                ltfn = gt;
                comp = "<";
                ecomp = "<=";
                break;

              default:
                throw new TypeError('Must provide a hilo val of "<" or ">"');
            }

            if (satisfies(version, range, loose)) {
              return false;
            }

            for (var i = 0; i < range.set.length; ++i) {
              var comparators = range.set[i];
              var high = null;
              var low = null;
              comparators.forEach(function(comparator) {
                if (comparator.semver === ANY) {
                  comparator = new Comparator(">=0.0.0");
                }

                high = high || comparator;
                low = low || comparator;

                if (gtfn(comparator.semver, high.semver, loose)) {
                  high = comparator;
                } else if (ltfn(comparator.semver, low.semver, loose)) {
                  low = comparator;
                }
              });

              if (high.operator === comp || high.operator === ecomp) {
                return false;
              }

              if (
                (!low.operator || low.operator === comp) &&
                ltefn(version, low.semver)
              ) {
                return false;
              } else if (low.operator === ecomp && ltfn(version, low.semver)) {
                return false;
              }
            }

            return true;
          }

          exports.prerelease = prerelease;

          function prerelease(version, loose) {
            var parsed = parse(version, loose);
            return parsed && parsed.prerelease.length
              ? parsed.prerelease
              : null;
          }

          exports.intersects = intersects;

          function intersects(r1, r2, loose) {
            r1 = new Range(r1, loose);
            r2 = new Range(r2, loose);
            return r1.intersects(r2);
          }

          exports.coerce = coerce;

          function coerce(version) {
            if (version instanceof SemVer) return version;
            if (typeof version !== "string") return null;
            var match = version.match(re[COERCE]);
            if (match == null) return null;
            return parse(
              (match[1] || "0") +
                "." +
                (match[2] || "0") +
                "." +
                (match[3] || "0")
            );
          }
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(12)));

        /***/
      },
      /* 489 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(process) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = void 0;

          var _config = _interopRequireDefault(__webpack_require__(22));

          var _transformation = __webpack_require__(54);

          var _transformSync = _interopRequireDefault(__webpack_require__(175));

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          var transform = function transform(code, opts, callback) {
            if (typeof opts === "function") {
              opts = undefined;
              callback = opts;
            }

            if (callback === undefined)
              return (0, _transformSync.default)(code, opts);
            var cb = callback;
            process.nextTick(function() {
              var cfg;

              try {
                cfg = (0, _config.default)(opts);
                if (cfg === null) return cb(null, null);
              } catch (err) {
                return cb(err);
              }

              (0, _transformation.runAsync)(cfg, code, null, cb);
            });
          };

          exports.default = transform;
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(12)));

        /***/
      },
      /* 490 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        var PluginPass = (function() {
          function PluginPass(file, key, options) {
            this._map = new Map();
            this.key = key;
            this.file = file;
            this.opts = options || {};
            this.filename =
              typeof file.opts.filename === "string"
                ? file.opts.filename
                : undefined;
          }

          var _proto = PluginPass.prototype;

          _proto.set = function set(key, val) {
            this._map.set(key, val);
          };

          _proto.get = function get(key) {
            return this._map.get(key);
          };

          _proto.addHelper = function addHelper(name) {
            return this.file.addHelper(name);
          };

          _proto.addImport = function addImport() {
            return this.file.addImport();
          };

          _proto.getModuleName = function getModuleName() {
            return this.file.getModuleName();
          };

          _proto.buildCodeFrameError = function buildCodeFrameError(
            node,
            msg,
            Error
          ) {
            return this.file.buildCodeFrameError(node, msg, Error);
          };

          return PluginPass;
        })();

        exports.default = PluginPass;

        /***/
      },
      /* 491 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = loadBlockHoistPlugin;

        function _sortBy() {
          var data = _interopRequireDefault(__webpack_require__(492));

          _sortBy = function _sortBy() {
            return data;
          };

          return data;
        }

        var _config = _interopRequireDefault(__webpack_require__(22));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var LOADED_PLUGIN;

        function loadBlockHoistPlugin() {
          if (!LOADED_PLUGIN) {
            var config = (0, _config.default)({
              babelrc: false,
              configFile: false,
              plugins: [blockHoistPlugin]
            });
            LOADED_PLUGIN = config ? config.passes[0][0] : undefined;
            if (!LOADED_PLUGIN) throw new Error("Assertion failure");
          }

          return LOADED_PLUGIN;
        }

        var blockHoistPlugin = {
          name: "internal.blockHoist",
          visitor: {
            Block: {
              exit: function exit(_ref) {
                var node = _ref.node;
                var hasChange = false;

                for (var i = 0; i < node.body.length; i++) {
                  var bodyNode = node.body[i];

                  if (bodyNode && bodyNode._blockHoist != null) {
                    hasChange = true;
                    break;
                  }
                }

                if (!hasChange) return;
                node.body = (0, _sortBy().default)(node.body, function(
                  bodyNode
                ) {
                  var priority = bodyNode && bodyNode._blockHoist;
                  if (priority == null) priority = 1;
                  if (priority === true) priority = 2;
                  return -1 * priority;
                });
              }
            }
          }
        };

        /***/
      },
      /* 492 */
      /***/ function(module, exports, __webpack_require__) {
        var baseFlatten = __webpack_require__(493),
          baseOrderBy = __webpack_require__(495),
          baseRest = __webpack_require__(47),
          isIterateeCall = __webpack_require__(35);

        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }

          var length = iteratees.length;

          if (
            length > 1 &&
            isIterateeCall(collection, iteratees[0], iteratees[1])
          ) {
            iteratees = [];
          } else if (
            length > 2 &&
            isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
          ) {
            iteratees = [iteratees[0]];
          }

          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        module.exports = sortBy;

        /***/
      },
      /* 493 */
      /***/ function(module, exports, __webpack_require__) {
        var arrayPush = __webpack_require__(68),
          isFlattenable = __webpack_require__(494);

        function baseFlatten(array, depth, predicate, isStrict, result) {
          var index = -1,
            length = array.length;
          predicate || (predicate = isFlattenable);
          result || (result = []);

          while (++index < length) {
            var value = array[index];

            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }

          return result;
        }

        module.exports = baseFlatten;

        /***/
      },
      /* 494 */
      /***/ function(module, exports, __webpack_require__) {
        var Symbol = __webpack_require__(24),
          isArguments = __webpack_require__(62),
          isArray = __webpack_require__(6);

        var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

        function isFlattenable(value) {
          return (
            isArray(value) ||
            isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol])
          );
        }

        module.exports = isFlattenable;

        /***/
      },
      /* 495 */
      /***/ function(module, exports, __webpack_require__) {
        var arrayMap = __webpack_require__(46),
          baseIteratee = __webpack_require__(496),
          baseMap = __webpack_require__(515),
          baseSortBy = __webpack_require__(521),
          baseUnary = __webpack_require__(27),
          compareMultiple = __webpack_require__(522),
          identity = __webpack_require__(48);

        function baseOrderBy(collection, iteratees, orders) {
          var index = -1;
          iteratees = arrayMap(
            iteratees.length ? iteratees : [identity],
            baseUnary(baseIteratee)
          );
          var result = baseMap(collection, function(value, key, collection) {
            var criteria = arrayMap(iteratees, function(iteratee) {
              return iteratee(value);
            });
            return {
              criteria: criteria,
              index: ++index,
              value: value
            };
          });
          return baseSortBy(result, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }

        module.exports = baseOrderBy;

        /***/
      },
      /* 496 */
      /***/ function(module, exports, __webpack_require__) {
        var baseMatches = __webpack_require__(497),
          baseMatchesProperty = __webpack_require__(505),
          identity = __webpack_require__(48),
          isArray = __webpack_require__(6),
          property = __webpack_require__(512);

        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }

          if (value == null) {
            return identity;
          }

          if (typeof value == "object") {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }

          return property(value);
        }

        module.exports = baseIteratee;

        /***/
      },
      /* 497 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIsMatch = __webpack_require__(498),
          getMatchData = __webpack_require__(504),
          matchesStrictComparable = __webpack_require__(168);

        function baseMatches(source) {
          var matchData = getMatchData(source);

          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }

          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }

        module.exports = baseMatches;

        /***/
      },
      /* 498 */
      /***/ function(module, exports, __webpack_require__) {
        var Stack = __webpack_require__(59),
          baseIsEqual = __webpack_require__(165);

        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

          if (object == null) {
            return !length;
          }

          object = Object(object);

          while (index--) {
            var data = matchData[index];

            if (
              noCustomizer && data[2]
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
            ) {
              return false;
            }
          }

          while (++index < length) {
            data = matchData[index];
            var key = data[0],
              objValue = object[key],
              srcValue = data[1];

            if (noCustomizer && data[2]) {
              if (objValue === undefined && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();

              if (customizer) {
                var result = customizer(
                  objValue,
                  srcValue,
                  key,
                  object,
                  source,
                  stack
                );
              }

              if (
                !(result === undefined
                  ? baseIsEqual(
                      srcValue,
                      objValue,
                      COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                      customizer,
                      stack
                    )
                  : result)
              ) {
                return false;
              }
            }
          }

          return true;
        }

        module.exports = baseIsMatch;

        /***/
      },
      /* 499 */
      /***/ function(module, exports, __webpack_require__) {
        var Stack = __webpack_require__(59),
          equalArrays = __webpack_require__(166),
          equalByTag = __webpack_require__(501),
          equalObjects = __webpack_require__(503),
          getTag = __webpack_require__(43),
          isArray = __webpack_require__(6),
          isBuffer = __webpack_require__(63),
          isTypedArray = __webpack_require__(113);

        var COMPARE_PARTIAL_FLAG = 1;
        var argsTag = "[object Arguments]",
          arrayTag = "[object Array]",
          objectTag = "[object Object]";
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;

        function baseIsEqualDeep(
          object,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }

            objIsArr = true;
            objIsObj = false;
          }

          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object)
              ? equalArrays(
                  object,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                )
              : equalByTag(
                  object,
                  other,
                  objTag,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                );
          }

          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped =
                objIsObj && hasOwnProperty.call(object, "__wrapped__"),
              othIsWrapped =
                othIsObj && hasOwnProperty.call(other, "__wrapped__");

            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(
                objUnwrapped,
                othUnwrapped,
                bitmask,
                customizer,
                stack
              );
            }
          }

          if (!isSameTag) {
            return false;
          }

          stack || (stack = new Stack());
          return equalObjects(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          );
        }

        module.exports = baseIsEqualDeep;

        /***/
      },
      /* 500 */
      /***/ function(module, exports) {
        function arraySome(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length;

          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }

          return false;
        }

        module.exports = arraySome;

        /***/
      },
      /* 501 */
      /***/ function(module, exports, __webpack_require__) {
        var Symbol = __webpack_require__(24),
          Uint8Array = __webpack_require__(121),
          eq = __webpack_require__(30),
          equalArrays = __webpack_require__(166),
          mapToArray = __webpack_require__(502),
          setToArray = __webpack_require__(78);

        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;
        var boolTag = "[object Boolean]",
          dateTag = "[object Date]",
          errorTag = "[object Error]",
          mapTag = "[object Map]",
          numberTag = "[object Number]",
          regexpTag = "[object RegExp]",
          setTag = "[object Set]",
          stringTag = "[object String]",
          symbolTag = "[object Symbol]";
        var arrayBufferTag = "[object ArrayBuffer]",
          dataViewTag = "[object DataView]";
        var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

        function equalByTag(
          object,
          other,
          tag,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          switch (tag) {
            case dataViewTag:
              if (
                object.byteLength != other.byteLength ||
                object.byteOffset != other.byteOffset
              ) {
                return false;
              }

              object = object.buffer;
              other = other.buffer;

            case arrayBufferTag:
              if (
                object.byteLength != other.byteLength ||
                !equalFunc(new Uint8Array(object), new Uint8Array(other))
              ) {
                return false;
              }

              return true;

            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);

            case errorTag:
              return (
                object.name == other.name && object.message == other.message
              );

            case regexpTag:
            case stringTag:
              return object == other + "";

            case mapTag:
              var convert = mapToArray;

            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);

              if (object.size != other.size && !isPartial) {
                return false;
              }

              var stacked = stack.get(object);

              if (stacked) {
                return stacked == other;
              }

              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result = equalArrays(
                convert(object),
                convert(other),
                bitmask,
                customizer,
                equalFunc,
                stack
              );
              stack["delete"](object);
              return result;

            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }

          return false;
        }

        module.exports = equalByTag;

        /***/
      },
      /* 502 */
      /***/ function(module, exports) {
        function mapToArray(map) {
          var index = -1,
            result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }

        module.exports = mapToArray;

        /***/
      },
      /* 503 */
      /***/ function(module, exports, __webpack_require__) {
        var getAllKeys = __webpack_require__(118);

        var COMPARE_PARTIAL_FLAG = 1;
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;

        function equalObjects(
          object,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

          if (objLength != othLength && !isPartial) {
            return false;
          }

          var index = objLength;

          while (index--) {
            var key = objProps[index];

            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }

          var stacked = stack.get(object);

          if (stacked && stack.get(other)) {
            return stacked == other;
          }

          var result = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;

          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
              othValue = other[key];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }

            if (
              !(compared === undefined
                ? objValue === othValue ||
                  equalFunc(objValue, othValue, bitmask, customizer, stack)
                : compared)
            ) {
              result = false;
              break;
            }

            skipCtor || (skipCtor = key == "constructor");
          }

          if (result && !skipCtor) {
            var objCtor = object.constructor,
              othCtor = other.constructor;

            if (
              objCtor != othCtor &&
              "constructor" in object &&
              "constructor" in other &&
              !(
                typeof objCtor == "function" &&
                objCtor instanceof objCtor &&
                typeof othCtor == "function" &&
                othCtor instanceof othCtor
              )
            ) {
              result = false;
            }
          }

          stack["delete"](object);
          stack["delete"](other);
          return result;
        }

        module.exports = equalObjects;

        /***/
      },
      /* 504 */
      /***/ function(module, exports, __webpack_require__) {
        var isStrictComparable = __webpack_require__(167),
          keys = __webpack_require__(25);

        function getMatchData(object) {
          var result = keys(object),
            length = result.length;

          while (length--) {
            var key = result[length],
              value = object[key];
            result[length] = [key, value, isStrictComparable(value)];
          }

          return result;
        }

        module.exports = getMatchData;

        /***/
      },
      /* 505 */
      /***/ function(module, exports, __webpack_require__) {
        var baseIsEqual = __webpack_require__(165),
          get = __webpack_require__(506),
          hasIn = __webpack_require__(510),
          isKey = __webpack_require__(91),
          isStrictComparable = __webpack_require__(167),
          matchesStrictComparable = __webpack_require__(168),
          toKey = __webpack_require__(55);

        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }

          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined && objValue === srcValue
              ? hasIn(object, path)
              : baseIsEqual(
                  srcValue,
                  objValue,
                  COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                );
          };
        }

        module.exports = baseMatchesProperty;

        /***/
      },
      /* 506 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGet = __webpack_require__(169);

        function get(object, path, defaultValue) {
          var result = object == null ? undefined : baseGet(object, path);
          return result === undefined ? defaultValue : result;
        }

        module.exports = get;

        /***/
      },
      /* 507 */
      /***/ function(module, exports, __webpack_require__) {
        var memoizeCapped = __webpack_require__(508);

        var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reEscapeChar = /\\(\\)?/g;
        var stringToPath = memoizeCapped(function(string) {
          var result = [];

          if (string.charCodeAt(0) === 46) {
            result.push("");
          }

          string.replace(rePropName, function(match, number, quote, subString) {
            result.push(
              quote ? subString.replace(reEscapeChar, "$1") : number || match
            );
          });
          return result;
        });
        module.exports = stringToPath;

        /***/
      },
      /* 508 */
      /***/ function(module, exports, __webpack_require__) {
        var memoize = __webpack_require__(509);

        var MAX_MEMOIZE_SIZE = 500;

        function memoizeCapped(func) {
          var result = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }

            return key;
          });
          var cache = result.cache;
          return result;
        }

        module.exports = memoizeCapped;

        /***/
      },
      /* 509 */
      /***/ function(module, exports, __webpack_require__) {
        var MapCache = __webpack_require__(61);

        var FUNC_ERROR_TEXT = "Expected a function";

        function memoize(func, resolver) {
          if (
            typeof func != "function" ||
            (resolver != null && typeof resolver != "function")
          ) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }

          var memoized = function memoized() {
            var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

            if (cache.has(key)) {
              return cache.get(key);
            }

            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result) || cache;
            return result;
          };

          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }

        memoize.Cache = MapCache;
        module.exports = memoize;

        /***/
      },
      /* 510 */
      /***/ function(module, exports, __webpack_require__) {
        var baseHasIn = __webpack_require__(511),
          hasPath = __webpack_require__(171);

        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }

        module.exports = hasIn;

        /***/
      },
      /* 511 */
      /***/ function(module, exports) {
        function baseHasIn(object, key) {
          return object != null && key in Object(object);
        }

        module.exports = baseHasIn;

        /***/
      },
      /* 512 */
      /***/ function(module, exports, __webpack_require__) {
        var baseProperty = __webpack_require__(513),
          basePropertyDeep = __webpack_require__(514),
          isKey = __webpack_require__(91),
          toKey = __webpack_require__(55);

        function property(path) {
          return isKey(path)
            ? baseProperty(toKey(path))
            : basePropertyDeep(path);
        }

        module.exports = property;

        /***/
      },
      /* 513 */
      /***/ function(module, exports) {
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined : object[key];
          };
        }

        module.exports = baseProperty;

        /***/
      },
      /* 514 */
      /***/ function(module, exports, __webpack_require__) {
        var baseGet = __webpack_require__(169);

        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }

        module.exports = basePropertyDeep;

        /***/
      },
      /* 515 */
      /***/ function(module, exports, __webpack_require__) {
        var baseEach = __webpack_require__(516),
          isArrayLike = __webpack_require__(28);

        function baseMap(collection, iteratee) {
          var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];
          baseEach(collection, function(value, key, collection) {
            result[++index] = iteratee(value, key, collection);
          });
          return result;
        }

        module.exports = baseMap;

        /***/
      },
      /* 516 */
      /***/ function(module, exports, __webpack_require__) {
        var baseForOwn = __webpack_require__(517),
          createBaseEach = __webpack_require__(520);

        var baseEach = createBaseEach(baseForOwn);
        module.exports = baseEach;

        /***/
      },
      /* 517 */
      /***/ function(module, exports, __webpack_require__) {
        var baseFor = __webpack_require__(518),
          keys = __webpack_require__(25);

        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }

        module.exports = baseForOwn;

        /***/
      },
      /* 518 */
      /***/ function(module, exports, __webpack_require__) {
        var createBaseFor = __webpack_require__(519);

        var baseFor = createBaseFor();
        module.exports = baseFor;

        /***/
      },
      /* 519 */
      /***/ function(module, exports) {
        function createBaseFor(fromRight) {
          return function(object, iteratee, keysFunc) {
            var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

            while (length--) {
              var key = props[fromRight ? length : ++index];

              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }

            return object;
          };
        }

        module.exports = createBaseFor;

        /***/
      },
      /* 520 */
      /***/ function(module, exports, __webpack_require__) {
        var isArrayLike = __webpack_require__(28);

        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee) {
            if (collection == null) {
              return collection;
            }

            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee);
            }

            var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

            while (fromRight ? index-- : ++index < length) {
              if (iteratee(iterable[index], index, iterable) === false) {
                break;
              }
            }

            return collection;
          };
        }

        module.exports = createBaseEach;

        /***/
      },
      /* 521 */
      /***/ function(module, exports) {
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);

          while (length--) {
            array[length] = array[length].value;
          }

          return array;
        }

        module.exports = baseSortBy;

        /***/
      },
      /* 522 */
      /***/ function(module, exports, __webpack_require__) {
        var compareAscending = __webpack_require__(523);

        function compareMultiple(object, other, orders) {
          var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

          while (++index < length) {
            var result = compareAscending(
              objCriteria[index],
              othCriteria[index]
            );

            if (result) {
              if (index >= ordersLength) {
                return result;
              }

              var order = orders[index];
              return result * (order == "desc" ? -1 : 1);
            }
          }

          return object.index - other.index;
        }

        module.exports = compareMultiple;

        /***/
      },
      /* 523 */
      /***/ function(module, exports, __webpack_require__) {
        var isSymbol = __webpack_require__(34);

        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

            if (
              (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol &&
                othIsDefined &&
                othIsReflexive &&
                !othIsNull &&
                !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive
            ) {
              return 1;
            }

            if (
              (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol &&
                valIsDefined &&
                valIsReflexive &&
                !valIsNull &&
                !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive
            ) {
              return -1;
            }
          }

          return 0;
        }

        module.exports = compareAscending;

        /***/
      },
      /* 524 */
      /***/ function(module, exports) {
        /***/
      },
      /* 525 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = generateMissingPluginMessage;
        var pluginNameMap = {
          asyncGenerators: {
            syntax: {
              name: "@babel/plugin-syntax-async-generators",
              url: "https://git.io/vb4SY"
            },
            transform: {
              name: "@babel/plugin-proposal-async-generator-functions",
              url: "https://git.io/vb4yp"
            }
          },
          classProperties: {
            syntax: {
              name: "@babel/plugin-syntax-class-properties",
              url: "https://git.io/vb4yQ"
            },
            transform: {
              name: "@babel/plugin-proposal-class-properties",
              url: "https://git.io/vb4SL"
            }
          },
          decorators: {
            syntax: {
              name: "@babel/plugin-syntax-decorators",
              url: "https://git.io/vb4y9"
            },
            transform: {
              name: "@babel/plugin-proposal-decorators",
              url: "https://git.io/vb4ST"
            }
          },
          doExpressions: {
            syntax: {
              name: "@babel/plugin-syntax-do-expressions",
              url: "https://git.io/vb4yh"
            },
            transform: {
              name: "@babel/plugin-proposal-do-expressions",
              url: "https://git.io/vb4S3"
            }
          },
          dynamicImport: {
            syntax: {
              name: "@babel/plugin-syntax-dynamic-import",
              url: "https://git.io/vb4Sv"
            }
          },
          exportDefaultFrom: {
            syntax: {
              name: "@babel/plugin-syntax-export-default-from",
              url: "https://git.io/vb4SO"
            },
            transform: {
              name: "@babel/plugin-proposal-export-default-from",
              url: "https://git.io/vb4yH"
            }
          },
          exportNamespaceFrom: {
            syntax: {
              name: "@babel/plugin-syntax-export-namespace-from",
              url: "https://git.io/vb4Sf"
            },
            transform: {
              name: "@babel/plugin-proposal-export-namespace-from",
              url: "https://git.io/vb4SG"
            }
          },
          flow: {
            syntax: {
              name: "@babel/plugin-syntax-flow",
              url: "https://git.io/vb4yb"
            },
            transform: {
              name: "@babel/plugin-transform-flow-strip-types",
              url: "https://git.io/vb49g"
            }
          },
          functionBind: {
            syntax: {
              name: "@babel/plugin-syntax-function-bind",
              url: "https://git.io/vb4y7"
            },
            transform: {
              name: "@babel/plugin-proposal-function-bind",
              url: "https://git.io/vb4St"
            }
          },
          functionSent: {
            syntax: {
              name: "@babel/plugin-syntax-function-sent",
              url: "https://git.io/vb4yN"
            },
            transform: {
              name: "@babel/plugin-proposal-function-sent",
              url: "https://git.io/vb4SZ"
            }
          },
          importMeta: {
            syntax: {
              name: "@babel/plugin-syntax-import-meta",
              url: "https://git.io/vbKK6"
            }
          },
          jsx: {
            syntax: {
              name: "@babel/plugin-syntax-jsx",
              url: "https://git.io/vb4yA"
            },
            transform: {
              name: "@babel/plugin-transform-react-jsx",
              url: "https://git.io/vb4yd"
            }
          },
          logicalAssignment: {
            syntax: {
              name: "@babel/plugin-syntax-logical-assignment-operators",
              url: "https://git.io/vAlBp"
            },
            transform: {
              name: "@babel/plugin-proposal-logical-assignment-operators",
              url: "https://git.io/vAlRe"
            }
          },
          nullishCoalescingOperator: {
            syntax: {
              name: "@babel/plugin-syntax-nullish-coalescing-operator",
              url: "https://git.io/vb4yx"
            },
            transform: {
              name: "@babel/plugin-proposal-nullish-coalescing-operator",
              url: "https://git.io/vb4Se"
            }
          },
          numericSeparator: {
            syntax: {
              name: "@babel/plugin-syntax-numeric-separator",
              url: "https://git.io/vb4Sq"
            },
            transform: {
              name: "@babel/plugin-proposal-numeric-separator",
              url: "https://git.io/vb4yS"
            }
          },
          objectRestSpread: {
            syntax: {
              name: "@babel/plugin-syntax-object-rest-spread",
              url: "https://git.io/vb4y5"
            },
            transform: {
              name: "@babel/plugin-proposal-object-rest-spread",
              url: "https://git.io/vb4Ss"
            }
          },
          optionalCatchBinding: {
            syntax: {
              name: "@babel/plugin-syntax-optional-catch-binding",
              url: "https://git.io/vb4Sn"
            },
            transform: {
              name: "@babel/plugin-proposal-optional-catch-binding",
              url: "https://git.io/vb4SI"
            }
          },
          optionalChaining: {
            syntax: {
              name: "@babel/plugin-syntax-optional-chaining",
              url: "https://git.io/vb4Sc"
            },
            transform: {
              name: "@babel/plugin-proposal-optional-chaining",
              url: "https://git.io/vb4Sk"
            }
          },
          pipelineOperator: {
            syntax: {
              name: "@babel/plugin-syntax-pipeline-operator",
              url: "https://git.io/vb4yj"
            },
            transform: {
              name: "@babel/plugin-proposal-pipeline-operator",
              url: "https://git.io/vb4SU"
            }
          },
          throwExpressions: {
            syntax: {
              name: "@babel/plugin-syntax-throw-expressions",
              url: "https://git.io/vb4SJ"
            },
            transform: {
              name: "@babel/plugin-proposal-throw-expressions",
              url: "https://git.io/vb4yF"
            }
          },
          typescript: {
            syntax: {
              name: "@babel/plugin-syntax-typescript",
              url: "https://git.io/vb4SC"
            },
            transform: {
              name: "@babel/plugin-transform-typescript",
              url: "https://git.io/vb4Sm"
            }
          }
        };

        var getNameURLCombination = function getNameURLCombination(_ref) {
          var name = _ref.name,
            url = _ref.url;
          return name + " (" + url + ")";
        };

        function generateMissingPluginMessage(
          missingPluginName,
          loc,
          codeFrame
        ) {
          var helpMessage =
            "Support for the experimental syntax '" +
            missingPluginName +
            "' isn't currently enabled " +
            ("(" + loc.line + ":" + (loc.column + 1) + "):\n\n") +
            codeFrame;
          var pluginInfo = pluginNameMap[missingPluginName];

          if (pluginInfo) {
            var syntaxPlugin = pluginInfo.syntax,
              transformPlugin = pluginInfo.transform;

            if (syntaxPlugin) {
              if (transformPlugin) {
                var transformPluginInfo = getNameURLCombination(
                  transformPlugin
                );
                helpMessage +=
                  "\n\nAdd " +
                  transformPluginInfo +
                  " to the 'plugins' section of your Babel config " +
                  "to enable transformation.";
              } else {
                var syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
                helpMessage +=
                  "\n\nAdd " +
                  syntaxPluginInfo +
                  " to the 'plugins' section of your Babel config " +
                  "to enable parsing.";
              }
            }
          }

          return helpMessage;
        }

        /***/
      },
      /* 526 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = generateCode;

        function _convertSourceMap() {
          var data = _interopRequireDefault(__webpack_require__(174));

          _convertSourceMap = function _convertSourceMap() {
            return data;
          };

          return data;
        }

        function _sourceMap() {
          var data = _interopRequireDefault(__webpack_require__(147));

          _sourceMap = function _sourceMap() {
            return data;
          };

          return data;
        }

        function _generator() {
          var data = _interopRequireDefault(__webpack_require__(81));

          _generator = function _generator() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function generateCode(pluginPasses, file) {
          var opts = file.opts,
            ast = file.ast,
            shebang = file.shebang,
            code = file.code,
            inputMap = file.inputMap;
          var results = [];

          for (
            var _iterator = pluginPasses,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var plugins = _ref;

            for (
              var _iterator2 = plugins,
                _isArray2 = Array.isArray(_iterator2),
                _i2 = 0,
                _iterator2 = _isArray2
                  ? _iterator2
                  : _iterator2[Symbol.iterator]();
              ;

            ) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var plugin = _ref2;
              var generatorOverride = plugin.generatorOverride;

              if (generatorOverride) {
                var _result2 = generatorOverride(
                  ast,
                  opts.generatorOpts,
                  code,
                  _generator().default
                );

                if (_result2 !== undefined) results.push(_result2);
              }
            }
          }

          var result;

          if (results.length === 0) {
            result = (0, _generator().default)(ast, opts.generatorOpts, code);
          } else if (results.length === 1) {
            result = results[0];

            if (typeof result.then === "function") {
              throw new Error(
                "You appear to be using an async parser plugin, " +
                  "which your current version of Babel does not support. " +
                  "If you're using a published plugin, " +
                  "you may need to upgrade your @babel/core version."
              );
            }
          } else {
            throw new Error(
              "More than one plugin attempted to override codegen."
            );
          }

          var _result = result,
            outputCode = _result.code,
            outputMap = _result.map;

          if (shebang) {
            outputCode = shebang + "\n" + outputCode;
          }

          if (outputMap && inputMap) {
            outputMap = mergeSourceMap(inputMap.toObject(), outputMap);
          }

          if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
            outputCode +=
              "\n" +
              _convertSourceMap()
                .default.fromObject(outputMap)
                .toComment();
          }

          if (opts.sourceMaps === "inline") {
            outputMap = null;
          }

          return {
            outputCode: outputCode,
            outputMap: outputMap
          };
        }

        function mergeSourceMap(inputMap, map) {
          var inputMapConsumer = new (_sourceMap()).default.SourceMapConsumer(
            inputMap
          );
          var outputMapConsumer = new (_sourceMap()).default.SourceMapConsumer(
            map
          );
          var mergedGenerator = new (_sourceMap()).default.SourceMapGenerator({
            file: inputMapConsumer.file,
            sourceRoot: inputMapConsumer.sourceRoot
          });
          var source = outputMapConsumer.sources[0];
          inputMapConsumer.eachMapping(function(mapping) {
            var generatedPosition = outputMapConsumer.generatedPositionFor({
              line: mapping.generatedLine,
              column: mapping.generatedColumn,
              source: source
            });

            if (generatedPosition.column != null) {
              mergedGenerator.addMapping({
                source: mapping.source,
                original:
                  mapping.source == null
                    ? null
                    : {
                        line: mapping.originalLine,
                        column: mapping.originalColumn
                      },
                generated: generatedPosition,
                name: mapping.name
              });
            }
          });
          var mergedMap = mergedGenerator.toJSON();
          inputMap.mappings = mergedMap.mappings;
          return inputMap;
        }

        /***/
      },
      /* 527 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = transformFile;

        function transformFile(filename, opts, callback) {
          if (opts === void 0) {
            opts = {};
          }

          if (typeof opts === "function") {
            callback = opts;
          }

          callback(
            new Error("Transforming files is not supported in browsers"),
            null
          );
        }

        /***/
      },
      /* 528 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = transformFileSync;

        function transformFileSync() {
          throw new Error("Transforming files is not supported in browsers");
        }

        /***/
      },
      /* 529 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";
        /* WEBPACK VAR INJECTION */ (function(process) {
          Object.defineProperty(exports, "__esModule", {
            value: true
          });
          exports.default = void 0;

          var _config = _interopRequireDefault(__webpack_require__(22));

          var _transformation = __webpack_require__(54);

          var _transformAstSync = _interopRequireDefault(
            __webpack_require__(176)
          );

          function _interopRequireDefault(obj) {
            return obj && obj.__esModule
              ? obj
              : {
                  default: obj
                };
          }

          var transformFromAst = function transformFromAst(
            ast,
            code,
            opts,
            callback
          ) {
            if (typeof opts === "function") {
              opts = undefined;
              callback = opts;
            }

            if (callback === undefined)
              return (0, _transformAstSync.default)(ast, code, opts);
            var cb = callback;
            process.nextTick(function() {
              var cfg;

              try {
                cfg = (0, _config.default)(opts);
                if (cfg === null) return cb(null, null);
              } catch (err) {
                return cb(err);
              }

              if (!ast) return cb(new Error("No AST given"));
              (0, _transformation.runAsync)(cfg, code, ast, cb);
            });
          };

          exports.default = transformFromAst;
          /* WEBPACK VAR INJECTION */
        }.call(exports, __webpack_require__(12)));

        /***/
      },
      /* 530 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = parse;

        var _config = _interopRequireDefault(__webpack_require__(22));

        var _normalizeFile = _interopRequireDefault(__webpack_require__(173));

        var _normalizeOpts = _interopRequireDefault(__webpack_require__(172));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function parse(code, opts) {
          var config = (0, _config.default)(opts);

          if (config === null) {
            return null;
          }

          var file = (0, _normalizeFile.default)(
            config.passes,
            (0, _normalizeOpts.default)(config),
            code
          );
          return file.ast;
        }

        /***/
      },
      /* 531 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            pre: function pre(file) {
              file.set(
                "helpersNamespace",
                _core().types.identifier("babelHelpers")
              );
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 532 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _assert() {
          var data = _interopRequireDefault(__webpack_require__(13));

          _assert = function _assert() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        var _importBuilder = _interopRequireDefault(__webpack_require__(535));

        var _isModule = _interopRequireDefault(__webpack_require__(195));

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var ImportInjector = (function() {
          function ImportInjector(path, importedSource, opts) {
            this._defaultOpts = {
              importedSource: null,
              importedType: "commonjs",
              importedInterop: "babel",
              importingInterop: "babel",
              ensureLiveReference: false,
              ensureNoContext: false
            };
            var programPath = path.find(function(p) {
              return p.isProgram();
            });
            this._programPath = programPath;
            this._programScope = programPath.scope;
            this._file = programPath.hub.file;
            this._defaultOpts = this._applyDefaults(importedSource, opts, true);
          }

          var _proto = ImportInjector.prototype;

          _proto.addDefault = function addDefault(importedSourceIn, opts) {
            return this.addNamed("default", importedSourceIn, opts);
          };

          _proto.addNamed = function addNamed(
            importName,
            importedSourceIn,
            opts
          ) {
            (0, _assert().default)(typeof importName === "string");
            return this._generateImport(
              this._applyDefaults(importedSourceIn, opts),
              importName
            );
          };

          _proto.addNamespace = function addNamespace(importedSourceIn, opts) {
            return this._generateImport(
              this._applyDefaults(importedSourceIn, opts),
              null
            );
          };

          _proto.addSideEffect = function addSideEffect(
            importedSourceIn,
            opts
          ) {
            return this._generateImport(
              this._applyDefaults(importedSourceIn, opts),
              false
            );
          };

          _proto._applyDefaults = function _applyDefaults(
            importedSource,
            opts,
            isInit
          ) {
            if (isInit === void 0) {
              isInit = false;
            }

            var optsList = [];

            if (typeof importedSource === "string") {
              optsList.push({
                importedSource: importedSource
              });
              optsList.push(opts);
            } else {
              (0, _assert().default)(!opts, "Unexpected secondary arguments.");
              optsList.push(importedSource);
            }

            var newOpts = Object.assign({}, this._defaultOpts);

            var _loop = function _loop() {
              var opts = optsList[_i];
              if (!opts) return "continue";
              Object.keys(newOpts).forEach(function(key) {
                if (opts[key] !== undefined) newOpts[key] = opts[key];
              });

              if (!isInit) {
                if (opts.nameHint !== undefined)
                  newOpts.nameHint = opts.nameHint;
                if (opts.blockHoist !== undefined)
                  newOpts.blockHoist = opts.blockHoist;
              }
            };

            for (var _i = 0; _i < optsList.length; _i++) {
              var _ret = _loop();

              if (_ret === "continue") continue;
            }

            return newOpts;
          };

          _proto._generateImport = function _generateImport(opts, importName) {
            var isDefault = importName === "default";
            var isNamed = !!importName && !isDefault;
            var isNamespace = importName === null;
            var importedSource = opts.importedSource,
              importedType = opts.importedType,
              importedInterop = opts.importedInterop,
              importingInterop = opts.importingInterop,
              ensureLiveReference = opts.ensureLiveReference,
              ensureNoContext = opts.ensureNoContext,
              nameHint = opts.nameHint,
              blockHoist = opts.blockHoist;
            var name = nameHint || importName;
            var isMod = (0, _isModule.default)(this._programPath);
            var isModuleForNode = isMod && importingInterop === "node";
            var isModuleForBabel = isMod && importingInterop === "babel";
            var builder = new _importBuilder.default(
              importedSource,
              this._programScope,
              this._file
            );

            if (importedType === "es6") {
              if (!isModuleForNode && !isModuleForBabel) {
                throw new Error("Cannot import an ES6 module from CommonJS");
              }

              builder.import();

              if (isNamespace) {
                builder.namespace(nameHint || importedSource);
              } else if (isDefault || isNamed) {
                builder.named(name, importName);
              }
            } else if (importedType !== "commonjs") {
              throw new Error('Unexpected interopType "' + importedType + '"');
            } else if (importedInterop === "babel") {
              if (isModuleForNode) {
                name = name !== "default" ? name : importedSource;
                var es6Default = importedSource + "$es6Default";
                builder.import();

                if (isNamespace) {
                  builder
                    .default(es6Default)
                    .var(name || importedSource)
                    .wildcardInterop();
                } else if (isDefault) {
                  if (ensureLiveReference) {
                    builder
                      .default(es6Default)
                      .var(name || importedSource)
                      .defaultInterop()
                      .read("default");
                  } else {
                    builder
                      .default(es6Default)
                      .var(name)
                      .defaultInterop()
                      .prop(importName);
                  }
                } else if (isNamed) {
                  builder.default(es6Default).read(importName);
                }
              } else if (isModuleForBabel) {
                builder.import();

                if (isNamespace) {
                  builder.namespace(name || importedSource);
                } else if (isDefault || isNamed) {
                  builder.named(name, importName);
                }
              } else {
                builder.require();

                if (isNamespace) {
                  builder.var(name || importedSource).wildcardInterop();
                } else if ((isDefault || isNamed) && ensureLiveReference) {
                  if (isDefault) {
                    name = name !== "default" ? name : importedSource;
                    builder.var(name).read(importName);
                    builder.defaultInterop();
                  } else {
                    builder.var(importedSource).read(importName);
                  }
                } else if (isDefault) {
                  builder
                    .var(name)
                    .defaultInterop()
                    .prop(importName);
                } else if (isNamed) {
                  builder.var(name).prop(importName);
                }
              }
            } else if (importedInterop === "compiled") {
              if (isModuleForNode) {
                builder.import();

                if (isNamespace) {
                  builder.default(name || importedSource);
                } else if (isDefault || isNamed) {
                  builder.default(importedSource).read(name);
                }
              } else if (isModuleForBabel) {
                builder.import();

                if (isNamespace) {
                  builder.namespace(name || importedSource);
                } else if (isDefault || isNamed) {
                  builder.named(name, importName);
                }
              } else {
                builder.require();

                if (isNamespace) {
                  builder.var(name || importedSource);
                } else if (isDefault || isNamed) {
                  if (ensureLiveReference) {
                    builder.var(importedSource).read(name);
                  } else {
                    builder.prop(importName).var(name);
                  }
                }
              }
            } else if (importedInterop === "uncompiled") {
              if (isDefault && ensureLiveReference) {
                throw new Error("No live reference for commonjs default");
              }

              if (isModuleForNode) {
                builder.import();

                if (isNamespace) {
                  builder.default(name || importedSource);
                } else if (isDefault) {
                  builder.default(name);
                } else if (isNamed) {
                  builder.default(importedSource).read(name);
                }
              } else if (isModuleForBabel) {
                builder.import();

                if (isNamespace) {
                  builder.default(name || importedSource);
                } else if (isDefault) {
                  builder.default(name);
                } else if (isNamed) {
                  builder.named(name, importName);
                }
              } else {
                builder.require();

                if (isNamespace) {
                  builder.var(name || importedSource);
                } else if (isDefault) {
                  builder.var(name);
                } else if (isNamed) {
                  if (ensureLiveReference) {
                    builder.var(importedSource).read(name);
                  } else {
                    builder.var(name).prop(importName);
                  }
                }
              }
            } else {
              throw new Error(
                'Unknown importedInterop "' + importedInterop + '".'
              );
            }

            var _builder$done = builder.done(),
              statements = _builder$done.statements,
              resultName = _builder$done.resultName;

            this._insertStatements(statements, blockHoist);

            if (
              (isDefault || isNamed) &&
              ensureNoContext &&
              resultName.type !== "Identifier"
            ) {
              return t().sequenceExpression([
                t().numericLiteral(0),
                resultName
              ]);
            }

            return resultName;
          };

          _proto._insertStatements = function _insertStatements(
            statements,
            blockHoist
          ) {
            if (blockHoist === void 0) {
              blockHoist = 3;
            }

            statements.forEach(function(node) {
              node._blockHoist = blockHoist;
            });

            var targetPath = this._programPath.get("body").filter(function(p) {
              var val = p.node._blockHoist;
              return Number.isFinite(val) && val < 4;
            })[0];

            if (targetPath) {
              targetPath.insertBefore(statements);
            } else {
              this._programPath.unshiftContainer("body", statements);
            }
          };

          return ImportInjector;
        })();

        exports.default = ImportInjector;

        /***/
      },
      /* 533 */
      /***/ function(module, exports) {
        module.exports = function isBuffer(arg) {
          return (
            arg &&
            typeof arg === "object" &&
            typeof arg.copy === "function" &&
            typeof arg.fill === "function" &&
            typeof arg.readUInt8 === "function"
          );
        };

        /***/
      },
      /* 534 */
      /***/ function(module, exports) {
        if (typeof Object.create === "function") {
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          };
        } else {
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor;

            var TempCtor = function TempCtor() {};

            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          };
        }

        /***/
      },
      /* 535 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _assert() {
          var data = _interopRequireDefault(__webpack_require__(13));

          _assert = function _assert() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var ImportBuilder = (function() {
          function ImportBuilder(importedSource, scope, file) {
            this._statements = [];
            this._resultName = null;
            this._scope = null;
            this._file = null;
            this._scope = scope;
            this._file = file;
            this._importedSource = importedSource;
          }

          var _proto = ImportBuilder.prototype;

          _proto.done = function done() {
            return {
              statements: this._statements,
              resultName: this._resultName
            };
          };

          _proto.import = function _import() {
            this._statements.push(
              t().importDeclaration([], t().stringLiteral(this._importedSource))
            );

            return this;
          };

          _proto.require = function require() {
            this._statements.push(
              t().expressionStatement(
                t().callExpression(t().identifier("require"), [
                  t().stringLiteral(this._importedSource)
                ])
              )
            );

            return this;
          };

          _proto.namespace = function namespace(name) {
            if (name === void 0) {
              name = "namespace";
            }

            name = this._scope.generateUidIdentifier(name);
            var statement = this._statements[this._statements.length - 1];
            (0, _assert().default)(statement.type === "ImportDeclaration");
            (0, _assert().default)(statement.specifiers.length === 0);
            statement.specifiers = [t().importNamespaceSpecifier(name)];
            this._resultName = t().cloneNode(name);
            return this;
          };

          _proto.default = function _default(name) {
            name = this._scope.generateUidIdentifier(name);
            var statement = this._statements[this._statements.length - 1];
            (0, _assert().default)(statement.type === "ImportDeclaration");
            (0, _assert().default)(statement.specifiers.length === 0);
            statement.specifiers = [t().importDefaultSpecifier(name)];
            this._resultName = t().cloneNode(name);
            return this;
          };

          _proto.named = function named(name, importName) {
            if (importName === "default") return this.default(name);
            name = this._scope.generateUidIdentifier(name);
            var statement = this._statements[this._statements.length - 1];
            (0, _assert().default)(statement.type === "ImportDeclaration");
            (0, _assert().default)(statement.specifiers.length === 0);
            statement.specifiers = [
              t().importSpecifier(name, t().identifier(importName))
            ];
            this._resultName = t().cloneNode(name);
            return this;
          };

          _proto.var = function _var(name) {
            name = this._scope.generateUidIdentifier(name);
            var statement = this._statements[this._statements.length - 1];

            if (statement.type !== "ExpressionStatement") {
              (0, _assert().default)(this._resultName);
              statement = t().expressionStatement(this._resultName);

              this._statements.push(statement);
            }

            this._statements[
              this._statements.length - 1
            ] = t().variableDeclaration("var", [
              t().variableDeclarator(name, statement.expression)
            ]);
            this._resultName = t().cloneNode(name);
            return this;
          };

          _proto.defaultInterop = function defaultInterop() {
            return this._interop(this._file.addHelper("interopRequireDefault"));
          };

          _proto.wildcardInterop = function wildcardInterop() {
            return this._interop(
              this._file.addHelper("interopRequireWildcard")
            );
          };

          _proto._interop = function _interop(callee) {
            var statement = this._statements[this._statements.length - 1];

            if (statement.type === "ExpressionStatement") {
              statement.expression = t().callExpression(callee, [
                statement.expression
              ]);
            } else if (statement.type === "VariableDeclaration") {
              (0, _assert().default)(statement.declarations.length === 1);
              statement.declarations[0].init = t().callExpression(callee, [
                statement.declarations[0].init
              ]);
            } else {
              _assert().default.fail("Unexpected type.");
            }

            return this;
          };

          _proto.prop = function prop(name) {
            var statement = this._statements[this._statements.length - 1];

            if (statement.type === "ExpressionStatement") {
              statement.expression = t().memberExpression(
                statement.expression,
                t().identifier(name)
              );
            } else if (statement.type === "VariableDeclaration") {
              (0, _assert().default)(statement.declarations.length === 1);
              statement.declarations[0].init = t().memberExpression(
                statement.declarations[0].init,
                t().identifier(name)
              );
            } else {
              _assert().default.fail("Unexpected type:" + statement.type);
            }

            return this;
          };

          _proto.read = function read(name) {
            this._resultName = t().memberExpression(
              this._resultName,
              t().identifier(name)
            );
          };

          return ImportBuilder;
        })();

        exports.default = ImportBuilder;

        /***/
      },
      /* 536 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var buildForAwait = (0, _core().template)(
          "\n  async function wrapper() {\n    var ITERATOR_COMPLETION = true;\n    var ITERATOR_HAD_ERROR_KEY = false;\n    var ITERATOR_ERROR_KEY;\n    try {\n      for (\n        var ITERATOR_KEY = GET_ITERATOR(OBJECT), STEP_KEY, STEP_VALUE;\n        (\n          STEP_KEY = await ITERATOR_KEY.next(),\n          ITERATOR_COMPLETION = STEP_KEY.done,\n          STEP_VALUE = await STEP_KEY.value,\n          !ITERATOR_COMPLETION\n        );\n        ITERATOR_COMPLETION = true) {\n      }\n    } catch (err) {\n      ITERATOR_HAD_ERROR_KEY = true;\n      ITERATOR_ERROR_KEY = err;\n    } finally {\n      try {\n        if (!ITERATOR_COMPLETION && ITERATOR_KEY.return != null) {\n          await ITERATOR_KEY.return();\n        }\n      } finally {\n        if (ITERATOR_HAD_ERROR_KEY) {\n          throw ITERATOR_ERROR_KEY;\n        }\n      }\n    }\n  }\n"
        );

        function _default(path, _ref) {
          var getAsyncIterator = _ref.getAsyncIterator;
          var node = path.node,
            scope = path.scope,
            parent = path.parent;
          var stepKey = scope.generateUidIdentifier("step");
          var stepValue = scope.generateUidIdentifier("value");
          var left = node.left;
          var declar;

          if (
            _core().types.isIdentifier(left) ||
            _core().types.isPattern(left) ||
            _core().types.isMemberExpression(left)
          ) {
            declar = _core().types.expressionStatement(
              _core().types.assignmentExpression("=", left, stepValue)
            );
          } else if (_core().types.isVariableDeclaration(left)) {
            declar = _core().types.variableDeclaration(left.kind, [
              _core().types.variableDeclarator(
                left.declarations[0].id,
                stepValue
              )
            ]);
          }

          var template = buildForAwait({
            ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier(
              "didIteratorError"
            ),
            ITERATOR_COMPLETION: scope.generateUidIdentifier(
              "iteratorNormalCompletion"
            ),
            ITERATOR_ERROR_KEY: scope.generateUidIdentifier("iteratorError"),
            ITERATOR_KEY: scope.generateUidIdentifier("iterator"),
            GET_ITERATOR: getAsyncIterator,
            OBJECT: node.right,
            STEP_VALUE: stepValue,
            STEP_KEY: stepKey
          });
          template = template.body.body;

          var isLabeledParent = _core().types.isLabeledStatement(parent);

          var tryBody = template[3].block.body;
          var loop = tryBody[0];

          if (isLabeledParent) {
            tryBody[0] = _core().types.labeledStatement(parent.label, loop);
          }

          return {
            replaceParent: isLabeledParent,
            node: template,
            declar: declar,
            loop: loop
          };
        }

        /***/
      },
      /* 537 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = memberExpressionToFunctions;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var handle = {
          handle: function handle(member) {
            var node = member.node,
              parent = member.parent,
              parentPath = member.parentPath;

            if (
              parentPath.isUpdateExpression({
                argument: node
              })
            ) {
              var operator = parent.operator,
                prefix = parent.prefix;

              if (this.memoize) {
                this.memoize(member);
              }

              var value = t().binaryExpression(
                operator[0],
                t().unaryExpression("+", this.get(member)),
                t().numericLiteral(1)
              );

              if (prefix) {
                parentPath.replaceWith(this.set(member, value));
              } else {
                var scope = member.scope;
                var ref = scope.generateUidIdentifierBasedOnNode(node);
                scope.push({
                  id: ref
                });
                value.left = t().assignmentExpression(
                  "=",
                  t().cloneNode(ref),
                  value.left
                );
                parentPath.replaceWith(
                  t().sequenceExpression([
                    this.set(member, value),
                    t().cloneNode(ref)
                  ])
                );
              }

              return;
            }

            if (
              parentPath.isAssignmentExpression({
                left: node
              })
            ) {
              var _operator = parent.operator,
                right = parent.right;
              var _value = right;

              if (_operator !== "=") {
                if (this.memoize) {
                  this.memoize(member);
                }

                _value = t().binaryExpression(
                  _operator.slice(0, -1),
                  this.get(member),
                  _value
                );
              }

              parentPath.replaceWith(this.set(member, _value));
              return;
            }

            if (
              parentPath.isCallExpression({
                callee: node
              })
            ) {
              var args = parent.arguments;
              parentPath.replaceWith(this.call(member, args));
              return;
            }

            member.replaceWith(this.get(member));
          }
        };

        function memberExpressionToFunctions(path, visitor, state) {
          path.traverse(visitor, Object.assign({}, state, handle));
        }

        /***/
      },
      /* 538 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;
        var _default = {};
        exports.default = _default;

        /***/
      },
      /* 539 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var buildClassDecorator = (0, _core().template)(
          "\n  DECORATOR(CLASS_REF = INNER) || CLASS_REF;\n"
        );
        var buildClassPrototype = (0, _core().template)(
          "\n  CLASS_REF.prototype;\n"
        );
        var buildGetDescriptor = (0, _core().template)(
          "\n    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);\n"
        );
        var buildGetObjectInitializer = (0, _core().template)(
          "\n    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        initializer: function(){\n            return TEMP;\n        }\n    })\n"
        );
        var WARNING_CALLS = new WeakSet();

        function applyEnsureOrdering(path) {
          var decorators = (path.isClass()
            ? [path].concat(path.get("body.body"))
            : path.get("properties")
          ).reduce(function(acc, prop) {
            return acc.concat(prop.node.decorators || []);
          }, []);
          var identDecorators = decorators.filter(function(decorator) {
            return !_core().types.isIdentifier(decorator.callee);
          });
          if (identDecorators.length === 0) return;
          return _core().types.sequenceExpression(
            identDecorators
              .map(function(decorator) {
                var callee = decorator.callee;
                var id = (decorator.callee = path.scope.generateDeclaredUidIdentifier(
                  "dec"
                ));
                return _core().types.assignmentExpression("=", id, callee);
              })
              .concat([path.node])
          );
        }

        function applyClassDecorators(classPath) {
          if (!hasClassDecorators(classPath.node)) return;
          var decorators = classPath.node.decorators || [];
          classPath.node.decorators = null;
          var name = classPath.scope.generateDeclaredUidIdentifier("class");
          return decorators
            .map(function(dec) {
              return dec.callee;
            })
            .reverse()
            .reduce(function(acc, decorator) {
              return buildClassDecorator({
                CLASS_REF: _core().types.cloneNode(name),
                DECORATOR: _core().types.cloneNode(decorator),
                INNER: acc
              }).expression;
            }, classPath.node);
        }

        function hasClassDecorators(classNode) {
          return !!(classNode.decorators && classNode.decorators.length);
        }

        function applyMethodDecorators(path, state) {
          if (!hasMethodDecorators(path.node.body.body)) return;
          return applyTargetDecorators(path, state, path.node.body.body);
        }

        function hasMethodDecorators(body) {
          return body.some(function(node) {
            return node.decorators && node.decorators.length;
          });
        }

        function applyObjectDecorators(path, state) {
          if (!hasMethodDecorators(path.node.properties)) return;
          return applyTargetDecorators(path, state, path.node.properties);
        }

        function applyTargetDecorators(path, state, decoratedProps) {
          var name = path.scope.generateDeclaredUidIdentifier(
            path.isClass() ? "class" : "obj"
          );
          var exprs = decoratedProps.reduce(function(acc, node) {
            var decorators = node.decorators || [];
            node.decorators = null;
            if (decorators.length === 0) return acc;

            if (node.computed) {
              throw path.buildCodeFrameError(
                "Computed method/property decorators are not yet supported."
              );
            }

            var property = _core().types.isLiteral(node.key)
              ? node.key
              : _core().types.stringLiteral(node.key.name);
            var target =
              path.isClass() && !node.static
                ? buildClassPrototype({
                    CLASS_REF: name
                  }).expression
                : name;

            if (
              _core().types.isClassProperty(node, {
                static: false
              })
            ) {
              var descriptor = path.scope.generateDeclaredUidIdentifier(
                "descriptor"
              );
              var initializer = node.value
                ? _core().types.functionExpression(
                    null,
                    [],
                    _core().types.blockStatement([
                      _core().types.returnStatement(node.value)
                    ])
                  )
                : _core().types.nullLiteral();
              node.value = _core().types.callExpression(
                state.addHelper("initializerWarningHelper"),
                [descriptor, _core().types.thisExpression()]
              );
              WARNING_CALLS.add(node.value);
              acc = acc.concat([
                _core().types.assignmentExpression(
                  "=",
                  descriptor,
                  _core().types.callExpression(
                    state.addHelper("applyDecoratedDescriptor"),
                    [
                      _core().types.cloneNode(target),
                      _core().types.cloneNode(property),
                      _core().types.arrayExpression(
                        decorators.map(function(dec) {
                          return _core().types.cloneNode(dec.callee);
                        })
                      ),
                      _core().types.objectExpression([
                        _core().types.objectProperty(
                          _core().types.identifier("enumerable"),
                          _core().types.booleanLiteral(true)
                        ),
                        _core().types.objectProperty(
                          _core().types.identifier("initializer"),
                          initializer
                        )
                      ])
                    ]
                  )
                )
              ]);
            } else {
              acc = acc.concat(
                _core().types.callExpression(
                  state.addHelper("applyDecoratedDescriptor"),
                  [
                    _core().types.cloneNode(target),
                    _core().types.cloneNode(property),
                    _core().types.arrayExpression(
                      decorators.map(function(dec) {
                        return _core().types.cloneNode(dec.callee);
                      })
                    ),
                    _core().types.isObjectProperty(node) ||
                    _core().types.isClassProperty(node, {
                      static: true
                    })
                      ? buildGetObjectInitializer({
                          TEMP: path.scope.generateDeclaredUidIdentifier(
                            "init"
                          ),
                          TARGET: _core().types.cloneNode(target),
                          PROPERTY: _core().types.cloneNode(property)
                        }).expression
                      : buildGetDescriptor({
                          TARGET: _core().types.cloneNode(target),
                          PROPERTY: _core().types.cloneNode(property)
                        }).expression,
                    _core().types.cloneNode(target)
                  ]
                )
              );
            }

            return acc;
          }, []);
          return _core().types.sequenceExpression([
            _core().types.assignmentExpression(
              "=",
              _core().types.cloneNode(name),
              path.node
            ),
            _core().types.sequenceExpression(exprs),
            _core().types.cloneNode(name)
          ]);
        }

        var _default = {
          ClassDeclaration: function ClassDeclaration(path) {
            var node = path.node;

            if (
              !hasClassDecorators(node) &&
              !hasMethodDecorators(node.body.body)
            ) {
              return;
            }

            var ref = node.id
              ? _core().types.cloneNode(node.id)
              : path.scope.generateUidIdentifier("class");

            var letDeclaration = _core().types.variableDeclaration("let", [
              _core().types.variableDeclarator(
                ref,
                _core().types.toExpression(node)
              )
            ]);

            if (path.parentPath.isExportDefaultDeclaration()) {
              path.parentPath.replaceWithMultiple([
                letDeclaration,
                _core().types.exportNamedDeclaration(null, [
                  _core().types.exportSpecifier(
                    _core().types.cloneNode(ref),
                    _core().types.identifier("default")
                  )
                ])
              ]);
            } else {
              path.replaceWith(letDeclaration);
            }
          },
          ClassExpression: function ClassExpression(path, state) {
            var decoratedClass =
              applyEnsureOrdering(path) ||
              applyClassDecorators(path, state) ||
              applyMethodDecorators(path, state);
            if (decoratedClass) path.replaceWith(decoratedClass);
          },
          ObjectExpression: function ObjectExpression(path, state) {
            var decoratedObject =
              applyEnsureOrdering(path) || applyObjectDecorators(path, state);
            if (decoratedObject) path.replaceWith(decoratedObject);
          },
          AssignmentExpression: function AssignmentExpression(path, state) {
            if (!WARNING_CALLS.has(path.node.right)) return;
            path.replaceWith(
              _core().types.callExpression(
                state.addHelper("initializerDefineProperty"),
                [
                  _core().types.cloneNode(path.get("left.object").node),
                  _core().types.stringLiteral(
                    path.get("left.property").node.name
                  ),
                  _core().types.cloneNode(path.get("right.arguments")[0].node),
                  _core().types.cloneNode(path.get("right.arguments")[1].node)
                ]
              )
            );
          }
        };
        exports.default = _default;

        /***/
      },
      /* 540 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.visitor = void 0;

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function getTDZStatus(refPath, bindingPath) {
          var executionStatus = bindingPath._guessExecutionStatusRelativeTo(
            refPath
          );

          if (executionStatus === "before") {
            return "inside";
          } else if (executionStatus === "after") {
            return "outside";
          } else {
            return "maybe";
          }
        }

        function buildTDZAssert(node, state) {
          return _core().types.callExpression(state.addHelper("temporalRef"), [
            node,
            _core().types.stringLiteral(node.name)
          ]);
        }

        function isReference(node, scope, state) {
          var declared = state.letReferences[node.name];
          if (!declared) return false;
          return scope.getBindingIdentifier(node.name) === declared;
        }

        var visitor = {
          ReferencedIdentifier: function ReferencedIdentifier(path, state) {
            if (!state.tdzEnabled) return;
            var node = path.node,
              parent = path.parent,
              scope = path.scope;
            if (
              path.parentPath.isFor({
                left: node
              })
            )
              return;
            if (!isReference(node, scope, state)) return;
            var bindingPath = scope.getBinding(node.name).path;
            if (bindingPath.isFunctionDeclaration()) return;
            var status = getTDZStatus(path, bindingPath);
            if (status === "inside") return;

            if (status === "maybe") {
              var assert = buildTDZAssert(node, state);
              bindingPath.parent._tdzThis = true;
              path.skip();

              if (path.parentPath.isUpdateExpression()) {
                if (parent._ignoreBlockScopingTDZ) return;
                path.parentPath.replaceWith(
                  _core().types.sequenceExpression([assert, parent])
                );
              } else {
                path.replaceWith(assert);
              }
            } else if (status === "outside") {
              path.replaceWith(
                _core().types.throwStatement(
                  _core().types.inherits(
                    _core().types.newExpression(
                      _core().types.identifier("ReferenceError"),
                      [
                        _core().types.stringLiteral(
                          node.name + " is not defined - temporal dead zone"
                        )
                      ]
                    ),
                    node
                  )
                )
              );
            }
          },
          AssignmentExpression: {
            exit: function exit(path, state) {
              if (!state.tdzEnabled) return;
              var node = path.node;
              if (node._ignoreBlockScopingTDZ) return;
              var nodes = [];
              var ids = path.getBindingIdentifiers();

              for (var name in ids) {
                var id = ids[name];

                if (isReference(id, path.scope, state)) {
                  nodes.push(buildTDZAssert(id, state));
                }
              }

              if (nodes.length) {
                node._ignoreBlockScopingTDZ = true;
                nodes.push(node);
                path.replaceWithMultiple(
                  nodes.map(_core().types.expressionStatement)
                );
              }
            }
          }
        };
        exports.visitor = visitor;

        /***/
      },
      /* 541 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(542);

        /***/
      },
      /* 542 */
      /***/ function(module, exports, __webpack_require__) {
        var copyObject = __webpack_require__(31),
          createAssigner = __webpack_require__(543),
          keysIn = __webpack_require__(42);

        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        module.exports = assignIn;

        /***/
      },
      /* 543 */
      /***/ function(module, exports, __webpack_require__) {
        var baseRest = __webpack_require__(47),
          isIterateeCall = __webpack_require__(35);

        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
            customizer =
              assigner.length > 3 && typeof customizer == "function"
                ? (length--, customizer)
                : undefined;

            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined : customizer;
              length = 1;
            }

            object = Object(object);

            while (++index < length) {
              var source = sources[index];

              if (source) {
                assigner(object, source, index, customizer);
              }
            }

            return object;
          });
        }

        module.exports = createAssigner;

        /***/
      },
      /* 544 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = transformClass;

        function _helperFunctionName() {
          var data = _interopRequireDefault(__webpack_require__(20));

          _helperFunctionName = function _helperFunctionName() {
            return data;
          };

          return data;
        }

        function _helperReplaceSupers() {
          var data = _interopRequireWildcard(__webpack_require__(95));

          _helperReplaceSupers = function _helperReplaceSupers() {
            return data;
          };

          return data;
        }

        function _helperOptimiseCallExpression() {
          var data = _interopRequireDefault(__webpack_require__(198));

          _helperOptimiseCallExpression = function _helperOptimiseCallExpression() {
            return data;
          };

          return data;
        }

        function defineMap() {
          var data = _interopRequireWildcard(__webpack_require__(208));

          defineMap = function defineMap() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _templateObject = _taggedTemplateLiteralLoose([
          "\n        (function () {\n          super(...arguments);\n        })\n      "
        ]);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _taggedTemplateLiteralLoose(strings, raw) {
          if (!raw) {
            raw = strings.slice(0);
          }

          strings.raw = raw;
          return strings;
        }

        function buildConstructor(classRef, constructorBody, node) {
          var func = _core().types.functionDeclaration(
            _core().types.cloneNode(classRef),
            [],
            constructorBody
          );

          _core().types.inherits(func, node);

          return func;
        }

        var verifyConstructorVisitor = _core().traverse.visitors.merge([
          _helperReplaceSupers().environmentVisitor,
          {
            Super: function Super(path, state) {
              if (state.isDerived) return;
              var node = path.node,
                parentPath = path.parentPath;

              if (
                parentPath.isCallExpression({
                  callee: node
                })
              ) {
                throw path.buildCodeFrameError(
                  "super() is only allowed in a derived constructor"
                );
              }
            },
            ThisExpression: function ThisExpression(path, state) {
              if (!state.isDerived) return;
              var node = path.node,
                parentPath = path.parentPath;

              if (
                parentPath.isMemberExpression({
                  object: node
                })
              ) {
                return;
              }

              var assertion = _core().types.callExpression(
                state.file.addHelper("assertThisInitialized"),
                [node]
              );

              path.replaceWith(assertion);
              path.skip();
            }
          }
        ]);

        function transformClass(path, file, builtinClasses, isLoose) {
          var classState = {
            parent: undefined,
            scope: undefined,
            node: undefined,
            path: undefined,
            file: undefined,
            classId: undefined,
            classRef: undefined,
            superName: undefined,
            superReturns: [],
            isDerived: false,
            extendsNative: false,
            construct: undefined,
            constructorBody: undefined,
            userConstructor: undefined,
            userConstructorPath: undefined,
            hasConstructor: false,
            instancePropBody: [],
            instancePropRefs: {},
            staticPropBody: [],
            body: [],
            bareSupers: new Set(),
            superThises: [],
            pushedConstructor: false,
            pushedInherits: false,
            protoAlias: null,
            isLoose: false,
            hasInstanceDescriptors: false,
            hasStaticDescriptors: false,
            instanceMutatorMap: {},
            staticMutatorMap: {}
          };

          var setState = function setState(newState) {
            Object.assign(classState, newState);
          };

          var findThisesVisitor = _core().traverse.visitors.merge([
            _helperReplaceSupers().environmentVisitor,
            {
              ThisExpression: function ThisExpression(path) {
                classState.superThises.push(path);
              }
            }
          ]);

          function pushToMap(node, enumerable, kind, scope) {
            if (kind === void 0) {
              kind = "value";
            }

            var mutatorMap;

            if (node.static) {
              setState({
                hasStaticDescriptors: true
              });
              mutatorMap = classState.staticMutatorMap;
            } else {
              setState({
                hasInstanceDescriptors: true
              });
              mutatorMap = classState.instanceMutatorMap;
            }

            var map = defineMap().push(
              mutatorMap,
              node,
              kind,
              classState.file,
              scope
            );

            if (enumerable) {
              map.enumerable = _core().types.booleanLiteral(true);
            }

            return map;
          }

          function maybeCreateConstructor() {
            var hasConstructor = false;
            var paths = classState.path.get("body.body");

            for (
              var _iterator = paths,
                _isArray = Array.isArray(_iterator),
                _i = 0,
                _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
              ;

            ) {
              var _ref;

              if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
              } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
              }

              var _path = _ref;
              hasConstructor = _path.equals("kind", "constructor");
              if (hasConstructor) break;
            }

            if (hasConstructor) return;
            var params, body;

            if (classState.isDerived) {
              var _constructor = _core().template.expression.ast(
                _templateObject
              );

              params = _constructor.params;
              body = _constructor.body;
            } else {
              params = [];
              body = _core().types.blockStatement([]);
            }

            classState.path
              .get("body")
              .unshiftContainer(
                "body",
                _core().types.classMethod(
                  "constructor",
                  _core().types.identifier("constructor"),
                  params,
                  body
                )
              );
          }

          function buildBody() {
            maybeCreateConstructor();
            pushBody();
            verifyConstructor();

            if (classState.userConstructor) {
              var constructorBody = classState.constructorBody,
                userConstructor = classState.userConstructor,
                construct = classState.construct;
              constructorBody.body = constructorBody.body.concat(
                userConstructor.body.body
              );

              _core().types.inherits(construct, userConstructor);

              _core().types.inherits(constructorBody, userConstructor.body);
            }

            pushDescriptors();
            pushInheritsToBody();
          }

          function pushBody() {
            var classBodyPaths = classState.path.get("body.body");

            for (
              var _iterator2 = classBodyPaths,
                _isArray2 = Array.isArray(_iterator2),
                _i2 = 0,
                _iterator2 = _isArray2
                  ? _iterator2
                  : _iterator2[Symbol.iterator]();
              ;

            ) {
              var _ref2;

              if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
              } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
              }

              var _path2 = _ref2;
              var node = _path2.node;

              if (_path2.isClassProperty()) {
                throw _path2.buildCodeFrameError(
                  "Missing class properties transform."
                );
              }

              if (node.decorators) {
                throw _path2.buildCodeFrameError(
                  "Method has decorators, put the decorator plugin before the classes one."
                );
              }

              if (_core().types.isClassMethod(node)) {
                var isConstructor = node.kind === "constructor";

                if (isConstructor) {
                  _path2.traverse(verifyConstructorVisitor, {
                    isDerived: classState.isDerived,
                    file: classState.file
                  });
                }

                var replaceSupers = new (_helperReplaceSupers()).default({
                  methodPath: _path2,
                  objectRef: classState.classRef,
                  superRef: classState.superName,
                  isLoose: classState.isLoose,
                  file: classState.file
                });
                replaceSupers.replace();
                var state = {
                  returns: [],
                  bareSupers: new Set()
                };

                _path2.traverse(
                  _core().traverse.visitors.merge([
                    _helperReplaceSupers().environmentVisitor,
                    {
                      ReturnStatement: function ReturnStatement(path, state) {
                        if (
                          !path.getFunctionParent().isArrowFunctionExpression()
                        ) {
                          state.returns.push(path);
                        }
                      },
                      Super: function Super(path, state) {
                        var node = path.node,
                          parentPath = path.parentPath;

                        if (
                          parentPath.isCallExpression({
                            callee: node
                          })
                        ) {
                          state.bareSupers.add(parentPath);
                        }
                      }
                    }
                  ]),
                  state
                );

                if (isConstructor) {
                  pushConstructor(state, node, _path2);
                } else {
                  pushMethod(node, _path2);
                }
              }
            }
          }

          function clearDescriptors() {
            setState({
              hasInstanceDescriptors: false,
              hasStaticDescriptors: false,
              instanceMutatorMap: {},
              staticMutatorMap: {}
            });
          }

          function pushDescriptors() {
            var body = classState.body;
            var instanceProps;
            var staticProps;

            if (classState.hasInstanceDescriptors) {
              instanceProps = defineMap().toClassObject(
                classState.instanceMutatorMap
              );
            }

            if (classState.hasStaticDescriptors) {
              staticProps = defineMap().toClassObject(
                classState.staticMutatorMap
              );
            }

            if (instanceProps || staticProps) {
              if (instanceProps) {
                instanceProps = defineMap().toComputedObjectFromClass(
                  instanceProps
                );
              }

              if (staticProps) {
                staticProps = defineMap().toComputedObjectFromClass(
                  staticProps
                );
              }

              var args = [
                _core().types.cloneNode(classState.classRef),
                _core().types.nullLiteral(),
                _core().types.nullLiteral()
              ];
              if (instanceProps) args[1] = instanceProps;
              if (staticProps) args[2] = staticProps;
              var lastNonNullIndex = 0;

              for (var i = 0; i < args.length; i++) {
                if (!_core().types.isNullLiteral(args[i])) lastNonNullIndex = i;
              }

              args = args.slice(0, lastNonNullIndex + 1);
              body.push(
                _core().types.expressionStatement(
                  _core().types.callExpression(
                    classState.file.addHelper("createClass"),
                    args
                  )
                )
              );
            }

            clearDescriptors();
          }

          function wrapSuperCall(bareSuper, superRef, thisRef, body) {
            var bareSuperNode = bareSuper.node;
            var call;

            if (classState.isLoose) {
              bareSuperNode.arguments.unshift(_core().types.thisExpression());

              if (
                bareSuperNode.arguments.length === 2 &&
                _core().types.isSpreadElement(bareSuperNode.arguments[1]) &&
                _core().types.isIdentifier(
                  bareSuperNode.arguments[1].argument,
                  {
                    name: "arguments"
                  }
                )
              ) {
                bareSuperNode.arguments[1] =
                  bareSuperNode.arguments[1].argument;
                bareSuperNode.callee = _core().types.memberExpression(
                  _core().types.cloneNode(superRef),
                  _core().types.identifier("apply")
                );
              } else {
                bareSuperNode.callee = _core().types.memberExpression(
                  _core().types.cloneNode(superRef),
                  _core().types.identifier("call")
                );
              }

              call = _core().types.logicalExpression(
                "||",
                bareSuperNode,
                _core().types.thisExpression()
              );
            } else {
              bareSuperNode = (0, _helperOptimiseCallExpression().default)(
                _core().types.callExpression(
                  classState.file.addHelper("getPrototypeOf"),
                  [_core().types.cloneNode(classState.classRef)]
                ),
                _core().types.thisExpression(),
                bareSuperNode.arguments
              );
              call = _core().types.callExpression(
                classState.file.addHelper("possibleConstructorReturn"),
                [_core().types.thisExpression(), bareSuperNode]
              );
            }

            if (
              bareSuper.parentPath.isExpressionStatement() &&
              bareSuper.parentPath.container === body.node.body &&
              body.node.body.length - 1 === bareSuper.parentPath.key
            ) {
              if (classState.superThises.length) {
                call = _core().types.assignmentExpression("=", thisRef(), call);
              }

              bareSuper.parentPath.replaceWith(
                _core().types.returnStatement(call)
              );
            } else {
              bareSuper.replaceWith(
                _core().types.assignmentExpression("=", thisRef(), call)
              );
            }
          }

          function verifyConstructor() {
            if (!classState.isDerived) return;
            var path = classState.userConstructorPath;
            var body = path.get("body");
            path.traverse(findThisesVisitor);
            var guaranteedSuperBeforeFinish = !!classState.bareSupers.size;

            var _thisRef = function thisRef() {
              var ref = path.scope.generateDeclaredUidIdentifier("this");

              _thisRef = function thisRef() {
                return _core().types.cloneNode(ref);
              };

              return ref;
            };

            for (
              var _iterator3 = classState.bareSupers,
                _isArray3 = Array.isArray(_iterator3),
                _i3 = 0,
                _iterator3 = _isArray3
                  ? _iterator3
                  : _iterator3[Symbol.iterator]();
              ;

            ) {
              var _ref3;

              if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
              }

              var bareSuper = _ref3;
              wrapSuperCall(bareSuper, classState.superName, _thisRef, body);

              if (guaranteedSuperBeforeFinish) {
                bareSuper.find(function(parentPath) {
                  if (parentPath === path) {
                    return true;
                  }

                  if (
                    parentPath.isLoop() ||
                    parentPath.isConditional() ||
                    parentPath.isArrowFunctionExpression()
                  ) {
                    guaranteedSuperBeforeFinish = false;
                    return true;
                  }
                });
              }
            }

            for (
              var _iterator4 = classState.superThises,
                _isArray4 = Array.isArray(_iterator4),
                _i4 = 0,
                _iterator4 = _isArray4
                  ? _iterator4
                  : _iterator4[Symbol.iterator]();
              ;

            ) {
              var _ref4;

              if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref4 = _iterator4[_i4++];
              } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref4 = _i4.value;
              }

              var thisPath = _ref4;
              var node = thisPath.node,
                parentPath = thisPath.parentPath;

              if (
                parentPath.isMemberExpression({
                  object: node
                })
              ) {
                thisPath.replaceWith(_thisRef());
                continue;
              }

              thisPath.replaceWith(
                _core().types.callExpression(
                  classState.file.addHelper("assertThisInitialized"),
                  [_thisRef()]
                )
              );
            }

            var wrapReturn;

            if (classState.isLoose) {
              wrapReturn = function wrapReturn(returnArg) {
                var thisExpr = _core().types.callExpression(
                  classState.file.addHelper("assertThisInitialized"),
                  [_thisRef()]
                );

                return returnArg
                  ? _core().types.logicalExpression("||", returnArg, thisExpr)
                  : thisExpr;
              };
            } else {
              wrapReturn = function wrapReturn(returnArg) {
                return _core().types.callExpression(
                  classState.file.addHelper("possibleConstructorReturn"),
                  [_thisRef()].concat(returnArg || [])
                );
              };
            }

            var bodyPaths = body.get("body");

            if (!bodyPaths.length || !bodyPaths.pop().isReturnStatement()) {
              body.pushContainer(
                "body",
                _core().types.returnStatement(
                  guaranteedSuperBeforeFinish ? _thisRef() : wrapReturn()
                )
              );
            }

            for (
              var _iterator5 = classState.superReturns,
                _isArray5 = Array.isArray(_iterator5),
                _i5 = 0,
                _iterator5 = _isArray5
                  ? _iterator5
                  : _iterator5[Symbol.iterator]();
              ;

            ) {
              var _ref5;

              if (_isArray5) {
                if (_i5 >= _iterator5.length) break;
                _ref5 = _iterator5[_i5++];
              } else {
                _i5 = _iterator5.next();
                if (_i5.done) break;
                _ref5 = _i5.value;
              }

              var returnPath = _ref5;
              returnPath
                .get("argument")
                .replaceWith(wrapReturn(returnPath.node.argument));
            }
          }

          function pushMethod(node, path) {
            var scope = path ? path.scope : classState.scope;

            if (node.kind === "method") {
              if (processMethod(node, scope)) return;
            }

            pushToMap(node, false, null, scope);
          }

          function processMethod(node, scope) {
            if (classState.isLoose && !node.decorators) {
              var classRef = classState.classRef;

              if (!node.static) {
                insertProtoAliasOnce();
                classRef = classState.protoAlias;
              }

              var methodName = _core().types.memberExpression(
                _core().types.cloneNode(classRef),
                node.key,
                node.computed || _core().types.isLiteral(node.key)
              );

              var func = _core().types.functionExpression(
                null,
                node.params,
                node.body,
                node.generator,
                node.async
              );

              func.returnType = node.returnType;

              var key = _core().types.toComputedKey(node, node.key);

              if (_core().types.isStringLiteral(key)) {
                func = (0, _helperFunctionName().default)({
                  node: func,
                  id: key,
                  scope: scope
                });
              }

              var expr = _core().types.expressionStatement(
                _core().types.assignmentExpression("=", methodName, func)
              );

              _core().types.inheritsComments(expr, node);

              classState.body.push(expr);
              return true;
            }

            return false;
          }

          function insertProtoAliasOnce() {
            if (classState.protoAlias === null) {
              setState({
                protoAlias: classState.scope.generateUidIdentifier("proto")
              });

              var classProto = _core().types.memberExpression(
                classState.classRef,
                _core().types.identifier("prototype")
              );

              var protoDeclaration = _core().types.variableDeclaration("var", [
                _core().types.variableDeclarator(
                  classState.protoAlias,
                  classProto
                )
              ]);

              classState.body.push(protoDeclaration);
            }
          }

          function pushConstructor(replaceSupers, method, path) {
            if (path.scope.hasOwnBinding(classState.classRef.name)) {
              path.scope.rename(classState.classRef.name);
            }

            setState({
              userConstructorPath: path,
              userConstructor: method,
              hasConstructor: true,
              bareSupers: replaceSupers.bareSupers,
              superReturns: replaceSupers.returns
            });
            var construct = classState.construct;

            _core().types.inheritsComments(construct, method);

            construct.params = method.params;

            _core().types.inherits(construct.body, method.body);

            construct.body.directives = method.body.directives;
            pushConstructorToBody();
          }

          function pushConstructorToBody() {
            if (classState.pushedConstructor) return;
            classState.pushedConstructor = true;

            if (
              classState.hasInstanceDescriptors ||
              classState.hasStaticDescriptors
            ) {
              pushDescriptors();
            }

            classState.body.push(classState.construct);
          }

          function pushInheritsToBody() {
            if (!classState.isDerived || classState.pushedInherits) return;
            setState({
              pushedInherits: true
            });
            classState.body.push(
              _core().types.expressionStatement(
                _core().types.callExpression(
                  classState.file.addHelper(
                    classState.isLoose ? "inheritsLoose" : "inherits"
                  ),
                  [
                    _core().types.cloneNode(classState.classRef),
                    _core().types.cloneNode(classState.superName)
                  ]
                )
              )
            );
          }

          function setupClosureParamsArgs() {
            var superName = classState.superName;
            var closureParams = [];
            var closureArgs = [];

            if (classState.isDerived) {
              var arg = classState.extendsNative
                ? _core().types.callExpression(
                    classState.file.addHelper("wrapNativeSuper"),
                    [_core().types.cloneNode(superName)]
                  )
                : _core().types.cloneNode(superName);
              var param = classState.scope.generateUidIdentifierBasedOnNode(
                superName
              );
              closureParams.push(param);
              closureArgs.push(arg);
              setState({
                superName: _core().types.cloneNode(param)
              });
            }

            return {
              closureParams: closureParams,
              closureArgs: closureArgs
            };
          }

          function classTransformer(path, file, builtinClasses, isLoose) {
            setState({
              parent: path.parent,
              scope: path.scope,
              node: path.node,
              path: path,
              file: file,
              isLoose: isLoose
            });
            setState({
              classId: classState.node.id,
              classRef: classState.node.id
                ? _core().types.identifier(classState.node.id.name)
                : classState.scope.generateUidIdentifier("class"),
              superName: classState.node.superClass,
              isDerived: !!classState.node.superClass,
              constructorBody: _core().types.blockStatement([])
            });
            setState({
              extendsNative:
                classState.isDerived &&
                builtinClasses.has(classState.superName.name) &&
                !classState.scope.hasBinding(classState.superName.name, true)
            });
            var classRef = classState.classRef,
              node = classState.node,
              constructorBody = classState.constructorBody;
            setState({
              construct: buildConstructor(classRef, constructorBody, node)
            });
            var body = classState.body;

            var _setupClosureParamsAr = setupClosureParamsArgs(),
              closureParams = _setupClosureParamsAr.closureParams,
              closureArgs = _setupClosureParamsAr.closureArgs;

            buildBody();

            if (!classState.isLoose) {
              constructorBody.body.unshift(
                _core().types.expressionStatement(
                  _core().types.callExpression(
                    classState.file.addHelper("classCallCheck"),
                    [
                      _core().types.thisExpression(),
                      _core().types.cloneNode(classState.classRef)
                    ]
                  )
                )
              );
            }

            body = body.concat(
              classState.staticPropBody.map(function(fn) {
                return fn(_core().types.cloneNode(classState.classRef));
              })
            );
            var isStrict = path.isInStrictMode();
            var constructorOnly = classState.classId && body.length === 1;

            if (constructorOnly && !isStrict) {
              for (
                var _iterator6 = classState.construct.params,
                  _isArray6 = Array.isArray(_iterator6),
                  _i6 = 0,
                  _iterator6 = _isArray6
                    ? _iterator6
                    : _iterator6[Symbol.iterator]();
                ;

              ) {
                var _ref6;

                if (_isArray6) {
                  if (_i6 >= _iterator6.length) break;
                  _ref6 = _iterator6[_i6++];
                } else {
                  _i6 = _iterator6.next();
                  if (_i6.done) break;
                  _ref6 = _i6.value;
                }

                var param = _ref6;

                if (!_core().types.isIdentifier(param)) {
                  constructorOnly = false;
                  break;
                }
              }
            }

            var directives = constructorOnly ? body[0].body.directives : [];

            if (!isStrict) {
              directives.push(
                _core().types.directive(
                  _core().types.directiveLiteral("use strict")
                )
              );
            }

            if (constructorOnly) {
              return _core().types.toExpression(body[0]);
            }

            body.push(
              _core().types.returnStatement(
                _core().types.cloneNode(classState.classRef)
              )
            );

            var container = _core().types.arrowFunctionExpression(
              closureParams,
              _core().types.blockStatement(body, directives)
            );

            return _core().types.callExpression(container, closureArgs);
          }

          return classTransformer(path, file, builtinClasses, isLoose);
        }

        /***/
      },
      /* 545 */
      /***/ function(module, exports, __webpack_require__) {
        var baseHas = __webpack_require__(546),
          hasPath = __webpack_require__(171);

        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }

        module.exports = has;

        /***/
      },
      /* 546 */
      /***/ function(module, exports) {
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;

        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }

        module.exports = baseHas;

        /***/
      },
      /* 547 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _regexpuCore() {
          var data = _interopRequireDefault(__webpack_require__(96));

          _regexpuCore = function _regexpuCore() {
            return data;
          };

          return data;
        }

        function regex() {
          var data = _interopRequireWildcard(__webpack_require__(57));

          regex = function regex() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              RegExpLiteral: function RegExpLiteral(path) {
                var node = path.node;

                if (!regex().is(node, "s")) {
                  return;
                }

                node.pattern = (0, _regexpuCore().default)(
                  node.pattern,
                  node.flags,
                  {
                    dotAllFlag: true,
                    useUnicodeFlag: regex().is(node, "u")
                  }
                );
                regex().pullFlag(node, "s");
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 548 */
      /***/ function(module, exports, __webpack_require__) {
        /* WEBPACK VAR INJECTION */ (function(module, global) {
          var __WEBPACK_AMD_DEFINE_RESULT__;
          (function() {
            "use strict";

            var objectTypes = {
              function: true,
              object: true
            };
            var root = (objectTypes[typeof window] && window) || this;
            var freeExports = objectTypes[typeof exports] && exports;
            var freeModule =
              objectTypes[typeof module] &&
              module &&
              !module.nodeType &&
              module;
            var freeGlobal =
              freeExports && freeModule && typeof global == "object" && global;

            if (
              freeGlobal &&
              (freeGlobal.global === freeGlobal ||
                freeGlobal.window === freeGlobal ||
                freeGlobal.self === freeGlobal)
            ) {
              root = freeGlobal;
            }

            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var stringFromCharCode = String.fromCharCode;
            var floor = Math.floor;

            function fromCodePoint() {
              var MAX_SIZE = 0x4000;
              var codeUnits = [];
              var highSurrogate;
              var lowSurrogate;
              var index = -1;
              var length = arguments.length;

              if (!length) {
                return "";
              }

              var result = "";

              while (++index < length) {
                var codePoint = Number(arguments[index]);

                if (
                  !isFinite(codePoint) ||
                  codePoint < 0 ||
                  codePoint > 0x10ffff ||
                  floor(codePoint) != codePoint
                ) {
                  throw RangeError("Invalid code point: " + codePoint);
                }

                if (codePoint <= 0xffff) {
                  codeUnits.push(codePoint);
                } else {
                  codePoint -= 0x10000;
                  highSurrogate = (codePoint >> 10) + 0xd800;
                  lowSurrogate = codePoint % 0x400 + 0xdc00;
                  codeUnits.push(highSurrogate, lowSurrogate);
                }

                if (index + 1 == length || codeUnits.length > MAX_SIZE) {
                  result += stringFromCharCode.apply(null, codeUnits);
                  codeUnits.length = 0;
                }
              }

              return result;
            }

            var assertTypeRegexMap = {};

            function assertType(type, expected) {
              if (expected.indexOf("|") == -1) {
                if (type == expected) {
                  return;
                }

                throw Error(
                  "Invalid node type: " + type + "; expected type: " + expected
                );
              }

              expected = hasOwnProperty.call(assertTypeRegexMap, expected)
                ? assertTypeRegexMap[expected]
                : (assertTypeRegexMap[expected] = RegExp(
                    "^(?:" + expected + ")$"
                  ));

              if (expected.test(type)) {
                return;
              }

              throw Error(
                "Invalid node type: " + type + "; expected types: " + expected
              );
            }

            function generate(node) {
              var type = node.type;

              if (hasOwnProperty.call(generators, type)) {
                return generators[type](node);
              }

              throw Error("Invalid node type: " + type);
            }

            function generateAlternative(node) {
              assertType(node.type, "alternative");
              var terms = node.body,
                i = -1,
                length = terms.length,
                result = "";

              while (++i < length) {
                result += generateTerm(terms[i]);
              }

              return result;
            }

            function generateAnchor(node) {
              assertType(node.type, "anchor");

              switch (node.kind) {
                case "start":
                  return "^";

                case "end":
                  return "$";

                case "boundary":
                  return "\\b";

                case "not-boundary":
                  return "\\B";

                default:
                  throw Error("Invalid assertion");
              }
            }

            function generateAtom(node) {
              assertType(
                node.type,
                "anchor|characterClass|characterClassEscape|dot|group|reference|value"
              );
              return generate(node);
            }

            function generateCharacterClass(node) {
              assertType(node.type, "characterClass");
              var classRanges = node.body,
                i = -1,
                length = classRanges.length,
                result = "";

              if (node.negative) {
                result += "^";
              }

              while (++i < length) {
                result += generateClassAtom(classRanges[i]);
              }

              return "[" + result + "]";
            }

            function generateCharacterClassEscape(node) {
              assertType(node.type, "characterClassEscape");
              return "\\" + node.value;
            }

            function generateUnicodePropertyEscape(node) {
              assertType(node.type, "unicodePropertyEscape");
              return (
                "\\" + (node.negative ? "P" : "p") + "{" + node.value + "}"
              );
            }

            function generateCharacterClassRange(node) {
              assertType(node.type, "characterClassRange");
              var min = node.min,
                max = node.max;

              if (
                min.type == "characterClassRange" ||
                max.type == "characterClassRange"
              ) {
                throw Error("Invalid character class range");
              }

              return generateClassAtom(min) + "-" + generateClassAtom(max);
            }

            function generateClassAtom(node) {
              assertType(
                node.type,
                "anchor|characterClassEscape|characterClassRange|dot|value"
              );
              return generate(node);
            }

            function generateDisjunction(node) {
              assertType(node.type, "disjunction");
              var body = node.body,
                i = -1,
                length = body.length,
                result = "";

              while (++i < length) {
                if (i != 0) {
                  result += "|";
                }

                result += generate(body[i]);
              }

              return result;
            }

            function generateDot(node) {
              assertType(node.type, "dot");
              return ".";
            }

            function generateGroup(node) {
              assertType(node.type, "group");
              var result = "";

              switch (node.behavior) {
                case "normal":
                  break;

                case "ignore":
                  result += "?:";
                  break;

                case "lookahead":
                  result += "?=";
                  break;

                case "negativeLookahead":
                  result += "?!";
                  break;

                default:
                  throw Error("Invalid behaviour: " + node.behaviour);
              }

              var body = node.body,
                i = -1,
                length = body.length;

              while (++i < length) {
                result += generate(body[i]);
              }

              return "(" + result + ")";
            }

            function generateQuantifier(node) {
              assertType(node.type, "quantifier");
              var quantifier = "",
                min = node.min,
                max = node.max;

              if (max == null) {
                if (min == 0) {
                  quantifier = "*";
                } else if (min == 1) {
                  quantifier = "+";
                } else {
                  quantifier = "{" + min + ",}";
                }
              } else if (min == max) {
                quantifier = "{" + min + "}";
              } else if (min == 0 && max == 1) {
                quantifier = "?";
              } else {
                quantifier = "{" + min + "," + max + "}";
              }

              if (!node.greedy) {
                quantifier += "?";
              }

              return generateAtom(node.body[0]) + quantifier;
            }

            function generateReference(node) {
              assertType(node.type, "reference");
              return "\\" + node.matchIndex;
            }

            function generateTerm(node) {
              assertType(
                node.type,
                "anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|unicodePropertyEscape|value"
              );
              return generate(node);
            }

            function generateValue(node) {
              assertType(node.type, "value");
              var kind = node.kind,
                codePoint = node.codePoint;

              switch (kind) {
                case "controlLetter":
                  return "\\c" + fromCodePoint(codePoint + 64);

                case "hexadecimalEscape":
                  return (
                    "\\x" +
                    ("00" + codePoint.toString(16).toUpperCase()).slice(-2)
                  );

                case "identifier":
                  return "\\" + fromCodePoint(codePoint);

                case "null":
                  return "\\" + codePoint;

                case "octal":
                  return "\\" + codePoint.toString(8);

                case "singleEscape":
                  switch (codePoint) {
                    case 0x0008:
                      return "\\b";

                    case 0x0009:
                      return "\\t";

                    case 0x000a:
                      return "\\n";

                    case 0x000b:
                      return "\\v";

                    case 0x000c:
                      return "\\f";

                    case 0x000d:
                      return "\\r";

                    default:
                      throw Error("Invalid codepoint: " + codePoint);
                  }

                case "symbol":
                  return fromCodePoint(codePoint);

                case "unicodeEscape":
                  return (
                    "\\u" +
                    ("0000" + codePoint.toString(16).toUpperCase()).slice(-4)
                  );

                case "unicodeCodePointEscape":
                  return "\\u{" + codePoint.toString(16).toUpperCase() + "}";

                default:
                  throw Error("Unsupported node kind: " + kind);
              }
            }

            var generators = {
              alternative: generateAlternative,
              anchor: generateAnchor,
              characterClass: generateCharacterClass,
              characterClassEscape: generateCharacterClassEscape,
              characterClassRange: generateCharacterClassRange,
              unicodePropertyEscape: generateUnicodePropertyEscape,
              disjunction: generateDisjunction,
              dot: generateDot,
              group: generateGroup,
              quantifier: generateQuantifier,
              reference: generateReference,
              value: generateValue
            };

            if (true) {
              !((__WEBPACK_AMD_DEFINE_RESULT__ = function() {
                return {
                  generate: generate
                };
              }.call(exports, __webpack_require__, exports, module)),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else if (freeExports && freeModule) {
              freeExports.generate = generate;
            } else {
              root.regjsgen = {
                generate: generate
              };
            }
          }.call(this));
          /* WEBPACK VAR INJECTION */
        }.call(
          exports,
          __webpack_require__(26)(module),
          __webpack_require__(18)
        ));

        /***/
      },
      /* 549 */
      /***/ function(module, exports) {
        (function() {
          function parse(str, flags, features) {
            if (!features) {
              features = {};
            }

            function addRaw(node) {
              node.raw = str.substring(node.range[0], node.range[1]);
              return node;
            }

            function updateRawStart(node, start) {
              node.range[0] = start;
              return addRaw(node);
            }

            function createAnchor(kind, rawLength) {
              return addRaw({
                type: "anchor",
                kind: kind,
                range: [pos - rawLength, pos]
              });
            }

            function createValue(kind, codePoint, from, to) {
              return addRaw({
                type: "value",
                kind: kind,
                codePoint: codePoint,
                range: [from, to]
              });
            }

            function createEscaped(kind, codePoint, value, fromOffset) {
              fromOffset = fromOffset || 0;
              return createValue(
                kind,
                codePoint,
                pos - (value.length + fromOffset),
                pos
              );
            }

            function createCharacter(matches) {
              var _char = matches[0];

              var first = _char.charCodeAt(0);

              if (hasUnicodeFlag) {
                var second;

                if (_char.length === 1 && first >= 0xd800 && first <= 0xdbff) {
                  second = lookahead().charCodeAt(0);

                  if (second >= 0xdc00 && second <= 0xdfff) {
                    pos++;
                    return createValue(
                      "symbol",
                      (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000,
                      pos - 2,
                      pos
                    );
                  }
                }
              }

              return createValue("symbol", first, pos - 1, pos);
            }

            function createDisjunction(alternatives, from, to) {
              return addRaw({
                type: "disjunction",
                body: alternatives,
                range: [from, to]
              });
            }

            function createDot() {
              return addRaw({
                type: "dot",
                range: [pos - 1, pos]
              });
            }

            function createCharacterClassEscape(value) {
              return addRaw({
                type: "characterClassEscape",
                value: value,
                range: [pos - 2, pos]
              });
            }

            function createReference(matchIndex) {
              return addRaw({
                type: "reference",
                matchIndex: parseInt(matchIndex, 10),
                range: [pos - 1 - matchIndex.length, pos]
              });
            }

            function createGroup(behavior, disjunction, from, to) {
              return addRaw({
                type: "group",
                behavior: behavior,
                body: disjunction,
                range: [from, to]
              });
            }

            function createQuantifier(min, max, from, to) {
              if (to == null) {
                from = pos - 1;
                to = pos;
              }

              return addRaw({
                type: "quantifier",
                min: min,
                max: max,
                greedy: true,
                body: null,
                range: [from, to]
              });
            }

            function createAlternative(terms, from, to) {
              return addRaw({
                type: "alternative",
                body: terms,
                range: [from, to]
              });
            }

            function createCharacterClass(classRanges, negative, from, to) {
              return addRaw({
                type: "characterClass",
                body: classRanges,
                negative: negative,
                range: [from, to]
              });
            }

            function createClassRange(min, max, from, to) {
              if (min.codePoint > max.codePoint) {
                bail(
                  "invalid range in character class",
                  min.raw + "-" + max.raw,
                  from,
                  to
                );
              }

              return addRaw({
                type: "characterClassRange",
                min: min,
                max: max,
                range: [from, to]
              });
            }

            function flattenBody(body) {
              if (body.type === "alternative") {
                return body.body;
              } else {
                return [body];
              }
            }

            function isEmpty(obj) {
              return obj.type === "empty";
            }

            function incr(amount) {
              amount = amount || 1;
              var res = str.substring(pos, pos + amount);
              pos += amount || 1;
              return res;
            }

            function skip(value) {
              if (!match(value)) {
                bail("character", value);
              }
            }

            function match(value) {
              if (str.indexOf(value, pos) === pos) {
                return incr(value.length);
              }
            }

            function lookahead() {
              return str[pos];
            }

            function current(value) {
              return str.indexOf(value, pos) === pos;
            }

            function next(value) {
              return str[pos + 1] === value;
            }

            function matchReg(regExp) {
              var subStr = str.substring(pos);
              var res = subStr.match(regExp);

              if (res) {
                res.range = [];
                res.range[0] = pos;
                incr(res[0].length);
                res.range[1] = pos;
              }

              return res;
            }

            function parseDisjunction() {
              var res = [],
                from = pos;
              res.push(parseAlternative());

              while (match("|")) {
                res.push(parseAlternative());
              }

              if (res.length === 1) {
                return res[0];
              }

              return createDisjunction(res, from, pos);
            }

            function parseAlternative() {
              var res = [],
                from = pos;
              var term;

              while ((term = parseTerm())) {
                res.push(term);
              }

              if (res.length === 1) {
                return res[0];
              }

              return createAlternative(res, from, pos);
            }

            function parseTerm() {
              if (pos >= str.length || current("|") || current(")")) {
                return null;
              }

              var anchor = parseAnchor();

              if (anchor) {
                return anchor;
              }

              var atom = parseAtom();

              if (!atom) {
                bail("Expected atom");
              }

              var quantifier = parseQuantifier() || false;

              if (quantifier) {
                quantifier.body = flattenBody(atom);
                updateRawStart(quantifier, atom.range[0]);
                return quantifier;
              }

              return atom;
            }

            function parseGroup(matchA, typeA, matchB, typeB) {
              var type = null,
                from = pos;

              if (match(matchA)) {
                type = typeA;
              } else if (match(matchB)) {
                type = typeB;
              } else {
                return false;
              }

              var body = parseDisjunction();

              if (!body) {
                bail("Expected disjunction");
              }

              skip(")");
              var group = createGroup(type, flattenBody(body), from, pos);

              if (type == "normal") {
                if (firstIteration) {
                  closedCaptureCounter++;
                }
              }

              return group;
            }

            function parseAnchor() {
              var res,
                from = pos;

              if (match("^")) {
                return createAnchor("start", 1);
              } else if (match("$")) {
                return createAnchor("end", 1);
              } else if (match("\\b")) {
                return createAnchor("boundary", 2);
              } else if (match("\\B")) {
                return createAnchor("not-boundary", 2);
              } else {
                return parseGroup(
                  "(?=",
                  "lookahead",
                  "(?!",
                  "negativeLookahead"
                );
              }
            }

            function parseQuantifier() {
              var res,
                from = pos;
              var quantifier;
              var min, max;

              if (match("*")) {
                quantifier = createQuantifier(0);
              } else if (match("+")) {
                quantifier = createQuantifier(1);
              } else if (match("?")) {
                quantifier = createQuantifier(0, 1);
              } else if ((res = matchReg(/^\{([0-9]+)\}/))) {
                min = parseInt(res[1], 10);
                quantifier = createQuantifier(
                  min,
                  min,
                  res.range[0],
                  res.range[1]
                );
              } else if ((res = matchReg(/^\{([0-9]+),\}/))) {
                min = parseInt(res[1], 10);
                quantifier = createQuantifier(
                  min,
                  undefined,
                  res.range[0],
                  res.range[1]
                );
              } else if ((res = matchReg(/^\{([0-9]+),([0-9]+)\}/))) {
                min = parseInt(res[1], 10);
                max = parseInt(res[2], 10);

                if (min > max) {
                  bail("numbers out of order in {} quantifier", "", from, pos);
                }

                quantifier = createQuantifier(
                  min,
                  max,
                  res.range[0],
                  res.range[1]
                );
              }

              if (quantifier) {
                if (match("?")) {
                  quantifier.greedy = false;
                  quantifier.range[1] += 1;
                }
              }

              return quantifier;
            }

            function parseAtom() {
              var res;

              if ((res = matchReg(/^[^^$\\.*+?(){[|]/))) {
                return createCharacter(res);
              } else if (match(".")) {
                return createDot();
              } else if (match("\\")) {
                res = parseAtomEscape();

                if (!res) {
                  bail("atomEscape");
                }

                return res;
              } else if ((res = parseCharacterClass())) {
                return res;
              } else {
                return parseGroup("(?:", "ignore", "(", "normal");
              }
            }

            function parseUnicodeSurrogatePairEscape(firstEscape) {
              if (hasUnicodeFlag) {
                var first, second;

                if (
                  firstEscape.kind == "unicodeEscape" &&
                  (first = firstEscape.codePoint) >= 0xd800 &&
                  first <= 0xdbff &&
                  current("\\") &&
                  next("u")
                ) {
                  var prevPos = pos;
                  pos++;
                  var secondEscape = parseClassEscape();

                  if (
                    secondEscape.kind == "unicodeEscape" &&
                    (second = secondEscape.codePoint) >= 0xdc00 &&
                    second <= 0xdfff
                  ) {
                    firstEscape.range[1] = secondEscape.range[1];
                    firstEscape.codePoint =
                      (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
                    firstEscape.type = "value";
                    firstEscape.kind = "unicodeCodePointEscape";
                    addRaw(firstEscape);
                  } else {
                    pos = prevPos;
                  }
                }
              }

              return firstEscape;
            }

            function parseClassEscape() {
              return parseAtomEscape(true);
            }

            function parseAtomEscape(insideCharacterClass) {
              var res,
                from = pos;
              res = parseDecimalEscape();

              if (res) {
                return res;
              }

              if (insideCharacterClass) {
                if (match("b")) {
                  return createEscaped("singleEscape", 0x0008, "\\b");
                } else if (match("B")) {
                  bail("\\B not possible inside of CharacterClass", "", from);
                }
              }

              res = parseCharacterEscape();
              return res;
            }

            function parseDecimalEscape() {
              var res, match;

              if ((res = matchReg(/^(?!0)\d+/))) {
                match = res[0];
                var refIdx = parseInt(res[0], 10);

                if (refIdx <= closedCaptureCounter) {
                  return createReference(res[0]);
                } else {
                  backrefDenied.push(refIdx);
                  incr(-res[0].length);

                  if ((res = matchReg(/^[0-7]{1,3}/))) {
                    return createEscaped(
                      "octal",
                      parseInt(res[0], 8),
                      res[0],
                      1
                    );
                  } else {
                    res = createCharacter(matchReg(/^[89]/));
                    return updateRawStart(res, res.range[0] - 1);
                  }
                }
              } else if ((res = matchReg(/^[0-7]{1,3}/))) {
                match = res[0];

                if (/^0{1,3}$/.test(match)) {
                  return createEscaped("null", 0x0000, "0", match.length + 1);
                } else {
                  return createEscaped("octal", parseInt(match, 8), match, 1);
                }
              } else if ((res = matchReg(/^[dDsSwW]/))) {
                return createCharacterClassEscape(res[0]);
              }

              return false;
            }

            function parseCharacterEscape() {
              var res;

              if ((res = matchReg(/^[fnrtv]/))) {
                var codePoint = 0;

                switch (res[0]) {
                  case "t":
                    codePoint = 0x009;
                    break;

                  case "n":
                    codePoint = 0x00a;
                    break;

                  case "v":
                    codePoint = 0x00b;
                    break;

                  case "f":
                    codePoint = 0x00c;
                    break;

                  case "r":
                    codePoint = 0x00d;
                    break;
                }

                return createEscaped("singleEscape", codePoint, "\\" + res[0]);
              } else if ((res = matchReg(/^c([a-zA-Z])/))) {
                return createEscaped(
                  "controlLetter",
                  res[1].charCodeAt(0) % 32,
                  res[1],
                  2
                );
              } else if ((res = matchReg(/^x([0-9a-fA-F]{2})/))) {
                return createEscaped(
                  "hexadecimalEscape",
                  parseInt(res[1], 16),
                  res[1],
                  2
                );
              } else if ((res = matchReg(/^u([0-9a-fA-F]{4})/))) {
                return parseUnicodeSurrogatePairEscape(
                  createEscaped(
                    "unicodeEscape",
                    parseInt(res[1], 16),
                    res[1],
                    2
                  )
                );
              } else if (
                hasUnicodeFlag &&
                (res = matchReg(/^u\{([0-9a-fA-F]+)\}/))
              ) {
                return createEscaped(
                  "unicodeCodePointEscape",
                  parseInt(res[1], 16),
                  res[1],
                  4
                );
              } else if (
                features.unicodePropertyEscape &&
                hasUnicodeFlag &&
                (res = matchReg(/^([pP])\{([^\}]+)\}/))
              ) {
                return addRaw({
                  type: "unicodePropertyEscape",
                  negative: res[1] === "P",
                  value: res[2],
                  range: [res.range[0] - 1, res.range[1]],
                  raw: res[0]
                });
              } else {
                return parseIdentityEscape();
              }
            }

            function isIdentifierPart(ch) {
              var NonAsciiIdentifierPart = new RegExp(
                "[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]"
              );
              return (
                ch === 36 ||
                ch === 95 ||
                (ch >= 65 && ch <= 90) ||
                (ch >= 97 && ch <= 122) ||
                (ch >= 48 && ch <= 57) ||
                ch === 92 ||
                (ch >= 0x80 &&
                  NonAsciiIdentifierPart.test(String.fromCharCode(ch)))
              );
            }

            function parseIdentityEscape() {
              var ZWJ = "\u200C";
              var ZWNJ = "\u200D";
              var tmp;

              if (!isIdentifierPart(lookahead())) {
                tmp = incr();
                return createEscaped("identifier", tmp.charCodeAt(0), tmp, 1);
              }

              if (match(ZWJ)) {
                return createEscaped("identifier", 0x200c, ZWJ);
              } else if (match(ZWNJ)) {
                return createEscaped("identifier", 0x200d, ZWNJ);
              }

              return null;
            }

            function parseCharacterClass() {
              var res,
                from = pos;

              if ((res = matchReg(/^\[\^/))) {
                res = parseClassRanges();
                skip("]");
                return createCharacterClass(res, true, from, pos);
              } else if (match("[")) {
                res = parseClassRanges();
                skip("]");
                return createCharacterClass(res, false, from, pos);
              }

              return null;
            }

            function parseClassRanges() {
              var res;

              if (current("]")) {
                return [];
              } else {
                res = parseNonemptyClassRanges();

                if (!res) {
                  bail("nonEmptyClassRanges");
                }

                return res;
              }
            }

            function parseHelperClassRanges(atom) {
              var from, to, res;

              if (current("-") && !next("]")) {
                skip("-");
                res = parseClassAtom();

                if (!res) {
                  bail("classAtom");
                }

                to = pos;
                var classRanges = parseClassRanges();

                if (!classRanges) {
                  bail("classRanges");
                }

                from = atom.range[0];

                if (classRanges.type === "empty") {
                  return [createClassRange(atom, res, from, to)];
                }

                return [createClassRange(atom, res, from, to)].concat(
                  classRanges
                );
              }

              res = parseNonemptyClassRangesNoDash();

              if (!res) {
                bail("nonEmptyClassRangesNoDash");
              }

              return [atom].concat(res);
            }

            function parseNonemptyClassRanges() {
              var atom = parseClassAtom();

              if (!atom) {
                bail("classAtom");
              }

              if (current("]")) {
                return [atom];
              }

              return parseHelperClassRanges(atom);
            }

            function parseNonemptyClassRangesNoDash() {
              var res = parseClassAtom();

              if (!res) {
                bail("classAtom");
              }

              if (current("]")) {
                return res;
              }

              return parseHelperClassRanges(res);
            }

            function parseClassAtom() {
              if (match("-")) {
                return createCharacter("-");
              } else {
                return parseClassAtomNoDash();
              }
            }

            function parseClassAtomNoDash() {
              var res;

              if ((res = matchReg(/^[^\\\]-]/))) {
                return createCharacter(res[0]);
              } else if (match("\\")) {
                res = parseClassEscape();

                if (!res) {
                  bail("classEscape");
                }

                return parseUnicodeSurrogatePairEscape(res);
              }
            }

            function bail(message, details, from, to) {
              from = from == null ? pos : from;
              to = to == null ? from : to;
              var contextStart = Math.max(0, from - 10);
              var contextEnd = Math.min(to + 10, str.length);
              var context = "    " + str.substring(contextStart, contextEnd);
              var pointer =
                "    " + new Array(from - contextStart + 1).join(" ") + "^";
              throw SyntaxError(
                message +
                  " at position " +
                  from +
                  (details ? ": " + details : "") +
                  "\n" +
                  context +
                  "\n" +
                  pointer
              );
            }

            var backrefDenied = [];
            var closedCaptureCounter = 0;
            var firstIteration = true;
            var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
            var pos = 0;
            str = String(str);

            if (str === "") {
              str = "(?:)";
            }

            var result = parseDisjunction();

            if (result.range[1] !== str.length) {
              bail(
                "Could not parse entire input - got stuck",
                "",
                result.range[1]
              );
            }

            for (var i = 0; i < backrefDenied.length; i++) {
              if (backrefDenied[i] <= closedCaptureCounter) {
                pos = 0;
                firstIteration = false;
                return parseDisjunction();
              }
            }

            return result;
          }

          var regjsparser = {
            parse: parse
          };

          if (typeof module !== "undefined" && module.exports) {
            module.exports = regjsparser;
          } else {
            window.regjsparser = regjsparser;
          }
        })();

        /***/
      },
      /* 550 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var canonicalProperties = __webpack_require__(551);

        var propertyAliases = __webpack_require__(552);

        var matchProperty = function matchProperty(property) {
          if (canonicalProperties.has(property)) {
            return property;
          }

          if (propertyAliases.has(property)) {
            return propertyAliases.get(property);
          }

          throw new Error("Unknown property: " + property);
        };

        module.exports = matchProperty;

        /***/
      },
      /* 551 */
      /***/ function(module, exports) {
        module.exports = new Set([
          "General_Category",
          "Script",
          "Script_Extensions",
          "Alphabetic",
          "Any",
          "ASCII",
          "ASCII_Hex_Digit",
          "Assigned",
          "Bidi_Control",
          "Bidi_Mirrored",
          "Case_Ignorable",
          "Cased",
          "Changes_When_Casefolded",
          "Changes_When_Casemapped",
          "Changes_When_Lowercased",
          "Changes_When_NFKC_Casefolded",
          "Changes_When_Titlecased",
          "Changes_When_Uppercased",
          "Dash",
          "Default_Ignorable_Code_Point",
          "Deprecated",
          "Diacritic",
          "Emoji",
          "Emoji_Component",
          "Emoji_Modifier",
          "Emoji_Modifier_Base",
          "Emoji_Presentation",
          "Extender",
          "Grapheme_Base",
          "Grapheme_Extend",
          "Hex_Digit",
          "ID_Continue",
          "ID_Start",
          "Ideographic",
          "IDS_Binary_Operator",
          "IDS_Trinary_Operator",
          "Join_Control",
          "Logical_Order_Exception",
          "Lowercase",
          "Math",
          "Noncharacter_Code_Point",
          "Pattern_Syntax",
          "Pattern_White_Space",
          "Quotation_Mark",
          "Radical",
          "Regional_Indicator",
          "Sentence_Terminal",
          "Soft_Dotted",
          "Terminal_Punctuation",
          "Unified_Ideograph",
          "Uppercase",
          "Variation_Selector",
          "White_Space",
          "XID_Continue",
          "XID_Start"
        ]);

        /***/
      },
      /* 552 */
      /***/ function(module, exports) {
        module.exports = new Map([
          ["scx", "Script_Extensions"],
          ["sc", "Script"],
          ["gc", "General_Category"],
          ["AHex", "ASCII_Hex_Digit"],
          ["Alpha", "Alphabetic"],
          ["Bidi_C", "Bidi_Control"],
          ["Bidi_M", "Bidi_Mirrored"],
          ["Cased", "Cased"],
          ["CI", "Case_Ignorable"],
          ["CWCF", "Changes_When_Casefolded"],
          ["CWCM", "Changes_When_Casemapped"],
          ["CWKCF", "Changes_When_NFKC_Casefolded"],
          ["CWL", "Changes_When_Lowercased"],
          ["CWT", "Changes_When_Titlecased"],
          ["CWU", "Changes_When_Uppercased"],
          ["Dash", "Dash"],
          ["Dep", "Deprecated"],
          ["DI", "Default_Ignorable_Code_Point"],
          ["Dia", "Diacritic"],
          ["Ext", "Extender"],
          ["Gr_Base", "Grapheme_Base"],
          ["Gr_Ext", "Grapheme_Extend"],
          ["Hex", "Hex_Digit"],
          ["IDC", "ID_Continue"],
          ["Ideo", "Ideographic"],
          ["IDS", "ID_Start"],
          ["IDSB", "IDS_Binary_Operator"],
          ["IDST", "IDS_Trinary_Operator"],
          ["Join_C", "Join_Control"],
          ["LOE", "Logical_Order_Exception"],
          ["Lower", "Lowercase"],
          ["Math", "Math"],
          ["NChar", "Noncharacter_Code_Point"],
          ["Pat_Syn", "Pattern_Syntax"],
          ["Pat_WS", "Pattern_White_Space"],
          ["QMark", "Quotation_Mark"],
          ["Radical", "Radical"],
          ["RI", "Regional_Indicator"],
          ["SD", "Soft_Dotted"],
          ["STerm", "Sentence_Terminal"],
          ["Term", "Terminal_Punctuation"],
          ["UIdeo", "Unified_Ideograph"],
          ["Upper", "Uppercase"],
          ["VS", "Variation_Selector"],
          ["WSpace", "White_Space"],
          ["space", "White_Space"],
          ["XIDC", "XID_Continue"],
          ["XIDS", "XID_Start"]
        ]);

        /***/
      },
      /* 553 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var propertyToValueAliases = __webpack_require__(554);

        var matchPropertyValue = function matchPropertyValue(property, value) {
          var aliasToValue = propertyToValueAliases.get(property);

          if (!aliasToValue) {
            throw new Error("Unknown property `" + property + "`.");
          }

          var canonicalValue = aliasToValue.get(value);

          if (canonicalValue) {
            return canonicalValue;
          }

          throw new Error(
            "Unknown value `" + value + "` for property `" + property + "`."
          );
        };

        module.exports = matchPropertyValue;

        /***/
      },
      /* 554 */
      /***/ function(module, exports) {
        module.exports = new Map([
          [
            "General_Category",
            new Map([
              ["C", "Other"],
              ["Cc", "Control"],
              ["cntrl", "Control"],
              ["Cf", "Format"],
              ["Cn", "Unassigned"],
              ["Co", "Private_Use"],
              ["Cs", "Surrogate"],
              ["L", "Letter"],
              ["LC", "Cased_Letter"],
              ["Ll", "Lowercase_Letter"],
              ["Lm", "Modifier_Letter"],
              ["Lo", "Other_Letter"],
              ["Lt", "Titlecase_Letter"],
              ["Lu", "Uppercase_Letter"],
              ["M", "Mark"],
              ["Combining_Mark", "Mark"],
              ["Mc", "Spacing_Mark"],
              ["Me", "Enclosing_Mark"],
              ["Mn", "Nonspacing_Mark"],
              ["N", "Number"],
              ["Nd", "Decimal_Number"],
              ["digit", "Decimal_Number"],
              ["Nl", "Letter_Number"],
              ["No", "Other_Number"],
              ["P", "Punctuation"],
              ["punct", "Punctuation"],
              ["Pc", "Connector_Punctuation"],
              ["Pd", "Dash_Punctuation"],
              ["Pe", "Close_Punctuation"],
              ["Pf", "Final_Punctuation"],
              ["Pi", "Initial_Punctuation"],
              ["Po", "Other_Punctuation"],
              ["Ps", "Open_Punctuation"],
              ["S", "Symbol"],
              ["Sc", "Currency_Symbol"],
              ["Sk", "Modifier_Symbol"],
              ["Sm", "Math_Symbol"],
              ["So", "Other_Symbol"],
              ["Z", "Separator"],
              ["Zl", "Line_Separator"],
              ["Zp", "Paragraph_Separator"],
              ["Zs", "Space_Separator"],
              ["Other", "Other"],
              ["Control", "Control"],
              ["Format", "Format"],
              ["Unassigned", "Unassigned"],
              ["Private_Use", "Private_Use"],
              ["Surrogate", "Surrogate"],
              ["Letter", "Letter"],
              ["Cased_Letter", "Cased_Letter"],
              ["Lowercase_Letter", "Lowercase_Letter"],
              ["Modifier_Letter", "Modifier_Letter"],
              ["Other_Letter", "Other_Letter"],
              ["Titlecase_Letter", "Titlecase_Letter"],
              ["Uppercase_Letter", "Uppercase_Letter"],
              ["Mark", "Mark"],
              ["Spacing_Mark", "Spacing_Mark"],
              ["Enclosing_Mark", "Enclosing_Mark"],
              ["Nonspacing_Mark", "Nonspacing_Mark"],
              ["Number", "Number"],
              ["Decimal_Number", "Decimal_Number"],
              ["Letter_Number", "Letter_Number"],
              ["Other_Number", "Other_Number"],
              ["Punctuation", "Punctuation"],
              ["Connector_Punctuation", "Connector_Punctuation"],
              ["Dash_Punctuation", "Dash_Punctuation"],
              ["Close_Punctuation", "Close_Punctuation"],
              ["Final_Punctuation", "Final_Punctuation"],
              ["Initial_Punctuation", "Initial_Punctuation"],
              ["Other_Punctuation", "Other_Punctuation"],
              ["Open_Punctuation", "Open_Punctuation"],
              ["Symbol", "Symbol"],
              ["Currency_Symbol", "Currency_Symbol"],
              ["Modifier_Symbol", "Modifier_Symbol"],
              ["Math_Symbol", "Math_Symbol"],
              ["Other_Symbol", "Other_Symbol"],
              ["Separator", "Separator"],
              ["Line_Separator", "Line_Separator"],
              ["Paragraph_Separator", "Paragraph_Separator"],
              ["Space_Separator", "Space_Separator"]
            ])
          ],
          [
            "Script",
            new Map([
              ["Adlm", "Adlam"],
              ["Aghb", "Caucasian_Albanian"],
              ["Ahom", "Ahom"],
              ["Arab", "Arabic"],
              ["Armi", "Imperial_Aramaic"],
              ["Armn", "Armenian"],
              ["Avst", "Avestan"],
              ["Bali", "Balinese"],
              ["Bamu", "Bamum"],
              ["Bass", "Bassa_Vah"],
              ["Batk", "Batak"],
              ["Beng", "Bengali"],
              ["Bhks", "Bhaiksuki"],
              ["Bopo", "Bopomofo"],
              ["Brah", "Brahmi"],
              ["Brai", "Braille"],
              ["Bugi", "Buginese"],
              ["Buhd", "Buhid"],
              ["Cakm", "Chakma"],
              ["Cans", "Canadian_Aboriginal"],
              ["Cari", "Carian"],
              ["Cham", "Cham"],
              ["Cher", "Cherokee"],
              ["Copt", "Coptic"],
              ["Qaac", "Coptic"],
              ["Cprt", "Cypriot"],
              ["Cyrl", "Cyrillic"],
              ["Deva", "Devanagari"],
              ["Dsrt", "Deseret"],
              ["Dupl", "Duployan"],
              ["Egyp", "Egyptian_Hieroglyphs"],
              ["Elba", "Elbasan"],
              ["Ethi", "Ethiopic"],
              ["Geor", "Georgian"],
              ["Glag", "Glagolitic"],
              ["Gonm", "Masaram_Gondi"],
              ["Goth", "Gothic"],
              ["Gran", "Grantha"],
              ["Grek", "Greek"],
              ["Gujr", "Gujarati"],
              ["Guru", "Gurmukhi"],
              ["Hang", "Hangul"],
              ["Hani", "Han"],
              ["Hano", "Hanunoo"],
              ["Hatr", "Hatran"],
              ["Hebr", "Hebrew"],
              ["Hira", "Hiragana"],
              ["Hluw", "Anatolian_Hieroglyphs"],
              ["Hmng", "Pahawh_Hmong"],
              ["Hrkt", "Katakana_Or_Hiragana"],
              ["Hung", "Old_Hungarian"],
              ["Ital", "Old_Italic"],
              ["Java", "Javanese"],
              ["Kali", "Kayah_Li"],
              ["Kana", "Katakana"],
              ["Khar", "Kharoshthi"],
              ["Khmr", "Khmer"],
              ["Khoj", "Khojki"],
              ["Knda", "Kannada"],
              ["Kthi", "Kaithi"],
              ["Lana", "Tai_Tham"],
              ["Laoo", "Lao"],
              ["Latn", "Latin"],
              ["Lepc", "Lepcha"],
              ["Limb", "Limbu"],
              ["Lina", "Linear_A"],
              ["Linb", "Linear_B"],
              ["Lisu", "Lisu"],
              ["Lyci", "Lycian"],
              ["Lydi", "Lydian"],
              ["Mahj", "Mahajani"],
              ["Mand", "Mandaic"],
              ["Mani", "Manichaean"],
              ["Marc", "Marchen"],
              ["Mend", "Mende_Kikakui"],
              ["Merc", "Meroitic_Cursive"],
              ["Mero", "Meroitic_Hieroglyphs"],
              ["Mlym", "Malayalam"],
              ["Modi", "Modi"],
              ["Mong", "Mongolian"],
              ["Mroo", "Mro"],
              ["Mtei", "Meetei_Mayek"],
              ["Mult", "Multani"],
              ["Mymr", "Myanmar"],
              ["Narb", "Old_North_Arabian"],
              ["Nbat", "Nabataean"],
              ["Newa", "Newa"],
              ["Nkoo", "Nko"],
              ["Nshu", "Nushu"],
              ["Ogam", "Ogham"],
              ["Olck", "Ol_Chiki"],
              ["Orkh", "Old_Turkic"],
              ["Orya", "Oriya"],
              ["Osge", "Osage"],
              ["Osma", "Osmanya"],
              ["Palm", "Palmyrene"],
              ["Pauc", "Pau_Cin_Hau"],
              ["Perm", "Old_Permic"],
              ["Phag", "Phags_Pa"],
              ["Phli", "Inscriptional_Pahlavi"],
              ["Phlp", "Psalter_Pahlavi"],
              ["Phnx", "Phoenician"],
              ["Plrd", "Miao"],
              ["Prti", "Inscriptional_Parthian"],
              ["Rjng", "Rejang"],
              ["Runr", "Runic"],
              ["Samr", "Samaritan"],
              ["Sarb", "Old_South_Arabian"],
              ["Saur", "Saurashtra"],
              ["Sgnw", "SignWriting"],
              ["Shaw", "Shavian"],
              ["Shrd", "Sharada"],
              ["Sidd", "Siddham"],
              ["Sind", "Khudawadi"],
              ["Sinh", "Sinhala"],
              ["Sora", "Sora_Sompeng"],
              ["Soyo", "Soyombo"],
              ["Sund", "Sundanese"],
              ["Sylo", "Syloti_Nagri"],
              ["Syrc", "Syriac"],
              ["Tagb", "Tagbanwa"],
              ["Takr", "Takri"],
              ["Tale", "Tai_Le"],
              ["Talu", "New_Tai_Lue"],
              ["Taml", "Tamil"],
              ["Tang", "Tangut"],
              ["Tavt", "Tai_Viet"],
              ["Telu", "Telugu"],
              ["Tfng", "Tifinagh"],
              ["Tglg", "Tagalog"],
              ["Thaa", "Thaana"],
              ["Thai", "Thai"],
              ["Tibt", "Tibetan"],
              ["Tirh", "Tirhuta"],
              ["Ugar", "Ugaritic"],
              ["Vaii", "Vai"],
              ["Wara", "Warang_Citi"],
              ["Xpeo", "Old_Persian"],
              ["Xsux", "Cuneiform"],
              ["Yiii", "Yi"],
              ["Zanb", "Zanabazar_Square"],
              ["Zinh", "Inherited"],
              ["Qaai", "Inherited"],
              ["Zyyy", "Common"],
              ["Zzzz", "Unknown"],
              ["Adlam", "Adlam"],
              ["Caucasian_Albanian", "Caucasian_Albanian"],
              ["Arabic", "Arabic"],
              ["Imperial_Aramaic", "Imperial_Aramaic"],
              ["Armenian", "Armenian"],
              ["Avestan", "Avestan"],
              ["Balinese", "Balinese"],
              ["Bamum", "Bamum"],
              ["Bassa_Vah", "Bassa_Vah"],
              ["Batak", "Batak"],
              ["Bengali", "Bengali"],
              ["Bhaiksuki", "Bhaiksuki"],
              ["Bopomofo", "Bopomofo"],
              ["Brahmi", "Brahmi"],
              ["Braille", "Braille"],
              ["Buginese", "Buginese"],
              ["Buhid", "Buhid"],
              ["Chakma", "Chakma"],
              ["Canadian_Aboriginal", "Canadian_Aboriginal"],
              ["Carian", "Carian"],
              ["Cherokee", "Cherokee"],
              ["Coptic", "Coptic"],
              ["Cypriot", "Cypriot"],
              ["Cyrillic", "Cyrillic"],
              ["Devanagari", "Devanagari"],
              ["Deseret", "Deseret"],
              ["Duployan", "Duployan"],
              ["Egyptian_Hieroglyphs", "Egyptian_Hieroglyphs"],
              ["Elbasan", "Elbasan"],
              ["Ethiopic", "Ethiopic"],
              ["Georgian", "Georgian"],
              ["Glagolitic", "Glagolitic"],
              ["Masaram_Gondi", "Masaram_Gondi"],
              ["Gothic", "Gothic"],
              ["Grantha", "Grantha"],
              ["Greek", "Greek"],
              ["Gujarati", "Gujarati"],
              ["Gurmukhi", "Gurmukhi"],
              ["Hangul", "Hangul"],
              ["Han", "Han"],
              ["Hanunoo", "Hanunoo"],
              ["Hatran", "Hatran"],
              ["Hebrew", "Hebrew"],
              ["Hiragana", "Hiragana"],
              ["Anatolian_Hieroglyphs", "Anatolian_Hieroglyphs"],
              ["Pahawh_Hmong", "Pahawh_Hmong"],
              ["Katakana_Or_Hiragana", "Katakana_Or_Hiragana"],
              ["Old_Hungarian", "Old_Hungarian"],
              ["Old_Italic", "Old_Italic"],
              ["Javanese", "Javanese"],
              ["Kayah_Li", "Kayah_Li"],
              ["Katakana", "Katakana"],
              ["Kharoshthi", "Kharoshthi"],
              ["Khmer", "Khmer"],
              ["Khojki", "Khojki"],
              ["Kannada", "Kannada"],
              ["Kaithi", "Kaithi"],
              ["Tai_Tham", "Tai_Tham"],
              ["Lao", "Lao"],
              ["Latin", "Latin"],
              ["Lepcha", "Lepcha"],
              ["Limbu", "Limbu"],
              ["Linear_A", "Linear_A"],
              ["Linear_B", "Linear_B"],
              ["Lycian", "Lycian"],
              ["Lydian", "Lydian"],
              ["Mahajani", "Mahajani"],
              ["Mandaic", "Mandaic"],
              ["Manichaean", "Manichaean"],
              ["Marchen", "Marchen"],
              ["Mende_Kikakui", "Mende_Kikakui"],
              ["Meroitic_Cursive", "Meroitic_Cursive"],
              ["Meroitic_Hieroglyphs", "Meroitic_Hieroglyphs"],
              ["Malayalam", "Malayalam"],
              ["Mongolian", "Mongolian"],
              ["Mro", "Mro"],
              ["Meetei_Mayek", "Meetei_Mayek"],
              ["Multani", "Multani"],
              ["Myanmar", "Myanmar"],
              ["Old_North_Arabian", "Old_North_Arabian"],
              ["Nabataean", "Nabataean"],
              ["Nko", "Nko"],
              ["Nushu", "Nushu"],
              ["Ogham", "Ogham"],
              ["Ol_Chiki", "Ol_Chiki"],
              ["Old_Turkic", "Old_Turkic"],
              ["Oriya", "Oriya"],
              ["Osage", "Osage"],
              ["Osmanya", "Osmanya"],
              ["Palmyrene", "Palmyrene"],
              ["Pau_Cin_Hau", "Pau_Cin_Hau"],
              ["Old_Permic", "Old_Permic"],
              ["Phags_Pa", "Phags_Pa"],
              ["Inscriptional_Pahlavi", "Inscriptional_Pahlavi"],
              ["Psalter_Pahlavi", "Psalter_Pahlavi"],
              ["Phoenician", "Phoenician"],
              ["Miao", "Miao"],
              ["Inscriptional_Parthian", "Inscriptional_Parthian"],
              ["Rejang", "Rejang"],
              ["Runic", "Runic"],
              ["Samaritan", "Samaritan"],
              ["Old_South_Arabian", "Old_South_Arabian"],
              ["Saurashtra", "Saurashtra"],
              ["SignWriting", "SignWriting"],
              ["Shavian", "Shavian"],
              ["Sharada", "Sharada"],
              ["Siddham", "Siddham"],
              ["Khudawadi", "Khudawadi"],
              ["Sinhala", "Sinhala"],
              ["Sora_Sompeng", "Sora_Sompeng"],
              ["Soyombo", "Soyombo"],
              ["Sundanese", "Sundanese"],
              ["Syloti_Nagri", "Syloti_Nagri"],
              ["Syriac", "Syriac"],
              ["Tagbanwa", "Tagbanwa"],
              ["Takri", "Takri"],
              ["Tai_Le", "Tai_Le"],
              ["New_Tai_Lue", "New_Tai_Lue"],
              ["Tamil", "Tamil"],
              ["Tangut", "Tangut"],
              ["Tai_Viet", "Tai_Viet"],
              ["Telugu", "Telugu"],
              ["Tifinagh", "Tifinagh"],
              ["Tagalog", "Tagalog"],
              ["Thaana", "Thaana"],
              ["Tibetan", "Tibetan"],
              ["Tirhuta", "Tirhuta"],
              ["Ugaritic", "Ugaritic"],
              ["Vai", "Vai"],
              ["Warang_Citi", "Warang_Citi"],
              ["Old_Persian", "Old_Persian"],
              ["Cuneiform", "Cuneiform"],
              ["Yi", "Yi"],
              ["Zanabazar_Square", "Zanabazar_Square"],
              ["Inherited", "Inherited"],
              ["Common", "Common"],
              ["Unknown", "Unknown"]
            ])
          ],
          [
            "Script_Extensions",
            new Map([
              ["Adlm", "Adlam"],
              ["Aghb", "Caucasian_Albanian"],
              ["Ahom", "Ahom"],
              ["Arab", "Arabic"],
              ["Armi", "Imperial_Aramaic"],
              ["Armn", "Armenian"],
              ["Avst", "Avestan"],
              ["Bali", "Balinese"],
              ["Bamu", "Bamum"],
              ["Bass", "Bassa_Vah"],
              ["Batk", "Batak"],
              ["Beng", "Bengali"],
              ["Bhks", "Bhaiksuki"],
              ["Bopo", "Bopomofo"],
              ["Brah", "Brahmi"],
              ["Brai", "Braille"],
              ["Bugi", "Buginese"],
              ["Buhd", "Buhid"],
              ["Cakm", "Chakma"],
              ["Cans", "Canadian_Aboriginal"],
              ["Cari", "Carian"],
              ["Cham", "Cham"],
              ["Cher", "Cherokee"],
              ["Copt", "Coptic"],
              ["Qaac", "Coptic"],
              ["Cprt", "Cypriot"],
              ["Cyrl", "Cyrillic"],
              ["Deva", "Devanagari"],
              ["Dsrt", "Deseret"],
              ["Dupl", "Duployan"],
              ["Egyp", "Egyptian_Hieroglyphs"],
              ["Elba", "Elbasan"],
              ["Ethi", "Ethiopic"],
              ["Geor", "Georgian"],
              ["Glag", "Glagolitic"],
              ["Gonm", "Masaram_Gondi"],
              ["Goth", "Gothic"],
              ["Gran", "Grantha"],
              ["Grek", "Greek"],
              ["Gujr", "Gujarati"],
              ["Guru", "Gurmukhi"],
              ["Hang", "Hangul"],
              ["Hani", "Han"],
              ["Hano", "Hanunoo"],
              ["Hatr", "Hatran"],
              ["Hebr", "Hebrew"],
              ["Hira", "Hiragana"],
              ["Hluw", "Anatolian_Hieroglyphs"],
              ["Hmng", "Pahawh_Hmong"],
              ["Hrkt", "Katakana_Or_Hiragana"],
              ["Hung", "Old_Hungarian"],
              ["Ital", "Old_Italic"],
              ["Java", "Javanese"],
              ["Kali", "Kayah_Li"],
              ["Kana", "Katakana"],
              ["Khar", "Kharoshthi"],
              ["Khmr", "Khmer"],
              ["Khoj", "Khojki"],
              ["Knda", "Kannada"],
              ["Kthi", "Kaithi"],
              ["Lana", "Tai_Tham"],
              ["Laoo", "Lao"],
              ["Latn", "Latin"],
              ["Lepc", "Lepcha"],
              ["Limb", "Limbu"],
              ["Lina", "Linear_A"],
              ["Linb", "Linear_B"],
              ["Lisu", "Lisu"],
              ["Lyci", "Lycian"],
              ["Lydi", "Lydian"],
              ["Mahj", "Mahajani"],
              ["Mand", "Mandaic"],
              ["Mani", "Manichaean"],
              ["Marc", "Marchen"],
              ["Mend", "Mende_Kikakui"],
              ["Merc", "Meroitic_Cursive"],
              ["Mero", "Meroitic_Hieroglyphs"],
              ["Mlym", "Malayalam"],
              ["Modi", "Modi"],
              ["Mong", "Mongolian"],
              ["Mroo", "Mro"],
              ["Mtei", "Meetei_Mayek"],
              ["Mult", "Multani"],
              ["Mymr", "Myanmar"],
              ["Narb", "Old_North_Arabian"],
              ["Nbat", "Nabataean"],
              ["Newa", "Newa"],
              ["Nkoo", "Nko"],
              ["Nshu", "Nushu"],
              ["Ogam", "Ogham"],
              ["Olck", "Ol_Chiki"],
              ["Orkh", "Old_Turkic"],
              ["Orya", "Oriya"],
              ["Osge", "Osage"],
              ["Osma", "Osmanya"],
              ["Palm", "Palmyrene"],
              ["Pauc", "Pau_Cin_Hau"],
              ["Perm", "Old_Permic"],
              ["Phag", "Phags_Pa"],
              ["Phli", "Inscriptional_Pahlavi"],
              ["Phlp", "Psalter_Pahlavi"],
              ["Phnx", "Phoenician"],
              ["Plrd", "Miao"],
              ["Prti", "Inscriptional_Parthian"],
              ["Rjng", "Rejang"],
              ["Runr", "Runic"],
              ["Samr", "Samaritan"],
              ["Sarb", "Old_South_Arabian"],
              ["Saur", "Saurashtra"],
              ["Sgnw", "SignWriting"],
              ["Shaw", "Shavian"],
              ["Shrd", "Sharada"],
              ["Sidd", "Siddham"],
              ["Sind", "Khudawadi"],
              ["Sinh", "Sinhala"],
              ["Sora", "Sora_Sompeng"],
              ["Soyo", "Soyombo"],
              ["Sund", "Sundanese"],
              ["Sylo", "Syloti_Nagri"],
              ["Syrc", "Syriac"],
              ["Tagb", "Tagbanwa"],
              ["Takr", "Takri"],
              ["Tale", "Tai_Le"],
              ["Talu", "New_Tai_Lue"],
              ["Taml", "Tamil"],
              ["Tang", "Tangut"],
              ["Tavt", "Tai_Viet"],
              ["Telu", "Telugu"],
              ["Tfng", "Tifinagh"],
              ["Tglg", "Tagalog"],
              ["Thaa", "Thaana"],
              ["Thai", "Thai"],
              ["Tibt", "Tibetan"],
              ["Tirh", "Tirhuta"],
              ["Ugar", "Ugaritic"],
              ["Vaii", "Vai"],
              ["Wara", "Warang_Citi"],
              ["Xpeo", "Old_Persian"],
              ["Xsux", "Cuneiform"],
              ["Yiii", "Yi"],
              ["Zanb", "Zanabazar_Square"],
              ["Zinh", "Inherited"],
              ["Qaai", "Inherited"],
              ["Zyyy", "Common"],
              ["Zzzz", "Unknown"],
              ["Adlam", "Adlam"],
              ["Caucasian_Albanian", "Caucasian_Albanian"],
              ["Arabic", "Arabic"],
              ["Imperial_Aramaic", "Imperial_Aramaic"],
              ["Armenian", "Armenian"],
              ["Avestan", "Avestan"],
              ["Balinese", "Balinese"],
              ["Bamum", "Bamum"],
              ["Bassa_Vah", "Bassa_Vah"],
              ["Batak", "Batak"],
              ["Bengali", "Bengali"],
              ["Bhaiksuki", "Bhaiksuki"],
              ["Bopomofo", "Bopomofo"],
              ["Brahmi", "Brahmi"],
              ["Braille", "Braille"],
              ["Buginese", "Buginese"],
              ["Buhid", "Buhid"],
              ["Chakma", "Chakma"],
              ["Canadian_Aboriginal", "Canadian_Aboriginal"],
              ["Carian", "Carian"],
              ["Cherokee", "Cherokee"],
              ["Coptic", "Coptic"],
              ["Cypriot", "Cypriot"],
              ["Cyrillic", "Cyrillic"],
              ["Devanagari", "Devanagari"],
              ["Deseret", "Deseret"],
              ["Duployan", "Duployan"],
              ["Egyptian_Hieroglyphs", "Egyptian_Hieroglyphs"],
              ["Elbasan", "Elbasan"],
              ["Ethiopic", "Ethiopic"],
              ["Georgian", "Georgian"],
              ["Glagolitic", "Glagolitic"],
              ["Masaram_Gondi", "Masaram_Gondi"],
              ["Gothic", "Gothic"],
              ["Grantha", "Grantha"],
              ["Greek", "Greek"],
              ["Gujarati", "Gujarati"],
              ["Gurmukhi", "Gurmukhi"],
              ["Hangul", "Hangul"],
              ["Han", "Han"],
              ["Hanunoo", "Hanunoo"],
              ["Hatran", "Hatran"],
              ["Hebrew", "Hebrew"],
              ["Hiragana", "Hiragana"],
              ["Anatolian_Hieroglyphs", "Anatolian_Hieroglyphs"],
              ["Pahawh_Hmong", "Pahawh_Hmong"],
              ["Katakana_Or_Hiragana", "Katakana_Or_Hiragana"],
              ["Old_Hungarian", "Old_Hungarian"],
              ["Old_Italic", "Old_Italic"],
              ["Javanese", "Javanese"],
              ["Kayah_Li", "Kayah_Li"],
              ["Katakana", "Katakana"],
              ["Kharoshthi", "Kharoshthi"],
              ["Khmer", "Khmer"],
              ["Khojki", "Khojki"],
              ["Kannada", "Kannada"],
              ["Kaithi", "Kaithi"],
              ["Tai_Tham", "Tai_Tham"],
              ["Lao", "Lao"],
              ["Latin", "Latin"],
              ["Lepcha", "Lepcha"],
              ["Limbu", "Limbu"],
              ["Linear_A", "Linear_A"],
              ["Linear_B", "Linear_B"],
              ["Lycian", "Lycian"],
              ["Lydian", "Lydian"],
              ["Mahajani", "Mahajani"],
              ["Mandaic", "Mandaic"],
              ["Manichaean", "Manichaean"],
              ["Marchen", "Marchen"],
              ["Mende_Kikakui", "Mende_Kikakui"],
              ["Meroitic_Cursive", "Meroitic_Cursive"],
              ["Meroitic_Hieroglyphs", "Meroitic_Hieroglyphs"],
              ["Malayalam", "Malayalam"],
              ["Mongolian", "Mongolian"],
              ["Mro", "Mro"],
              ["Meetei_Mayek", "Meetei_Mayek"],
              ["Multani", "Multani"],
              ["Myanmar", "Myanmar"],
              ["Old_North_Arabian", "Old_North_Arabian"],
              ["Nabataean", "Nabataean"],
              ["Nko", "Nko"],
              ["Nushu", "Nushu"],
              ["Ogham", "Ogham"],
              ["Ol_Chiki", "Ol_Chiki"],
              ["Old_Turkic", "Old_Turkic"],
              ["Oriya", "Oriya"],
              ["Osage", "Osage"],
              ["Osmanya", "Osmanya"],
              ["Palmyrene", "Palmyrene"],
              ["Pau_Cin_Hau", "Pau_Cin_Hau"],
              ["Old_Permic", "Old_Permic"],
              ["Phags_Pa", "Phags_Pa"],
              ["Inscriptional_Pahlavi", "Inscriptional_Pahlavi"],
              ["Psalter_Pahlavi", "Psalter_Pahlavi"],
              ["Phoenician", "Phoenician"],
              ["Miao", "Miao"],
              ["Inscriptional_Parthian", "Inscriptional_Parthian"],
              ["Rejang", "Rejang"],
              ["Runic", "Runic"],
              ["Samaritan", "Samaritan"],
              ["Old_South_Arabian", "Old_South_Arabian"],
              ["Saurashtra", "Saurashtra"],
              ["SignWriting", "SignWriting"],
              ["Shavian", "Shavian"],
              ["Sharada", "Sharada"],
              ["Siddham", "Siddham"],
              ["Khudawadi", "Khudawadi"],
              ["Sinhala", "Sinhala"],
              ["Sora_Sompeng", "Sora_Sompeng"],
              ["Soyombo", "Soyombo"],
              ["Sundanese", "Sundanese"],
              ["Syloti_Nagri", "Syloti_Nagri"],
              ["Syriac", "Syriac"],
              ["Tagbanwa", "Tagbanwa"],
              ["Takri", "Takri"],
              ["Tai_Le", "Tai_Le"],
              ["New_Tai_Lue", "New_Tai_Lue"],
              ["Tamil", "Tamil"],
              ["Tangut", "Tangut"],
              ["Tai_Viet", "Tai_Viet"],
              ["Telugu", "Telugu"],
              ["Tifinagh", "Tifinagh"],
              ["Tagalog", "Tagalog"],
              ["Thaana", "Thaana"],
              ["Tibetan", "Tibetan"],
              ["Tirhuta", "Tirhuta"],
              ["Ugaritic", "Ugaritic"],
              ["Vai", "Vai"],
              ["Warang_Citi", "Warang_Citi"],
              ["Old_Persian", "Old_Persian"],
              ["Cuneiform", "Cuneiform"],
              ["Yi", "Yi"],
              ["Zanabazar_Square", "Zanabazar_Square"],
              ["Inherited", "Inherited"],
              ["Common", "Common"],
              ["Unknown", "Unknown"]
            ])
          ]
        ]);

        /***/
      },
      /* 555 */
      /***/ function(module, exports) {
        module.exports = new Map([
          [0x4b, 0x212a],
          [0x53, 0x17f],
          [0x6b, 0x212a],
          [0x73, 0x17f],
          [0xb5, 0x39c],
          [0xc5, 0x212b],
          [0xdf, 0x1e9e],
          [0xe5, 0x212b],
          [0x17f, 0x53],
          [0x1c4, 0x1c5],
          [0x1c5, 0x1c4],
          [0x1c7, 0x1c8],
          [0x1c8, 0x1c7],
          [0x1ca, 0x1cb],
          [0x1cb, 0x1ca],
          [0x1f1, 0x1f2],
          [0x1f2, 0x1f1],
          [0x26a, 0xa7ae],
          [0x29d, 0xa7b2],
          [0x345, 0x1fbe],
          [0x392, 0x3d0],
          [0x395, 0x3f5],
          [0x398, 0x3f4],
          [0x399, 0x1fbe],
          [0x39a, 0x3f0],
          [0x39c, 0xb5],
          [0x3a0, 0x3d6],
          [0x3a1, 0x3f1],
          [0x3a3, 0x3c2],
          [0x3a6, 0x3d5],
          [0x3a9, 0x2126],
          [0x3b8, 0x3f4],
          [0x3c2, 0x3a3],
          [0x3c9, 0x2126],
          [0x3d0, 0x392],
          [0x3d1, 0x3f4],
          [0x3d5, 0x3a6],
          [0x3d6, 0x3a0],
          [0x3f0, 0x39a],
          [0x3f1, 0x3a1],
          [0x3f4, [0x398, 0x3d1, 0x3b8]],
          [0x3f5, 0x395],
          [0x412, 0x1c80],
          [0x414, 0x1c81],
          [0x41e, 0x1c82],
          [0x421, 0x1c83],
          [0x422, 0x1c85],
          [0x42a, 0x1c86],
          [0x432, 0x1c80],
          [0x434, 0x1c81],
          [0x43e, 0x1c82],
          [0x441, 0x1c83],
          [0x442, [0x1c84, 0x1c85]],
          [0x44a, 0x1c86],
          [0x462, 0x1c87],
          [0x463, 0x1c87],
          [0x13a0, 0xab70],
          [0x13a1, 0xab71],
          [0x13a2, 0xab72],
          [0x13a3, 0xab73],
          [0x13a4, 0xab74],
          [0x13a5, 0xab75],
          [0x13a6, 0xab76],
          [0x13a7, 0xab77],
          [0x13a8, 0xab78],
          [0x13a9, 0xab79],
          [0x13aa, 0xab7a],
          [0x13ab, 0xab7b],
          [0x13ac, 0xab7c],
          [0x13ad, 0xab7d],
          [0x13ae, 0xab7e],
          [0x13af, 0xab7f],
          [0x13b0, 0xab80],
          [0x13b1, 0xab81],
          [0x13b2, 0xab82],
          [0x13b3, 0xab83],
          [0x13b4, 0xab84],
          [0x13b5, 0xab85],
          [0x13b6, 0xab86],
          [0x13b7, 0xab87],
          [0x13b8, 0xab88],
          [0x13b9, 0xab89],
          [0x13ba, 0xab8a],
          [0x13bb, 0xab8b],
          [0x13bc, 0xab8c],
          [0x13bd, 0xab8d],
          [0x13be, 0xab8e],
          [0x13bf, 0xab8f],
          [0x13c0, 0xab90],
          [0x13c1, 0xab91],
          [0x13c2, 0xab92],
          [0x13c3, 0xab93],
          [0x13c4, 0xab94],
          [0x13c5, 0xab95],
          [0x13c6, 0xab96],
          [0x13c7, 0xab97],
          [0x13c8, 0xab98],
          [0x13c9, 0xab99],
          [0x13ca, 0xab9a],
          [0x13cb, 0xab9b],
          [0x13cc, 0xab9c],
          [0x13cd, 0xab9d],
          [0x13ce, 0xab9e],
          [0x13cf, 0xab9f],
          [0x13d0, 0xaba0],
          [0x13d1, 0xaba1],
          [0x13d2, 0xaba2],
          [0x13d3, 0xaba3],
          [0x13d4, 0xaba4],
          [0x13d5, 0xaba5],
          [0x13d6, 0xaba6],
          [0x13d7, 0xaba7],
          [0x13d8, 0xaba8],
          [0x13d9, 0xaba9],
          [0x13da, 0xabaa],
          [0x13db, 0xabab],
          [0x13dc, 0xabac],
          [0x13dd, 0xabad],
          [0x13de, 0xabae],
          [0x13df, 0xabaf],
          [0x13e0, 0xabb0],
          [0x13e1, 0xabb1],
          [0x13e2, 0xabb2],
          [0x13e3, 0xabb3],
          [0x13e4, 0xabb4],
          [0x13e5, 0xabb5],
          [0x13e6, 0xabb6],
          [0x13e7, 0xabb7],
          [0x13e8, 0xabb8],
          [0x13e9, 0xabb9],
          [0x13ea, 0xabba],
          [0x13eb, 0xabbb],
          [0x13ec, 0xabbc],
          [0x13ed, 0xabbd],
          [0x13ee, 0xabbe],
          [0x13ef, 0xabbf],
          [0x13f0, 0x13f8],
          [0x13f1, 0x13f9],
          [0x13f2, 0x13fa],
          [0x13f3, 0x13fb],
          [0x13f4, 0x13fc],
          [0x13f5, 0x13fd],
          [0x13f8, 0x13f0],
          [0x13f9, 0x13f1],
          [0x13fa, 0x13f2],
          [0x13fb, 0x13f3],
          [0x13fc, 0x13f4],
          [0x13fd, 0x13f5],
          [0x1c80, [0x412, 0x432]],
          [0x1c81, [0x414, 0x434]],
          [0x1c82, [0x41e, 0x43e]],
          [0x1c83, [0x421, 0x441]],
          [0x1c84, [0x1c85, 0x442]],
          [0x1c85, [0x422, 0x1c84, 0x442]],
          [0x1c86, [0x42a, 0x44a]],
          [0x1c87, [0x462, 0x463]],
          [0x1c88, [0xa64a, 0xa64b]],
          [0x1e60, 0x1e9b],
          [0x1e9b, 0x1e60],
          [0x1e9e, 0xdf],
          [0x1f80, 0x1f88],
          [0x1f81, 0x1f89],
          [0x1f82, 0x1f8a],
          [0x1f83, 0x1f8b],
          [0x1f84, 0x1f8c],
          [0x1f85, 0x1f8d],
          [0x1f86, 0x1f8e],
          [0x1f87, 0x1f8f],
          [0x1f88, 0x1f80],
          [0x1f89, 0x1f81],
          [0x1f8a, 0x1f82],
          [0x1f8b, 0x1f83],
          [0x1f8c, 0x1f84],
          [0x1f8d, 0x1f85],
          [0x1f8e, 0x1f86],
          [0x1f8f, 0x1f87],
          [0x1f90, 0x1f98],
          [0x1f91, 0x1f99],
          [0x1f92, 0x1f9a],
          [0x1f93, 0x1f9b],
          [0x1f94, 0x1f9c],
          [0x1f95, 0x1f9d],
          [0x1f96, 0x1f9e],
          [0x1f97, 0x1f9f],
          [0x1f98, 0x1f90],
          [0x1f99, 0x1f91],
          [0x1f9a, 0x1f92],
          [0x1f9b, 0x1f93],
          [0x1f9c, 0x1f94],
          [0x1f9d, 0x1f95],
          [0x1f9e, 0x1f96],
          [0x1f9f, 0x1f97],
          [0x1fa0, 0x1fa8],
          [0x1fa1, 0x1fa9],
          [0x1fa2, 0x1faa],
          [0x1fa3, 0x1fab],
          [0x1fa4, 0x1fac],
          [0x1fa5, 0x1fad],
          [0x1fa6, 0x1fae],
          [0x1fa7, 0x1faf],
          [0x1fa8, 0x1fa0],
          [0x1fa9, 0x1fa1],
          [0x1faa, 0x1fa2],
          [0x1fab, 0x1fa3],
          [0x1fac, 0x1fa4],
          [0x1fad, 0x1fa5],
          [0x1fae, 0x1fa6],
          [0x1faf, 0x1fa7],
          [0x1fb3, 0x1fbc],
          [0x1fbc, 0x1fb3],
          [0x1fbe, [0x345, 0x399]],
          [0x1fc3, 0x1fcc],
          [0x1fcc, 0x1fc3],
          [0x1ff3, 0x1ffc],
          [0x1ffc, 0x1ff3],
          [0x2126, [0x3a9, 0x3c9]],
          [0x212a, 0x4b],
          [0x212b, [0xc5, 0xe5]],
          [0xa64a, 0x1c88],
          [0xa64b, 0x1c88],
          [0xa7ae, 0x26a],
          [0xa7b2, 0x29d],
          [0xa7b3, 0xab53],
          [0xa7b4, 0xa7b5],
          [0xa7b5, 0xa7b4],
          [0xa7b6, 0xa7b7],
          [0xa7b7, 0xa7b6],
          [0xab53, 0xa7b3],
          [0xab70, 0x13a0],
          [0xab71, 0x13a1],
          [0xab72, 0x13a2],
          [0xab73, 0x13a3],
          [0xab74, 0x13a4],
          [0xab75, 0x13a5],
          [0xab76, 0x13a6],
          [0xab77, 0x13a7],
          [0xab78, 0x13a8],
          [0xab79, 0x13a9],
          [0xab7a, 0x13aa],
          [0xab7b, 0x13ab],
          [0xab7c, 0x13ac],
          [0xab7d, 0x13ad],
          [0xab7e, 0x13ae],
          [0xab7f, 0x13af],
          [0xab80, 0x13b0],
          [0xab81, 0x13b1],
          [0xab82, 0x13b2],
          [0xab83, 0x13b3],
          [0xab84, 0x13b4],
          [0xab85, 0x13b5],
          [0xab86, 0x13b6],
          [0xab87, 0x13b7],
          [0xab88, 0x13b8],
          [0xab89, 0x13b9],
          [0xab8a, 0x13ba],
          [0xab8b, 0x13bb],
          [0xab8c, 0x13bc],
          [0xab8d, 0x13bd],
          [0xab8e, 0x13be],
          [0xab8f, 0x13bf],
          [0xab90, 0x13c0],
          [0xab91, 0x13c1],
          [0xab92, 0x13c2],
          [0xab93, 0x13c3],
          [0xab94, 0x13c4],
          [0xab95, 0x13c5],
          [0xab96, 0x13c6],
          [0xab97, 0x13c7],
          [0xab98, 0x13c8],
          [0xab99, 0x13c9],
          [0xab9a, 0x13ca],
          [0xab9b, 0x13cb],
          [0xab9c, 0x13cc],
          [0xab9d, 0x13cd],
          [0xab9e, 0x13ce],
          [0xab9f, 0x13cf],
          [0xaba0, 0x13d0],
          [0xaba1, 0x13d1],
          [0xaba2, 0x13d2],
          [0xaba3, 0x13d3],
          [0xaba4, 0x13d4],
          [0xaba5, 0x13d5],
          [0xaba6, 0x13d6],
          [0xaba7, 0x13d7],
          [0xaba8, 0x13d8],
          [0xaba9, 0x13d9],
          [0xabaa, 0x13da],
          [0xabab, 0x13db],
          [0xabac, 0x13dc],
          [0xabad, 0x13dd],
          [0xabae, 0x13de],
          [0xabaf, 0x13df],
          [0xabb0, 0x13e0],
          [0xabb1, 0x13e1],
          [0xabb2, 0x13e2],
          [0xabb3, 0x13e3],
          [0xabb4, 0x13e4],
          [0xabb5, 0x13e5],
          [0xabb6, 0x13e6],
          [0xabb7, 0x13e7],
          [0xabb8, 0x13e8],
          [0xabb9, 0x13e9],
          [0xabba, 0x13ea],
          [0xabbb, 0x13eb],
          [0xabbc, 0x13ec],
          [0xabbd, 0x13ed],
          [0xabbe, 0x13ee],
          [0xabbf, 0x13ef],
          [0x10400, 0x10428],
          [0x10401, 0x10429],
          [0x10402, 0x1042a],
          [0x10403, 0x1042b],
          [0x10404, 0x1042c],
          [0x10405, 0x1042d],
          [0x10406, 0x1042e],
          [0x10407, 0x1042f],
          [0x10408, 0x10430],
          [0x10409, 0x10431],
          [0x1040a, 0x10432],
          [0x1040b, 0x10433],
          [0x1040c, 0x10434],
          [0x1040d, 0x10435],
          [0x1040e, 0x10436],
          [0x1040f, 0x10437],
          [0x10410, 0x10438],
          [0x10411, 0x10439],
          [0x10412, 0x1043a],
          [0x10413, 0x1043b],
          [0x10414, 0x1043c],
          [0x10415, 0x1043d],
          [0x10416, 0x1043e],
          [0x10417, 0x1043f],
          [0x10418, 0x10440],
          [0x10419, 0x10441],
          [0x1041a, 0x10442],
          [0x1041b, 0x10443],
          [0x1041c, 0x10444],
          [0x1041d, 0x10445],
          [0x1041e, 0x10446],
          [0x1041f, 0x10447],
          [0x10420, 0x10448],
          [0x10421, 0x10449],
          [0x10422, 0x1044a],
          [0x10423, 0x1044b],
          [0x10424, 0x1044c],
          [0x10425, 0x1044d],
          [0x10426, 0x1044e],
          [0x10427, 0x1044f],
          [0x10428, 0x10400],
          [0x10429, 0x10401],
          [0x1042a, 0x10402],
          [0x1042b, 0x10403],
          [0x1042c, 0x10404],
          [0x1042d, 0x10405],
          [0x1042e, 0x10406],
          [0x1042f, 0x10407],
          [0x10430, 0x10408],
          [0x10431, 0x10409],
          [0x10432, 0x1040a],
          [0x10433, 0x1040b],
          [0x10434, 0x1040c],
          [0x10435, 0x1040d],
          [0x10436, 0x1040e],
          [0x10437, 0x1040f],
          [0x10438, 0x10410],
          [0x10439, 0x10411],
          [0x1043a, 0x10412],
          [0x1043b, 0x10413],
          [0x1043c, 0x10414],
          [0x1043d, 0x10415],
          [0x1043e, 0x10416],
          [0x1043f, 0x10417],
          [0x10440, 0x10418],
          [0x10441, 0x10419],
          [0x10442, 0x1041a],
          [0x10443, 0x1041b],
          [0x10444, 0x1041c],
          [0x10445, 0x1041d],
          [0x10446, 0x1041e],
          [0x10447, 0x1041f],
          [0x10448, 0x10420],
          [0x10449, 0x10421],
          [0x1044a, 0x10422],
          [0x1044b, 0x10423],
          [0x1044c, 0x10424],
          [0x1044d, 0x10425],
          [0x1044e, 0x10426],
          [0x1044f, 0x10427],
          [0x104b0, 0x104d8],
          [0x104b1, 0x104d9],
          [0x104b2, 0x104da],
          [0x104b3, 0x104db],
          [0x104b4, 0x104dc],
          [0x104b5, 0x104dd],
          [0x104b6, 0x104de],
          [0x104b7, 0x104df],
          [0x104b8, 0x104e0],
          [0x104b9, 0x104e1],
          [0x104ba, 0x104e2],
          [0x104bb, 0x104e3],
          [0x104bc, 0x104e4],
          [0x104bd, 0x104e5],
          [0x104be, 0x104e6],
          [0x104bf, 0x104e7],
          [0x104c0, 0x104e8],
          [0x104c1, 0x104e9],
          [0x104c2, 0x104ea],
          [0x104c3, 0x104eb],
          [0x104c4, 0x104ec],
          [0x104c5, 0x104ed],
          [0x104c6, 0x104ee],
          [0x104c7, 0x104ef],
          [0x104c8, 0x104f0],
          [0x104c9, 0x104f1],
          [0x104ca, 0x104f2],
          [0x104cb, 0x104f3],
          [0x104cc, 0x104f4],
          [0x104cd, 0x104f5],
          [0x104ce, 0x104f6],
          [0x104cf, 0x104f7],
          [0x104d0, 0x104f8],
          [0x104d1, 0x104f9],
          [0x104d2, 0x104fa],
          [0x104d3, 0x104fb],
          [0x104d8, 0x104b0],
          [0x104d9, 0x104b1],
          [0x104da, 0x104b2],
          [0x104db, 0x104b3],
          [0x104dc, 0x104b4],
          [0x104dd, 0x104b5],
          [0x104de, 0x104b6],
          [0x104df, 0x104b7],
          [0x104e0, 0x104b8],
          [0x104e1, 0x104b9],
          [0x104e2, 0x104ba],
          [0x104e3, 0x104bb],
          [0x104e4, 0x104bc],
          [0x104e5, 0x104bd],
          [0x104e6, 0x104be],
          [0x104e7, 0x104bf],
          [0x104e8, 0x104c0],
          [0x104e9, 0x104c1],
          [0x104ea, 0x104c2],
          [0x104eb, 0x104c3],
          [0x104ec, 0x104c4],
          [0x104ed, 0x104c5],
          [0x104ee, 0x104c6],
          [0x104ef, 0x104c7],
          [0x104f0, 0x104c8],
          [0x104f1, 0x104c9],
          [0x104f2, 0x104ca],
          [0x104f3, 0x104cb],
          [0x104f4, 0x104cc],
          [0x104f5, 0x104cd],
          [0x104f6, 0x104ce],
          [0x104f7, 0x104cf],
          [0x104f8, 0x104d0],
          [0x104f9, 0x104d1],
          [0x104fa, 0x104d2],
          [0x104fb, 0x104d3],
          [0x10c80, 0x10cc0],
          [0x10c81, 0x10cc1],
          [0x10c82, 0x10cc2],
          [0x10c83, 0x10cc3],
          [0x10c84, 0x10cc4],
          [0x10c85, 0x10cc5],
          [0x10c86, 0x10cc6],
          [0x10c87, 0x10cc7],
          [0x10c88, 0x10cc8],
          [0x10c89, 0x10cc9],
          [0x10c8a, 0x10cca],
          [0x10c8b, 0x10ccb],
          [0x10c8c, 0x10ccc],
          [0x10c8d, 0x10ccd],
          [0x10c8e, 0x10cce],
          [0x10c8f, 0x10ccf],
          [0x10c90, 0x10cd0],
          [0x10c91, 0x10cd1],
          [0x10c92, 0x10cd2],
          [0x10c93, 0x10cd3],
          [0x10c94, 0x10cd4],
          [0x10c95, 0x10cd5],
          [0x10c96, 0x10cd6],
          [0x10c97, 0x10cd7],
          [0x10c98, 0x10cd8],
          [0x10c99, 0x10cd9],
          [0x10c9a, 0x10cda],
          [0x10c9b, 0x10cdb],
          [0x10c9c, 0x10cdc],
          [0x10c9d, 0x10cdd],
          [0x10c9e, 0x10cde],
          [0x10c9f, 0x10cdf],
          [0x10ca0, 0x10ce0],
          [0x10ca1, 0x10ce1],
          [0x10ca2, 0x10ce2],
          [0x10ca3, 0x10ce3],
          [0x10ca4, 0x10ce4],
          [0x10ca5, 0x10ce5],
          [0x10ca6, 0x10ce6],
          [0x10ca7, 0x10ce7],
          [0x10ca8, 0x10ce8],
          [0x10ca9, 0x10ce9],
          [0x10caa, 0x10cea],
          [0x10cab, 0x10ceb],
          [0x10cac, 0x10cec],
          [0x10cad, 0x10ced],
          [0x10cae, 0x10cee],
          [0x10caf, 0x10cef],
          [0x10cb0, 0x10cf0],
          [0x10cb1, 0x10cf1],
          [0x10cb2, 0x10cf2],
          [0x10cc0, 0x10c80],
          [0x10cc1, 0x10c81],
          [0x10cc2, 0x10c82],
          [0x10cc3, 0x10c83],
          [0x10cc4, 0x10c84],
          [0x10cc5, 0x10c85],
          [0x10cc6, 0x10c86],
          [0x10cc7, 0x10c87],
          [0x10cc8, 0x10c88],
          [0x10cc9, 0x10c89],
          [0x10cca, 0x10c8a],
          [0x10ccb, 0x10c8b],
          [0x10ccc, 0x10c8c],
          [0x10ccd, 0x10c8d],
          [0x10cce, 0x10c8e],
          [0x10ccf, 0x10c8f],
          [0x10cd0, 0x10c90],
          [0x10cd1, 0x10c91],
          [0x10cd2, 0x10c92],
          [0x10cd3, 0x10c93],
          [0x10cd4, 0x10c94],
          [0x10cd5, 0x10c95],
          [0x10cd6, 0x10c96],
          [0x10cd7, 0x10c97],
          [0x10cd8, 0x10c98],
          [0x10cd9, 0x10c99],
          [0x10cda, 0x10c9a],
          [0x10cdb, 0x10c9b],
          [0x10cdc, 0x10c9c],
          [0x10cdd, 0x10c9d],
          [0x10cde, 0x10c9e],
          [0x10cdf, 0x10c9f],
          [0x10ce0, 0x10ca0],
          [0x10ce1, 0x10ca1],
          [0x10ce2, 0x10ca2],
          [0x10ce3, 0x10ca3],
          [0x10ce4, 0x10ca4],
          [0x10ce5, 0x10ca5],
          [0x10ce6, 0x10ca6],
          [0x10ce7, 0x10ca7],
          [0x10ce8, 0x10ca8],
          [0x10ce9, 0x10ca9],
          [0x10cea, 0x10caa],
          [0x10ceb, 0x10cab],
          [0x10cec, 0x10cac],
          [0x10ced, 0x10cad],
          [0x10cee, 0x10cae],
          [0x10cef, 0x10caf],
          [0x10cf0, 0x10cb0],
          [0x10cf1, 0x10cb1],
          [0x10cf2, 0x10cb2],
          [0x118a0, 0x118c0],
          [0x118a1, 0x118c1],
          [0x118a2, 0x118c2],
          [0x118a3, 0x118c3],
          [0x118a4, 0x118c4],
          [0x118a5, 0x118c5],
          [0x118a6, 0x118c6],
          [0x118a7, 0x118c7],
          [0x118a8, 0x118c8],
          [0x118a9, 0x118c9],
          [0x118aa, 0x118ca],
          [0x118ab, 0x118cb],
          [0x118ac, 0x118cc],
          [0x118ad, 0x118cd],
          [0x118ae, 0x118ce],
          [0x118af, 0x118cf],
          [0x118b0, 0x118d0],
          [0x118b1, 0x118d1],
          [0x118b2, 0x118d2],
          [0x118b3, 0x118d3],
          [0x118b4, 0x118d4],
          [0x118b5, 0x118d5],
          [0x118b6, 0x118d6],
          [0x118b7, 0x118d7],
          [0x118b8, 0x118d8],
          [0x118b9, 0x118d9],
          [0x118ba, 0x118da],
          [0x118bb, 0x118db],
          [0x118bc, 0x118dc],
          [0x118bd, 0x118dd],
          [0x118be, 0x118de],
          [0x118bf, 0x118df],
          [0x118c0, 0x118a0],
          [0x118c1, 0x118a1],
          [0x118c2, 0x118a2],
          [0x118c3, 0x118a3],
          [0x118c4, 0x118a4],
          [0x118c5, 0x118a5],
          [0x118c6, 0x118a6],
          [0x118c7, 0x118a7],
          [0x118c8, 0x118a8],
          [0x118c9, 0x118a9],
          [0x118ca, 0x118aa],
          [0x118cb, 0x118ab],
          [0x118cc, 0x118ac],
          [0x118cd, 0x118ad],
          [0x118ce, 0x118ae],
          [0x118cf, 0x118af],
          [0x118d0, 0x118b0],
          [0x118d1, 0x118b1],
          [0x118d2, 0x118b2],
          [0x118d3, 0x118b3],
          [0x118d4, 0x118b4],
          [0x118d5, 0x118b5],
          [0x118d6, 0x118b6],
          [0x118d7, 0x118b7],
          [0x118d8, 0x118b8],
          [0x118d9, 0x118b9],
          [0x118da, 0x118ba],
          [0x118db, 0x118bb],
          [0x118dc, 0x118bc],
          [0x118dd, 0x118bd],
          [0x118de, 0x118be],
          [0x118df, 0x118bf],
          [0x1e900, 0x1e922],
          [0x1e901, 0x1e923],
          [0x1e902, 0x1e924],
          [0x1e903, 0x1e925],
          [0x1e904, 0x1e926],
          [0x1e905, 0x1e927],
          [0x1e906, 0x1e928],
          [0x1e907, 0x1e929],
          [0x1e908, 0x1e92a],
          [0x1e909, 0x1e92b],
          [0x1e90a, 0x1e92c],
          [0x1e90b, 0x1e92d],
          [0x1e90c, 0x1e92e],
          [0x1e90d, 0x1e92f],
          [0x1e90e, 0x1e930],
          [0x1e90f, 0x1e931],
          [0x1e910, 0x1e932],
          [0x1e911, 0x1e933],
          [0x1e912, 0x1e934],
          [0x1e913, 0x1e935],
          [0x1e914, 0x1e936],
          [0x1e915, 0x1e937],
          [0x1e916, 0x1e938],
          [0x1e917, 0x1e939],
          [0x1e918, 0x1e93a],
          [0x1e919, 0x1e93b],
          [0x1e91a, 0x1e93c],
          [0x1e91b, 0x1e93d],
          [0x1e91c, 0x1e93e],
          [0x1e91d, 0x1e93f],
          [0x1e91e, 0x1e940],
          [0x1e91f, 0x1e941],
          [0x1e920, 0x1e942],
          [0x1e921, 0x1e943],
          [0x1e922, 0x1e900],
          [0x1e923, 0x1e901],
          [0x1e924, 0x1e902],
          [0x1e925, 0x1e903],
          [0x1e926, 0x1e904],
          [0x1e927, 0x1e905],
          [0x1e928, 0x1e906],
          [0x1e929, 0x1e907],
          [0x1e92a, 0x1e908],
          [0x1e92b, 0x1e909],
          [0x1e92c, 0x1e90a],
          [0x1e92d, 0x1e90b],
          [0x1e92e, 0x1e90c],
          [0x1e92f, 0x1e90d],
          [0x1e930, 0x1e90e],
          [0x1e931, 0x1e90f],
          [0x1e932, 0x1e910],
          [0x1e933, 0x1e911],
          [0x1e934, 0x1e912],
          [0x1e935, 0x1e913],
          [0x1e936, 0x1e914],
          [0x1e937, 0x1e915],
          [0x1e938, 0x1e916],
          [0x1e939, 0x1e917],
          [0x1e93a, 0x1e918],
          [0x1e93b, 0x1e919],
          [0x1e93c, 0x1e91a],
          [0x1e93d, 0x1e91b],
          [0x1e93e, 0x1e91c],
          [0x1e93f, 0x1e91d],
          [0x1e940, 0x1e91e],
          [0x1e941, 0x1e91f],
          [0x1e942, 0x1e920],
          [0x1e943, 0x1e921]
        ]);

        /***/
      },
      /* 556 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var regenerate = __webpack_require__(0);

        exports.REGULAR = new Map([
          ["d", regenerate().addRange(0x30, 0x39)],
          [
            "D",
            regenerate()
              .addRange(0x0, 0x2f)
              .addRange(0x3a, 0xffff)
          ],
          [
            "s",
            regenerate(0x20, 0xa0, 0x1680, 0x202f, 0x205f, 0x3000, 0xfeff)
              .addRange(0x9, 0xd)
              .addRange(0x2000, 0x200a)
              .addRange(0x2028, 0x2029)
          ],
          [
            "S",
            regenerate()
              .addRange(0x0, 0x8)
              .addRange(0xe, 0x1f)
              .addRange(0x21, 0x9f)
              .addRange(0xa1, 0x167f)
              .addRange(0x1681, 0x1fff)
              .addRange(0x200b, 0x2027)
              .addRange(0x202a, 0x202e)
              .addRange(0x2030, 0x205e)
              .addRange(0x2060, 0x2fff)
              .addRange(0x3001, 0xfefe)
              .addRange(0xff00, 0xffff)
          ],
          [
            "w",
            regenerate(0x5f)
              .addRange(0x30, 0x39)
              .addRange(0x41, 0x5a)
              .addRange(0x61, 0x7a)
          ],
          [
            "W",
            regenerate(0x60)
              .addRange(0x0, 0x2f)
              .addRange(0x3a, 0x40)
              .addRange(0x5b, 0x5e)
              .addRange(0x7b, 0xffff)
          ]
        ]);
        exports.UNICODE = new Map([
          ["d", regenerate().addRange(0x30, 0x39)],
          [
            "D",
            regenerate()
              .addRange(0x0, 0x2f)
              .addRange(0x3a, 0x10ffff)
          ],
          [
            "s",
            regenerate(0x20, 0xa0, 0x1680, 0x202f, 0x205f, 0x3000, 0xfeff)
              .addRange(0x9, 0xd)
              .addRange(0x2000, 0x200a)
              .addRange(0x2028, 0x2029)
          ],
          [
            "S",
            regenerate()
              .addRange(0x0, 0x8)
              .addRange(0xe, 0x1f)
              .addRange(0x21, 0x9f)
              .addRange(0xa1, 0x167f)
              .addRange(0x1681, 0x1fff)
              .addRange(0x200b, 0x2027)
              .addRange(0x202a, 0x202e)
              .addRange(0x2030, 0x205e)
              .addRange(0x2060, 0x2fff)
              .addRange(0x3001, 0xfefe)
              .addRange(0xff00, 0x10ffff)
          ],
          [
            "w",
            regenerate(0x5f)
              .addRange(0x30, 0x39)
              .addRange(0x41, 0x5a)
              .addRange(0x61, 0x7a)
          ],
          [
            "W",
            regenerate(0x60)
              .addRange(0x0, 0x2f)
              .addRange(0x3a, 0x40)
              .addRange(0x5b, 0x5e)
              .addRange(0x7b, 0x10ffff)
          ]
        ]);
        exports.UNICODE_IGNORE_CASE = new Map([
          ["d", regenerate().addRange(0x30, 0x39)],
          [
            "D",
            regenerate()
              .addRange(0x0, 0x2f)
              .addRange(0x3a, 0x10ffff)
          ],
          [
            "s",
            regenerate(0x20, 0xa0, 0x1680, 0x202f, 0x205f, 0x3000, 0xfeff)
              .addRange(0x9, 0xd)
              .addRange(0x2000, 0x200a)
              .addRange(0x2028, 0x2029)
          ],
          [
            "S",
            regenerate()
              .addRange(0x0, 0x8)
              .addRange(0xe, 0x1f)
              .addRange(0x21, 0x9f)
              .addRange(0xa1, 0x167f)
              .addRange(0x1681, 0x1fff)
              .addRange(0x200b, 0x2027)
              .addRange(0x202a, 0x202e)
              .addRange(0x2030, 0x205e)
              .addRange(0x2060, 0x2fff)
              .addRange(0x3001, 0xfefe)
              .addRange(0xff00, 0x10ffff)
          ],
          [
            "w",
            regenerate(0x5f, 0x17f, 0x212a)
              .addRange(0x30, 0x39)
              .addRange(0x41, 0x5a)
              .addRange(0x61, 0x7a)
          ],
          [
            "W",
            regenerate(0x60)
              .addRange(0x0, 0x2f)
              .addRange(0x3a, 0x40)
              .addRange(0x5b, 0x5e)
              .addRange(0x7b, 0x17e)
              .addRange(0x180, 0x2129)
              .addRange(0x212b, 0x10ffff)
          ]
        ]);

        /***/
      },
      /* 557 */
      /***/ function(module, exports, __webpack_require__) {
        var map = {
          "./Binary_Property/ASCII.js": 558,
          "./Binary_Property/ASCII_Hex_Digit.js": 559,
          "./Binary_Property/Alphabetic.js": 560,
          "./Binary_Property/Any.js": 561,
          "./Binary_Property/Assigned.js": 562,
          "./Binary_Property/Bidi_Control.js": 563,
          "./Binary_Property/Bidi_Mirrored.js": 564,
          "./Binary_Property/Case_Ignorable.js": 565,
          "./Binary_Property/Cased.js": 566,
          "./Binary_Property/Changes_When_Casefolded.js": 567,
          "./Binary_Property/Changes_When_Casemapped.js": 568,
          "./Binary_Property/Changes_When_Lowercased.js": 569,
          "./Binary_Property/Changes_When_NFKC_Casefolded.js": 570,
          "./Binary_Property/Changes_When_Titlecased.js": 571,
          "./Binary_Property/Changes_When_Uppercased.js": 572,
          "./Binary_Property/Dash.js": 573,
          "./Binary_Property/Default_Ignorable_Code_Point.js": 574,
          "./Binary_Property/Deprecated.js": 575,
          "./Binary_Property/Diacritic.js": 576,
          "./Binary_Property/Emoji.js": 577,
          "./Binary_Property/Emoji_Component.js": 578,
          "./Binary_Property/Emoji_Modifier.js": 579,
          "./Binary_Property/Emoji_Modifier_Base.js": 580,
          "./Binary_Property/Emoji_Presentation.js": 581,
          "./Binary_Property/Extender.js": 582,
          "./Binary_Property/Grapheme_Base.js": 583,
          "./Binary_Property/Grapheme_Extend.js": 584,
          "./Binary_Property/Hex_Digit.js": 585,
          "./Binary_Property/IDS_Binary_Operator.js": 586,
          "./Binary_Property/IDS_Trinary_Operator.js": 587,
          "./Binary_Property/ID_Continue.js": 588,
          "./Binary_Property/ID_Start.js": 589,
          "./Binary_Property/Ideographic.js": 590,
          "./Binary_Property/Join_Control.js": 591,
          "./Binary_Property/Logical_Order_Exception.js": 592,
          "./Binary_Property/Lowercase.js": 593,
          "./Binary_Property/Math.js": 594,
          "./Binary_Property/Noncharacter_Code_Point.js": 595,
          "./Binary_Property/Pattern_Syntax.js": 596,
          "./Binary_Property/Pattern_White_Space.js": 597,
          "./Binary_Property/Quotation_Mark.js": 598,
          "./Binary_Property/Radical.js": 599,
          "./Binary_Property/Regional_Indicator.js": 600,
          "./Binary_Property/Sentence_Terminal.js": 601,
          "./Binary_Property/Soft_Dotted.js": 602,
          "./Binary_Property/Terminal_Punctuation.js": 603,
          "./Binary_Property/Unified_Ideograph.js": 604,
          "./Binary_Property/Uppercase.js": 605,
          "./Binary_Property/Variation_Selector.js": 606,
          "./Binary_Property/White_Space.js": 607,
          "./Binary_Property/XID_Continue.js": 608,
          "./Binary_Property/XID_Start.js": 609,
          "./General_Category/Cased_Letter.js": 610,
          "./General_Category/Close_Punctuation.js": 611,
          "./General_Category/Connector_Punctuation.js": 612,
          "./General_Category/Control.js": 613,
          "./General_Category/Currency_Symbol.js": 614,
          "./General_Category/Dash_Punctuation.js": 615,
          "./General_Category/Decimal_Number.js": 616,
          "./General_Category/Enclosing_Mark.js": 617,
          "./General_Category/Final_Punctuation.js": 618,
          "./General_Category/Format.js": 619,
          "./General_Category/Initial_Punctuation.js": 620,
          "./General_Category/Letter.js": 621,
          "./General_Category/Letter_Number.js": 622,
          "./General_Category/Line_Separator.js": 623,
          "./General_Category/Lowercase_Letter.js": 624,
          "./General_Category/Mark.js": 625,
          "./General_Category/Math_Symbol.js": 626,
          "./General_Category/Modifier_Letter.js": 627,
          "./General_Category/Modifier_Symbol.js": 628,
          "./General_Category/Nonspacing_Mark.js": 629,
          "./General_Category/Number.js": 630,
          "./General_Category/Open_Punctuation.js": 631,
          "./General_Category/Other.js": 632,
          "./General_Category/Other_Letter.js": 633,
          "./General_Category/Other_Number.js": 634,
          "./General_Category/Other_Punctuation.js": 635,
          "./General_Category/Other_Symbol.js": 636,
          "./General_Category/Paragraph_Separator.js": 637,
          "./General_Category/Private_Use.js": 638,
          "./General_Category/Punctuation.js": 639,
          "./General_Category/Separator.js": 640,
          "./General_Category/Space_Separator.js": 641,
          "./General_Category/Spacing_Mark.js": 642,
          "./General_Category/Surrogate.js": 643,
          "./General_Category/Symbol.js": 644,
          "./General_Category/Titlecase_Letter.js": 645,
          "./General_Category/Unassigned.js": 646,
          "./General_Category/Uppercase_Letter.js": 647,
          "./Script/Adlam.js": 648,
          "./Script/Ahom.js": 649,
          "./Script/Anatolian_Hieroglyphs.js": 650,
          "./Script/Arabic.js": 651,
          "./Script/Armenian.js": 652,
          "./Script/Avestan.js": 653,
          "./Script/Balinese.js": 654,
          "./Script/Bamum.js": 655,
          "./Script/Bassa_Vah.js": 656,
          "./Script/Batak.js": 657,
          "./Script/Bengali.js": 658,
          "./Script/Bhaiksuki.js": 659,
          "./Script/Bopomofo.js": 660,
          "./Script/Brahmi.js": 661,
          "./Script/Braille.js": 662,
          "./Script/Buginese.js": 663,
          "./Script/Buhid.js": 664,
          "./Script/Canadian_Aboriginal.js": 665,
          "./Script/Carian.js": 666,
          "./Script/Caucasian_Albanian.js": 667,
          "./Script/Chakma.js": 668,
          "./Script/Cham.js": 669,
          "./Script/Cherokee.js": 670,
          "./Script/Common.js": 671,
          "./Script/Coptic.js": 672,
          "./Script/Cuneiform.js": 673,
          "./Script/Cypriot.js": 674,
          "./Script/Cyrillic.js": 675,
          "./Script/Deseret.js": 676,
          "./Script/Devanagari.js": 677,
          "./Script/Duployan.js": 678,
          "./Script/Egyptian_Hieroglyphs.js": 679,
          "./Script/Elbasan.js": 680,
          "./Script/Ethiopic.js": 681,
          "./Script/Georgian.js": 682,
          "./Script/Glagolitic.js": 683,
          "./Script/Gothic.js": 684,
          "./Script/Grantha.js": 685,
          "./Script/Greek.js": 686,
          "./Script/Gujarati.js": 687,
          "./Script/Gurmukhi.js": 688,
          "./Script/Han.js": 689,
          "./Script/Hangul.js": 690,
          "./Script/Hanunoo.js": 691,
          "./Script/Hatran.js": 692,
          "./Script/Hebrew.js": 693,
          "./Script/Hiragana.js": 694,
          "./Script/Imperial_Aramaic.js": 695,
          "./Script/Inherited.js": 696,
          "./Script/Inscriptional_Pahlavi.js": 697,
          "./Script/Inscriptional_Parthian.js": 698,
          "./Script/Javanese.js": 699,
          "./Script/Kaithi.js": 700,
          "./Script/Kannada.js": 701,
          "./Script/Katakana.js": 702,
          "./Script/Kayah_Li.js": 703,
          "./Script/Kharoshthi.js": 704,
          "./Script/Khmer.js": 705,
          "./Script/Khojki.js": 706,
          "./Script/Khudawadi.js": 707,
          "./Script/Lao.js": 708,
          "./Script/Latin.js": 709,
          "./Script/Lepcha.js": 710,
          "./Script/Limbu.js": 711,
          "./Script/Linear_A.js": 712,
          "./Script/Linear_B.js": 713,
          "./Script/Lisu.js": 714,
          "./Script/Lycian.js": 715,
          "./Script/Lydian.js": 716,
          "./Script/Mahajani.js": 717,
          "./Script/Malayalam.js": 718,
          "./Script/Mandaic.js": 719,
          "./Script/Manichaean.js": 720,
          "./Script/Marchen.js": 721,
          "./Script/Masaram_Gondi.js": 722,
          "./Script/Meetei_Mayek.js": 723,
          "./Script/Mende_Kikakui.js": 724,
          "./Script/Meroitic_Cursive.js": 725,
          "./Script/Meroitic_Hieroglyphs.js": 726,
          "./Script/Miao.js": 727,
          "./Script/Modi.js": 728,
          "./Script/Mongolian.js": 729,
          "./Script/Mro.js": 730,
          "./Script/Multani.js": 731,
          "./Script/Myanmar.js": 732,
          "./Script/Nabataean.js": 733,
          "./Script/New_Tai_Lue.js": 734,
          "./Script/Newa.js": 735,
          "./Script/Nko.js": 736,
          "./Script/Nushu.js": 737,
          "./Script/Ogham.js": 738,
          "./Script/Ol_Chiki.js": 739,
          "./Script/Old_Hungarian.js": 740,
          "./Script/Old_Italic.js": 741,
          "./Script/Old_North_Arabian.js": 742,
          "./Script/Old_Permic.js": 743,
          "./Script/Old_Persian.js": 744,
          "./Script/Old_South_Arabian.js": 745,
          "./Script/Old_Turkic.js": 746,
          "./Script/Oriya.js": 747,
          "./Script/Osage.js": 748,
          "./Script/Osmanya.js": 749,
          "./Script/Pahawh_Hmong.js": 750,
          "./Script/Palmyrene.js": 751,
          "./Script/Pau_Cin_Hau.js": 752,
          "./Script/Phags_Pa.js": 753,
          "./Script/Phoenician.js": 754,
          "./Script/Psalter_Pahlavi.js": 755,
          "./Script/Rejang.js": 756,
          "./Script/Runic.js": 757,
          "./Script/Samaritan.js": 758,
          "./Script/Saurashtra.js": 759,
          "./Script/Sharada.js": 760,
          "./Script/Shavian.js": 761,
          "./Script/Siddham.js": 762,
          "./Script/SignWriting.js": 763,
          "./Script/Sinhala.js": 764,
          "./Script/Sora_Sompeng.js": 765,
          "./Script/Soyombo.js": 766,
          "./Script/Sundanese.js": 767,
          "./Script/Syloti_Nagri.js": 768,
          "./Script/Syriac.js": 769,
          "./Script/Tagalog.js": 770,
          "./Script/Tagbanwa.js": 771,
          "./Script/Tai_Le.js": 772,
          "./Script/Tai_Tham.js": 773,
          "./Script/Tai_Viet.js": 774,
          "./Script/Takri.js": 775,
          "./Script/Tamil.js": 776,
          "./Script/Tangut.js": 777,
          "./Script/Telugu.js": 778,
          "./Script/Thaana.js": 779,
          "./Script/Thai.js": 780,
          "./Script/Tibetan.js": 781,
          "./Script/Tifinagh.js": 782,
          "./Script/Tirhuta.js": 783,
          "./Script/Ugaritic.js": 784,
          "./Script/Vai.js": 785,
          "./Script/Warang_Citi.js": 786,
          "./Script/Yi.js": 787,
          "./Script/Zanabazar_Square.js": 788,
          "./Script_Extensions/Adlam.js": 789,
          "./Script_Extensions/Ahom.js": 790,
          "./Script_Extensions/Anatolian_Hieroglyphs.js": 791,
          "./Script_Extensions/Arabic.js": 792,
          "./Script_Extensions/Armenian.js": 793,
          "./Script_Extensions/Avestan.js": 794,
          "./Script_Extensions/Balinese.js": 795,
          "./Script_Extensions/Bamum.js": 796,
          "./Script_Extensions/Bassa_Vah.js": 797,
          "./Script_Extensions/Batak.js": 798,
          "./Script_Extensions/Bengali.js": 799,
          "./Script_Extensions/Bhaiksuki.js": 800,
          "./Script_Extensions/Bopomofo.js": 801,
          "./Script_Extensions/Brahmi.js": 802,
          "./Script_Extensions/Braille.js": 803,
          "./Script_Extensions/Buginese.js": 804,
          "./Script_Extensions/Buhid.js": 805,
          "./Script_Extensions/Canadian_Aboriginal.js": 806,
          "./Script_Extensions/Carian.js": 807,
          "./Script_Extensions/Caucasian_Albanian.js": 808,
          "./Script_Extensions/Chakma.js": 809,
          "./Script_Extensions/Cham.js": 810,
          "./Script_Extensions/Cherokee.js": 811,
          "./Script_Extensions/Common.js": 812,
          "./Script_Extensions/Coptic.js": 813,
          "./Script_Extensions/Cuneiform.js": 814,
          "./Script_Extensions/Cypriot.js": 815,
          "./Script_Extensions/Cyrillic.js": 816,
          "./Script_Extensions/Deseret.js": 817,
          "./Script_Extensions/Devanagari.js": 818,
          "./Script_Extensions/Duployan.js": 819,
          "./Script_Extensions/Egyptian_Hieroglyphs.js": 820,
          "./Script_Extensions/Elbasan.js": 821,
          "./Script_Extensions/Ethiopic.js": 822,
          "./Script_Extensions/Georgian.js": 823,
          "./Script_Extensions/Glagolitic.js": 824,
          "./Script_Extensions/Gothic.js": 825,
          "./Script_Extensions/Grantha.js": 826,
          "./Script_Extensions/Greek.js": 827,
          "./Script_Extensions/Gujarati.js": 828,
          "./Script_Extensions/Gurmukhi.js": 829,
          "./Script_Extensions/Han.js": 830,
          "./Script_Extensions/Hangul.js": 831,
          "./Script_Extensions/Hanunoo.js": 832,
          "./Script_Extensions/Hatran.js": 833,
          "./Script_Extensions/Hebrew.js": 834,
          "./Script_Extensions/Hiragana.js": 835,
          "./Script_Extensions/Imperial_Aramaic.js": 836,
          "./Script_Extensions/Inherited.js": 837,
          "./Script_Extensions/Inscriptional_Pahlavi.js": 838,
          "./Script_Extensions/Inscriptional_Parthian.js": 839,
          "./Script_Extensions/Javanese.js": 840,
          "./Script_Extensions/Kaithi.js": 841,
          "./Script_Extensions/Kannada.js": 842,
          "./Script_Extensions/Katakana.js": 843,
          "./Script_Extensions/Kayah_Li.js": 844,
          "./Script_Extensions/Kharoshthi.js": 845,
          "./Script_Extensions/Khmer.js": 846,
          "./Script_Extensions/Khojki.js": 847,
          "./Script_Extensions/Khudawadi.js": 848,
          "./Script_Extensions/Lao.js": 849,
          "./Script_Extensions/Latin.js": 850,
          "./Script_Extensions/Lepcha.js": 851,
          "./Script_Extensions/Limbu.js": 852,
          "./Script_Extensions/Linear_A.js": 853,
          "./Script_Extensions/Linear_B.js": 854,
          "./Script_Extensions/Lisu.js": 855,
          "./Script_Extensions/Lycian.js": 856,
          "./Script_Extensions/Lydian.js": 857,
          "./Script_Extensions/Mahajani.js": 858,
          "./Script_Extensions/Malayalam.js": 859,
          "./Script_Extensions/Mandaic.js": 860,
          "./Script_Extensions/Manichaean.js": 861,
          "./Script_Extensions/Marchen.js": 862,
          "./Script_Extensions/Masaram_Gondi.js": 863,
          "./Script_Extensions/Meetei_Mayek.js": 864,
          "./Script_Extensions/Mende_Kikakui.js": 865,
          "./Script_Extensions/Meroitic_Cursive.js": 866,
          "./Script_Extensions/Meroitic_Hieroglyphs.js": 867,
          "./Script_Extensions/Miao.js": 868,
          "./Script_Extensions/Modi.js": 869,
          "./Script_Extensions/Mongolian.js": 870,
          "./Script_Extensions/Mro.js": 871,
          "./Script_Extensions/Multani.js": 872,
          "./Script_Extensions/Myanmar.js": 873,
          "./Script_Extensions/Nabataean.js": 874,
          "./Script_Extensions/New_Tai_Lue.js": 875,
          "./Script_Extensions/Newa.js": 876,
          "./Script_Extensions/Nko.js": 877,
          "./Script_Extensions/Nushu.js": 878,
          "./Script_Extensions/Ogham.js": 879,
          "./Script_Extensions/Ol_Chiki.js": 880,
          "./Script_Extensions/Old_Hungarian.js": 881,
          "./Script_Extensions/Old_Italic.js": 882,
          "./Script_Extensions/Old_North_Arabian.js": 883,
          "./Script_Extensions/Old_Permic.js": 884,
          "./Script_Extensions/Old_Persian.js": 885,
          "./Script_Extensions/Old_South_Arabian.js": 886,
          "./Script_Extensions/Old_Turkic.js": 887,
          "./Script_Extensions/Oriya.js": 888,
          "./Script_Extensions/Osage.js": 889,
          "./Script_Extensions/Osmanya.js": 890,
          "./Script_Extensions/Pahawh_Hmong.js": 891,
          "./Script_Extensions/Palmyrene.js": 892,
          "./Script_Extensions/Pau_Cin_Hau.js": 893,
          "./Script_Extensions/Phags_Pa.js": 894,
          "./Script_Extensions/Phoenician.js": 895,
          "./Script_Extensions/Psalter_Pahlavi.js": 896,
          "./Script_Extensions/Rejang.js": 897,
          "./Script_Extensions/Runic.js": 898,
          "./Script_Extensions/Samaritan.js": 899,
          "./Script_Extensions/Saurashtra.js": 900,
          "./Script_Extensions/Sharada.js": 901,
          "./Script_Extensions/Shavian.js": 902,
          "./Script_Extensions/Siddham.js": 903,
          "./Script_Extensions/SignWriting.js": 904,
          "./Script_Extensions/Sinhala.js": 905,
          "./Script_Extensions/Sora_Sompeng.js": 906,
          "./Script_Extensions/Soyombo.js": 907,
          "./Script_Extensions/Sundanese.js": 908,
          "./Script_Extensions/Syloti_Nagri.js": 909,
          "./Script_Extensions/Syriac.js": 910,
          "./Script_Extensions/Tagalog.js": 911,
          "./Script_Extensions/Tagbanwa.js": 912,
          "./Script_Extensions/Tai_Le.js": 913,
          "./Script_Extensions/Tai_Tham.js": 914,
          "./Script_Extensions/Tai_Viet.js": 915,
          "./Script_Extensions/Takri.js": 916,
          "./Script_Extensions/Tamil.js": 917,
          "./Script_Extensions/Tangut.js": 918,
          "./Script_Extensions/Telugu.js": 919,
          "./Script_Extensions/Thaana.js": 920,
          "./Script_Extensions/Thai.js": 921,
          "./Script_Extensions/Tibetan.js": 922,
          "./Script_Extensions/Tifinagh.js": 923,
          "./Script_Extensions/Tirhuta.js": 924,
          "./Script_Extensions/Ugaritic.js": 925,
          "./Script_Extensions/Vai.js": 926,
          "./Script_Extensions/Warang_Citi.js": 927,
          "./Script_Extensions/Yi.js": 928,
          "./Script_Extensions/Zanabazar_Square.js": 929,
          "./emoji-version.js": 930,
          "./index.js": 931,
          "./unicode-version.js": 932
        };
        function webpackContext(req) {
          return __webpack_require__(webpackContextResolve(req));
        }
        function webpackContextResolve(req) {
          var id = map[req];
          if (!(id + 1))
            // check for number or string
            throw new Error("Cannot find module '" + req + "'.");
          return id;
        }
        webpackContext.keys = function webpackContextKeys() {
          return Object.keys(map);
        };
        webpackContext.resolve = webpackContextResolve;
        module.exports = webpackContext;
        webpackContext.id = 557;

        /***/
      },
      /* 558 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x0, 0x7f);

        /***/
      },
      /* 559 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x30, 0x39)
          .addRange(0x41, 0x46)
          .addRange(0x61, 0x66);

        /***/
      },
      /* 560 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xaa,
          0xb5,
          0xba,
          0x2ec,
          0x2ee,
          0x345,
          0x37f,
          0x386,
          0x38c,
          0x559,
          0x5bf,
          0x5c7,
          0x6ff,
          0x7fa,
          0x9b2,
          0x9ce,
          0x9d7,
          0x9fc,
          0xa51,
          0xa5e,
          0xad0,
          0xb71,
          0xb9c,
          0xbd0,
          0xbd7,
          0xcde,
          0xd4e,
          0xdbd,
          0xdd6,
          0xe4d,
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xec6,
          0xecd,
          0xf00,
          0x1038,
          0x108e,
          0x10c7,
          0x10cd,
          0x1258,
          0x12c0,
          0x135f,
          0x17d7,
          0x17dc,
          0x1aa7,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1fbe,
          0x2071,
          0x207f,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x2126,
          0x2128,
          0x214e,
          0x2d27,
          0x2d2d,
          0x2d6f,
          0x2e2f,
          0xa8c5,
          0xa8fb,
          0xa8fd,
          0xa9cf,
          0xaa7a,
          0xaac0,
          0xaac2,
          0xfb3e,
          0x10808,
          0x1083c,
          0x11176,
          0x111da,
          0x111dc,
          0x11237,
          0x1123e,
          0x11288,
          0x11350,
          0x11357,
          0x114c7,
          0x11640,
          0x11644,
          0x118ff,
          0x11c40,
          0x11d3a,
          0x11d43,
          0x1bc9e,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1e947,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e
        )
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x2c1)
          .addRange(0x2c6, 0x2d1)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x370, 0x374)
          .addRange(0x376, 0x377)
          .addRange(0x37a, 0x37d)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3f5)
          .addRange(0x3f7, 0x481)
          .addRange(0x48a, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x561, 0x587)
          .addRange(0x5b0, 0x5bd)
          .addRange(0x5c1, 0x5c2)
          .addRange(0x5c4, 0x5c5)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f2)
          .addRange(0x610, 0x61a)
          .addRange(0x620, 0x657)
          .addRange(0x659, 0x65f)
          .addRange(0x66e, 0x6d3)
          .addRange(0x6d5, 0x6dc)
          .addRange(0x6e1, 0x6e8)
          .addRange(0x6ed, 0x6ef)
          .addRange(0x6fa, 0x6fc)
          .addRange(0x710, 0x73f)
          .addRange(0x74d, 0x7b1)
          .addRange(0x7ca, 0x7ea)
          .addRange(0x7f4, 0x7f5)
          .addRange(0x800, 0x817)
          .addRange(0x81a, 0x82c)
          .addRange(0x840, 0x858)
          .addRange(0x860, 0x86a)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x8d4, 0x8df)
          .addRange(0x8e3, 0x8e9)
          .addRange(0x8f0, 0x93b)
          .addRange(0x93d, 0x94c)
          .addRange(0x94e, 0x950)
          .addRange(0x955, 0x963)
          .addRange(0x971, 0x983)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9bd, 0x9c4)
          .addRange(0x9c7, 0x9c8)
          .addRange(0x9cb, 0x9cc)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e3)
          .addRange(0x9f0, 0x9f1)
          .addRange(0xa01, 0xa03)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa3e, 0xa42)
          .addRange(0xa47, 0xa48)
          .addRange(0xa4b, 0xa4c)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa70, 0xa75)
          .addRange(0xa81, 0xa83)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xabd, 0xac5)
          .addRange(0xac7, 0xac9)
          .addRange(0xacb, 0xacc)
          .addRange(0xae0, 0xae3)
          .addRange(0xaf9, 0xafc)
          .addRange(0xb01, 0xb03)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb3d, 0xb44)
          .addRange(0xb47, 0xb48)
          .addRange(0xb4b, 0xb4c)
          .addRange(0xb56, 0xb57)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb63)
          .addRange(0xb82, 0xb83)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xbbe, 0xbc2)
          .addRange(0xbc6, 0xbc8)
          .addRange(0xbca, 0xbcc)
          .addRange(0xc00, 0xc03)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc3d, 0xc44)
          .addRange(0xc46, 0xc48)
          .addRange(0xc4a, 0xc4c)
          .addRange(0xc55, 0xc56)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc63)
          .addRange(0xc80, 0xc83)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xcbd, 0xcc4)
          .addRange(0xcc6, 0xcc8)
          .addRange(0xcca, 0xccc)
          .addRange(0xcd5, 0xcd6)
          .addRange(0xce0, 0xce3)
          .addRange(0xcf1, 0xcf2)
          .addRange(0xd00, 0xd03)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd3a)
          .addRange(0xd3d, 0xd44)
          .addRange(0xd46, 0xd48)
          .addRange(0xd4a, 0xd4c)
          .addRange(0xd54, 0xd57)
          .addRange(0xd5f, 0xd63)
          .addRange(0xd7a, 0xd7f)
          .addRange(0xd82, 0xd83)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xdcf, 0xdd4)
          .addRange(0xdd8, 0xddf)
          .addRange(0xdf2, 0xdf3)
          .addRange(0xe01, 0xe3a)
          .addRange(0xe40, 0xe46)
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb9)
          .addRange(0xebb, 0xebd)
          .addRange(0xec0, 0xec4)
          .addRange(0xedc, 0xedf)
          .addRange(0xf40, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf71, 0xf81)
          .addRange(0xf88, 0xf97)
          .addRange(0xf99, 0xfbc)
          .addRange(0x1000, 0x1036)
          .addRange(0x103b, 0x103f)
          .addRange(0x1050, 0x1062)
          .addRange(0x1065, 0x1068)
          .addRange(0x106e, 0x1086)
          .addRange(0x109c, 0x109d)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x10d0, 0x10fa)
          .addRange(0x10fc, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x1380, 0x138f)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1401, 0x166c)
          .addRange(0x166f, 0x167f)
          .addRange(0x1681, 0x169a)
          .addRange(0x16a0, 0x16ea)
          .addRange(0x16ee, 0x16f8)
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1713)
          .addRange(0x1720, 0x1733)
          .addRange(0x1740, 0x1753)
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1772, 0x1773)
          .addRange(0x1780, 0x17b3)
          .addRange(0x17b6, 0x17c8)
          .addRange(0x1820, 0x1877)
          .addRange(0x1880, 0x18aa)
          .addRange(0x18b0, 0x18f5)
          .addRange(0x1900, 0x191e)
          .addRange(0x1920, 0x192b)
          .addRange(0x1930, 0x1938)
          .addRange(0x1950, 0x196d)
          .addRange(0x1970, 0x1974)
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x1a00, 0x1a1b)
          .addRange(0x1a20, 0x1a5e)
          .addRange(0x1a61, 0x1a74)
          .addRange(0x1b00, 0x1b33)
          .addRange(0x1b35, 0x1b43)
          .addRange(0x1b45, 0x1b4b)
          .addRange(0x1b80, 0x1ba9)
          .addRange(0x1bac, 0x1baf)
          .addRange(0x1bba, 0x1be5)
          .addRange(0x1be7, 0x1bf1)
          .addRange(0x1c00, 0x1c35)
          .addRange(0x1c4d, 0x1c4f)
          .addRange(0x1c5a, 0x1c7d)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1ce9, 0x1cec)
          .addRange(0x1cee, 0x1cf3)
          .addRange(0x1cf5, 0x1cf6)
          .addRange(0x1d00, 0x1dbf)
          .addRange(0x1de7, 0x1df4)
          .addRange(0x1e00, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fbc)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fcc)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fe0, 0x1fec)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffc)
          .addRange(0x2090, 0x209c)
          .addRange(0x210a, 0x2113)
          .addRange(0x2119, 0x211d)
          .addRange(0x212a, 0x212d)
          .addRange(0x212f, 0x2139)
          .addRange(0x213c, 0x213f)
          .addRange(0x2145, 0x2149)
          .addRange(0x2160, 0x2188)
          .addRange(0x24b6, 0x24e9)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2ce4)
          .addRange(0x2ceb, 0x2cee)
          .addRange(0x2cf2, 0x2cf3)
          .addRange(0x2d00, 0x2d25)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d80, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0x2de0, 0x2dff)
          .addRange(0x3005, 0x3007)
          .addRange(0x3021, 0x3029)
          .addRange(0x3031, 0x3035)
          .addRange(0x3038, 0x303c)
          .addRange(0x3041, 0x3096)
          .addRange(0x309d, 0x309f)
          .addRange(0x30a1, 0x30fa)
          .addRange(0x30fc, 0x30ff)
          .addRange(0x3105, 0x312e)
          .addRange(0x3131, 0x318e)
          .addRange(0x31a0, 0x31ba)
          .addRange(0x31f0, 0x31ff)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xa000, 0xa48c)
          .addRange(0xa4d0, 0xa4fd)
          .addRange(0xa500, 0xa60c)
          .addRange(0xa610, 0xa61f)
          .addRange(0xa62a, 0xa62b)
          .addRange(0xa640, 0xa66e)
          .addRange(0xa674, 0xa67b)
          .addRange(0xa67f, 0xa6ef)
          .addRange(0xa717, 0xa71f)
          .addRange(0xa722, 0xa788)
          .addRange(0xa78b, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f7, 0xa801)
          .addRange(0xa803, 0xa805)
          .addRange(0xa807, 0xa80a)
          .addRange(0xa80c, 0xa827)
          .addRange(0xa840, 0xa873)
          .addRange(0xa880, 0xa8c3)
          .addRange(0xa8f2, 0xa8f7)
          .addRange(0xa90a, 0xa92a)
          .addRange(0xa930, 0xa952)
          .addRange(0xa960, 0xa97c)
          .addRange(0xa980, 0xa9b2)
          .addRange(0xa9b4, 0xa9bf)
          .addRange(0xa9e0, 0xa9e4)
          .addRange(0xa9e6, 0xa9ef)
          .addRange(0xa9fa, 0xa9fe)
          .addRange(0xaa00, 0xaa36)
          .addRange(0xaa40, 0xaa4d)
          .addRange(0xaa60, 0xaa76)
          .addRange(0xaa7e, 0xaabe)
          .addRange(0xaadb, 0xaadd)
          .addRange(0xaae0, 0xaaef)
          .addRange(0xaaf2, 0xaaf5)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab5c, 0xab65)
          .addRange(0xab70, 0xabea)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xfb1d, 0xfb28)
          .addRange(0xfb2a, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfbb1)
          .addRange(0xfbd3, 0xfd3d)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdfb)
          .addRange(0xfe70, 0xfe74)
          .addRange(0xfe76, 0xfefc)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a)
          .addRange(0xff66, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc)
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa)
          .addRange(0x10140, 0x10174)
          .addRange(0x10280, 0x1029c)
          .addRange(0x102a0, 0x102d0)
          .addRange(0x10300, 0x1031f)
          .addRange(0x1032d, 0x1034a)
          .addRange(0x10350, 0x1037a)
          .addRange(0x10380, 0x1039d)
          .addRange(0x103a0, 0x103c3)
          .addRange(0x103c8, 0x103cf)
          .addRange(0x103d1, 0x103d5)
          .addRange(0x10400, 0x1049d)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10500, 0x10527)
          .addRange(0x10530, 0x10563)
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838)
          .addRange(0x1083f, 0x10855)
          .addRange(0x10860, 0x10876)
          .addRange(0x10880, 0x1089e)
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x10900, 0x10915)
          .addRange(0x10920, 0x10939)
          .addRange(0x10980, 0x109b7)
          .addRange(0x109be, 0x109bf)
          .addRange(0x10a00, 0x10a03)
          .addRange(0x10a05, 0x10a06)
          .addRange(0x10a0c, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a60, 0x10a7c)
          .addRange(0x10a80, 0x10a9c)
          .addRange(0x10ac0, 0x10ac7)
          .addRange(0x10ac9, 0x10ae4)
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b40, 0x10b55)
          .addRange(0x10b60, 0x10b72)
          .addRange(0x10b80, 0x10b91)
          .addRange(0x10c00, 0x10c48)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x11000, 0x11045)
          .addRange(0x11082, 0x110b8)
          .addRange(0x110d0, 0x110e8)
          .addRange(0x11100, 0x11132)
          .addRange(0x11150, 0x11172)
          .addRange(0x11180, 0x111bf)
          .addRange(0x111c1, 0x111c4)
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x11234)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a8)
          .addRange(0x112b0, 0x112e8)
          .addRange(0x11300, 0x11303)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x1133d, 0x11344)
          .addRange(0x11347, 0x11348)
          .addRange(0x1134b, 0x1134c)
          .addRange(0x1135d, 0x11363)
          .addRange(0x11400, 0x11441)
          .addRange(0x11443, 0x11445)
          .addRange(0x11447, 0x1144a)
          .addRange(0x11480, 0x114c1)
          .addRange(0x114c4, 0x114c5)
          .addRange(0x11580, 0x115b5)
          .addRange(0x115b8, 0x115be)
          .addRange(0x115d8, 0x115dd)
          .addRange(0x11600, 0x1163e)
          .addRange(0x11680, 0x116b5)
          .addRange(0x11700, 0x11719)
          .addRange(0x1171d, 0x1172a)
          .addRange(0x118a0, 0x118df)
          .addRange(0x11a00, 0x11a32)
          .addRange(0x11a35, 0x11a3e)
          .addRange(0x11a50, 0x11a83)
          .addRange(0x11a86, 0x11a97)
          .addRange(0x11ac0, 0x11af8)
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c36)
          .addRange(0x11c38, 0x11c3e)
          .addRange(0x11c72, 0x11c8f)
          .addRange(0x11c92, 0x11ca7)
          .addRange(0x11ca9, 0x11cb6)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d36)
          .addRange(0x11d3c, 0x11d3d)
          .addRange(0x11d3f, 0x11d41)
          .addRange(0x11d46, 0x11d47)
          .addRange(0x12000, 0x12399)
          .addRange(0x12400, 0x1246e)
          .addRange(0x12480, 0x12543)
          .addRange(0x13000, 0x1342e)
          .addRange(0x14400, 0x14646)
          .addRange(0x16800, 0x16a38)
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16b00, 0x16b36)
          .addRange(0x16b40, 0x16b43)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f)
          .addRange(0x16f00, 0x16f44)
          .addRange(0x16f50, 0x16f7e)
          .addRange(0x16f93, 0x16f9f)
          .addRange(0x16fe0, 0x16fe1)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2)
          .addRange(0x1b000, 0x1b11e)
          .addRange(0x1b170, 0x1b2fb)
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d6c0)
          .addRange(0x1d6c2, 0x1d6da)
          .addRange(0x1d6dc, 0x1d6fa)
          .addRange(0x1d6fc, 0x1d714)
          .addRange(0x1d716, 0x1d734)
          .addRange(0x1d736, 0x1d74e)
          .addRange(0x1d750, 0x1d76e)
          .addRange(0x1d770, 0x1d788)
          .addRange(0x1d78a, 0x1d7a8)
          .addRange(0x1d7aa, 0x1d7c2)
          .addRange(0x1d7c4, 0x1d7cb)
          .addRange(0x1e000, 0x1e006)
          .addRange(0x1e008, 0x1e018)
          .addRange(0x1e01b, 0x1e021)
          .addRange(0x1e023, 0x1e024)
          .addRange(0x1e026, 0x1e02a)
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1e900, 0x1e943)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x1f130, 0x1f149)
          .addRange(0x1f150, 0x1f169)
          .addRange(0x1f170, 0x1f189)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d);

        /***/
      },
      /* 561 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x0, 0x10ffff);

        /***/
      },
      /* 562 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x38c,
          0x85e,
          0x9b2,
          0x9d7,
          0xa3c,
          0xa51,
          0xa5e,
          0xad0,
          0xb9c,
          0xbd0,
          0xbd7,
          0xcde,
          0xdbd,
          0xdca,
          0xdd6,
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xec6,
          0x10c7,
          0x10cd,
          0x1258,
          0x12c0,
          0x1940,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x2d27,
          0x2d2d,
          0xfb3e,
          0xfeff,
          0x101a0,
          0x1056f,
          0x10808,
          0x1083c,
          0x1093f,
          0x11288,
          0x11350,
          0x11357,
          0x1145b,
          0x1145d,
          0x118ff,
          0x11d3a,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e,
          0x1f9c0,
          0xe0001
        )
          .addRange(0x0, 0x377)
          .addRange(0x37a, 0x37f)
          .addRange(0x384, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x559, 0x55f)
          .addRange(0x561, 0x587)
          .addRange(0x589, 0x58a)
          .addRange(0x58d, 0x58f)
          .addRange(0x591, 0x5c7)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f4)
          .addRange(0x600, 0x61c)
          .addRange(0x61e, 0x70d)
          .addRange(0x70f, 0x74a)
          .addRange(0x74d, 0x7b1)
          .addRange(0x7c0, 0x7fa)
          .addRange(0x800, 0x82d)
          .addRange(0x830, 0x83e)
          .addRange(0x840, 0x85b)
          .addRange(0x860, 0x86a)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x8d4, 0x983)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9bc, 0x9c4)
          .addRange(0x9c7, 0x9c8)
          .addRange(0x9cb, 0x9ce)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e3)
          .addRange(0x9e6, 0x9fd)
          .addRange(0xa01, 0xa03)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa3e, 0xa42)
          .addRange(0xa47, 0xa48)
          .addRange(0xa4b, 0xa4d)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa66, 0xa75)
          .addRange(0xa81, 0xa83)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xabc, 0xac5)
          .addRange(0xac7, 0xac9)
          .addRange(0xacb, 0xacd)
          .addRange(0xae0, 0xae3)
          .addRange(0xae6, 0xaf1)
          .addRange(0xaf9, 0xaff)
          .addRange(0xb01, 0xb03)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb3c, 0xb44)
          .addRange(0xb47, 0xb48)
          .addRange(0xb4b, 0xb4d)
          .addRange(0xb56, 0xb57)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb63)
          .addRange(0xb66, 0xb77)
          .addRange(0xb82, 0xb83)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xbbe, 0xbc2)
          .addRange(0xbc6, 0xbc8)
          .addRange(0xbca, 0xbcd)
          .addRange(0xbe6, 0xbfa)
          .addRange(0xc00, 0xc03)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc3d, 0xc44)
          .addRange(0xc46, 0xc48)
          .addRange(0xc4a, 0xc4d)
          .addRange(0xc55, 0xc56)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc63)
          .addRange(0xc66, 0xc6f)
          .addRange(0xc78, 0xc83)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xcbc, 0xcc4)
          .addRange(0xcc6, 0xcc8)
          .addRange(0xcca, 0xccd)
          .addRange(0xcd5, 0xcd6)
          .addRange(0xce0, 0xce3)
          .addRange(0xce6, 0xcef)
          .addRange(0xcf1, 0xcf2)
          .addRange(0xd00, 0xd03)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd44)
          .addRange(0xd46, 0xd48)
          .addRange(0xd4a, 0xd4f)
          .addRange(0xd54, 0xd63)
          .addRange(0xd66, 0xd7f)
          .addRange(0xd82, 0xd83)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xdcf, 0xdd4)
          .addRange(0xdd8, 0xddf)
          .addRange(0xde6, 0xdef)
          .addRange(0xdf2, 0xdf4)
          .addRange(0xe01, 0xe3a)
          .addRange(0xe3f, 0xe5b)
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb9)
          .addRange(0xebb, 0xebd)
          .addRange(0xec0, 0xec4)
          .addRange(0xec8, 0xecd)
          .addRange(0xed0, 0xed9)
          .addRange(0xedc, 0xedf)
          .addRange(0xf00, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf71, 0xf97)
          .addRange(0xf99, 0xfbc)
          .addRange(0xfbe, 0xfcc)
          .addRange(0xfce, 0xfda)
          .addRange(0x1000, 0x10c5)
          .addRange(0x10d0, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x135d, 0x137c)
          .addRange(0x1380, 0x1399)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1400, 0x169c)
          .addRange(0x16a0, 0x16f8)
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1714)
          .addRange(0x1720, 0x1736)
          .addRange(0x1740, 0x1753)
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1772, 0x1773)
          .addRange(0x1780, 0x17dd)
          .addRange(0x17e0, 0x17e9)
          .addRange(0x17f0, 0x17f9)
          .addRange(0x1800, 0x180e)
          .addRange(0x1810, 0x1819)
          .addRange(0x1820, 0x1877)
          .addRange(0x1880, 0x18aa)
          .addRange(0x18b0, 0x18f5)
          .addRange(0x1900, 0x191e)
          .addRange(0x1920, 0x192b)
          .addRange(0x1930, 0x193b)
          .addRange(0x1944, 0x196d)
          .addRange(0x1970, 0x1974)
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x19d0, 0x19da)
          .addRange(0x19de, 0x1a1b)
          .addRange(0x1a1e, 0x1a5e)
          .addRange(0x1a60, 0x1a7c)
          .addRange(0x1a7f, 0x1a89)
          .addRange(0x1a90, 0x1a99)
          .addRange(0x1aa0, 0x1aad)
          .addRange(0x1ab0, 0x1abe)
          .addRange(0x1b00, 0x1b4b)
          .addRange(0x1b50, 0x1b7c)
          .addRange(0x1b80, 0x1bf3)
          .addRange(0x1bfc, 0x1c37)
          .addRange(0x1c3b, 0x1c49)
          .addRange(0x1c4d, 0x1c88)
          .addRange(0x1cc0, 0x1cc7)
          .addRange(0x1cd0, 0x1cf9)
          .addRange(0x1d00, 0x1df9)
          .addRange(0x1dfb, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fc4)
          .addRange(0x1fc6, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fdd, 0x1fef)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffe)
          .addRange(0x2000, 0x2064)
          .addRange(0x2066, 0x2071)
          .addRange(0x2074, 0x208e)
          .addRange(0x2090, 0x209c)
          .addRange(0x20a0, 0x20bf)
          .addRange(0x20d0, 0x20f0)
          .addRange(0x2100, 0x218b)
          .addRange(0x2190, 0x2426)
          .addRange(0x2440, 0x244a)
          .addRange(0x2460, 0x2b73)
          .addRange(0x2b76, 0x2b95)
          .addRange(0x2b98, 0x2bb9)
          .addRange(0x2bbd, 0x2bc8)
          .addRange(0x2bca, 0x2bd2)
          .addRange(0x2bec, 0x2bef)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2cf3)
          .addRange(0x2cf9, 0x2d25)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d6f, 0x2d70)
          .addRange(0x2d7f, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0x2de0, 0x2e49)
          .addRange(0x2e80, 0x2e99)
          .addRange(0x2e9b, 0x2ef3)
          .addRange(0x2f00, 0x2fd5)
          .addRange(0x2ff0, 0x2ffb)
          .addRange(0x3000, 0x303f)
          .addRange(0x3041, 0x3096)
          .addRange(0x3099, 0x30ff)
          .addRange(0x3105, 0x312e)
          .addRange(0x3131, 0x318e)
          .addRange(0x3190, 0x31ba)
          .addRange(0x31c0, 0x31e3)
          .addRange(0x31f0, 0x321e)
          .addRange(0x3220, 0x32fe)
          .addRange(0x3300, 0x4db5)
          .addRange(0x4dc0, 0x9fea)
          .addRange(0xa000, 0xa48c)
          .addRange(0xa490, 0xa4c6)
          .addRange(0xa4d0, 0xa62b)
          .addRange(0xa640, 0xa6f7)
          .addRange(0xa700, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f7, 0xa82b)
          .addRange(0xa830, 0xa839)
          .addRange(0xa840, 0xa877)
          .addRange(0xa880, 0xa8c5)
          .addRange(0xa8ce, 0xa8d9)
          .addRange(0xa8e0, 0xa8fd)
          .addRange(0xa900, 0xa953)
          .addRange(0xa95f, 0xa97c)
          .addRange(0xa980, 0xa9cd)
          .addRange(0xa9cf, 0xa9d9)
          .addRange(0xa9de, 0xa9fe)
          .addRange(0xaa00, 0xaa36)
          .addRange(0xaa40, 0xaa4d)
          .addRange(0xaa50, 0xaa59)
          .addRange(0xaa5c, 0xaac2)
          .addRange(0xaadb, 0xaaf6)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e)
          .addRange(0xab30, 0xab65)
          .addRange(0xab70, 0xabed)
          .addRange(0xabf0, 0xabf9)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xd800, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xfb1d, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfbc1)
          .addRange(0xfbd3, 0xfd3f)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdfd)
          .addRange(0xfe00, 0xfe19)
          .addRange(0xfe20, 0xfe52)
          .addRange(0xfe54, 0xfe66)
          .addRange(0xfe68, 0xfe6b)
          .addRange(0xfe70, 0xfe74)
          .addRange(0xfe76, 0xfefc)
          .addRange(0xff01, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc)
          .addRange(0xffe0, 0xffe6)
          .addRange(0xffe8, 0xffee)
          .addRange(0xfff9, 0xfffd)
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa)
          .addRange(0x10100, 0x10102)
          .addRange(0x10107, 0x10133)
          .addRange(0x10137, 0x1018e)
          .addRange(0x10190, 0x1019b)
          .addRange(0x101d0, 0x101fd)
          .addRange(0x10280, 0x1029c)
          .addRange(0x102a0, 0x102d0)
          .addRange(0x102e0, 0x102fb)
          .addRange(0x10300, 0x10323)
          .addRange(0x1032d, 0x1034a)
          .addRange(0x10350, 0x1037a)
          .addRange(0x10380, 0x1039d)
          .addRange(0x1039f, 0x103c3)
          .addRange(0x103c8, 0x103d5)
          .addRange(0x10400, 0x1049d)
          .addRange(0x104a0, 0x104a9)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10500, 0x10527)
          .addRange(0x10530, 0x10563)
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838)
          .addRange(0x1083f, 0x10855)
          .addRange(0x10857, 0x1089e)
          .addRange(0x108a7, 0x108af)
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x108fb, 0x1091b)
          .addRange(0x1091f, 0x10939)
          .addRange(0x10980, 0x109b7)
          .addRange(0x109bc, 0x109cf)
          .addRange(0x109d2, 0x10a03)
          .addRange(0x10a05, 0x10a06)
          .addRange(0x10a0c, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a38, 0x10a3a)
          .addRange(0x10a3f, 0x10a47)
          .addRange(0x10a50, 0x10a58)
          .addRange(0x10a60, 0x10a9f)
          .addRange(0x10ac0, 0x10ae6)
          .addRange(0x10aeb, 0x10af6)
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b39, 0x10b55)
          .addRange(0x10b58, 0x10b72)
          .addRange(0x10b78, 0x10b91)
          .addRange(0x10b99, 0x10b9c)
          .addRange(0x10ba9, 0x10baf)
          .addRange(0x10c00, 0x10c48)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x10cfa, 0x10cff)
          .addRange(0x10e60, 0x10e7e)
          .addRange(0x11000, 0x1104d)
          .addRange(0x11052, 0x1106f)
          .addRange(0x1107f, 0x110c1)
          .addRange(0x110d0, 0x110e8)
          .addRange(0x110f0, 0x110f9)
          .addRange(0x11100, 0x11134)
          .addRange(0x11136, 0x11143)
          .addRange(0x11150, 0x11176)
          .addRange(0x11180, 0x111cd)
          .addRange(0x111d0, 0x111df)
          .addRange(0x111e1, 0x111f4)
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x1123e)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a9)
          .addRange(0x112b0, 0x112ea)
          .addRange(0x112f0, 0x112f9)
          .addRange(0x11300, 0x11303)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x1133c, 0x11344)
          .addRange(0x11347, 0x11348)
          .addRange(0x1134b, 0x1134d)
          .addRange(0x1135d, 0x11363)
          .addRange(0x11366, 0x1136c)
          .addRange(0x11370, 0x11374)
          .addRange(0x11400, 0x11459)
          .addRange(0x11480, 0x114c7)
          .addRange(0x114d0, 0x114d9)
          .addRange(0x11580, 0x115b5)
          .addRange(0x115b8, 0x115dd)
          .addRange(0x11600, 0x11644)
          .addRange(0x11650, 0x11659)
          .addRange(0x11660, 0x1166c)
          .addRange(0x11680, 0x116b7)
          .addRange(0x116c0, 0x116c9)
          .addRange(0x11700, 0x11719)
          .addRange(0x1171d, 0x1172b)
          .addRange(0x11730, 0x1173f)
          .addRange(0x118a0, 0x118f2)
          .addRange(0x11a00, 0x11a47)
          .addRange(0x11a50, 0x11a83)
          .addRange(0x11a86, 0x11a9c)
          .addRange(0x11a9e, 0x11aa2)
          .addRange(0x11ac0, 0x11af8)
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c36)
          .addRange(0x11c38, 0x11c45)
          .addRange(0x11c50, 0x11c6c)
          .addRange(0x11c70, 0x11c8f)
          .addRange(0x11c92, 0x11ca7)
          .addRange(0x11ca9, 0x11cb6)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d36)
          .addRange(0x11d3c, 0x11d3d)
          .addRange(0x11d3f, 0x11d47)
          .addRange(0x11d50, 0x11d59)
          .addRange(0x12000, 0x12399)
          .addRange(0x12400, 0x1246e)
          .addRange(0x12470, 0x12474)
          .addRange(0x12480, 0x12543)
          .addRange(0x13000, 0x1342e)
          .addRange(0x14400, 0x14646)
          .addRange(0x16800, 0x16a38)
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16a60, 0x16a69)
          .addRange(0x16a6e, 0x16a6f)
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16af0, 0x16af5)
          .addRange(0x16b00, 0x16b45)
          .addRange(0x16b50, 0x16b59)
          .addRange(0x16b5b, 0x16b61)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f)
          .addRange(0x16f00, 0x16f44)
          .addRange(0x16f50, 0x16f7e)
          .addRange(0x16f8f, 0x16f9f)
          .addRange(0x16fe0, 0x16fe1)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2)
          .addRange(0x1b000, 0x1b11e)
          .addRange(0x1b170, 0x1b2fb)
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1bc9c, 0x1bca3)
          .addRange(0x1d000, 0x1d0f5)
          .addRange(0x1d100, 0x1d126)
          .addRange(0x1d129, 0x1d1e8)
          .addRange(0x1d200, 0x1d245)
          .addRange(0x1d300, 0x1d356)
          .addRange(0x1d360, 0x1d371)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d7cb)
          .addRange(0x1d7ce, 0x1da8b)
          .addRange(0x1da9b, 0x1da9f)
          .addRange(0x1daa1, 0x1daaf)
          .addRange(0x1e000, 0x1e006)
          .addRange(0x1e008, 0x1e018)
          .addRange(0x1e01b, 0x1e021)
          .addRange(0x1e023, 0x1e024)
          .addRange(0x1e026, 0x1e02a)
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1e8c7, 0x1e8d6)
          .addRange(0x1e900, 0x1e94a)
          .addRange(0x1e950, 0x1e959)
          .addRange(0x1e95e, 0x1e95f)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x1eef0, 0x1eef1)
          .addRange(0x1f000, 0x1f02b)
          .addRange(0x1f030, 0x1f093)
          .addRange(0x1f0a0, 0x1f0ae)
          .addRange(0x1f0b1, 0x1f0bf)
          .addRange(0x1f0c1, 0x1f0cf)
          .addRange(0x1f0d1, 0x1f0f5)
          .addRange(0x1f100, 0x1f10c)
          .addRange(0x1f110, 0x1f12e)
          .addRange(0x1f130, 0x1f16b)
          .addRange(0x1f170, 0x1f1ac)
          .addRange(0x1f1e6, 0x1f202)
          .addRange(0x1f210, 0x1f23b)
          .addRange(0x1f240, 0x1f248)
          .addRange(0x1f250, 0x1f251)
          .addRange(0x1f260, 0x1f265)
          .addRange(0x1f300, 0x1f6d4)
          .addRange(0x1f6e0, 0x1f6ec)
          .addRange(0x1f6f0, 0x1f6f8)
          .addRange(0x1f700, 0x1f773)
          .addRange(0x1f780, 0x1f7d4)
          .addRange(0x1f800, 0x1f80b)
          .addRange(0x1f810, 0x1f847)
          .addRange(0x1f850, 0x1f859)
          .addRange(0x1f860, 0x1f887)
          .addRange(0x1f890, 0x1f8ad)
          .addRange(0x1f900, 0x1f90b)
          .addRange(0x1f910, 0x1f93e)
          .addRange(0x1f940, 0x1f94c)
          .addRange(0x1f950, 0x1f96b)
          .addRange(0x1f980, 0x1f997)
          .addRange(0x1f9d0, 0x1f9e6)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d)
          .addRange(0xe0020, 0xe007f)
          .addRange(0xe0100, 0xe01ef)
          .addRange(0xf0000, 0xffffd)
          .addRange(0x100000, 0x10fffd);

        /***/
      },
      /* 563 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x61c)
          .addRange(0x200e, 0x200f)
          .addRange(0x202a, 0x202e)
          .addRange(0x2066, 0x2069);

        /***/
      },
      /* 564 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x3c,
          0x3e,
          0x5b,
          0x5d,
          0x7b,
          0x7d,
          0xab,
          0xbb,
          0x2140,
          0x2211,
          0x2224,
          0x2226,
          0x2239,
          0x2262,
          0x2298,
          0x27c0,
          0x29b8,
          0x29c9,
          0x29e1,
          0x2a24,
          0x2a26,
          0x2a29,
          0x2adc,
          0x2ade,
          0x2af3,
          0x2afd,
          0xff1c,
          0xff1e,
          0xff3b,
          0xff3d,
          0xff5b,
          0xff5d,
          0x1d6db,
          0x1d715,
          0x1d74f,
          0x1d789,
          0x1d7c3
        )
          .addRange(0x28, 0x29)
          .addRange(0xf3a, 0xf3d)
          .addRange(0x169b, 0x169c)
          .addRange(0x2039, 0x203a)
          .addRange(0x2045, 0x2046)
          .addRange(0x207d, 0x207e)
          .addRange(0x208d, 0x208e)
          .addRange(0x2201, 0x2204)
          .addRange(0x2208, 0x220d)
          .addRange(0x2215, 0x2216)
          .addRange(0x221a, 0x221d)
          .addRange(0x221f, 0x2222)
          .addRange(0x222b, 0x2233)
          .addRange(0x223b, 0x224c)
          .addRange(0x2252, 0x2255)
          .addRange(0x225f, 0x2260)
          .addRange(0x2264, 0x226b)
          .addRange(0x226e, 0x228c)
          .addRange(0x228f, 0x2292)
          .addRange(0x22a2, 0x22a3)
          .addRange(0x22a6, 0x22b8)
          .addRange(0x22be, 0x22bf)
          .addRange(0x22c9, 0x22cd)
          .addRange(0x22d0, 0x22d1)
          .addRange(0x22d6, 0x22ed)
          .addRange(0x22f0, 0x22ff)
          .addRange(0x2308, 0x230b)
          .addRange(0x2320, 0x2321)
          .addRange(0x2329, 0x232a)
          .addRange(0x2768, 0x2775)
          .addRange(0x27c3, 0x27c6)
          .addRange(0x27c8, 0x27c9)
          .addRange(0x27cb, 0x27cd)
          .addRange(0x27d3, 0x27d6)
          .addRange(0x27dc, 0x27de)
          .addRange(0x27e2, 0x27ef)
          .addRange(0x2983, 0x2998)
          .addRange(0x299b, 0x29af)
          .addRange(0x29c0, 0x29c5)
          .addRange(0x29ce, 0x29d2)
          .addRange(0x29d4, 0x29d5)
          .addRange(0x29d8, 0x29dc)
          .addRange(0x29e3, 0x29e5)
          .addRange(0x29e8, 0x29e9)
          .addRange(0x29f4, 0x29f9)
          .addRange(0x29fc, 0x29fd)
          .addRange(0x2a0a, 0x2a1c)
          .addRange(0x2a1e, 0x2a21)
          .addRange(0x2a2b, 0x2a2e)
          .addRange(0x2a34, 0x2a35)
          .addRange(0x2a3c, 0x2a3e)
          .addRange(0x2a57, 0x2a58)
          .addRange(0x2a64, 0x2a65)
          .addRange(0x2a6a, 0x2a6d)
          .addRange(0x2a6f, 0x2a70)
          .addRange(0x2a73, 0x2a74)
          .addRange(0x2a79, 0x2aa3)
          .addRange(0x2aa6, 0x2aad)
          .addRange(0x2aaf, 0x2ad6)
          .addRange(0x2ae2, 0x2ae6)
          .addRange(0x2aec, 0x2aee)
          .addRange(0x2af7, 0x2afb)
          .addRange(0x2e02, 0x2e05)
          .addRange(0x2e09, 0x2e0a)
          .addRange(0x2e0c, 0x2e0d)
          .addRange(0x2e1c, 0x2e1d)
          .addRange(0x2e20, 0x2e29)
          .addRange(0x3008, 0x3011)
          .addRange(0x3014, 0x301b)
          .addRange(0xfe59, 0xfe5e)
          .addRange(0xfe64, 0xfe65)
          .addRange(0xff08, 0xff09)
          .addRange(0xff5f, 0xff60)
          .addRange(0xff62, 0xff63);

        /***/
      },
      /* 565 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x27,
          0x2e,
          0x3a,
          0x5e,
          0x60,
          0xa8,
          0xad,
          0xaf,
          0xb4,
          0x37a,
          0x387,
          0x559,
          0x5bf,
          0x5c7,
          0x5f4,
          0x61c,
          0x640,
          0x670,
          0x70f,
          0x711,
          0x7fa,
          0x93a,
          0x93c,
          0x94d,
          0x971,
          0x981,
          0x9bc,
          0x9cd,
          0xa3c,
          0xa51,
          0xa75,
          0xabc,
          0xacd,
          0xb01,
          0xb3c,
          0xb3f,
          0xb4d,
          0xb56,
          0xb82,
          0xbc0,
          0xbcd,
          0xc00,
          0xc81,
          0xcbc,
          0xcbf,
          0xcc6,
          0xd4d,
          0xdca,
          0xdd6,
          0xe31,
          0xeb1,
          0xec6,
          0xf35,
          0xf37,
          0xf39,
          0xfc6,
          0x1082,
          0x108d,
          0x109d,
          0x10fc,
          0x17c6,
          0x17d7,
          0x17dd,
          0x1843,
          0x18a9,
          0x1932,
          0x1a1b,
          0x1a56,
          0x1a60,
          0x1a62,
          0x1a7f,
          0x1aa7,
          0x1b34,
          0x1b3c,
          0x1b42,
          0x1be6,
          0x1bed,
          0x1ced,
          0x1cf4,
          0x1d78,
          0x1fbd,
          0x2024,
          0x2027,
          0x2071,
          0x207f,
          0x2d6f,
          0x2d7f,
          0x2e2f,
          0x3005,
          0x303b,
          0xa015,
          0xa60c,
          0xa67f,
          0xa770,
          0xa802,
          0xa806,
          0xa80b,
          0xa9b3,
          0xa9bc,
          0xa9cf,
          0xaa43,
          0xaa4c,
          0xaa70,
          0xaa7c,
          0xaab0,
          0xaac1,
          0xaadd,
          0xaaf6,
          0xabe5,
          0xabe8,
          0xabed,
          0xfb1e,
          0xfe13,
          0xfe52,
          0xfe55,
          0xfeff,
          0xff07,
          0xff0e,
          0xff1a,
          0xff3e,
          0xff40,
          0xff70,
          0xffe3,
          0x101fd,
          0x102e0,
          0x10a3f,
          0x11001,
          0x110bd,
          0x11173,
          0x11234,
          0x1123e,
          0x112df,
          0x1133c,
          0x11340,
          0x11446,
          0x114ba,
          0x1163d,
          0x116ab,
          0x116ad,
          0x116b7,
          0x11a47,
          0x11c3f,
          0x11d3a,
          0x11d47,
          0x1da75,
          0x1da84,
          0xe0001
        )
          .addRange(0xb7, 0xb8)
          .addRange(0x2b0, 0x36f)
          .addRange(0x374, 0x375)
          .addRange(0x384, 0x385)
          .addRange(0x483, 0x489)
          .addRange(0x591, 0x5bd)
          .addRange(0x5c1, 0x5c2)
          .addRange(0x5c4, 0x5c5)
          .addRange(0x600, 0x605)
          .addRange(0x610, 0x61a)
          .addRange(0x64b, 0x65f)
          .addRange(0x6d6, 0x6dd)
          .addRange(0x6df, 0x6e8)
          .addRange(0x6ea, 0x6ed)
          .addRange(0x730, 0x74a)
          .addRange(0x7a6, 0x7b0)
          .addRange(0x7eb, 0x7f5)
          .addRange(0x816, 0x82d)
          .addRange(0x859, 0x85b)
          .addRange(0x8d4, 0x902)
          .addRange(0x941, 0x948)
          .addRange(0x951, 0x957)
          .addRange(0x962, 0x963)
          .addRange(0x9c1, 0x9c4)
          .addRange(0x9e2, 0x9e3)
          .addRange(0xa01, 0xa02)
          .addRange(0xa41, 0xa42)
          .addRange(0xa47, 0xa48)
          .addRange(0xa4b, 0xa4d)
          .addRange(0xa70, 0xa71)
          .addRange(0xa81, 0xa82)
          .addRange(0xac1, 0xac5)
          .addRange(0xac7, 0xac8)
          .addRange(0xae2, 0xae3)
          .addRange(0xafa, 0xaff)
          .addRange(0xb41, 0xb44)
          .addRange(0xb62, 0xb63)
          .addRange(0xc3e, 0xc40)
          .addRange(0xc46, 0xc48)
          .addRange(0xc4a, 0xc4d)
          .addRange(0xc55, 0xc56)
          .addRange(0xc62, 0xc63)
          .addRange(0xccc, 0xccd)
          .addRange(0xce2, 0xce3)
          .addRange(0xd00, 0xd01)
          .addRange(0xd3b, 0xd3c)
          .addRange(0xd41, 0xd44)
          .addRange(0xd62, 0xd63)
          .addRange(0xdd2, 0xdd4)
          .addRange(0xe34, 0xe3a)
          .addRange(0xe46, 0xe4e)
          .addRange(0xeb4, 0xeb9)
          .addRange(0xebb, 0xebc)
          .addRange(0xec8, 0xecd)
          .addRange(0xf18, 0xf19)
          .addRange(0xf71, 0xf7e)
          .addRange(0xf80, 0xf84)
          .addRange(0xf86, 0xf87)
          .addRange(0xf8d, 0xf97)
          .addRange(0xf99, 0xfbc)
          .addRange(0x102d, 0x1030)
          .addRange(0x1032, 0x1037)
          .addRange(0x1039, 0x103a)
          .addRange(0x103d, 0x103e)
          .addRange(0x1058, 0x1059)
          .addRange(0x105e, 0x1060)
          .addRange(0x1071, 0x1074)
          .addRange(0x1085, 0x1086)
          .addRange(0x135d, 0x135f)
          .addRange(0x1712, 0x1714)
          .addRange(0x1732, 0x1734)
          .addRange(0x1752, 0x1753)
          .addRange(0x1772, 0x1773)
          .addRange(0x17b4, 0x17b5)
          .addRange(0x17b7, 0x17bd)
          .addRange(0x17c9, 0x17d3)
          .addRange(0x180b, 0x180e)
          .addRange(0x1885, 0x1886)
          .addRange(0x1920, 0x1922)
          .addRange(0x1927, 0x1928)
          .addRange(0x1939, 0x193b)
          .addRange(0x1a17, 0x1a18)
          .addRange(0x1a58, 0x1a5e)
          .addRange(0x1a65, 0x1a6c)
          .addRange(0x1a73, 0x1a7c)
          .addRange(0x1ab0, 0x1abe)
          .addRange(0x1b00, 0x1b03)
          .addRange(0x1b36, 0x1b3a)
          .addRange(0x1b6b, 0x1b73)
          .addRange(0x1b80, 0x1b81)
          .addRange(0x1ba2, 0x1ba5)
          .addRange(0x1ba8, 0x1ba9)
          .addRange(0x1bab, 0x1bad)
          .addRange(0x1be8, 0x1be9)
          .addRange(0x1bef, 0x1bf1)
          .addRange(0x1c2c, 0x1c33)
          .addRange(0x1c36, 0x1c37)
          .addRange(0x1c78, 0x1c7d)
          .addRange(0x1cd0, 0x1cd2)
          .addRange(0x1cd4, 0x1ce0)
          .addRange(0x1ce2, 0x1ce8)
          .addRange(0x1cf8, 0x1cf9)
          .addRange(0x1d2c, 0x1d6a)
          .addRange(0x1d9b, 0x1df9)
          .addRange(0x1dfb, 0x1dff)
          .addRange(0x1fbf, 0x1fc1)
          .addRange(0x1fcd, 0x1fcf)
          .addRange(0x1fdd, 0x1fdf)
          .addRange(0x1fed, 0x1fef)
          .addRange(0x1ffd, 0x1ffe)
          .addRange(0x200b, 0x200f)
          .addRange(0x2018, 0x2019)
          .addRange(0x202a, 0x202e)
          .addRange(0x2060, 0x2064)
          .addRange(0x2066, 0x206f)
          .addRange(0x2090, 0x209c)
          .addRange(0x20d0, 0x20f0)
          .addRange(0x2c7c, 0x2c7d)
          .addRange(0x2cef, 0x2cf1)
          .addRange(0x2de0, 0x2dff)
          .addRange(0x302a, 0x302d)
          .addRange(0x3031, 0x3035)
          .addRange(0x3099, 0x309e)
          .addRange(0x30fc, 0x30fe)
          .addRange(0xa4f8, 0xa4fd)
          .addRange(0xa66f, 0xa672)
          .addRange(0xa674, 0xa67d)
          .addRange(0xa69c, 0xa69f)
          .addRange(0xa6f0, 0xa6f1)
          .addRange(0xa700, 0xa721)
          .addRange(0xa788, 0xa78a)
          .addRange(0xa7f8, 0xa7f9)
          .addRange(0xa825, 0xa826)
          .addRange(0xa8c4, 0xa8c5)
          .addRange(0xa8e0, 0xa8f1)
          .addRange(0xa926, 0xa92d)
          .addRange(0xa947, 0xa951)
          .addRange(0xa980, 0xa982)
          .addRange(0xa9b6, 0xa9b9)
          .addRange(0xa9e5, 0xa9e6)
          .addRange(0xaa29, 0xaa2e)
          .addRange(0xaa31, 0xaa32)
          .addRange(0xaa35, 0xaa36)
          .addRange(0xaab2, 0xaab4)
          .addRange(0xaab7, 0xaab8)
          .addRange(0xaabe, 0xaabf)
          .addRange(0xaaec, 0xaaed)
          .addRange(0xaaf3, 0xaaf4)
          .addRange(0xab5b, 0xab5f)
          .addRange(0xfbb2, 0xfbc1)
          .addRange(0xfe00, 0xfe0f)
          .addRange(0xfe20, 0xfe2f)
          .addRange(0xff9e, 0xff9f)
          .addRange(0xfff9, 0xfffb)
          .addRange(0x10376, 0x1037a)
          .addRange(0x10a01, 0x10a03)
          .addRange(0x10a05, 0x10a06)
          .addRange(0x10a0c, 0x10a0f)
          .addRange(0x10a38, 0x10a3a)
          .addRange(0x10ae5, 0x10ae6)
          .addRange(0x11038, 0x11046)
          .addRange(0x1107f, 0x11081)
          .addRange(0x110b3, 0x110b6)
          .addRange(0x110b9, 0x110ba)
          .addRange(0x11100, 0x11102)
          .addRange(0x11127, 0x1112b)
          .addRange(0x1112d, 0x11134)
          .addRange(0x11180, 0x11181)
          .addRange(0x111b6, 0x111be)
          .addRange(0x111ca, 0x111cc)
          .addRange(0x1122f, 0x11231)
          .addRange(0x11236, 0x11237)
          .addRange(0x112e3, 0x112ea)
          .addRange(0x11300, 0x11301)
          .addRange(0x11366, 0x1136c)
          .addRange(0x11370, 0x11374)
          .addRange(0x11438, 0x1143f)
          .addRange(0x11442, 0x11444)
          .addRange(0x114b3, 0x114b8)
          .addRange(0x114bf, 0x114c0)
          .addRange(0x114c2, 0x114c3)
          .addRange(0x115b2, 0x115b5)
          .addRange(0x115bc, 0x115bd)
          .addRange(0x115bf, 0x115c0)
          .addRange(0x115dc, 0x115dd)
          .addRange(0x11633, 0x1163a)
          .addRange(0x1163f, 0x11640)
          .addRange(0x116b0, 0x116b5)
          .addRange(0x1171d, 0x1171f)
          .addRange(0x11722, 0x11725)
          .addRange(0x11727, 0x1172b)
          .addRange(0x11a01, 0x11a06)
          .addRange(0x11a09, 0x11a0a)
          .addRange(0x11a33, 0x11a38)
          .addRange(0x11a3b, 0x11a3e)
          .addRange(0x11a51, 0x11a56)
          .addRange(0x11a59, 0x11a5b)
          .addRange(0x11a8a, 0x11a96)
          .addRange(0x11a98, 0x11a99)
          .addRange(0x11c30, 0x11c36)
          .addRange(0x11c38, 0x11c3d)
          .addRange(0x11c92, 0x11ca7)
          .addRange(0x11caa, 0x11cb0)
          .addRange(0x11cb2, 0x11cb3)
          .addRange(0x11cb5, 0x11cb6)
          .addRange(0x11d31, 0x11d36)
          .addRange(0x11d3c, 0x11d3d)
          .addRange(0x11d3f, 0x11d45)
          .addRange(0x16af0, 0x16af4)
          .addRange(0x16b30, 0x16b36)
          .addRange(0x16b40, 0x16b43)
          .addRange(0x16f8f, 0x16f9f)
          .addRange(0x16fe0, 0x16fe1)
          .addRange(0x1bc9d, 0x1bc9e)
          .addRange(0x1bca0, 0x1bca3)
          .addRange(0x1d167, 0x1d169)
          .addRange(0x1d173, 0x1d182)
          .addRange(0x1d185, 0x1d18b)
          .addRange(0x1d1aa, 0x1d1ad)
          .addRange(0x1d242, 0x1d244)
          .addRange(0x1da00, 0x1da36)
          .addRange(0x1da3b, 0x1da6c)
          .addRange(0x1da9b, 0x1da9f)
          .addRange(0x1daa1, 0x1daaf)
          .addRange(0x1e000, 0x1e006)
          .addRange(0x1e008, 0x1e018)
          .addRange(0x1e01b, 0x1e021)
          .addRange(0x1e023, 0x1e024)
          .addRange(0x1e026, 0x1e02a)
          .addRange(0x1e8d0, 0x1e8d6)
          .addRange(0x1e944, 0x1e94a)
          .addRange(0x1f3fb, 0x1f3ff)
          .addRange(0xe0020, 0xe007f)
          .addRange(0xe0100, 0xe01ef);

        /***/
      },
      /* 566 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xaa,
          0xb5,
          0xba,
          0x345,
          0x37f,
          0x386,
          0x38c,
          0x10c7,
          0x10cd,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1fbe,
          0x2071,
          0x207f,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x2126,
          0x2128,
          0x2139,
          0x214e,
          0x2d27,
          0x2d2d,
          0x1d4a2,
          0x1d4bb,
          0x1d546
        )
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x1ba)
          .addRange(0x1bc, 0x1bf)
          .addRange(0x1c4, 0x293)
          .addRange(0x295, 0x2b8)
          .addRange(0x2c0, 0x2c1)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x370, 0x373)
          .addRange(0x376, 0x377)
          .addRange(0x37a, 0x37d)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3f5)
          .addRange(0x3f7, 0x481)
          .addRange(0x48a, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x561, 0x587)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1d00, 0x1dbf)
          .addRange(0x1e00, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fbc)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fcc)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fe0, 0x1fec)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffc)
          .addRange(0x2090, 0x209c)
          .addRange(0x210a, 0x2113)
          .addRange(0x2119, 0x211d)
          .addRange(0x212a, 0x212d)
          .addRange(0x212f, 0x2134)
          .addRange(0x213c, 0x213f)
          .addRange(0x2145, 0x2149)
          .addRange(0x2160, 0x217f)
          .addRange(0x2183, 0x2184)
          .addRange(0x24b6, 0x24e9)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2ce4)
          .addRange(0x2ceb, 0x2cee)
          .addRange(0x2cf2, 0x2cf3)
          .addRange(0x2d00, 0x2d25)
          .addRange(0xa640, 0xa66d)
          .addRange(0xa680, 0xa69d)
          .addRange(0xa722, 0xa787)
          .addRange(0xa78b, 0xa78e)
          .addRange(0xa790, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f8, 0xa7fa)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab5c, 0xab65)
          .addRange(0xab70, 0xabbf)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a)
          .addRange(0x10400, 0x1044f)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x118a0, 0x118df)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d6c0)
          .addRange(0x1d6c2, 0x1d6da)
          .addRange(0x1d6dc, 0x1d6fa)
          .addRange(0x1d6fc, 0x1d714)
          .addRange(0x1d716, 0x1d734)
          .addRange(0x1d736, 0x1d74e)
          .addRange(0x1d750, 0x1d76e)
          .addRange(0x1d770, 0x1d788)
          .addRange(0x1d78a, 0x1d7a8)
          .addRange(0x1d7aa, 0x1d7c2)
          .addRange(0x1d7c4, 0x1d7cb)
          .addRange(0x1e900, 0x1e943)
          .addRange(0x1f130, 0x1f149)
          .addRange(0x1f150, 0x1f169)
          .addRange(0x1f170, 0x1f189);

        /***/
      },
      /* 567 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xb5,
          0x100,
          0x102,
          0x104,
          0x106,
          0x108,
          0x10a,
          0x10c,
          0x10e,
          0x110,
          0x112,
          0x114,
          0x116,
          0x118,
          0x11a,
          0x11c,
          0x11e,
          0x120,
          0x122,
          0x124,
          0x126,
          0x128,
          0x12a,
          0x12c,
          0x12e,
          0x130,
          0x132,
          0x134,
          0x136,
          0x139,
          0x13b,
          0x13d,
          0x13f,
          0x141,
          0x143,
          0x145,
          0x147,
          0x14c,
          0x14e,
          0x150,
          0x152,
          0x154,
          0x156,
          0x158,
          0x15a,
          0x15c,
          0x15e,
          0x160,
          0x162,
          0x164,
          0x166,
          0x168,
          0x16a,
          0x16c,
          0x16e,
          0x170,
          0x172,
          0x174,
          0x176,
          0x17b,
          0x17d,
          0x17f,
          0x184,
          0x1a2,
          0x1a4,
          0x1a9,
          0x1ac,
          0x1b5,
          0x1bc,
          0x1cd,
          0x1cf,
          0x1d1,
          0x1d3,
          0x1d5,
          0x1d7,
          0x1d9,
          0x1db,
          0x1de,
          0x1e0,
          0x1e2,
          0x1e4,
          0x1e6,
          0x1e8,
          0x1ea,
          0x1ec,
          0x1ee,
          0x1f4,
          0x1fa,
          0x1fc,
          0x1fe,
          0x200,
          0x202,
          0x204,
          0x206,
          0x208,
          0x20a,
          0x20c,
          0x20e,
          0x210,
          0x212,
          0x214,
          0x216,
          0x218,
          0x21a,
          0x21c,
          0x21e,
          0x220,
          0x222,
          0x224,
          0x226,
          0x228,
          0x22a,
          0x22c,
          0x22e,
          0x230,
          0x232,
          0x241,
          0x248,
          0x24a,
          0x24c,
          0x24e,
          0x345,
          0x370,
          0x372,
          0x376,
          0x37f,
          0x386,
          0x38c,
          0x3c2,
          0x3d8,
          0x3da,
          0x3dc,
          0x3de,
          0x3e0,
          0x3e2,
          0x3e4,
          0x3e6,
          0x3e8,
          0x3ea,
          0x3ec,
          0x3ee,
          0x3f7,
          0x460,
          0x462,
          0x464,
          0x466,
          0x468,
          0x46a,
          0x46c,
          0x46e,
          0x470,
          0x472,
          0x474,
          0x476,
          0x478,
          0x47a,
          0x47c,
          0x47e,
          0x480,
          0x48a,
          0x48c,
          0x48e,
          0x490,
          0x492,
          0x494,
          0x496,
          0x498,
          0x49a,
          0x49c,
          0x49e,
          0x4a0,
          0x4a2,
          0x4a4,
          0x4a6,
          0x4a8,
          0x4aa,
          0x4ac,
          0x4ae,
          0x4b0,
          0x4b2,
          0x4b4,
          0x4b6,
          0x4b8,
          0x4ba,
          0x4bc,
          0x4be,
          0x4c3,
          0x4c5,
          0x4c7,
          0x4c9,
          0x4cb,
          0x4cd,
          0x4d0,
          0x4d2,
          0x4d4,
          0x4d6,
          0x4d8,
          0x4da,
          0x4dc,
          0x4de,
          0x4e0,
          0x4e2,
          0x4e4,
          0x4e6,
          0x4e8,
          0x4ea,
          0x4ec,
          0x4ee,
          0x4f0,
          0x4f2,
          0x4f4,
          0x4f6,
          0x4f8,
          0x4fa,
          0x4fc,
          0x4fe,
          0x500,
          0x502,
          0x504,
          0x506,
          0x508,
          0x50a,
          0x50c,
          0x50e,
          0x510,
          0x512,
          0x514,
          0x516,
          0x518,
          0x51a,
          0x51c,
          0x51e,
          0x520,
          0x522,
          0x524,
          0x526,
          0x528,
          0x52a,
          0x52c,
          0x52e,
          0x587,
          0x10c7,
          0x10cd,
          0x1e00,
          0x1e02,
          0x1e04,
          0x1e06,
          0x1e08,
          0x1e0a,
          0x1e0c,
          0x1e0e,
          0x1e10,
          0x1e12,
          0x1e14,
          0x1e16,
          0x1e18,
          0x1e1a,
          0x1e1c,
          0x1e1e,
          0x1e20,
          0x1e22,
          0x1e24,
          0x1e26,
          0x1e28,
          0x1e2a,
          0x1e2c,
          0x1e2e,
          0x1e30,
          0x1e32,
          0x1e34,
          0x1e36,
          0x1e38,
          0x1e3a,
          0x1e3c,
          0x1e3e,
          0x1e40,
          0x1e42,
          0x1e44,
          0x1e46,
          0x1e48,
          0x1e4a,
          0x1e4c,
          0x1e4e,
          0x1e50,
          0x1e52,
          0x1e54,
          0x1e56,
          0x1e58,
          0x1e5a,
          0x1e5c,
          0x1e5e,
          0x1e60,
          0x1e62,
          0x1e64,
          0x1e66,
          0x1e68,
          0x1e6a,
          0x1e6c,
          0x1e6e,
          0x1e70,
          0x1e72,
          0x1e74,
          0x1e76,
          0x1e78,
          0x1e7a,
          0x1e7c,
          0x1e7e,
          0x1e80,
          0x1e82,
          0x1e84,
          0x1e86,
          0x1e88,
          0x1e8a,
          0x1e8c,
          0x1e8e,
          0x1e90,
          0x1e92,
          0x1e94,
          0x1e9e,
          0x1ea0,
          0x1ea2,
          0x1ea4,
          0x1ea6,
          0x1ea8,
          0x1eaa,
          0x1eac,
          0x1eae,
          0x1eb0,
          0x1eb2,
          0x1eb4,
          0x1eb6,
          0x1eb8,
          0x1eba,
          0x1ebc,
          0x1ebe,
          0x1ec0,
          0x1ec2,
          0x1ec4,
          0x1ec6,
          0x1ec8,
          0x1eca,
          0x1ecc,
          0x1ece,
          0x1ed0,
          0x1ed2,
          0x1ed4,
          0x1ed6,
          0x1ed8,
          0x1eda,
          0x1edc,
          0x1ede,
          0x1ee0,
          0x1ee2,
          0x1ee4,
          0x1ee6,
          0x1ee8,
          0x1eea,
          0x1eec,
          0x1eee,
          0x1ef0,
          0x1ef2,
          0x1ef4,
          0x1ef6,
          0x1ef8,
          0x1efa,
          0x1efc,
          0x1efe,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1f5f,
          0x2126,
          0x2132,
          0x2183,
          0x2c60,
          0x2c67,
          0x2c69,
          0x2c6b,
          0x2c72,
          0x2c75,
          0x2c82,
          0x2c84,
          0x2c86,
          0x2c88,
          0x2c8a,
          0x2c8c,
          0x2c8e,
          0x2c90,
          0x2c92,
          0x2c94,
          0x2c96,
          0x2c98,
          0x2c9a,
          0x2c9c,
          0x2c9e,
          0x2ca0,
          0x2ca2,
          0x2ca4,
          0x2ca6,
          0x2ca8,
          0x2caa,
          0x2cac,
          0x2cae,
          0x2cb0,
          0x2cb2,
          0x2cb4,
          0x2cb6,
          0x2cb8,
          0x2cba,
          0x2cbc,
          0x2cbe,
          0x2cc0,
          0x2cc2,
          0x2cc4,
          0x2cc6,
          0x2cc8,
          0x2cca,
          0x2ccc,
          0x2cce,
          0x2cd0,
          0x2cd2,
          0x2cd4,
          0x2cd6,
          0x2cd8,
          0x2cda,
          0x2cdc,
          0x2cde,
          0x2ce0,
          0x2ce2,
          0x2ceb,
          0x2ced,
          0x2cf2,
          0xa640,
          0xa642,
          0xa644,
          0xa646,
          0xa648,
          0xa64a,
          0xa64c,
          0xa64e,
          0xa650,
          0xa652,
          0xa654,
          0xa656,
          0xa658,
          0xa65a,
          0xa65c,
          0xa65e,
          0xa660,
          0xa662,
          0xa664,
          0xa666,
          0xa668,
          0xa66a,
          0xa66c,
          0xa680,
          0xa682,
          0xa684,
          0xa686,
          0xa688,
          0xa68a,
          0xa68c,
          0xa68e,
          0xa690,
          0xa692,
          0xa694,
          0xa696,
          0xa698,
          0xa69a,
          0xa722,
          0xa724,
          0xa726,
          0xa728,
          0xa72a,
          0xa72c,
          0xa72e,
          0xa732,
          0xa734,
          0xa736,
          0xa738,
          0xa73a,
          0xa73c,
          0xa73e,
          0xa740,
          0xa742,
          0xa744,
          0xa746,
          0xa748,
          0xa74a,
          0xa74c,
          0xa74e,
          0xa750,
          0xa752,
          0xa754,
          0xa756,
          0xa758,
          0xa75a,
          0xa75c,
          0xa75e,
          0xa760,
          0xa762,
          0xa764,
          0xa766,
          0xa768,
          0xa76a,
          0xa76c,
          0xa76e,
          0xa779,
          0xa77b,
          0xa780,
          0xa782,
          0xa784,
          0xa786,
          0xa78b,
          0xa78d,
          0xa790,
          0xa792,
          0xa796,
          0xa798,
          0xa79a,
          0xa79c,
          0xa79e,
          0xa7a0,
          0xa7a2,
          0xa7a4,
          0xa7a6,
          0xa7a8,
          0xa7b6
        )
          .addRange(0x41, 0x5a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xdf)
          .addRange(0x149, 0x14a)
          .addRange(0x178, 0x179)
          .addRange(0x181, 0x182)
          .addRange(0x186, 0x187)
          .addRange(0x189, 0x18b)
          .addRange(0x18e, 0x191)
          .addRange(0x193, 0x194)
          .addRange(0x196, 0x198)
          .addRange(0x19c, 0x19d)
          .addRange(0x19f, 0x1a0)
          .addRange(0x1a6, 0x1a7)
          .addRange(0x1ae, 0x1af)
          .addRange(0x1b1, 0x1b3)
          .addRange(0x1b7, 0x1b8)
          .addRange(0x1c4, 0x1c5)
          .addRange(0x1c7, 0x1c8)
          .addRange(0x1ca, 0x1cb)
          .addRange(0x1f1, 0x1f2)
          .addRange(0x1f6, 0x1f8)
          .addRange(0x23a, 0x23b)
          .addRange(0x23d, 0x23e)
          .addRange(0x243, 0x246)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x38f)
          .addRange(0x391, 0x3a1)
          .addRange(0x3a3, 0x3ab)
          .addRange(0x3cf, 0x3d1)
          .addRange(0x3d5, 0x3d6)
          .addRange(0x3f0, 0x3f1)
          .addRange(0x3f4, 0x3f5)
          .addRange(0x3f9, 0x3fa)
          .addRange(0x3fd, 0x42f)
          .addRange(0x4c0, 0x4c1)
          .addRange(0x531, 0x556)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1e9a, 0x1e9b)
          .addRange(0x1f08, 0x1f0f)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f28, 0x1f2f)
          .addRange(0x1f38, 0x1f3f)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f68, 0x1f6f)
          .addRange(0x1f80, 0x1faf)
          .addRange(0x1fb2, 0x1fb4)
          .addRange(0x1fb7, 0x1fbc)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc7, 0x1fcc)
          .addRange(0x1fd8, 0x1fdb)
          .addRange(0x1fe8, 0x1fec)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff7, 0x1ffc)
          .addRange(0x212a, 0x212b)
          .addRange(0x2160, 0x216f)
          .addRange(0x24b6, 0x24cf)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c62, 0x2c64)
          .addRange(0x2c6d, 0x2c70)
          .addRange(0x2c7e, 0x2c80)
          .addRange(0xa77d, 0xa77e)
          .addRange(0xa7aa, 0xa7ae)
          .addRange(0xa7b0, 0xa7b4)
          .addRange(0xab70, 0xabbf)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xff21, 0xff3a)
          .addRange(0x10400, 0x10427)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x118a0, 0x118bf)
          .addRange(0x1e900, 0x1e921);

        /***/
      },
      /* 568 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xb5,
          0x1bf,
          0x259,
          0x263,
          0x26f,
          0x275,
          0x27d,
          0x280,
          0x283,
          0x292,
          0x345,
          0x37f,
          0x386,
          0x38c,
          0x10c7,
          0x10cd,
          0x1d79,
          0x1d7d,
          0x1e9e,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1fbe,
          0x2126,
          0x2132,
          0x214e,
          0x2d27,
          0x2d2d,
          0xab53
        )
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x137)
          .addRange(0x139, 0x18c)
          .addRange(0x18e, 0x19a)
          .addRange(0x19c, 0x1a9)
          .addRange(0x1ac, 0x1b9)
          .addRange(0x1bc, 0x1bd)
          .addRange(0x1c4, 0x220)
          .addRange(0x222, 0x233)
          .addRange(0x23a, 0x254)
          .addRange(0x256, 0x257)
          .addRange(0x25b, 0x25c)
          .addRange(0x260, 0x261)
          .addRange(0x265, 0x266)
          .addRange(0x268, 0x26c)
          .addRange(0x271, 0x272)
          .addRange(0x287, 0x28c)
          .addRange(0x29d, 0x29e)
          .addRange(0x370, 0x373)
          .addRange(0x376, 0x377)
          .addRange(0x37b, 0x37d)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3d1)
          .addRange(0x3d5, 0x3f5)
          .addRange(0x3f7, 0x3fb)
          .addRange(0x3fd, 0x481)
          .addRange(0x48a, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x561, 0x587)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1e00, 0x1e9b)
          .addRange(0x1ea0, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fbc)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fcc)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fe0, 0x1fec)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffc)
          .addRange(0x212a, 0x212b)
          .addRange(0x2160, 0x217f)
          .addRange(0x2183, 0x2184)
          .addRange(0x24b6, 0x24e9)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2c70)
          .addRange(0x2c72, 0x2c73)
          .addRange(0x2c75, 0x2c76)
          .addRange(0x2c7e, 0x2ce3)
          .addRange(0x2ceb, 0x2cee)
          .addRange(0x2cf2, 0x2cf3)
          .addRange(0x2d00, 0x2d25)
          .addRange(0xa640, 0xa66d)
          .addRange(0xa680, 0xa69b)
          .addRange(0xa722, 0xa72f)
          .addRange(0xa732, 0xa76f)
          .addRange(0xa779, 0xa787)
          .addRange(0xa78b, 0xa78d)
          .addRange(0xa790, 0xa793)
          .addRange(0xa796, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xab70, 0xabbf)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a)
          .addRange(0x10400, 0x1044f)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x118a0, 0x118df)
          .addRange(0x1e900, 0x1e943);

        /***/
      },
      /* 569 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x100,
          0x102,
          0x104,
          0x106,
          0x108,
          0x10a,
          0x10c,
          0x10e,
          0x110,
          0x112,
          0x114,
          0x116,
          0x118,
          0x11a,
          0x11c,
          0x11e,
          0x120,
          0x122,
          0x124,
          0x126,
          0x128,
          0x12a,
          0x12c,
          0x12e,
          0x130,
          0x132,
          0x134,
          0x136,
          0x139,
          0x13b,
          0x13d,
          0x13f,
          0x141,
          0x143,
          0x145,
          0x147,
          0x14a,
          0x14c,
          0x14e,
          0x150,
          0x152,
          0x154,
          0x156,
          0x158,
          0x15a,
          0x15c,
          0x15e,
          0x160,
          0x162,
          0x164,
          0x166,
          0x168,
          0x16a,
          0x16c,
          0x16e,
          0x170,
          0x172,
          0x174,
          0x176,
          0x17b,
          0x17d,
          0x184,
          0x1a2,
          0x1a4,
          0x1a9,
          0x1ac,
          0x1b5,
          0x1bc,
          0x1cd,
          0x1cf,
          0x1d1,
          0x1d3,
          0x1d5,
          0x1d7,
          0x1d9,
          0x1db,
          0x1de,
          0x1e0,
          0x1e2,
          0x1e4,
          0x1e6,
          0x1e8,
          0x1ea,
          0x1ec,
          0x1ee,
          0x1f4,
          0x1fa,
          0x1fc,
          0x1fe,
          0x200,
          0x202,
          0x204,
          0x206,
          0x208,
          0x20a,
          0x20c,
          0x20e,
          0x210,
          0x212,
          0x214,
          0x216,
          0x218,
          0x21a,
          0x21c,
          0x21e,
          0x220,
          0x222,
          0x224,
          0x226,
          0x228,
          0x22a,
          0x22c,
          0x22e,
          0x230,
          0x232,
          0x241,
          0x248,
          0x24a,
          0x24c,
          0x24e,
          0x370,
          0x372,
          0x376,
          0x37f,
          0x386,
          0x38c,
          0x3cf,
          0x3d8,
          0x3da,
          0x3dc,
          0x3de,
          0x3e0,
          0x3e2,
          0x3e4,
          0x3e6,
          0x3e8,
          0x3ea,
          0x3ec,
          0x3ee,
          0x3f4,
          0x3f7,
          0x460,
          0x462,
          0x464,
          0x466,
          0x468,
          0x46a,
          0x46c,
          0x46e,
          0x470,
          0x472,
          0x474,
          0x476,
          0x478,
          0x47a,
          0x47c,
          0x47e,
          0x480,
          0x48a,
          0x48c,
          0x48e,
          0x490,
          0x492,
          0x494,
          0x496,
          0x498,
          0x49a,
          0x49c,
          0x49e,
          0x4a0,
          0x4a2,
          0x4a4,
          0x4a6,
          0x4a8,
          0x4aa,
          0x4ac,
          0x4ae,
          0x4b0,
          0x4b2,
          0x4b4,
          0x4b6,
          0x4b8,
          0x4ba,
          0x4bc,
          0x4be,
          0x4c3,
          0x4c5,
          0x4c7,
          0x4c9,
          0x4cb,
          0x4cd,
          0x4d0,
          0x4d2,
          0x4d4,
          0x4d6,
          0x4d8,
          0x4da,
          0x4dc,
          0x4de,
          0x4e0,
          0x4e2,
          0x4e4,
          0x4e6,
          0x4e8,
          0x4ea,
          0x4ec,
          0x4ee,
          0x4f0,
          0x4f2,
          0x4f4,
          0x4f6,
          0x4f8,
          0x4fa,
          0x4fc,
          0x4fe,
          0x500,
          0x502,
          0x504,
          0x506,
          0x508,
          0x50a,
          0x50c,
          0x50e,
          0x510,
          0x512,
          0x514,
          0x516,
          0x518,
          0x51a,
          0x51c,
          0x51e,
          0x520,
          0x522,
          0x524,
          0x526,
          0x528,
          0x52a,
          0x52c,
          0x52e,
          0x10c7,
          0x10cd,
          0x1e00,
          0x1e02,
          0x1e04,
          0x1e06,
          0x1e08,
          0x1e0a,
          0x1e0c,
          0x1e0e,
          0x1e10,
          0x1e12,
          0x1e14,
          0x1e16,
          0x1e18,
          0x1e1a,
          0x1e1c,
          0x1e1e,
          0x1e20,
          0x1e22,
          0x1e24,
          0x1e26,
          0x1e28,
          0x1e2a,
          0x1e2c,
          0x1e2e,
          0x1e30,
          0x1e32,
          0x1e34,
          0x1e36,
          0x1e38,
          0x1e3a,
          0x1e3c,
          0x1e3e,
          0x1e40,
          0x1e42,
          0x1e44,
          0x1e46,
          0x1e48,
          0x1e4a,
          0x1e4c,
          0x1e4e,
          0x1e50,
          0x1e52,
          0x1e54,
          0x1e56,
          0x1e58,
          0x1e5a,
          0x1e5c,
          0x1e5e,
          0x1e60,
          0x1e62,
          0x1e64,
          0x1e66,
          0x1e68,
          0x1e6a,
          0x1e6c,
          0x1e6e,
          0x1e70,
          0x1e72,
          0x1e74,
          0x1e76,
          0x1e78,
          0x1e7a,
          0x1e7c,
          0x1e7e,
          0x1e80,
          0x1e82,
          0x1e84,
          0x1e86,
          0x1e88,
          0x1e8a,
          0x1e8c,
          0x1e8e,
          0x1e90,
          0x1e92,
          0x1e94,
          0x1e9e,
          0x1ea0,
          0x1ea2,
          0x1ea4,
          0x1ea6,
          0x1ea8,
          0x1eaa,
          0x1eac,
          0x1eae,
          0x1eb0,
          0x1eb2,
          0x1eb4,
          0x1eb6,
          0x1eb8,
          0x1eba,
          0x1ebc,
          0x1ebe,
          0x1ec0,
          0x1ec2,
          0x1ec4,
          0x1ec6,
          0x1ec8,
          0x1eca,
          0x1ecc,
          0x1ece,
          0x1ed0,
          0x1ed2,
          0x1ed4,
          0x1ed6,
          0x1ed8,
          0x1eda,
          0x1edc,
          0x1ede,
          0x1ee0,
          0x1ee2,
          0x1ee4,
          0x1ee6,
          0x1ee8,
          0x1eea,
          0x1eec,
          0x1eee,
          0x1ef0,
          0x1ef2,
          0x1ef4,
          0x1ef6,
          0x1ef8,
          0x1efa,
          0x1efc,
          0x1efe,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1f5f,
          0x2126,
          0x2132,
          0x2183,
          0x2c60,
          0x2c67,
          0x2c69,
          0x2c6b,
          0x2c72,
          0x2c75,
          0x2c82,
          0x2c84,
          0x2c86,
          0x2c88,
          0x2c8a,
          0x2c8c,
          0x2c8e,
          0x2c90,
          0x2c92,
          0x2c94,
          0x2c96,
          0x2c98,
          0x2c9a,
          0x2c9c,
          0x2c9e,
          0x2ca0,
          0x2ca2,
          0x2ca4,
          0x2ca6,
          0x2ca8,
          0x2caa,
          0x2cac,
          0x2cae,
          0x2cb0,
          0x2cb2,
          0x2cb4,
          0x2cb6,
          0x2cb8,
          0x2cba,
          0x2cbc,
          0x2cbe,
          0x2cc0,
          0x2cc2,
          0x2cc4,
          0x2cc6,
          0x2cc8,
          0x2cca,
          0x2ccc,
          0x2cce,
          0x2cd0,
          0x2cd2,
          0x2cd4,
          0x2cd6,
          0x2cd8,
          0x2cda,
          0x2cdc,
          0x2cde,
          0x2ce0,
          0x2ce2,
          0x2ceb,
          0x2ced,
          0x2cf2,
          0xa640,
          0xa642,
          0xa644,
          0xa646,
          0xa648,
          0xa64a,
          0xa64c,
          0xa64e,
          0xa650,
          0xa652,
          0xa654,
          0xa656,
          0xa658,
          0xa65a,
          0xa65c,
          0xa65e,
          0xa660,
          0xa662,
          0xa664,
          0xa666,
          0xa668,
          0xa66a,
          0xa66c,
          0xa680,
          0xa682,
          0xa684,
          0xa686,
          0xa688,
          0xa68a,
          0xa68c,
          0xa68e,
          0xa690,
          0xa692,
          0xa694,
          0xa696,
          0xa698,
          0xa69a,
          0xa722,
          0xa724,
          0xa726,
          0xa728,
          0xa72a,
          0xa72c,
          0xa72e,
          0xa732,
          0xa734,
          0xa736,
          0xa738,
          0xa73a,
          0xa73c,
          0xa73e,
          0xa740,
          0xa742,
          0xa744,
          0xa746,
          0xa748,
          0xa74a,
          0xa74c,
          0xa74e,
          0xa750,
          0xa752,
          0xa754,
          0xa756,
          0xa758,
          0xa75a,
          0xa75c,
          0xa75e,
          0xa760,
          0xa762,
          0xa764,
          0xa766,
          0xa768,
          0xa76a,
          0xa76c,
          0xa76e,
          0xa779,
          0xa77b,
          0xa780,
          0xa782,
          0xa784,
          0xa786,
          0xa78b,
          0xa78d,
          0xa790,
          0xa792,
          0xa796,
          0xa798,
          0xa79a,
          0xa79c,
          0xa79e,
          0xa7a0,
          0xa7a2,
          0xa7a4,
          0xa7a6,
          0xa7a8,
          0xa7b6
        )
          .addRange(0x41, 0x5a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xde)
          .addRange(0x178, 0x179)
          .addRange(0x181, 0x182)
          .addRange(0x186, 0x187)
          .addRange(0x189, 0x18b)
          .addRange(0x18e, 0x191)
          .addRange(0x193, 0x194)
          .addRange(0x196, 0x198)
          .addRange(0x19c, 0x19d)
          .addRange(0x19f, 0x1a0)
          .addRange(0x1a6, 0x1a7)
          .addRange(0x1ae, 0x1af)
          .addRange(0x1b1, 0x1b3)
          .addRange(0x1b7, 0x1b8)
          .addRange(0x1c4, 0x1c5)
          .addRange(0x1c7, 0x1c8)
          .addRange(0x1ca, 0x1cb)
          .addRange(0x1f1, 0x1f2)
          .addRange(0x1f6, 0x1f8)
          .addRange(0x23a, 0x23b)
          .addRange(0x23d, 0x23e)
          .addRange(0x243, 0x246)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x38f)
          .addRange(0x391, 0x3a1)
          .addRange(0x3a3, 0x3ab)
          .addRange(0x3f9, 0x3fa)
          .addRange(0x3fd, 0x42f)
          .addRange(0x4c0, 0x4c1)
          .addRange(0x531, 0x556)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x1f08, 0x1f0f)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f28, 0x1f2f)
          .addRange(0x1f38, 0x1f3f)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f68, 0x1f6f)
          .addRange(0x1f88, 0x1f8f)
          .addRange(0x1f98, 0x1f9f)
          .addRange(0x1fa8, 0x1faf)
          .addRange(0x1fb8, 0x1fbc)
          .addRange(0x1fc8, 0x1fcc)
          .addRange(0x1fd8, 0x1fdb)
          .addRange(0x1fe8, 0x1fec)
          .addRange(0x1ff8, 0x1ffc)
          .addRange(0x212a, 0x212b)
          .addRange(0x2160, 0x216f)
          .addRange(0x24b6, 0x24cf)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c62, 0x2c64)
          .addRange(0x2c6d, 0x2c70)
          .addRange(0x2c7e, 0x2c80)
          .addRange(0xa77d, 0xa77e)
          .addRange(0xa7aa, 0xa7ae)
          .addRange(0xa7b0, 0xa7b4)
          .addRange(0xff21, 0xff3a)
          .addRange(0x10400, 0x10427)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x118a0, 0x118bf)
          .addRange(0x1e900, 0x1e921);

        /***/
      },
      /* 570 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xa0,
          0xa8,
          0xaa,
          0xad,
          0xaf,
          0x100,
          0x102,
          0x104,
          0x106,
          0x108,
          0x10a,
          0x10c,
          0x10e,
          0x110,
          0x112,
          0x114,
          0x116,
          0x118,
          0x11a,
          0x11c,
          0x11e,
          0x120,
          0x122,
          0x124,
          0x126,
          0x128,
          0x12a,
          0x12c,
          0x12e,
          0x130,
          0x136,
          0x139,
          0x13b,
          0x13d,
          0x143,
          0x145,
          0x147,
          0x14c,
          0x14e,
          0x150,
          0x152,
          0x154,
          0x156,
          0x158,
          0x15a,
          0x15c,
          0x15e,
          0x160,
          0x162,
          0x164,
          0x166,
          0x168,
          0x16a,
          0x16c,
          0x16e,
          0x170,
          0x172,
          0x174,
          0x176,
          0x17b,
          0x17d,
          0x17f,
          0x184,
          0x1a2,
          0x1a4,
          0x1a9,
          0x1ac,
          0x1b5,
          0x1bc,
          0x1cf,
          0x1d1,
          0x1d3,
          0x1d5,
          0x1d7,
          0x1d9,
          0x1db,
          0x1de,
          0x1e0,
          0x1e2,
          0x1e4,
          0x1e6,
          0x1e8,
          0x1ea,
          0x1ec,
          0x1ee,
          0x1fa,
          0x1fc,
          0x1fe,
          0x200,
          0x202,
          0x204,
          0x206,
          0x208,
          0x20a,
          0x20c,
          0x20e,
          0x210,
          0x212,
          0x214,
          0x216,
          0x218,
          0x21a,
          0x21c,
          0x21e,
          0x220,
          0x222,
          0x224,
          0x226,
          0x228,
          0x22a,
          0x22c,
          0x22e,
          0x230,
          0x232,
          0x241,
          0x248,
          0x24a,
          0x24c,
          0x24e,
          0x34f,
          0x370,
          0x372,
          0x374,
          0x376,
          0x37a,
          0x38c,
          0x3c2,
          0x3d8,
          0x3da,
          0x3dc,
          0x3de,
          0x3e0,
          0x3e2,
          0x3e4,
          0x3e6,
          0x3e8,
          0x3ea,
          0x3ec,
          0x3ee,
          0x3f7,
          0x460,
          0x462,
          0x464,
          0x466,
          0x468,
          0x46a,
          0x46c,
          0x46e,
          0x470,
          0x472,
          0x474,
          0x476,
          0x478,
          0x47a,
          0x47c,
          0x47e,
          0x480,
          0x48a,
          0x48c,
          0x48e,
          0x490,
          0x492,
          0x494,
          0x496,
          0x498,
          0x49a,
          0x49c,
          0x49e,
          0x4a0,
          0x4a2,
          0x4a4,
          0x4a6,
          0x4a8,
          0x4aa,
          0x4ac,
          0x4ae,
          0x4b0,
          0x4b2,
          0x4b4,
          0x4b6,
          0x4b8,
          0x4ba,
          0x4bc,
          0x4be,
          0x4c3,
          0x4c5,
          0x4c7,
          0x4c9,
          0x4cb,
          0x4cd,
          0x4d0,
          0x4d2,
          0x4d4,
          0x4d6,
          0x4d8,
          0x4da,
          0x4dc,
          0x4de,
          0x4e0,
          0x4e2,
          0x4e4,
          0x4e6,
          0x4e8,
          0x4ea,
          0x4ec,
          0x4ee,
          0x4f0,
          0x4f2,
          0x4f4,
          0x4f6,
          0x4f8,
          0x4fa,
          0x4fc,
          0x4fe,
          0x500,
          0x502,
          0x504,
          0x506,
          0x508,
          0x50a,
          0x50c,
          0x50e,
          0x510,
          0x512,
          0x514,
          0x516,
          0x518,
          0x51a,
          0x51c,
          0x51e,
          0x520,
          0x522,
          0x524,
          0x526,
          0x528,
          0x52a,
          0x52c,
          0x52e,
          0x587,
          0x61c,
          0x9df,
          0xa33,
          0xa36,
          0xa5e,
          0xe33,
          0xeb3,
          0xf0c,
          0xf43,
          0xf4d,
          0xf52,
          0xf57,
          0xf5c,
          0xf69,
          0xf73,
          0xf81,
          0xf93,
          0xf9d,
          0xfa2,
          0xfa7,
          0xfac,
          0xfb9,
          0x10c7,
          0x10cd,
          0x10fc,
          0x1d78,
          0x1e00,
          0x1e02,
          0x1e04,
          0x1e06,
          0x1e08,
          0x1e0a,
          0x1e0c,
          0x1e0e,
          0x1e10,
          0x1e12,
          0x1e14,
          0x1e16,
          0x1e18,
          0x1e1a,
          0x1e1c,
          0x1e1e,
          0x1e20,
          0x1e22,
          0x1e24,
          0x1e26,
          0x1e28,
          0x1e2a,
          0x1e2c,
          0x1e2e,
          0x1e30,
          0x1e32,
          0x1e34,
          0x1e36,
          0x1e38,
          0x1e3a,
          0x1e3c,
          0x1e3e,
          0x1e40,
          0x1e42,
          0x1e44,
          0x1e46,
          0x1e48,
          0x1e4a,
          0x1e4c,
          0x1e4e,
          0x1e50,
          0x1e52,
          0x1e54,
          0x1e56,
          0x1e58,
          0x1e5a,
          0x1e5c,
          0x1e5e,
          0x1e60,
          0x1e62,
          0x1e64,
          0x1e66,
          0x1e68,
          0x1e6a,
          0x1e6c,
          0x1e6e,
          0x1e70,
          0x1e72,
          0x1e74,
          0x1e76,
          0x1e78,
          0x1e7a,
          0x1e7c,
          0x1e7e,
          0x1e80,
          0x1e82,
          0x1e84,
          0x1e86,
          0x1e88,
          0x1e8a,
          0x1e8c,
          0x1e8e,
          0x1e90,
          0x1e92,
          0x1e94,
          0x1e9e,
          0x1ea0,
          0x1ea2,
          0x1ea4,
          0x1ea6,
          0x1ea8,
          0x1eaa,
          0x1eac,
          0x1eae,
          0x1eb0,
          0x1eb2,
          0x1eb4,
          0x1eb6,
          0x1eb8,
          0x1eba,
          0x1ebc,
          0x1ebe,
          0x1ec0,
          0x1ec2,
          0x1ec4,
          0x1ec6,
          0x1ec8,
          0x1eca,
          0x1ecc,
          0x1ece,
          0x1ed0,
          0x1ed2,
          0x1ed4,
          0x1ed6,
          0x1ed8,
          0x1eda,
          0x1edc,
          0x1ede,
          0x1ee0,
          0x1ee2,
          0x1ee4,
          0x1ee6,
          0x1ee8,
          0x1eea,
          0x1eec,
          0x1eee,
          0x1ef0,
          0x1ef2,
          0x1ef4,
          0x1ef6,
          0x1ef8,
          0x1efa,
          0x1efc,
          0x1efe,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1f5f,
          0x1f71,
          0x1f73,
          0x1f75,
          0x1f77,
          0x1f79,
          0x1f7b,
          0x1f7d,
          0x1fd3,
          0x1fe3,
          0x2011,
          0x2017,
          0x203c,
          0x203e,
          0x2057,
          0x20a8,
          0x2124,
          0x2126,
          0x2128,
          0x2183,
          0x2189,
          0x2a0c,
          0x2adc,
          0x2c60,
          0x2c67,
          0x2c69,
          0x2c6b,
          0x2c72,
          0x2c75,
          0x2c82,
          0x2c84,
          0x2c86,
          0x2c88,
          0x2c8a,
          0x2c8c,
          0x2c8e,
          0x2c90,
          0x2c92,
          0x2c94,
          0x2c96,
          0x2c98,
          0x2c9a,
          0x2c9c,
          0x2c9e,
          0x2ca0,
          0x2ca2,
          0x2ca4,
          0x2ca6,
          0x2ca8,
          0x2caa,
          0x2cac,
          0x2cae,
          0x2cb0,
          0x2cb2,
          0x2cb4,
          0x2cb6,
          0x2cb8,
          0x2cba,
          0x2cbc,
          0x2cbe,
          0x2cc0,
          0x2cc2,
          0x2cc4,
          0x2cc6,
          0x2cc8,
          0x2cca,
          0x2ccc,
          0x2cce,
          0x2cd0,
          0x2cd2,
          0x2cd4,
          0x2cd6,
          0x2cd8,
          0x2cda,
          0x2cdc,
          0x2cde,
          0x2ce0,
          0x2ce2,
          0x2ceb,
          0x2ced,
          0x2cf2,
          0x2d6f,
          0x2e9f,
          0x2ef3,
          0x3000,
          0x3036,
          0x309f,
          0x30ff,
          0xa640,
          0xa642,
          0xa644,
          0xa646,
          0xa648,
          0xa64a,
          0xa64c,
          0xa64e,
          0xa650,
          0xa652,
          0xa654,
          0xa656,
          0xa658,
          0xa65a,
          0xa65c,
          0xa65e,
          0xa660,
          0xa662,
          0xa664,
          0xa666,
          0xa668,
          0xa66a,
          0xa66c,
          0xa680,
          0xa682,
          0xa684,
          0xa686,
          0xa688,
          0xa68a,
          0xa68c,
          0xa68e,
          0xa690,
          0xa692,
          0xa694,
          0xa696,
          0xa698,
          0xa69a,
          0xa722,
          0xa724,
          0xa726,
          0xa728,
          0xa72a,
          0xa72c,
          0xa72e,
          0xa732,
          0xa734,
          0xa736,
          0xa738,
          0xa73a,
          0xa73c,
          0xa73e,
          0xa740,
          0xa742,
          0xa744,
          0xa746,
          0xa748,
          0xa74a,
          0xa74c,
          0xa74e,
          0xa750,
          0xa752,
          0xa754,
          0xa756,
          0xa758,
          0xa75a,
          0xa75c,
          0xa75e,
          0xa760,
          0xa762,
          0xa764,
          0xa766,
          0xa768,
          0xa76a,
          0xa76c,
          0xa76e,
          0xa770,
          0xa779,
          0xa77b,
          0xa780,
          0xa782,
          0xa784,
          0xa786,
          0xa78b,
          0xa78d,
          0xa790,
          0xa792,
          0xa796,
          0xa798,
          0xa79a,
          0xa79c,
          0xa79e,
          0xa7a0,
          0xa7a2,
          0xa7a4,
          0xa7a6,
          0xa7a8,
          0xa7b6,
          0xfa10,
          0xfa12,
          0xfa20,
          0xfa22,
          0xfb1d,
          0xfb3e,
          0xfe74,
          0xfeff,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e,
          0x1f190
        )
          .addRange(0x41, 0x5a)
          .addRange(0xb2, 0xb5)
          .addRange(0xb8, 0xba)
          .addRange(0xbc, 0xbe)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xdf)
          .addRange(0x132, 0x134)
          .addRange(0x13f, 0x141)
          .addRange(0x149, 0x14a)
          .addRange(0x178, 0x179)
          .addRange(0x181, 0x182)
          .addRange(0x186, 0x187)
          .addRange(0x189, 0x18b)
          .addRange(0x18e, 0x191)
          .addRange(0x193, 0x194)
          .addRange(0x196, 0x198)
          .addRange(0x19c, 0x19d)
          .addRange(0x19f, 0x1a0)
          .addRange(0x1a6, 0x1a7)
          .addRange(0x1ae, 0x1af)
          .addRange(0x1b1, 0x1b3)
          .addRange(0x1b7, 0x1b8)
          .addRange(0x1c4, 0x1cd)
          .addRange(0x1f1, 0x1f4)
          .addRange(0x1f6, 0x1f8)
          .addRange(0x23a, 0x23b)
          .addRange(0x23d, 0x23e)
          .addRange(0x243, 0x246)
          .addRange(0x2b0, 0x2b8)
          .addRange(0x2d8, 0x2dd)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x340, 0x341)
          .addRange(0x343, 0x345)
          .addRange(0x37e, 0x37f)
          .addRange(0x384, 0x38a)
          .addRange(0x38e, 0x38f)
          .addRange(0x391, 0x3a1)
          .addRange(0x3a3, 0x3ab)
          .addRange(0x3cf, 0x3d6)
          .addRange(0x3f0, 0x3f2)
          .addRange(0x3f4, 0x3f5)
          .addRange(0x3f9, 0x3fa)
          .addRange(0x3fd, 0x42f)
          .addRange(0x4c0, 0x4c1)
          .addRange(0x531, 0x556)
          .addRange(0x675, 0x678)
          .addRange(0x958, 0x95f)
          .addRange(0x9dc, 0x9dd)
          .addRange(0xa59, 0xa5b)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xedc, 0xedd)
          .addRange(0xf75, 0xf79)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x115f, 0x1160)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x17b4, 0x17b5)
          .addRange(0x180b, 0x180e)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1d2c, 0x1d2e)
          .addRange(0x1d30, 0x1d3a)
          .addRange(0x1d3c, 0x1d4d)
          .addRange(0x1d4f, 0x1d6a)
          .addRange(0x1d9b, 0x1dbf)
          .addRange(0x1e9a, 0x1e9b)
          .addRange(0x1f08, 0x1f0f)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f28, 0x1f2f)
          .addRange(0x1f38, 0x1f3f)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f68, 0x1f6f)
          .addRange(0x1f80, 0x1faf)
          .addRange(0x1fb2, 0x1fb4)
          .addRange(0x1fb7, 0x1fc4)
          .addRange(0x1fc7, 0x1fcf)
          .addRange(0x1fd8, 0x1fdb)
          .addRange(0x1fdd, 0x1fdf)
          .addRange(0x1fe8, 0x1fef)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff7, 0x1ffe)
          .addRange(0x2000, 0x200f)
          .addRange(0x2024, 0x2026)
          .addRange(0x202a, 0x202f)
          .addRange(0x2033, 0x2034)
          .addRange(0x2036, 0x2037)
          .addRange(0x2047, 0x2049)
          .addRange(0x205f, 0x2071)
          .addRange(0x2074, 0x208e)
          .addRange(0x2090, 0x209c)
          .addRange(0x2100, 0x2103)
          .addRange(0x2105, 0x2107)
          .addRange(0x2109, 0x2113)
          .addRange(0x2115, 0x2116)
          .addRange(0x2119, 0x211d)
          .addRange(0x2120, 0x2122)
          .addRange(0x212a, 0x212d)
          .addRange(0x212f, 0x2139)
          .addRange(0x213b, 0x2140)
          .addRange(0x2145, 0x2149)
          .addRange(0x2150, 0x217f)
          .addRange(0x222c, 0x222d)
          .addRange(0x222f, 0x2230)
          .addRange(0x2329, 0x232a)
          .addRange(0x2460, 0x24ea)
          .addRange(0x2a74, 0x2a76)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c62, 0x2c64)
          .addRange(0x2c6d, 0x2c70)
          .addRange(0x2c7c, 0x2c80)
          .addRange(0x2f00, 0x2fd5)
          .addRange(0x3038, 0x303a)
          .addRange(0x309b, 0x309c)
          .addRange(0x3131, 0x318e)
          .addRange(0x3192, 0x319f)
          .addRange(0x3200, 0x321e)
          .addRange(0x3220, 0x3247)
          .addRange(0x3250, 0x327e)
          .addRange(0x3280, 0x32fe)
          .addRange(0x3300, 0x33ff)
          .addRange(0xa69c, 0xa69d)
          .addRange(0xa77d, 0xa77e)
          .addRange(0xa7aa, 0xa7ae)
          .addRange(0xa7b0, 0xa7b4)
          .addRange(0xa7f8, 0xa7f9)
          .addRange(0xab5c, 0xab5f)
          .addRange(0xab70, 0xabbf)
          .addRange(0xf900, 0xfa0d)
          .addRange(0xfa15, 0xfa1e)
          .addRange(0xfa25, 0xfa26)
          .addRange(0xfa2a, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xfb1f, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfbb1)
          .addRange(0xfbd3, 0xfd3d)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdfc)
          .addRange(0xfe00, 0xfe19)
          .addRange(0xfe30, 0xfe44)
          .addRange(0xfe47, 0xfe52)
          .addRange(0xfe54, 0xfe66)
          .addRange(0xfe68, 0xfe6b)
          .addRange(0xfe70, 0xfe72)
          .addRange(0xfe76, 0xfefc)
          .addRange(0xff01, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc)
          .addRange(0xffe0, 0xffe6)
          .addRange(0xffe8, 0xffee)
          .addRange(0xfff0, 0xfff8)
          .addRange(0x10400, 0x10427)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x118a0, 0x118bf)
          .addRange(0x1bca0, 0x1bca3)
          .addRange(0x1d15e, 0x1d164)
          .addRange(0x1d173, 0x1d17a)
          .addRange(0x1d1bb, 0x1d1c0)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d7cb)
          .addRange(0x1d7ce, 0x1d7ff)
          .addRange(0x1e900, 0x1e921)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x1f100, 0x1f10a)
          .addRange(0x1f110, 0x1f12e)
          .addRange(0x1f130, 0x1f14f)
          .addRange(0x1f16a, 0x1f16b)
          .addRange(0x1f200, 0x1f202)
          .addRange(0x1f210, 0x1f23b)
          .addRange(0x1f240, 0x1f248)
          .addRange(0x1f250, 0x1f251)
          .addRange(0x2f800, 0x2fa1d)
          .addRange(0xe0000, 0xe0fff);

        /***/
      },
      /* 571 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xb5,
          0x101,
          0x103,
          0x105,
          0x107,
          0x109,
          0x10b,
          0x10d,
          0x10f,
          0x111,
          0x113,
          0x115,
          0x117,
          0x119,
          0x11b,
          0x11d,
          0x11f,
          0x121,
          0x123,
          0x125,
          0x127,
          0x129,
          0x12b,
          0x12d,
          0x12f,
          0x131,
          0x133,
          0x135,
          0x137,
          0x13a,
          0x13c,
          0x13e,
          0x140,
          0x142,
          0x144,
          0x146,
          0x14b,
          0x14d,
          0x14f,
          0x151,
          0x153,
          0x155,
          0x157,
          0x159,
          0x15b,
          0x15d,
          0x15f,
          0x161,
          0x163,
          0x165,
          0x167,
          0x169,
          0x16b,
          0x16d,
          0x16f,
          0x171,
          0x173,
          0x175,
          0x177,
          0x17a,
          0x17c,
          0x183,
          0x185,
          0x188,
          0x18c,
          0x192,
          0x195,
          0x19e,
          0x1a1,
          0x1a3,
          0x1a5,
          0x1a8,
          0x1ad,
          0x1b0,
          0x1b4,
          0x1b6,
          0x1b9,
          0x1bd,
          0x1bf,
          0x1c4,
          0x1cc,
          0x1ce,
          0x1d0,
          0x1d2,
          0x1d4,
          0x1d6,
          0x1d8,
          0x1da,
          0x1df,
          0x1e1,
          0x1e3,
          0x1e5,
          0x1e7,
          0x1e9,
          0x1eb,
          0x1ed,
          0x1f3,
          0x1f5,
          0x1f9,
          0x1fb,
          0x1fd,
          0x1ff,
          0x201,
          0x203,
          0x205,
          0x207,
          0x209,
          0x20b,
          0x20d,
          0x20f,
          0x211,
          0x213,
          0x215,
          0x217,
          0x219,
          0x21b,
          0x21d,
          0x21f,
          0x223,
          0x225,
          0x227,
          0x229,
          0x22b,
          0x22d,
          0x22f,
          0x231,
          0x233,
          0x23c,
          0x242,
          0x247,
          0x249,
          0x24b,
          0x24d,
          0x259,
          0x263,
          0x26f,
          0x275,
          0x27d,
          0x280,
          0x283,
          0x292,
          0x345,
          0x371,
          0x373,
          0x377,
          0x390,
          0x3d9,
          0x3db,
          0x3dd,
          0x3df,
          0x3e1,
          0x3e3,
          0x3e5,
          0x3e7,
          0x3e9,
          0x3eb,
          0x3ed,
          0x3f5,
          0x3f8,
          0x3fb,
          0x461,
          0x463,
          0x465,
          0x467,
          0x469,
          0x46b,
          0x46d,
          0x46f,
          0x471,
          0x473,
          0x475,
          0x477,
          0x479,
          0x47b,
          0x47d,
          0x47f,
          0x481,
          0x48b,
          0x48d,
          0x48f,
          0x491,
          0x493,
          0x495,
          0x497,
          0x499,
          0x49b,
          0x49d,
          0x49f,
          0x4a1,
          0x4a3,
          0x4a5,
          0x4a7,
          0x4a9,
          0x4ab,
          0x4ad,
          0x4af,
          0x4b1,
          0x4b3,
          0x4b5,
          0x4b7,
          0x4b9,
          0x4bb,
          0x4bd,
          0x4bf,
          0x4c2,
          0x4c4,
          0x4c6,
          0x4c8,
          0x4ca,
          0x4cc,
          0x4d1,
          0x4d3,
          0x4d5,
          0x4d7,
          0x4d9,
          0x4db,
          0x4dd,
          0x4df,
          0x4e1,
          0x4e3,
          0x4e5,
          0x4e7,
          0x4e9,
          0x4eb,
          0x4ed,
          0x4ef,
          0x4f1,
          0x4f3,
          0x4f5,
          0x4f7,
          0x4f9,
          0x4fb,
          0x4fd,
          0x4ff,
          0x501,
          0x503,
          0x505,
          0x507,
          0x509,
          0x50b,
          0x50d,
          0x50f,
          0x511,
          0x513,
          0x515,
          0x517,
          0x519,
          0x51b,
          0x51d,
          0x51f,
          0x521,
          0x523,
          0x525,
          0x527,
          0x529,
          0x52b,
          0x52d,
          0x52f,
          0x1d79,
          0x1d7d,
          0x1e01,
          0x1e03,
          0x1e05,
          0x1e07,
          0x1e09,
          0x1e0b,
          0x1e0d,
          0x1e0f,
          0x1e11,
          0x1e13,
          0x1e15,
          0x1e17,
          0x1e19,
          0x1e1b,
          0x1e1d,
          0x1e1f,
          0x1e21,
          0x1e23,
          0x1e25,
          0x1e27,
          0x1e29,
          0x1e2b,
          0x1e2d,
          0x1e2f,
          0x1e31,
          0x1e33,
          0x1e35,
          0x1e37,
          0x1e39,
          0x1e3b,
          0x1e3d,
          0x1e3f,
          0x1e41,
          0x1e43,
          0x1e45,
          0x1e47,
          0x1e49,
          0x1e4b,
          0x1e4d,
          0x1e4f,
          0x1e51,
          0x1e53,
          0x1e55,
          0x1e57,
          0x1e59,
          0x1e5b,
          0x1e5d,
          0x1e5f,
          0x1e61,
          0x1e63,
          0x1e65,
          0x1e67,
          0x1e69,
          0x1e6b,
          0x1e6d,
          0x1e6f,
          0x1e71,
          0x1e73,
          0x1e75,
          0x1e77,
          0x1e79,
          0x1e7b,
          0x1e7d,
          0x1e7f,
          0x1e81,
          0x1e83,
          0x1e85,
          0x1e87,
          0x1e89,
          0x1e8b,
          0x1e8d,
          0x1e8f,
          0x1e91,
          0x1e93,
          0x1ea1,
          0x1ea3,
          0x1ea5,
          0x1ea7,
          0x1ea9,
          0x1eab,
          0x1ead,
          0x1eaf,
          0x1eb1,
          0x1eb3,
          0x1eb5,
          0x1eb7,
          0x1eb9,
          0x1ebb,
          0x1ebd,
          0x1ebf,
          0x1ec1,
          0x1ec3,
          0x1ec5,
          0x1ec7,
          0x1ec9,
          0x1ecb,
          0x1ecd,
          0x1ecf,
          0x1ed1,
          0x1ed3,
          0x1ed5,
          0x1ed7,
          0x1ed9,
          0x1edb,
          0x1edd,
          0x1edf,
          0x1ee1,
          0x1ee3,
          0x1ee5,
          0x1ee7,
          0x1ee9,
          0x1eeb,
          0x1eed,
          0x1eef,
          0x1ef1,
          0x1ef3,
          0x1ef5,
          0x1ef7,
          0x1ef9,
          0x1efb,
          0x1efd,
          0x1fbe,
          0x214e,
          0x2184,
          0x2c61,
          0x2c68,
          0x2c6a,
          0x2c6c,
          0x2c73,
          0x2c76,
          0x2c81,
          0x2c83,
          0x2c85,
          0x2c87,
          0x2c89,
          0x2c8b,
          0x2c8d,
          0x2c8f,
          0x2c91,
          0x2c93,
          0x2c95,
          0x2c97,
          0x2c99,
          0x2c9b,
          0x2c9d,
          0x2c9f,
          0x2ca1,
          0x2ca3,
          0x2ca5,
          0x2ca7,
          0x2ca9,
          0x2cab,
          0x2cad,
          0x2caf,
          0x2cb1,
          0x2cb3,
          0x2cb5,
          0x2cb7,
          0x2cb9,
          0x2cbb,
          0x2cbd,
          0x2cbf,
          0x2cc1,
          0x2cc3,
          0x2cc5,
          0x2cc7,
          0x2cc9,
          0x2ccb,
          0x2ccd,
          0x2ccf,
          0x2cd1,
          0x2cd3,
          0x2cd5,
          0x2cd7,
          0x2cd9,
          0x2cdb,
          0x2cdd,
          0x2cdf,
          0x2ce1,
          0x2ce3,
          0x2cec,
          0x2cee,
          0x2cf3,
          0x2d27,
          0x2d2d,
          0xa641,
          0xa643,
          0xa645,
          0xa647,
          0xa649,
          0xa64b,
          0xa64d,
          0xa64f,
          0xa651,
          0xa653,
          0xa655,
          0xa657,
          0xa659,
          0xa65b,
          0xa65d,
          0xa65f,
          0xa661,
          0xa663,
          0xa665,
          0xa667,
          0xa669,
          0xa66b,
          0xa66d,
          0xa681,
          0xa683,
          0xa685,
          0xa687,
          0xa689,
          0xa68b,
          0xa68d,
          0xa68f,
          0xa691,
          0xa693,
          0xa695,
          0xa697,
          0xa699,
          0xa69b,
          0xa723,
          0xa725,
          0xa727,
          0xa729,
          0xa72b,
          0xa72d,
          0xa72f,
          0xa733,
          0xa735,
          0xa737,
          0xa739,
          0xa73b,
          0xa73d,
          0xa73f,
          0xa741,
          0xa743,
          0xa745,
          0xa747,
          0xa749,
          0xa74b,
          0xa74d,
          0xa74f,
          0xa751,
          0xa753,
          0xa755,
          0xa757,
          0xa759,
          0xa75b,
          0xa75d,
          0xa75f,
          0xa761,
          0xa763,
          0xa765,
          0xa767,
          0xa769,
          0xa76b,
          0xa76d,
          0xa76f,
          0xa77a,
          0xa77c,
          0xa77f,
          0xa781,
          0xa783,
          0xa785,
          0xa787,
          0xa78c,
          0xa791,
          0xa793,
          0xa797,
          0xa799,
          0xa79b,
          0xa79d,
          0xa79f,
          0xa7a1,
          0xa7a3,
          0xa7a5,
          0xa7a7,
          0xa7a9,
          0xa7b5,
          0xa7b7,
          0xab53
        )
          .addRange(0x61, 0x7a)
          .addRange(0xdf, 0xf6)
          .addRange(0xf8, 0xff)
          .addRange(0x148, 0x149)
          .addRange(0x17e, 0x180)
          .addRange(0x199, 0x19a)
          .addRange(0x1c6, 0x1c7)
          .addRange(0x1c9, 0x1ca)
          .addRange(0x1dc, 0x1dd)
          .addRange(0x1ef, 0x1f1)
          .addRange(0x23f, 0x240)
          .addRange(0x24f, 0x254)
          .addRange(0x256, 0x257)
          .addRange(0x25b, 0x25c)
          .addRange(0x260, 0x261)
          .addRange(0x265, 0x266)
          .addRange(0x268, 0x26c)
          .addRange(0x271, 0x272)
          .addRange(0x287, 0x28c)
          .addRange(0x29d, 0x29e)
          .addRange(0x37b, 0x37d)
          .addRange(0x3ac, 0x3ce)
          .addRange(0x3d0, 0x3d1)
          .addRange(0x3d5, 0x3d7)
          .addRange(0x3ef, 0x3f3)
          .addRange(0x430, 0x45f)
          .addRange(0x4ce, 0x4cf)
          .addRange(0x561, 0x587)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1e95, 0x1e9b)
          .addRange(0x1eff, 0x1f07)
          .addRange(0x1f10, 0x1f15)
          .addRange(0x1f20, 0x1f27)
          .addRange(0x1f30, 0x1f37)
          .addRange(0x1f40, 0x1f45)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f60, 0x1f67)
          .addRange(0x1f70, 0x1f7d)
          .addRange(0x1f80, 0x1f87)
          .addRange(0x1f90, 0x1f97)
          .addRange(0x1fa0, 0x1fa7)
          .addRange(0x1fb0, 0x1fb4)
          .addRange(0x1fb6, 0x1fb7)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fc7)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fd7)
          .addRange(0x1fe0, 0x1fe7)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ff7)
          .addRange(0x2170, 0x217f)
          .addRange(0x24d0, 0x24e9)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c65, 0x2c66)
          .addRange(0x2d00, 0x2d25)
          .addRange(0xab70, 0xabbf)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xff41, 0xff5a)
          .addRange(0x10428, 0x1044f)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x118c0, 0x118df)
          .addRange(0x1e922, 0x1e943);

        /***/
      },
      /* 572 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xb5,
          0x101,
          0x103,
          0x105,
          0x107,
          0x109,
          0x10b,
          0x10d,
          0x10f,
          0x111,
          0x113,
          0x115,
          0x117,
          0x119,
          0x11b,
          0x11d,
          0x11f,
          0x121,
          0x123,
          0x125,
          0x127,
          0x129,
          0x12b,
          0x12d,
          0x12f,
          0x131,
          0x133,
          0x135,
          0x137,
          0x13a,
          0x13c,
          0x13e,
          0x140,
          0x142,
          0x144,
          0x146,
          0x14b,
          0x14d,
          0x14f,
          0x151,
          0x153,
          0x155,
          0x157,
          0x159,
          0x15b,
          0x15d,
          0x15f,
          0x161,
          0x163,
          0x165,
          0x167,
          0x169,
          0x16b,
          0x16d,
          0x16f,
          0x171,
          0x173,
          0x175,
          0x177,
          0x17a,
          0x17c,
          0x183,
          0x185,
          0x188,
          0x18c,
          0x192,
          0x195,
          0x19e,
          0x1a1,
          0x1a3,
          0x1a5,
          0x1a8,
          0x1ad,
          0x1b0,
          0x1b4,
          0x1b6,
          0x1b9,
          0x1bd,
          0x1bf,
          0x1ce,
          0x1d0,
          0x1d2,
          0x1d4,
          0x1d6,
          0x1d8,
          0x1da,
          0x1df,
          0x1e1,
          0x1e3,
          0x1e5,
          0x1e7,
          0x1e9,
          0x1eb,
          0x1ed,
          0x1f5,
          0x1f9,
          0x1fb,
          0x1fd,
          0x1ff,
          0x201,
          0x203,
          0x205,
          0x207,
          0x209,
          0x20b,
          0x20d,
          0x20f,
          0x211,
          0x213,
          0x215,
          0x217,
          0x219,
          0x21b,
          0x21d,
          0x21f,
          0x223,
          0x225,
          0x227,
          0x229,
          0x22b,
          0x22d,
          0x22f,
          0x231,
          0x233,
          0x23c,
          0x242,
          0x247,
          0x249,
          0x24b,
          0x24d,
          0x259,
          0x263,
          0x26f,
          0x275,
          0x27d,
          0x280,
          0x283,
          0x292,
          0x345,
          0x371,
          0x373,
          0x377,
          0x390,
          0x3d9,
          0x3db,
          0x3dd,
          0x3df,
          0x3e1,
          0x3e3,
          0x3e5,
          0x3e7,
          0x3e9,
          0x3eb,
          0x3ed,
          0x3f5,
          0x3f8,
          0x3fb,
          0x461,
          0x463,
          0x465,
          0x467,
          0x469,
          0x46b,
          0x46d,
          0x46f,
          0x471,
          0x473,
          0x475,
          0x477,
          0x479,
          0x47b,
          0x47d,
          0x47f,
          0x481,
          0x48b,
          0x48d,
          0x48f,
          0x491,
          0x493,
          0x495,
          0x497,
          0x499,
          0x49b,
          0x49d,
          0x49f,
          0x4a1,
          0x4a3,
          0x4a5,
          0x4a7,
          0x4a9,
          0x4ab,
          0x4ad,
          0x4af,
          0x4b1,
          0x4b3,
          0x4b5,
          0x4b7,
          0x4b9,
          0x4bb,
          0x4bd,
          0x4bf,
          0x4c2,
          0x4c4,
          0x4c6,
          0x4c8,
          0x4ca,
          0x4cc,
          0x4d1,
          0x4d3,
          0x4d5,
          0x4d7,
          0x4d9,
          0x4db,
          0x4dd,
          0x4df,
          0x4e1,
          0x4e3,
          0x4e5,
          0x4e7,
          0x4e9,
          0x4eb,
          0x4ed,
          0x4ef,
          0x4f1,
          0x4f3,
          0x4f5,
          0x4f7,
          0x4f9,
          0x4fb,
          0x4fd,
          0x4ff,
          0x501,
          0x503,
          0x505,
          0x507,
          0x509,
          0x50b,
          0x50d,
          0x50f,
          0x511,
          0x513,
          0x515,
          0x517,
          0x519,
          0x51b,
          0x51d,
          0x51f,
          0x521,
          0x523,
          0x525,
          0x527,
          0x529,
          0x52b,
          0x52d,
          0x52f,
          0x1d79,
          0x1d7d,
          0x1e01,
          0x1e03,
          0x1e05,
          0x1e07,
          0x1e09,
          0x1e0b,
          0x1e0d,
          0x1e0f,
          0x1e11,
          0x1e13,
          0x1e15,
          0x1e17,
          0x1e19,
          0x1e1b,
          0x1e1d,
          0x1e1f,
          0x1e21,
          0x1e23,
          0x1e25,
          0x1e27,
          0x1e29,
          0x1e2b,
          0x1e2d,
          0x1e2f,
          0x1e31,
          0x1e33,
          0x1e35,
          0x1e37,
          0x1e39,
          0x1e3b,
          0x1e3d,
          0x1e3f,
          0x1e41,
          0x1e43,
          0x1e45,
          0x1e47,
          0x1e49,
          0x1e4b,
          0x1e4d,
          0x1e4f,
          0x1e51,
          0x1e53,
          0x1e55,
          0x1e57,
          0x1e59,
          0x1e5b,
          0x1e5d,
          0x1e5f,
          0x1e61,
          0x1e63,
          0x1e65,
          0x1e67,
          0x1e69,
          0x1e6b,
          0x1e6d,
          0x1e6f,
          0x1e71,
          0x1e73,
          0x1e75,
          0x1e77,
          0x1e79,
          0x1e7b,
          0x1e7d,
          0x1e7f,
          0x1e81,
          0x1e83,
          0x1e85,
          0x1e87,
          0x1e89,
          0x1e8b,
          0x1e8d,
          0x1e8f,
          0x1e91,
          0x1e93,
          0x1ea1,
          0x1ea3,
          0x1ea5,
          0x1ea7,
          0x1ea9,
          0x1eab,
          0x1ead,
          0x1eaf,
          0x1eb1,
          0x1eb3,
          0x1eb5,
          0x1eb7,
          0x1eb9,
          0x1ebb,
          0x1ebd,
          0x1ebf,
          0x1ec1,
          0x1ec3,
          0x1ec5,
          0x1ec7,
          0x1ec9,
          0x1ecb,
          0x1ecd,
          0x1ecf,
          0x1ed1,
          0x1ed3,
          0x1ed5,
          0x1ed7,
          0x1ed9,
          0x1edb,
          0x1edd,
          0x1edf,
          0x1ee1,
          0x1ee3,
          0x1ee5,
          0x1ee7,
          0x1ee9,
          0x1eeb,
          0x1eed,
          0x1eef,
          0x1ef1,
          0x1ef3,
          0x1ef5,
          0x1ef7,
          0x1ef9,
          0x1efb,
          0x1efd,
          0x1fbc,
          0x1fbe,
          0x1fcc,
          0x1ffc,
          0x214e,
          0x2184,
          0x2c61,
          0x2c68,
          0x2c6a,
          0x2c6c,
          0x2c73,
          0x2c76,
          0x2c81,
          0x2c83,
          0x2c85,
          0x2c87,
          0x2c89,
          0x2c8b,
          0x2c8d,
          0x2c8f,
          0x2c91,
          0x2c93,
          0x2c95,
          0x2c97,
          0x2c99,
          0x2c9b,
          0x2c9d,
          0x2c9f,
          0x2ca1,
          0x2ca3,
          0x2ca5,
          0x2ca7,
          0x2ca9,
          0x2cab,
          0x2cad,
          0x2caf,
          0x2cb1,
          0x2cb3,
          0x2cb5,
          0x2cb7,
          0x2cb9,
          0x2cbb,
          0x2cbd,
          0x2cbf,
          0x2cc1,
          0x2cc3,
          0x2cc5,
          0x2cc7,
          0x2cc9,
          0x2ccb,
          0x2ccd,
          0x2ccf,
          0x2cd1,
          0x2cd3,
          0x2cd5,
          0x2cd7,
          0x2cd9,
          0x2cdb,
          0x2cdd,
          0x2cdf,
          0x2ce1,
          0x2ce3,
          0x2cec,
          0x2cee,
          0x2cf3,
          0x2d27,
          0x2d2d,
          0xa641,
          0xa643,
          0xa645,
          0xa647,
          0xa649,
          0xa64b,
          0xa64d,
          0xa64f,
          0xa651,
          0xa653,
          0xa655,
          0xa657,
          0xa659,
          0xa65b,
          0xa65d,
          0xa65f,
          0xa661,
          0xa663,
          0xa665,
          0xa667,
          0xa669,
          0xa66b,
          0xa66d,
          0xa681,
          0xa683,
          0xa685,
          0xa687,
          0xa689,
          0xa68b,
          0xa68d,
          0xa68f,
          0xa691,
          0xa693,
          0xa695,
          0xa697,
          0xa699,
          0xa69b,
          0xa723,
          0xa725,
          0xa727,
          0xa729,
          0xa72b,
          0xa72d,
          0xa72f,
          0xa733,
          0xa735,
          0xa737,
          0xa739,
          0xa73b,
          0xa73d,
          0xa73f,
          0xa741,
          0xa743,
          0xa745,
          0xa747,
          0xa749,
          0xa74b,
          0xa74d,
          0xa74f,
          0xa751,
          0xa753,
          0xa755,
          0xa757,
          0xa759,
          0xa75b,
          0xa75d,
          0xa75f,
          0xa761,
          0xa763,
          0xa765,
          0xa767,
          0xa769,
          0xa76b,
          0xa76d,
          0xa76f,
          0xa77a,
          0xa77c,
          0xa77f,
          0xa781,
          0xa783,
          0xa785,
          0xa787,
          0xa78c,
          0xa791,
          0xa793,
          0xa797,
          0xa799,
          0xa79b,
          0xa79d,
          0xa79f,
          0xa7a1,
          0xa7a3,
          0xa7a5,
          0xa7a7,
          0xa7a9,
          0xa7b5,
          0xa7b7,
          0xab53
        )
          .addRange(0x61, 0x7a)
          .addRange(0xdf, 0xf6)
          .addRange(0xf8, 0xff)
          .addRange(0x148, 0x149)
          .addRange(0x17e, 0x180)
          .addRange(0x199, 0x19a)
          .addRange(0x1c5, 0x1c6)
          .addRange(0x1c8, 0x1c9)
          .addRange(0x1cb, 0x1cc)
          .addRange(0x1dc, 0x1dd)
          .addRange(0x1ef, 0x1f0)
          .addRange(0x1f2, 0x1f3)
          .addRange(0x23f, 0x240)
          .addRange(0x24f, 0x254)
          .addRange(0x256, 0x257)
          .addRange(0x25b, 0x25c)
          .addRange(0x260, 0x261)
          .addRange(0x265, 0x266)
          .addRange(0x268, 0x26c)
          .addRange(0x271, 0x272)
          .addRange(0x287, 0x28c)
          .addRange(0x29d, 0x29e)
          .addRange(0x37b, 0x37d)
          .addRange(0x3ac, 0x3ce)
          .addRange(0x3d0, 0x3d1)
          .addRange(0x3d5, 0x3d7)
          .addRange(0x3ef, 0x3f3)
          .addRange(0x430, 0x45f)
          .addRange(0x4ce, 0x4cf)
          .addRange(0x561, 0x587)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1e95, 0x1e9b)
          .addRange(0x1eff, 0x1f07)
          .addRange(0x1f10, 0x1f15)
          .addRange(0x1f20, 0x1f27)
          .addRange(0x1f30, 0x1f37)
          .addRange(0x1f40, 0x1f45)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f60, 0x1f67)
          .addRange(0x1f70, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fb7)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fc7)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fd7)
          .addRange(0x1fe0, 0x1fe7)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ff7)
          .addRange(0x2170, 0x217f)
          .addRange(0x24d0, 0x24e9)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c65, 0x2c66)
          .addRange(0x2d00, 0x2d25)
          .addRange(0xab70, 0xabbf)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xff41, 0xff5a)
          .addRange(0x10428, 0x1044f)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x118c0, 0x118df)
          .addRange(0x1e922, 0x1e943);

        /***/
      },
      /* 573 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x2d,
          0x58a,
          0x5be,
          0x1400,
          0x1806,
          0x2053,
          0x207b,
          0x208b,
          0x2212,
          0x2e17,
          0x2e1a,
          0x2e40,
          0x301c,
          0x3030,
          0x30a0,
          0xfe58,
          0xfe63,
          0xff0d
        )
          .addRange(0x2010, 0x2015)
          .addRange(0x2e3a, 0x2e3b)
          .addRange(0xfe31, 0xfe32);

        /***/
      },
      /* 574 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xad,
          0x34f,
          0x61c,
          0x3164,
          0xfeff,
          0xffa0
        )
          .addRange(0x115f, 0x1160)
          .addRange(0x17b4, 0x17b5)
          .addRange(0x180b, 0x180e)
          .addRange(0x200b, 0x200f)
          .addRange(0x202a, 0x202e)
          .addRange(0x2060, 0x206f)
          .addRange(0xfe00, 0xfe0f)
          .addRange(0xfff0, 0xfff8)
          .addRange(0x1bca0, 0x1bca3)
          .addRange(0x1d173, 0x1d17a)
          .addRange(0xe0000, 0xe0fff);

        /***/
      },
      /* 575 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x149,
          0x673,
          0xf77,
          0xf79,
          0xe0001
        )
          .addRange(0x17a3, 0x17a4)
          .addRange(0x206a, 0x206f)
          .addRange(0x2329, 0x232a);

        /***/
      },
      /* 576 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x5e,
          0x60,
          0xa8,
          0xaf,
          0xb4,
          0x37a,
          0x559,
          0x5bf,
          0x5c4,
          0x93c,
          0x94d,
          0x971,
          0x9bc,
          0x9cd,
          0xa3c,
          0xa4d,
          0xabc,
          0xacd,
          0xb3c,
          0xb4d,
          0xbcd,
          0xc4d,
          0xcbc,
          0xccd,
          0xd4d,
          0xdca,
          0xe4e,
          0xf35,
          0xf37,
          0xf39,
          0xfc6,
          0x1037,
          0x108f,
          0x17dd,
          0x1a7f,
          0x1b34,
          0x1b44,
          0x1ced,
          0x1cf4,
          0x1fbd,
          0x2e2f,
          0x30fc,
          0xa66f,
          0xa67f,
          0xa788,
          0xa8c4,
          0xa953,
          0xa9b3,
          0xa9c0,
          0xa9e5,
          0xaaf6,
          0xfb1e,
          0xff3e,
          0xff40,
          0xff70,
          0xffe3,
          0x102e0,
          0x11173,
          0x111c0,
          0x1133c,
          0x1134d,
          0x11442,
          0x11446,
          0x1163f,
          0x1172b,
          0x11a34,
          0x11a47,
          0x11a99,
          0x11c3f,
          0x11d42
        )
          .addRange(0xb7, 0xb8)
          .addRange(0x2b0, 0x34e)
          .addRange(0x350, 0x357)
          .addRange(0x35d, 0x362)
          .addRange(0x374, 0x375)
          .addRange(0x384, 0x385)
          .addRange(0x483, 0x487)
          .addRange(0x591, 0x5a1)
          .addRange(0x5a3, 0x5bd)
          .addRange(0x5c1, 0x5c2)
          .addRange(0x64b, 0x652)
          .addRange(0x657, 0x658)
          .addRange(0x6df, 0x6e0)
          .addRange(0x6e5, 0x6e6)
          .addRange(0x6ea, 0x6ec)
          .addRange(0x730, 0x74a)
          .addRange(0x7a6, 0x7b0)
          .addRange(0x7eb, 0x7f5)
          .addRange(0x818, 0x819)
          .addRange(0x8e3, 0x8fe)
          .addRange(0x951, 0x954)
          .addRange(0xafd, 0xaff)
          .addRange(0xd3b, 0xd3c)
          .addRange(0xe47, 0xe4c)
          .addRange(0xec8, 0xecc)
          .addRange(0xf18, 0xf19)
          .addRange(0xf3e, 0xf3f)
          .addRange(0xf82, 0xf84)
          .addRange(0xf86, 0xf87)
          .addRange(0x1039, 0x103a)
          .addRange(0x1087, 0x108d)
          .addRange(0x109a, 0x109b)
          .addRange(0x17c9, 0x17d3)
          .addRange(0x1939, 0x193b)
          .addRange(0x1a75, 0x1a7c)
          .addRange(0x1ab0, 0x1abd)
          .addRange(0x1b6b, 0x1b73)
          .addRange(0x1baa, 0x1bab)
          .addRange(0x1c36, 0x1c37)
          .addRange(0x1c78, 0x1c7d)
          .addRange(0x1cd0, 0x1ce8)
          .addRange(0x1cf7, 0x1cf9)
          .addRange(0x1d2c, 0x1d6a)
          .addRange(0x1dc4, 0x1dcf)
          .addRange(0x1df5, 0x1df9)
          .addRange(0x1dfd, 0x1dff)
          .addRange(0x1fbf, 0x1fc1)
          .addRange(0x1fcd, 0x1fcf)
          .addRange(0x1fdd, 0x1fdf)
          .addRange(0x1fed, 0x1fef)
          .addRange(0x1ffd, 0x1ffe)
          .addRange(0x2cef, 0x2cf1)
          .addRange(0x302a, 0x302f)
          .addRange(0x3099, 0x309c)
          .addRange(0xa67c, 0xa67d)
          .addRange(0xa69c, 0xa69d)
          .addRange(0xa6f0, 0xa6f1)
          .addRange(0xa717, 0xa721)
          .addRange(0xa7f8, 0xa7f9)
          .addRange(0xa8e0, 0xa8f1)
          .addRange(0xa92b, 0xa92e)
          .addRange(0xaa7b, 0xaa7d)
          .addRange(0xaabf, 0xaac2)
          .addRange(0xab5b, 0xab5f)
          .addRange(0xabec, 0xabed)
          .addRange(0xfe20, 0xfe2f)
          .addRange(0xff9e, 0xff9f)
          .addRange(0x10ae5, 0x10ae6)
          .addRange(0x110b9, 0x110ba)
          .addRange(0x11133, 0x11134)
          .addRange(0x111ca, 0x111cc)
          .addRange(0x11235, 0x11236)
          .addRange(0x112e9, 0x112ea)
          .addRange(0x11366, 0x1136c)
          .addRange(0x11370, 0x11374)
          .addRange(0x114c2, 0x114c3)
          .addRange(0x115bf, 0x115c0)
          .addRange(0x116b6, 0x116b7)
          .addRange(0x11d44, 0x11d45)
          .addRange(0x16af0, 0x16af4)
          .addRange(0x16f8f, 0x16f9f)
          .addRange(0x1d167, 0x1d169)
          .addRange(0x1d16d, 0x1d172)
          .addRange(0x1d17b, 0x1d182)
          .addRange(0x1d185, 0x1d18b)
          .addRange(0x1d1aa, 0x1d1ad)
          .addRange(0x1e8d0, 0x1e8d6)
          .addRange(0x1e944, 0x1e946)
          .addRange(0x1e948, 0x1e94a);

        /***/
      },
      /* 577 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x23,
          0x2a,
          0xa9,
          0xae,
          0x203c,
          0x2049,
          0x2122,
          0x2139,
          0x2328,
          0x23cf,
          0x24c2,
          0x25b6,
          0x25c0,
          0x260e,
          0x2611,
          0x2618,
          0x261d,
          0x2620,
          0x2626,
          0x262a,
          0x2640,
          0x2642,
          0x2660,
          0x2663,
          0x2668,
          0x267b,
          0x267f,
          0x2699,
          0x26c8,
          0x26d1,
          0x26fd,
          0x2702,
          0x2705,
          0x270f,
          0x2712,
          0x2714,
          0x2716,
          0x271d,
          0x2721,
          0x2728,
          0x2744,
          0x2747,
          0x274c,
          0x274e,
          0x2757,
          0x27a1,
          0x27b0,
          0x27bf,
          0x2b50,
          0x2b55,
          0x3030,
          0x303d,
          0x3297,
          0x3299,
          0x1f004,
          0x1f0cf,
          0x1f18e,
          0x1f21a,
          0x1f22f,
          0x1f587,
          0x1f590,
          0x1f5a8,
          0x1f5bc,
          0x1f5e1,
          0x1f5e3,
          0x1f5e8,
          0x1f5ef,
          0x1f5f3,
          0x1f6e9,
          0x1f6f0,
          0x1f9c0
        )
          .addRange(0x30, 0x39)
          .addRange(0x2194, 0x2199)
          .addRange(0x21a9, 0x21aa)
          .addRange(0x231a, 0x231b)
          .addRange(0x23e9, 0x23f3)
          .addRange(0x23f8, 0x23fa)
          .addRange(0x25aa, 0x25ab)
          .addRange(0x25fb, 0x25fe)
          .addRange(0x2600, 0x2604)
          .addRange(0x2614, 0x2615)
          .addRange(0x2622, 0x2623)
          .addRange(0x262e, 0x262f)
          .addRange(0x2638, 0x263a)
          .addRange(0x2648, 0x2653)
          .addRange(0x2665, 0x2666)
          .addRange(0x2692, 0x2697)
          .addRange(0x269b, 0x269c)
          .addRange(0x26a0, 0x26a1)
          .addRange(0x26aa, 0x26ab)
          .addRange(0x26b0, 0x26b1)
          .addRange(0x26bd, 0x26be)
          .addRange(0x26c4, 0x26c5)
          .addRange(0x26ce, 0x26cf)
          .addRange(0x26d3, 0x26d4)
          .addRange(0x26e9, 0x26ea)
          .addRange(0x26f0, 0x26f5)
          .addRange(0x26f7, 0x26fa)
          .addRange(0x2708, 0x270d)
          .addRange(0x2733, 0x2734)
          .addRange(0x2753, 0x2755)
          .addRange(0x2763, 0x2764)
          .addRange(0x2795, 0x2797)
          .addRange(0x2934, 0x2935)
          .addRange(0x2b05, 0x2b07)
          .addRange(0x2b1b, 0x2b1c)
          .addRange(0x1f170, 0x1f171)
          .addRange(0x1f17e, 0x1f17f)
          .addRange(0x1f191, 0x1f19a)
          .addRange(0x1f1e6, 0x1f1ff)
          .addRange(0x1f201, 0x1f202)
          .addRange(0x1f232, 0x1f23a)
          .addRange(0x1f250, 0x1f251)
          .addRange(0x1f300, 0x1f321)
          .addRange(0x1f324, 0x1f393)
          .addRange(0x1f396, 0x1f397)
          .addRange(0x1f399, 0x1f39b)
          .addRange(0x1f39e, 0x1f3f0)
          .addRange(0x1f3f3, 0x1f3f5)
          .addRange(0x1f3f7, 0x1f4fd)
          .addRange(0x1f4ff, 0x1f53d)
          .addRange(0x1f549, 0x1f54e)
          .addRange(0x1f550, 0x1f567)
          .addRange(0x1f56f, 0x1f570)
          .addRange(0x1f573, 0x1f57a)
          .addRange(0x1f58a, 0x1f58d)
          .addRange(0x1f595, 0x1f596)
          .addRange(0x1f5a4, 0x1f5a5)
          .addRange(0x1f5b1, 0x1f5b2)
          .addRange(0x1f5c2, 0x1f5c4)
          .addRange(0x1f5d1, 0x1f5d3)
          .addRange(0x1f5dc, 0x1f5de)
          .addRange(0x1f5fa, 0x1f64f)
          .addRange(0x1f680, 0x1f6c5)
          .addRange(0x1f6cb, 0x1f6d2)
          .addRange(0x1f6e0, 0x1f6e5)
          .addRange(0x1f6eb, 0x1f6ec)
          .addRange(0x1f6f3, 0x1f6f8)
          .addRange(0x1f910, 0x1f93a)
          .addRange(0x1f93c, 0x1f93e)
          .addRange(0x1f940, 0x1f945)
          .addRange(0x1f947, 0x1f94c)
          .addRange(0x1f950, 0x1f96b)
          .addRange(0x1f980, 0x1f997)
          .addRange(0x1f9d0, 0x1f9e6);

        /***/
      },
      /* 578 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x23, 0x2a)
          .addRange(0x30, 0x39)
          .addRange(0x1f1e6, 0x1f1ff)
          .addRange(0x1f3fb, 0x1f3ff);

        /***/
      },
      /* 579 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x1f3fb, 0x1f3ff);

        /***/
      },
      /* 580 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x261d,
          0x26f9,
          0x1f385,
          0x1f3c7,
          0x1f46e,
          0x1f47c,
          0x1f4aa,
          0x1f57a,
          0x1f590,
          0x1f6a3,
          0x1f6c0,
          0x1f6cc,
          0x1f926
        )
          .addRange(0x270a, 0x270d)
          .addRange(0x1f3c2, 0x1f3c4)
          .addRange(0x1f3ca, 0x1f3cc)
          .addRange(0x1f442, 0x1f443)
          .addRange(0x1f446, 0x1f450)
          .addRange(0x1f466, 0x1f469)
          .addRange(0x1f470, 0x1f478)
          .addRange(0x1f481, 0x1f483)
          .addRange(0x1f485, 0x1f487)
          .addRange(0x1f574, 0x1f575)
          .addRange(0x1f595, 0x1f596)
          .addRange(0x1f645, 0x1f647)
          .addRange(0x1f64b, 0x1f64f)
          .addRange(0x1f6b4, 0x1f6b6)
          .addRange(0x1f918, 0x1f91c)
          .addRange(0x1f91e, 0x1f91f)
          .addRange(0x1f930, 0x1f939)
          .addRange(0x1f93d, 0x1f93e)
          .addRange(0x1f9d1, 0x1f9dd);

        /***/
      },
      /* 581 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x23f0,
          0x23f3,
          0x267f,
          0x2693,
          0x26a1,
          0x26ce,
          0x26d4,
          0x26ea,
          0x26f5,
          0x26fa,
          0x26fd,
          0x2705,
          0x2728,
          0x274c,
          0x274e,
          0x2757,
          0x27b0,
          0x27bf,
          0x2b50,
          0x2b55,
          0x1f004,
          0x1f0cf,
          0x1f18e,
          0x1f201,
          0x1f21a,
          0x1f22f,
          0x1f3f4,
          0x1f440,
          0x1f57a,
          0x1f5a4,
          0x1f6cc,
          0x1f9c0
        )
          .addRange(0x231a, 0x231b)
          .addRange(0x23e9, 0x23ec)
          .addRange(0x25fd, 0x25fe)
          .addRange(0x2614, 0x2615)
          .addRange(0x2648, 0x2653)
          .addRange(0x26aa, 0x26ab)
          .addRange(0x26bd, 0x26be)
          .addRange(0x26c4, 0x26c5)
          .addRange(0x26f2, 0x26f3)
          .addRange(0x270a, 0x270b)
          .addRange(0x2753, 0x2755)
          .addRange(0x2795, 0x2797)
          .addRange(0x2b1b, 0x2b1c)
          .addRange(0x1f191, 0x1f19a)
          .addRange(0x1f1e6, 0x1f1ff)
          .addRange(0x1f232, 0x1f236)
          .addRange(0x1f238, 0x1f23a)
          .addRange(0x1f250, 0x1f251)
          .addRange(0x1f300, 0x1f320)
          .addRange(0x1f32d, 0x1f335)
          .addRange(0x1f337, 0x1f37c)
          .addRange(0x1f37e, 0x1f393)
          .addRange(0x1f3a0, 0x1f3ca)
          .addRange(0x1f3cf, 0x1f3d3)
          .addRange(0x1f3e0, 0x1f3f0)
          .addRange(0x1f3f8, 0x1f43e)
          .addRange(0x1f442, 0x1f4fc)
          .addRange(0x1f4ff, 0x1f53d)
          .addRange(0x1f54b, 0x1f54e)
          .addRange(0x1f550, 0x1f567)
          .addRange(0x1f595, 0x1f596)
          .addRange(0x1f5fb, 0x1f64f)
          .addRange(0x1f680, 0x1f6c5)
          .addRange(0x1f6d0, 0x1f6d2)
          .addRange(0x1f6eb, 0x1f6ec)
          .addRange(0x1f6f4, 0x1f6f8)
          .addRange(0x1f910, 0x1f93a)
          .addRange(0x1f93c, 0x1f93e)
          .addRange(0x1f940, 0x1f945)
          .addRange(0x1f947, 0x1f94c)
          .addRange(0x1f950, 0x1f96b)
          .addRange(0x1f980, 0x1f997)
          .addRange(0x1f9d0, 0x1f9e6);

        /***/
      },
      /* 582 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xb7,
          0x640,
          0x7fa,
          0xe46,
          0xec6,
          0x180a,
          0x1843,
          0x1aa7,
          0x1c36,
          0x1c7b,
          0x3005,
          0xa015,
          0xa60c,
          0xa9cf,
          0xa9e6,
          0xaa70,
          0xaadd,
          0xff70,
          0x1135d,
          0x11a98
        )
          .addRange(0x2d0, 0x2d1)
          .addRange(0x3031, 0x3035)
          .addRange(0x309d, 0x309e)
          .addRange(0x30fc, 0x30fe)
          .addRange(0xaaf3, 0xaaf4)
          .addRange(0x115c6, 0x115c8)
          .addRange(0x16b42, 0x16b43)
          .addRange(0x16fe0, 0x16fe1)
          .addRange(0x1e944, 0x1e946);

        /***/
      },
      /* 583 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x38c,
          0x5be,
          0x5c0,
          0x5c3,
          0x5c6,
          0x61b,
          0x6de,
          0x6e9,
          0x710,
          0x7b1,
          0x81a,
          0x824,
          0x828,
          0x85e,
          0x93b,
          0x9b2,
          0x9bd,
          0x9ce,
          0xa03,
          0xa5e,
          0xa83,
          0xac9,
          0xad0,
          0xaf9,
          0xb3d,
          0xb40,
          0xb83,
          0xb9c,
          0xbbf,
          0xbd0,
          0xc3d,
          0xcde,
          0xd3d,
          0xdbd,
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xebd,
          0xec6,
          0xf36,
          0xf38,
          0xf7f,
          0xf85,
          0x1031,
          0x1038,
          0x10c7,
          0x10cd,
          0x1258,
          0x12c0,
          0x17b6,
          0x18aa,
          0x1940,
          0x1a57,
          0x1a61,
          0x1b35,
          0x1b3b,
          0x1baa,
          0x1be7,
          0x1bee,
          0x1cd3,
          0x1ce1,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x2d27,
          0x2d2d,
          0xa673,
          0xaa4d,
          0xaab1,
          0xaac0,
          0xaac2,
          0xfb1d,
          0xfb3e,
          0x101a0,
          0x1056f,
          0x10808,
          0x1083c,
          0x1093f,
          0x11000,
          0x1112c,
          0x111cd,
          0x11235,
          0x11288,
          0x1133d,
          0x1133f,
          0x11350,
          0x11445,
          0x1145b,
          0x1145d,
          0x114b9,
          0x114be,
          0x114c1,
          0x115be,
          0x1163e,
          0x116ac,
          0x116b6,
          0x11726,
          0x118ff,
          0x11a00,
          0x11a50,
          0x11a97,
          0x11c3e,
          0x11ca9,
          0x11cb1,
          0x11cb4,
          0x11d46,
          0x16af5,
          0x1bc9c,
          0x1bc9f,
          0x1d166,
          0x1d245,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e,
          0x1f9c0
        )
          .addRange(0x20, 0x7e)
          .addRange(0xa0, 0xac)
          .addRange(0xae, 0x2ff)
          .addRange(0x370, 0x377)
          .addRange(0x37a, 0x37f)
          .addRange(0x384, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x482)
          .addRange(0x48a, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x559, 0x55f)
          .addRange(0x561, 0x587)
          .addRange(0x589, 0x58a)
          .addRange(0x58d, 0x58f)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f4)
          .addRange(0x606, 0x60f)
          .addRange(0x61e, 0x64a)
          .addRange(0x660, 0x66f)
          .addRange(0x671, 0x6d5)
          .addRange(0x6e5, 0x6e6)
          .addRange(0x6ee, 0x70d)
          .addRange(0x712, 0x72f)
          .addRange(0x74d, 0x7a5)
          .addRange(0x7c0, 0x7ea)
          .addRange(0x7f4, 0x7fa)
          .addRange(0x800, 0x815)
          .addRange(0x830, 0x83e)
          .addRange(0x840, 0x858)
          .addRange(0x860, 0x86a)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x903, 0x939)
          .addRange(0x93d, 0x940)
          .addRange(0x949, 0x94c)
          .addRange(0x94e, 0x950)
          .addRange(0x958, 0x961)
          .addRange(0x964, 0x980)
          .addRange(0x982, 0x983)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9bf, 0x9c0)
          .addRange(0x9c7, 0x9c8)
          .addRange(0x9cb, 0x9cc)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e1)
          .addRange(0x9e6, 0x9fd)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa3e, 0xa40)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa66, 0xa6f)
          .addRange(0xa72, 0xa74)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xabd, 0xac0)
          .addRange(0xacb, 0xacc)
          .addRange(0xae0, 0xae1)
          .addRange(0xae6, 0xaf1)
          .addRange(0xb02, 0xb03)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb47, 0xb48)
          .addRange(0xb4b, 0xb4c)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb61)
          .addRange(0xb66, 0xb77)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xbc1, 0xbc2)
          .addRange(0xbc6, 0xbc8)
          .addRange(0xbca, 0xbcc)
          .addRange(0xbe6, 0xbfa)
          .addRange(0xc01, 0xc03)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc41, 0xc44)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc61)
          .addRange(0xc66, 0xc6f)
          .addRange(0xc78, 0xc80)
          .addRange(0xc82, 0xc83)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xcbd, 0xcbe)
          .addRange(0xcc0, 0xcc1)
          .addRange(0xcc3, 0xcc4)
          .addRange(0xcc7, 0xcc8)
          .addRange(0xcca, 0xccb)
          .addRange(0xce0, 0xce1)
          .addRange(0xce6, 0xcef)
          .addRange(0xcf1, 0xcf2)
          .addRange(0xd02, 0xd03)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd3a)
          .addRange(0xd3f, 0xd40)
          .addRange(0xd46, 0xd48)
          .addRange(0xd4a, 0xd4c)
          .addRange(0xd4e, 0xd4f)
          .addRange(0xd54, 0xd56)
          .addRange(0xd58, 0xd61)
          .addRange(0xd66, 0xd7f)
          .addRange(0xd82, 0xd83)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xdd0, 0xdd1)
          .addRange(0xdd8, 0xdde)
          .addRange(0xde6, 0xdef)
          .addRange(0xdf2, 0xdf4)
          .addRange(0xe01, 0xe30)
          .addRange(0xe32, 0xe33)
          .addRange(0xe3f, 0xe46)
          .addRange(0xe4f, 0xe5b)
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb0)
          .addRange(0xeb2, 0xeb3)
          .addRange(0xec0, 0xec4)
          .addRange(0xed0, 0xed9)
          .addRange(0xedc, 0xedf)
          .addRange(0xf00, 0xf17)
          .addRange(0xf1a, 0xf34)
          .addRange(0xf3a, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf88, 0xf8c)
          .addRange(0xfbe, 0xfc5)
          .addRange(0xfc7, 0xfcc)
          .addRange(0xfce, 0xfda)
          .addRange(0x1000, 0x102c)
          .addRange(0x103b, 0x103c)
          .addRange(0x103f, 0x1057)
          .addRange(0x105a, 0x105d)
          .addRange(0x1061, 0x1070)
          .addRange(0x1075, 0x1081)
          .addRange(0x1083, 0x1084)
          .addRange(0x1087, 0x108c)
          .addRange(0x108e, 0x109c)
          .addRange(0x109e, 0x10c5)
          .addRange(0x10d0, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x1360, 0x137c)
          .addRange(0x1380, 0x1399)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1400, 0x169c)
          .addRange(0x16a0, 0x16f8)
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1711)
          .addRange(0x1720, 0x1731)
          .addRange(0x1735, 0x1736)
          .addRange(0x1740, 0x1751)
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1780, 0x17b3)
          .addRange(0x17be, 0x17c5)
          .addRange(0x17c7, 0x17c8)
          .addRange(0x17d4, 0x17dc)
          .addRange(0x17e0, 0x17e9)
          .addRange(0x17f0, 0x17f9)
          .addRange(0x1800, 0x180a)
          .addRange(0x1810, 0x1819)
          .addRange(0x1820, 0x1877)
          .addRange(0x1880, 0x1884)
          .addRange(0x1887, 0x18a8)
          .addRange(0x18b0, 0x18f5)
          .addRange(0x1900, 0x191e)
          .addRange(0x1923, 0x1926)
          .addRange(0x1929, 0x192b)
          .addRange(0x1930, 0x1931)
          .addRange(0x1933, 0x1938)
          .addRange(0x1944, 0x196d)
          .addRange(0x1970, 0x1974)
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x19d0, 0x19da)
          .addRange(0x19de, 0x1a16)
          .addRange(0x1a19, 0x1a1a)
          .addRange(0x1a1e, 0x1a55)
          .addRange(0x1a63, 0x1a64)
          .addRange(0x1a6d, 0x1a72)
          .addRange(0x1a80, 0x1a89)
          .addRange(0x1a90, 0x1a99)
          .addRange(0x1aa0, 0x1aad)
          .addRange(0x1b04, 0x1b33)
          .addRange(0x1b3d, 0x1b41)
          .addRange(0x1b43, 0x1b4b)
          .addRange(0x1b50, 0x1b6a)
          .addRange(0x1b74, 0x1b7c)
          .addRange(0x1b82, 0x1ba1)
          .addRange(0x1ba6, 0x1ba7)
          .addRange(0x1bae, 0x1be5)
          .addRange(0x1bea, 0x1bec)
          .addRange(0x1bf2, 0x1bf3)
          .addRange(0x1bfc, 0x1c2b)
          .addRange(0x1c34, 0x1c35)
          .addRange(0x1c3b, 0x1c49)
          .addRange(0x1c4d, 0x1c88)
          .addRange(0x1cc0, 0x1cc7)
          .addRange(0x1ce9, 0x1cec)
          .addRange(0x1cee, 0x1cf3)
          .addRange(0x1cf5, 0x1cf7)
          .addRange(0x1d00, 0x1dbf)
          .addRange(0x1e00, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fc4)
          .addRange(0x1fc6, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fdd, 0x1fef)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffe)
          .addRange(0x2000, 0x200a)
          .addRange(0x2010, 0x2027)
          .addRange(0x202f, 0x205f)
          .addRange(0x2070, 0x2071)
          .addRange(0x2074, 0x208e)
          .addRange(0x2090, 0x209c)
          .addRange(0x20a0, 0x20bf)
          .addRange(0x2100, 0x218b)
          .addRange(0x2190, 0x2426)
          .addRange(0x2440, 0x244a)
          .addRange(0x2460, 0x2b73)
          .addRange(0x2b76, 0x2b95)
          .addRange(0x2b98, 0x2bb9)
          .addRange(0x2bbd, 0x2bc8)
          .addRange(0x2bca, 0x2bd2)
          .addRange(0x2bec, 0x2bef)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2cee)
          .addRange(0x2cf2, 0x2cf3)
          .addRange(0x2cf9, 0x2d25)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d6f, 0x2d70)
          .addRange(0x2d80, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0x2e00, 0x2e49)
          .addRange(0x2e80, 0x2e99)
          .addRange(0x2e9b, 0x2ef3)
          .addRange(0x2f00, 0x2fd5)
          .addRange(0x2ff0, 0x2ffb)
          .addRange(0x3000, 0x3029)
          .addRange(0x3030, 0x303f)
          .addRange(0x3041, 0x3096)
          .addRange(0x309b, 0x30ff)
          .addRange(0x3105, 0x312e)
          .addRange(0x3131, 0x318e)
          .addRange(0x3190, 0x31ba)
          .addRange(0x31c0, 0x31e3)
          .addRange(0x31f0, 0x321e)
          .addRange(0x3220, 0x32fe)
          .addRange(0x3300, 0x4db5)
          .addRange(0x4dc0, 0x9fea)
          .addRange(0xa000, 0xa48c)
          .addRange(0xa490, 0xa4c6)
          .addRange(0xa4d0, 0xa62b)
          .addRange(0xa640, 0xa66e)
          .addRange(0xa67e, 0xa69d)
          .addRange(0xa6a0, 0xa6ef)
          .addRange(0xa6f2, 0xa6f7)
          .addRange(0xa700, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f7, 0xa801)
          .addRange(0xa803, 0xa805)
          .addRange(0xa807, 0xa80a)
          .addRange(0xa80c, 0xa824)
          .addRange(0xa827, 0xa82b)
          .addRange(0xa830, 0xa839)
          .addRange(0xa840, 0xa877)
          .addRange(0xa880, 0xa8c3)
          .addRange(0xa8ce, 0xa8d9)
          .addRange(0xa8f2, 0xa8fd)
          .addRange(0xa900, 0xa925)
          .addRange(0xa92e, 0xa946)
          .addRange(0xa952, 0xa953)
          .addRange(0xa95f, 0xa97c)
          .addRange(0xa983, 0xa9b2)
          .addRange(0xa9b4, 0xa9b5)
          .addRange(0xa9ba, 0xa9bb)
          .addRange(0xa9bd, 0xa9cd)
          .addRange(0xa9cf, 0xa9d9)
          .addRange(0xa9de, 0xa9e4)
          .addRange(0xa9e6, 0xa9fe)
          .addRange(0xaa00, 0xaa28)
          .addRange(0xaa2f, 0xaa30)
          .addRange(0xaa33, 0xaa34)
          .addRange(0xaa40, 0xaa42)
          .addRange(0xaa44, 0xaa4b)
          .addRange(0xaa50, 0xaa59)
          .addRange(0xaa5c, 0xaa7b)
          .addRange(0xaa7d, 0xaaaf)
          .addRange(0xaab5, 0xaab6)
          .addRange(0xaab9, 0xaabd)
          .addRange(0xaadb, 0xaaeb)
          .addRange(0xaaee, 0xaaf5)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e)
          .addRange(0xab30, 0xab65)
          .addRange(0xab70, 0xabe4)
          .addRange(0xabe6, 0xabe7)
          .addRange(0xabe9, 0xabec)
          .addRange(0xabf0, 0xabf9)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xfb1f, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfbc1)
          .addRange(0xfbd3, 0xfd3f)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdfd)
          .addRange(0xfe10, 0xfe19)
          .addRange(0xfe30, 0xfe52)
          .addRange(0xfe54, 0xfe66)
          .addRange(0xfe68, 0xfe6b)
          .addRange(0xfe70, 0xfe74)
          .addRange(0xfe76, 0xfefc)
          .addRange(0xff01, 0xff9d)
          .addRange(0xffa0, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc)
          .addRange(0xffe0, 0xffe6)
          .addRange(0xffe8, 0xffee)
          .addRange(0xfffc, 0xfffd)
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa)
          .addRange(0x10100, 0x10102)
          .addRange(0x10107, 0x10133)
          .addRange(0x10137, 0x1018e)
          .addRange(0x10190, 0x1019b)
          .addRange(0x101d0, 0x101fc)
          .addRange(0x10280, 0x1029c)
          .addRange(0x102a0, 0x102d0)
          .addRange(0x102e1, 0x102fb)
          .addRange(0x10300, 0x10323)
          .addRange(0x1032d, 0x1034a)
          .addRange(0x10350, 0x10375)
          .addRange(0x10380, 0x1039d)
          .addRange(0x1039f, 0x103c3)
          .addRange(0x103c8, 0x103d5)
          .addRange(0x10400, 0x1049d)
          .addRange(0x104a0, 0x104a9)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10500, 0x10527)
          .addRange(0x10530, 0x10563)
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838)
          .addRange(0x1083f, 0x10855)
          .addRange(0x10857, 0x1089e)
          .addRange(0x108a7, 0x108af)
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x108fb, 0x1091b)
          .addRange(0x1091f, 0x10939)
          .addRange(0x10980, 0x109b7)
          .addRange(0x109bc, 0x109cf)
          .addRange(0x109d2, 0x10a00)
          .addRange(0x10a10, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a40, 0x10a47)
          .addRange(0x10a50, 0x10a58)
          .addRange(0x10a60, 0x10a9f)
          .addRange(0x10ac0, 0x10ae4)
          .addRange(0x10aeb, 0x10af6)
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b39, 0x10b55)
          .addRange(0x10b58, 0x10b72)
          .addRange(0x10b78, 0x10b91)
          .addRange(0x10b99, 0x10b9c)
          .addRange(0x10ba9, 0x10baf)
          .addRange(0x10c00, 0x10c48)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x10cfa, 0x10cff)
          .addRange(0x10e60, 0x10e7e)
          .addRange(0x11002, 0x11037)
          .addRange(0x11047, 0x1104d)
          .addRange(0x11052, 0x1106f)
          .addRange(0x11082, 0x110b2)
          .addRange(0x110b7, 0x110b8)
          .addRange(0x110bb, 0x110bc)
          .addRange(0x110be, 0x110c1)
          .addRange(0x110d0, 0x110e8)
          .addRange(0x110f0, 0x110f9)
          .addRange(0x11103, 0x11126)
          .addRange(0x11136, 0x11143)
          .addRange(0x11150, 0x11172)
          .addRange(0x11174, 0x11176)
          .addRange(0x11182, 0x111b5)
          .addRange(0x111bf, 0x111c9)
          .addRange(0x111d0, 0x111df)
          .addRange(0x111e1, 0x111f4)
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x1122e)
          .addRange(0x11232, 0x11233)
          .addRange(0x11238, 0x1123d)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a9)
          .addRange(0x112b0, 0x112de)
          .addRange(0x112e0, 0x112e2)
          .addRange(0x112f0, 0x112f9)
          .addRange(0x11302, 0x11303)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x11341, 0x11344)
          .addRange(0x11347, 0x11348)
          .addRange(0x1134b, 0x1134d)
          .addRange(0x1135d, 0x11363)
          .addRange(0x11400, 0x11437)
          .addRange(0x11440, 0x11441)
          .addRange(0x11447, 0x11459)
          .addRange(0x11480, 0x114af)
          .addRange(0x114b1, 0x114b2)
          .addRange(0x114bb, 0x114bc)
          .addRange(0x114c4, 0x114c7)
          .addRange(0x114d0, 0x114d9)
          .addRange(0x11580, 0x115ae)
          .addRange(0x115b0, 0x115b1)
          .addRange(0x115b8, 0x115bb)
          .addRange(0x115c1, 0x115db)
          .addRange(0x11600, 0x11632)
          .addRange(0x1163b, 0x1163c)
          .addRange(0x11641, 0x11644)
          .addRange(0x11650, 0x11659)
          .addRange(0x11660, 0x1166c)
          .addRange(0x11680, 0x116aa)
          .addRange(0x116ae, 0x116af)
          .addRange(0x116c0, 0x116c9)
          .addRange(0x11700, 0x11719)
          .addRange(0x11720, 0x11721)
          .addRange(0x11730, 0x1173f)
          .addRange(0x118a0, 0x118f2)
          .addRange(0x11a07, 0x11a08)
          .addRange(0x11a0b, 0x11a32)
          .addRange(0x11a39, 0x11a3a)
          .addRange(0x11a3f, 0x11a46)
          .addRange(0x11a57, 0x11a58)
          .addRange(0x11a5c, 0x11a83)
          .addRange(0x11a86, 0x11a89)
          .addRange(0x11a9a, 0x11a9c)
          .addRange(0x11a9e, 0x11aa2)
          .addRange(0x11ac0, 0x11af8)
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c2f)
          .addRange(0x11c40, 0x11c45)
          .addRange(0x11c50, 0x11c6c)
          .addRange(0x11c70, 0x11c8f)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d30)
          .addRange(0x11d50, 0x11d59)
          .addRange(0x12000, 0x12399)
          .addRange(0x12400, 0x1246e)
          .addRange(0x12470, 0x12474)
          .addRange(0x12480, 0x12543)
          .addRange(0x13000, 0x1342e)
          .addRange(0x14400, 0x14646)
          .addRange(0x16800, 0x16a38)
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16a60, 0x16a69)
          .addRange(0x16a6e, 0x16a6f)
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16b00, 0x16b2f)
          .addRange(0x16b37, 0x16b45)
          .addRange(0x16b50, 0x16b59)
          .addRange(0x16b5b, 0x16b61)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f)
          .addRange(0x16f00, 0x16f44)
          .addRange(0x16f50, 0x16f7e)
          .addRange(0x16f93, 0x16f9f)
          .addRange(0x16fe0, 0x16fe1)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2)
          .addRange(0x1b000, 0x1b11e)
          .addRange(0x1b170, 0x1b2fb)
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1d000, 0x1d0f5)
          .addRange(0x1d100, 0x1d126)
          .addRange(0x1d129, 0x1d164)
          .addRange(0x1d16a, 0x1d16d)
          .addRange(0x1d183, 0x1d184)
          .addRange(0x1d18c, 0x1d1a9)
          .addRange(0x1d1ae, 0x1d1e8)
          .addRange(0x1d200, 0x1d241)
          .addRange(0x1d300, 0x1d356)
          .addRange(0x1d360, 0x1d371)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d7cb)
          .addRange(0x1d7ce, 0x1d9ff)
          .addRange(0x1da37, 0x1da3a)
          .addRange(0x1da6d, 0x1da74)
          .addRange(0x1da76, 0x1da83)
          .addRange(0x1da85, 0x1da8b)
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1e8c7, 0x1e8cf)
          .addRange(0x1e900, 0x1e943)
          .addRange(0x1e950, 0x1e959)
          .addRange(0x1e95e, 0x1e95f)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x1eef0, 0x1eef1)
          .addRange(0x1f000, 0x1f02b)
          .addRange(0x1f030, 0x1f093)
          .addRange(0x1f0a0, 0x1f0ae)
          .addRange(0x1f0b1, 0x1f0bf)
          .addRange(0x1f0c1, 0x1f0cf)
          .addRange(0x1f0d1, 0x1f0f5)
          .addRange(0x1f100, 0x1f10c)
          .addRange(0x1f110, 0x1f12e)
          .addRange(0x1f130, 0x1f16b)
          .addRange(0x1f170, 0x1f1ac)
          .addRange(0x1f1e6, 0x1f202)
          .addRange(0x1f210, 0x1f23b)
          .addRange(0x1f240, 0x1f248)
          .addRange(0x1f250, 0x1f251)
          .addRange(0x1f260, 0x1f265)
          .addRange(0x1f300, 0x1f6d4)
          .addRange(0x1f6e0, 0x1f6ec)
          .addRange(0x1f6f0, 0x1f6f8)
          .addRange(0x1f700, 0x1f773)
          .addRange(0x1f780, 0x1f7d4)
          .addRange(0x1f800, 0x1f80b)
          .addRange(0x1f810, 0x1f847)
          .addRange(0x1f850, 0x1f859)
          .addRange(0x1f860, 0x1f887)
          .addRange(0x1f890, 0x1f8ad)
          .addRange(0x1f900, 0x1f90b)
          .addRange(0x1f910, 0x1f93e)
          .addRange(0x1f940, 0x1f94c)
          .addRange(0x1f950, 0x1f96b)
          .addRange(0x1f980, 0x1f997)
          .addRange(0x1f9d0, 0x1f9e6)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d);

        /***/
      },
      /* 584 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x5bf,
          0x5c7,
          0x670,
          0x711,
          0x93a,
          0x93c,
          0x94d,
          0x981,
          0x9bc,
          0x9be,
          0x9cd,
          0x9d7,
          0xa3c,
          0xa51,
          0xa75,
          0xabc,
          0xacd,
          0xb01,
          0xb3c,
          0xb4d,
          0xb82,
          0xbbe,
          0xbc0,
          0xbcd,
          0xbd7,
          0xc00,
          0xc81,
          0xcbc,
          0xcbf,
          0xcc2,
          0xcc6,
          0xd3e,
          0xd4d,
          0xd57,
          0xdca,
          0xdcf,
          0xdd6,
          0xddf,
          0xe31,
          0xeb1,
          0xf35,
          0xf37,
          0xf39,
          0xfc6,
          0x1082,
          0x108d,
          0x109d,
          0x17c6,
          0x17dd,
          0x18a9,
          0x1932,
          0x1a1b,
          0x1a56,
          0x1a60,
          0x1a62,
          0x1a7f,
          0x1b34,
          0x1b3c,
          0x1b42,
          0x1be6,
          0x1bed,
          0x1ced,
          0x1cf4,
          0x200c,
          0x2d7f,
          0xa802,
          0xa806,
          0xa80b,
          0xa9b3,
          0xa9bc,
          0xa9e5,
          0xaa43,
          0xaa4c,
          0xaa7c,
          0xaab0,
          0xaac1,
          0xaaf6,
          0xabe5,
          0xabe8,
          0xabed,
          0xfb1e,
          0x101fd,
          0x102e0,
          0x10a3f,
          0x11001,
          0x11173,
          0x11234,
          0x1123e,
          0x112df,
          0x1133c,
          0x1133e,
          0x11340,
          0x11357,
          0x11446,
          0x114b0,
          0x114ba,
          0x114bd,
          0x115af,
          0x1163d,
          0x116ab,
          0x116ad,
          0x116b7,
          0x11a47,
          0x11c3f,
          0x11d3a,
          0x11d47,
          0x1d165,
          0x1da75,
          0x1da84
        )
          .addRange(0x300, 0x36f)
          .addRange(0x483, 0x489)
          .addRange(0x591, 0x5bd)
          .addRange(0x5c1, 0x5c2)
          .addRange(0x5c4, 0x5c5)
          .addRange(0x610, 0x61a)
          .addRange(0x64b, 0x65f)
          .addRange(0x6d6, 0x6dc)
          .addRange(0x6df, 0x6e4)
          .addRange(0x6e7, 0x6e8)
          .addRange(0x6ea, 0x6ed)
          .addRange(0x730, 0x74a)
          .addRange(0x7a6, 0x7b0)
          .addRange(0x7eb, 0x7f3)
          .addRange(0x816, 0x819)
          .addRange(0x81b, 0x823)
          .addRange(0x825, 0x827)
          .addRange(0x829, 0x82d)
          .addRange(0x859, 0x85b)
          .addRange(0x8d4, 0x8e1)
          .addRange(0x8e3, 0x902)
          .addRange(0x941, 0x948)
          .addRange(0x951, 0x957)
          .addRange(0x962, 0x963)
          .addRange(0x9c1, 0x9c4)
          .addRange(0x9e2, 0x9e3)
          .addRange(0xa01, 0xa02)
          .addRange(0xa41, 0xa42)
          .addRange(0xa47, 0xa48)
          .addRange(0xa4b, 0xa4d)
          .addRange(0xa70, 0xa71)
          .addRange(0xa81, 0xa82)
          .addRange(0xac1, 0xac5)
          .addRange(0xac7, 0xac8)
          .addRange(0xae2, 0xae3)
          .addRange(0xafa, 0xaff)
          .addRange(0xb3e, 0xb3f)
          .addRange(0xb41, 0xb44)
          .addRange(0xb56, 0xb57)
          .addRange(0xb62, 0xb63)
          .addRange(0xc3e, 0xc40)
          .addRange(0xc46, 0xc48)
          .addRange(0xc4a, 0xc4d)
          .addRange(0xc55, 0xc56)
          .addRange(0xc62, 0xc63)
          .addRange(0xccc, 0xccd)
          .addRange(0xcd5, 0xcd6)
          .addRange(0xce2, 0xce3)
          .addRange(0xd00, 0xd01)
          .addRange(0xd3b, 0xd3c)
          .addRange(0xd41, 0xd44)
          .addRange(0xd62, 0xd63)
          .addRange(0xdd2, 0xdd4)
          .addRange(0xe34, 0xe3a)
          .addRange(0xe47, 0xe4e)
          .addRange(0xeb4, 0xeb9)
          .addRange(0xebb, 0xebc)
          .addRange(0xec8, 0xecd)
          .addRange(0xf18, 0xf19)
          .addRange(0xf71, 0xf7e)
          .addRange(0xf80, 0xf84)
          .addRange(0xf86, 0xf87)
          .addRange(0xf8d, 0xf97)
          .addRange(0xf99, 0xfbc)
          .addRange(0x102d, 0x1030)
          .addRange(0x1032, 0x1037)
          .addRange(0x1039, 0x103a)
          .addRange(0x103d, 0x103e)
          .addRange(0x1058, 0x1059)
          .addRange(0x105e, 0x1060)
          .addRange(0x1071, 0x1074)
          .addRange(0x1085, 0x1086)
          .addRange(0x135d, 0x135f)
          .addRange(0x1712, 0x1714)
          .addRange(0x1732, 0x1734)
          .addRange(0x1752, 0x1753)
          .addRange(0x1772, 0x1773)
          .addRange(0x17b4, 0x17b5)
          .addRange(0x17b7, 0x17bd)
          .addRange(0x17c9, 0x17d3)
          .addRange(0x180b, 0x180d)
          .addRange(0x1885, 0x1886)
          .addRange(0x1920, 0x1922)
          .addRange(0x1927, 0x1928)
          .addRange(0x1939, 0x193b)
          .addRange(0x1a17, 0x1a18)
          .addRange(0x1a58, 0x1a5e)
          .addRange(0x1a65, 0x1a6c)
          .addRange(0x1a73, 0x1a7c)
          .addRange(0x1ab0, 0x1abe)
          .addRange(0x1b00, 0x1b03)
          .addRange(0x1b36, 0x1b3a)
          .addRange(0x1b6b, 0x1b73)
          .addRange(0x1b80, 0x1b81)
          .addRange(0x1ba2, 0x1ba5)
          .addRange(0x1ba8, 0x1ba9)
          .addRange(0x1bab, 0x1bad)
          .addRange(0x1be8, 0x1be9)
          .addRange(0x1bef, 0x1bf1)
          .addRange(0x1c2c, 0x1c33)
          .addRange(0x1c36, 0x1c37)
          .addRange(0x1cd0, 0x1cd2)
          .addRange(0x1cd4, 0x1ce0)
          .addRange(0x1ce2, 0x1ce8)
          .addRange(0x1cf8, 0x1cf9)
          .addRange(0x1dc0, 0x1df9)
          .addRange(0x1dfb, 0x1dff)
          .addRange(0x20d0, 0x20f0)
          .addRange(0x2cef, 0x2cf1)
          .addRange(0x2de0, 0x2dff)
          .addRange(0x302a, 0x302f)
          .addRange(0x3099, 0x309a)
          .addRange(0xa66f, 0xa672)
          .addRange(0xa674, 0xa67d)
          .addRange(0xa69e, 0xa69f)
          .addRange(0xa6f0, 0xa6f1)
          .addRange(0xa825, 0xa826)
          .addRange(0xa8c4, 0xa8c5)
          .addRange(0xa8e0, 0xa8f1)
          .addRange(0xa926, 0xa92d)
          .addRange(0xa947, 0xa951)
          .addRange(0xa980, 0xa982)
          .addRange(0xa9b6, 0xa9b9)
          .addRange(0xaa29, 0xaa2e)
          .addRange(0xaa31, 0xaa32)
          .addRange(0xaa35, 0xaa36)
          .addRange(0xaab2, 0xaab4)
          .addRange(0xaab7, 0xaab8)
          .addRange(0xaabe, 0xaabf)
          .addRange(0xaaec, 0xaaed)
          .addRange(0xfe00, 0xfe0f)
          .addRange(0xfe20, 0xfe2f)
          .addRange(0xff9e, 0xff9f)
          .addRange(0x10376, 0x1037a)
          .addRange(0x10a01, 0x10a03)
          .addRange(0x10a05, 0x10a06)
          .addRange(0x10a0c, 0x10a0f)
          .addRange(0x10a38, 0x10a3a)
          .addRange(0x10ae5, 0x10ae6)
          .addRange(0x11038, 0x11046)
          .addRange(0x1107f, 0x11081)
          .addRange(0x110b3, 0x110b6)
          .addRange(0x110b9, 0x110ba)
          .addRange(0x11100, 0x11102)
          .addRange(0x11127, 0x1112b)
          .addRange(0x1112d, 0x11134)
          .addRange(0x11180, 0x11181)
          .addRange(0x111b6, 0x111be)
          .addRange(0x111ca, 0x111cc)
          .addRange(0x1122f, 0x11231)
          .addRange(0x11236, 0x11237)
          .addRange(0x112e3, 0x112ea)
          .addRange(0x11300, 0x11301)
          .addRange(0x11366, 0x1136c)
          .addRange(0x11370, 0x11374)
          .addRange(0x11438, 0x1143f)
          .addRange(0x11442, 0x11444)
          .addRange(0x114b3, 0x114b8)
          .addRange(0x114bf, 0x114c0)
          .addRange(0x114c2, 0x114c3)
          .addRange(0x115b2, 0x115b5)
          .addRange(0x115bc, 0x115bd)
          .addRange(0x115bf, 0x115c0)
          .addRange(0x115dc, 0x115dd)
          .addRange(0x11633, 0x1163a)
          .addRange(0x1163f, 0x11640)
          .addRange(0x116b0, 0x116b5)
          .addRange(0x1171d, 0x1171f)
          .addRange(0x11722, 0x11725)
          .addRange(0x11727, 0x1172b)
          .addRange(0x11a01, 0x11a06)
          .addRange(0x11a09, 0x11a0a)
          .addRange(0x11a33, 0x11a38)
          .addRange(0x11a3b, 0x11a3e)
          .addRange(0x11a51, 0x11a56)
          .addRange(0x11a59, 0x11a5b)
          .addRange(0x11a8a, 0x11a96)
          .addRange(0x11a98, 0x11a99)
          .addRange(0x11c30, 0x11c36)
          .addRange(0x11c38, 0x11c3d)
          .addRange(0x11c92, 0x11ca7)
          .addRange(0x11caa, 0x11cb0)
          .addRange(0x11cb2, 0x11cb3)
          .addRange(0x11cb5, 0x11cb6)
          .addRange(0x11d31, 0x11d36)
          .addRange(0x11d3c, 0x11d3d)
          .addRange(0x11d3f, 0x11d45)
          .addRange(0x16af0, 0x16af4)
          .addRange(0x16b30, 0x16b36)
          .addRange(0x16f8f, 0x16f92)
          .addRange(0x1bc9d, 0x1bc9e)
          .addRange(0x1d167, 0x1d169)
          .addRange(0x1d16e, 0x1d172)
          .addRange(0x1d17b, 0x1d182)
          .addRange(0x1d185, 0x1d18b)
          .addRange(0x1d1aa, 0x1d1ad)
          .addRange(0x1d242, 0x1d244)
          .addRange(0x1da00, 0x1da36)
          .addRange(0x1da3b, 0x1da6c)
          .addRange(0x1da9b, 0x1da9f)
          .addRange(0x1daa1, 0x1daaf)
          .addRange(0x1e000, 0x1e006)
          .addRange(0x1e008, 0x1e018)
          .addRange(0x1e01b, 0x1e021)
          .addRange(0x1e023, 0x1e024)
          .addRange(0x1e026, 0x1e02a)
          .addRange(0x1e8d0, 0x1e8d6)
          .addRange(0x1e944, 0x1e94a)
          .addRange(0xe0020, 0xe007f)
          .addRange(0xe0100, 0xe01ef);

        /***/
      },
      /* 585 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x30, 0x39)
          .addRange(0x41, 0x46)
          .addRange(0x61, 0x66)
          .addRange(0xff10, 0xff19)
          .addRange(0xff21, 0xff26)
          .addRange(0xff41, 0xff46);

        /***/
      },
      /* 586 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x2ff0, 0x2ff1)
          .addRange(0x2ff4, 0x2ffb);

        /***/
      },
      /* 587 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x2ff2, 0x2ff3);

        /***/
      },
      /* 588 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x5f,
          0xaa,
          0xb5,
          0xb7,
          0xba,
          0x2ec,
          0x2ee,
          0x37f,
          0x38c,
          0x559,
          0x5bf,
          0x5c7,
          0x6ff,
          0x7fa,
          0x9b2,
          0x9d7,
          0x9fc,
          0xa3c,
          0xa51,
          0xa5e,
          0xad0,
          0xb71,
          0xb9c,
          0xbd0,
          0xbd7,
          0xcde,
          0xdbd,
          0xdca,
          0xdd6,
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xec6,
          0xf00,
          0xf35,
          0xf37,
          0xf39,
          0xfc6,
          0x10c7,
          0x10cd,
          0x1258,
          0x12c0,
          0x17d7,
          0x1aa7,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1fbe,
          0x2054,
          0x2071,
          0x207f,
          0x20e1,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x2126,
          0x2128,
          0x214e,
          0x2d27,
          0x2d2d,
          0x2d6f,
          0xa8fb,
          0xa8fd,
          0xfb3e,
          0xff3f,
          0x101fd,
          0x102e0,
          0x10808,
          0x1083c,
          0x10a3f,
          0x11176,
          0x111dc,
          0x1123e,
          0x11288,
          0x11350,
          0x11357,
          0x114c7,
          0x11644,
          0x118ff,
          0x11a47,
          0x11d3a,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1da75,
          0x1da84,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e
        )
          .addRange(0x30, 0x39)
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x2c1)
          .addRange(0x2c6, 0x2d1)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x300, 0x374)
          .addRange(0x376, 0x377)
          .addRange(0x37a, 0x37d)
          .addRange(0x386, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3f5)
          .addRange(0x3f7, 0x481)
          .addRange(0x483, 0x487)
          .addRange(0x48a, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x561, 0x587)
          .addRange(0x591, 0x5bd)
          .addRange(0x5c1, 0x5c2)
          .addRange(0x5c4, 0x5c5)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f2)
          .addRange(0x610, 0x61a)
          .addRange(0x620, 0x669)
          .addRange(0x66e, 0x6d3)
          .addRange(0x6d5, 0x6dc)
          .addRange(0x6df, 0x6e8)
          .addRange(0x6ea, 0x6fc)
          .addRange(0x710, 0x74a)
          .addRange(0x74d, 0x7b1)
          .addRange(0x7c0, 0x7f5)
          .addRange(0x800, 0x82d)
          .addRange(0x840, 0x85b)
          .addRange(0x860, 0x86a)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x8d4, 0x8e1)
          .addRange(0x8e3, 0x963)
          .addRange(0x966, 0x96f)
          .addRange(0x971, 0x983)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9bc, 0x9c4)
          .addRange(0x9c7, 0x9c8)
          .addRange(0x9cb, 0x9ce)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e3)
          .addRange(0x9e6, 0x9f1)
          .addRange(0xa01, 0xa03)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa3e, 0xa42)
          .addRange(0xa47, 0xa48)
          .addRange(0xa4b, 0xa4d)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa66, 0xa75)
          .addRange(0xa81, 0xa83)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xabc, 0xac5)
          .addRange(0xac7, 0xac9)
          .addRange(0xacb, 0xacd)
          .addRange(0xae0, 0xae3)
          .addRange(0xae6, 0xaef)
          .addRange(0xaf9, 0xaff)
          .addRange(0xb01, 0xb03)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb3c, 0xb44)
          .addRange(0xb47, 0xb48)
          .addRange(0xb4b, 0xb4d)
          .addRange(0xb56, 0xb57)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb63)
          .addRange(0xb66, 0xb6f)
          .addRange(0xb82, 0xb83)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xbbe, 0xbc2)
          .addRange(0xbc6, 0xbc8)
          .addRange(0xbca, 0xbcd)
          .addRange(0xbe6, 0xbef)
          .addRange(0xc00, 0xc03)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc3d, 0xc44)
          .addRange(0xc46, 0xc48)
          .addRange(0xc4a, 0xc4d)
          .addRange(0xc55, 0xc56)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc63)
          .addRange(0xc66, 0xc6f)
          .addRange(0xc80, 0xc83)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xcbc, 0xcc4)
          .addRange(0xcc6, 0xcc8)
          .addRange(0xcca, 0xccd)
          .addRange(0xcd5, 0xcd6)
          .addRange(0xce0, 0xce3)
          .addRange(0xce6, 0xcef)
          .addRange(0xcf1, 0xcf2)
          .addRange(0xd00, 0xd03)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd44)
          .addRange(0xd46, 0xd48)
          .addRange(0xd4a, 0xd4e)
          .addRange(0xd54, 0xd57)
          .addRange(0xd5f, 0xd63)
          .addRange(0xd66, 0xd6f)
          .addRange(0xd7a, 0xd7f)
          .addRange(0xd82, 0xd83)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xdcf, 0xdd4)
          .addRange(0xdd8, 0xddf)
          .addRange(0xde6, 0xdef)
          .addRange(0xdf2, 0xdf3)
          .addRange(0xe01, 0xe3a)
          .addRange(0xe40, 0xe4e)
          .addRange(0xe50, 0xe59)
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb9)
          .addRange(0xebb, 0xebd)
          .addRange(0xec0, 0xec4)
          .addRange(0xec8, 0xecd)
          .addRange(0xed0, 0xed9)
          .addRange(0xedc, 0xedf)
          .addRange(0xf18, 0xf19)
          .addRange(0xf20, 0xf29)
          .addRange(0xf3e, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf71, 0xf84)
          .addRange(0xf86, 0xf97)
          .addRange(0xf99, 0xfbc)
          .addRange(0x1000, 0x1049)
          .addRange(0x1050, 0x109d)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x10d0, 0x10fa)
          .addRange(0x10fc, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x135d, 0x135f)
          .addRange(0x1369, 0x1371)
          .addRange(0x1380, 0x138f)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1401, 0x166c)
          .addRange(0x166f, 0x167f)
          .addRange(0x1681, 0x169a)
          .addRange(0x16a0, 0x16ea)
          .addRange(0x16ee, 0x16f8)
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1714)
          .addRange(0x1720, 0x1734)
          .addRange(0x1740, 0x1753)
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1772, 0x1773)
          .addRange(0x1780, 0x17d3)
          .addRange(0x17dc, 0x17dd)
          .addRange(0x17e0, 0x17e9)
          .addRange(0x180b, 0x180d)
          .addRange(0x1810, 0x1819)
          .addRange(0x1820, 0x1877)
          .addRange(0x1880, 0x18aa)
          .addRange(0x18b0, 0x18f5)
          .addRange(0x1900, 0x191e)
          .addRange(0x1920, 0x192b)
          .addRange(0x1930, 0x193b)
          .addRange(0x1946, 0x196d)
          .addRange(0x1970, 0x1974)
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x19d0, 0x19da)
          .addRange(0x1a00, 0x1a1b)
          .addRange(0x1a20, 0x1a5e)
          .addRange(0x1a60, 0x1a7c)
          .addRange(0x1a7f, 0x1a89)
          .addRange(0x1a90, 0x1a99)
          .addRange(0x1ab0, 0x1abd)
          .addRange(0x1b00, 0x1b4b)
          .addRange(0x1b50, 0x1b59)
          .addRange(0x1b6b, 0x1b73)
          .addRange(0x1b80, 0x1bf3)
          .addRange(0x1c00, 0x1c37)
          .addRange(0x1c40, 0x1c49)
          .addRange(0x1c4d, 0x1c7d)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1cd0, 0x1cd2)
          .addRange(0x1cd4, 0x1cf9)
          .addRange(0x1d00, 0x1df9)
          .addRange(0x1dfb, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fbc)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fcc)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fe0, 0x1fec)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffc)
          .addRange(0x203f, 0x2040)
          .addRange(0x2090, 0x209c)
          .addRange(0x20d0, 0x20dc)
          .addRange(0x20e5, 0x20f0)
          .addRange(0x210a, 0x2113)
          .addRange(0x2118, 0x211d)
          .addRange(0x212a, 0x2139)
          .addRange(0x213c, 0x213f)
          .addRange(0x2145, 0x2149)
          .addRange(0x2160, 0x2188)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2ce4)
          .addRange(0x2ceb, 0x2cf3)
          .addRange(0x2d00, 0x2d25)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d7f, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0x2de0, 0x2dff)
          .addRange(0x3005, 0x3007)
          .addRange(0x3021, 0x302f)
          .addRange(0x3031, 0x3035)
          .addRange(0x3038, 0x303c)
          .addRange(0x3041, 0x3096)
          .addRange(0x3099, 0x309f)
          .addRange(0x30a1, 0x30fa)
          .addRange(0x30fc, 0x30ff)
          .addRange(0x3105, 0x312e)
          .addRange(0x3131, 0x318e)
          .addRange(0x31a0, 0x31ba)
          .addRange(0x31f0, 0x31ff)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xa000, 0xa48c)
          .addRange(0xa4d0, 0xa4fd)
          .addRange(0xa500, 0xa60c)
          .addRange(0xa610, 0xa62b)
          .addRange(0xa640, 0xa66f)
          .addRange(0xa674, 0xa67d)
          .addRange(0xa67f, 0xa6f1)
          .addRange(0xa717, 0xa71f)
          .addRange(0xa722, 0xa788)
          .addRange(0xa78b, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f7, 0xa827)
          .addRange(0xa840, 0xa873)
          .addRange(0xa880, 0xa8c5)
          .addRange(0xa8d0, 0xa8d9)
          .addRange(0xa8e0, 0xa8f7)
          .addRange(0xa900, 0xa92d)
          .addRange(0xa930, 0xa953)
          .addRange(0xa960, 0xa97c)
          .addRange(0xa980, 0xa9c0)
          .addRange(0xa9cf, 0xa9d9)
          .addRange(0xa9e0, 0xa9fe)
          .addRange(0xaa00, 0xaa36)
          .addRange(0xaa40, 0xaa4d)
          .addRange(0xaa50, 0xaa59)
          .addRange(0xaa60, 0xaa76)
          .addRange(0xaa7a, 0xaac2)
          .addRange(0xaadb, 0xaadd)
          .addRange(0xaae0, 0xaaef)
          .addRange(0xaaf2, 0xaaf6)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab5c, 0xab65)
          .addRange(0xab70, 0xabea)
          .addRange(0xabec, 0xabed)
          .addRange(0xabf0, 0xabf9)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xfb1d, 0xfb28)
          .addRange(0xfb2a, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfbb1)
          .addRange(0xfbd3, 0xfd3d)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdfb)
          .addRange(0xfe00, 0xfe0f)
          .addRange(0xfe20, 0xfe2f)
          .addRange(0xfe33, 0xfe34)
          .addRange(0xfe4d, 0xfe4f)
          .addRange(0xfe70, 0xfe74)
          .addRange(0xfe76, 0xfefc)
          .addRange(0xff10, 0xff19)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a)
          .addRange(0xff66, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc)
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa)
          .addRange(0x10140, 0x10174)
          .addRange(0x10280, 0x1029c)
          .addRange(0x102a0, 0x102d0)
          .addRange(0x10300, 0x1031f)
          .addRange(0x1032d, 0x1034a)
          .addRange(0x10350, 0x1037a)
          .addRange(0x10380, 0x1039d)
          .addRange(0x103a0, 0x103c3)
          .addRange(0x103c8, 0x103cf)
          .addRange(0x103d1, 0x103d5)
          .addRange(0x10400, 0x1049d)
          .addRange(0x104a0, 0x104a9)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10500, 0x10527)
          .addRange(0x10530, 0x10563)
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838)
          .addRange(0x1083f, 0x10855)
          .addRange(0x10860, 0x10876)
          .addRange(0x10880, 0x1089e)
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x10900, 0x10915)
          .addRange(0x10920, 0x10939)
          .addRange(0x10980, 0x109b7)
          .addRange(0x109be, 0x109bf)
          .addRange(0x10a00, 0x10a03)
          .addRange(0x10a05, 0x10a06)
          .addRange(0x10a0c, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a38, 0x10a3a)
          .addRange(0x10a60, 0x10a7c)
          .addRange(0x10a80, 0x10a9c)
          .addRange(0x10ac0, 0x10ac7)
          .addRange(0x10ac9, 0x10ae6)
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b40, 0x10b55)
          .addRange(0x10b60, 0x10b72)
          .addRange(0x10b80, 0x10b91)
          .addRange(0x10c00, 0x10c48)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x11000, 0x11046)
          .addRange(0x11066, 0x1106f)
          .addRange(0x1107f, 0x110ba)
          .addRange(0x110d0, 0x110e8)
          .addRange(0x110f0, 0x110f9)
          .addRange(0x11100, 0x11134)
          .addRange(0x11136, 0x1113f)
          .addRange(0x11150, 0x11173)
          .addRange(0x11180, 0x111c4)
          .addRange(0x111ca, 0x111cc)
          .addRange(0x111d0, 0x111da)
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x11237)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a8)
          .addRange(0x112b0, 0x112ea)
          .addRange(0x112f0, 0x112f9)
          .addRange(0x11300, 0x11303)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x1133c, 0x11344)
          .addRange(0x11347, 0x11348)
          .addRange(0x1134b, 0x1134d)
          .addRange(0x1135d, 0x11363)
          .addRange(0x11366, 0x1136c)
          .addRange(0x11370, 0x11374)
          .addRange(0x11400, 0x1144a)
          .addRange(0x11450, 0x11459)
          .addRange(0x11480, 0x114c5)
          .addRange(0x114d0, 0x114d9)
          .addRange(0x11580, 0x115b5)
          .addRange(0x115b8, 0x115c0)
          .addRange(0x115d8, 0x115dd)
          .addRange(0x11600, 0x11640)
          .addRange(0x11650, 0x11659)
          .addRange(0x11680, 0x116b7)
          .addRange(0x116c0, 0x116c9)
          .addRange(0x11700, 0x11719)
          .addRange(0x1171d, 0x1172b)
          .addRange(0x11730, 0x11739)
          .addRange(0x118a0, 0x118e9)
          .addRange(0x11a00, 0x11a3e)
          .addRange(0x11a50, 0x11a83)
          .addRange(0x11a86, 0x11a99)
          .addRange(0x11ac0, 0x11af8)
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c36)
          .addRange(0x11c38, 0x11c40)
          .addRange(0x11c50, 0x11c59)
          .addRange(0x11c72, 0x11c8f)
          .addRange(0x11c92, 0x11ca7)
          .addRange(0x11ca9, 0x11cb6)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d36)
          .addRange(0x11d3c, 0x11d3d)
          .addRange(0x11d3f, 0x11d47)
          .addRange(0x11d50, 0x11d59)
          .addRange(0x12000, 0x12399)
          .addRange(0x12400, 0x1246e)
          .addRange(0x12480, 0x12543)
          .addRange(0x13000, 0x1342e)
          .addRange(0x14400, 0x14646)
          .addRange(0x16800, 0x16a38)
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16a60, 0x16a69)
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16af0, 0x16af4)
          .addRange(0x16b00, 0x16b36)
          .addRange(0x16b40, 0x16b43)
          .addRange(0x16b50, 0x16b59)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f)
          .addRange(0x16f00, 0x16f44)
          .addRange(0x16f50, 0x16f7e)
          .addRange(0x16f8f, 0x16f9f)
          .addRange(0x16fe0, 0x16fe1)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2)
          .addRange(0x1b000, 0x1b11e)
          .addRange(0x1b170, 0x1b2fb)
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1bc9d, 0x1bc9e)
          .addRange(0x1d165, 0x1d169)
          .addRange(0x1d16d, 0x1d172)
          .addRange(0x1d17b, 0x1d182)
          .addRange(0x1d185, 0x1d18b)
          .addRange(0x1d1aa, 0x1d1ad)
          .addRange(0x1d242, 0x1d244)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d6c0)
          .addRange(0x1d6c2, 0x1d6da)
          .addRange(0x1d6dc, 0x1d6fa)
          .addRange(0x1d6fc, 0x1d714)
          .addRange(0x1d716, 0x1d734)
          .addRange(0x1d736, 0x1d74e)
          .addRange(0x1d750, 0x1d76e)
          .addRange(0x1d770, 0x1d788)
          .addRange(0x1d78a, 0x1d7a8)
          .addRange(0x1d7aa, 0x1d7c2)
          .addRange(0x1d7c4, 0x1d7cb)
          .addRange(0x1d7ce, 0x1d7ff)
          .addRange(0x1da00, 0x1da36)
          .addRange(0x1da3b, 0x1da6c)
          .addRange(0x1da9b, 0x1da9f)
          .addRange(0x1daa1, 0x1daaf)
          .addRange(0x1e000, 0x1e006)
          .addRange(0x1e008, 0x1e018)
          .addRange(0x1e01b, 0x1e021)
          .addRange(0x1e023, 0x1e024)
          .addRange(0x1e026, 0x1e02a)
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1e8d0, 0x1e8d6)
          .addRange(0x1e900, 0x1e94a)
          .addRange(0x1e950, 0x1e959)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d)
          .addRange(0xe0100, 0xe01ef);

        /***/
      },
      /* 589 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xaa,
          0xb5,
          0xba,
          0x2ec,
          0x2ee,
          0x37f,
          0x386,
          0x38c,
          0x559,
          0x6d5,
          0x6ff,
          0x710,
          0x7b1,
          0x7fa,
          0x81a,
          0x824,
          0x828,
          0x93d,
          0x950,
          0x9b2,
          0x9bd,
          0x9ce,
          0x9fc,
          0xa5e,
          0xabd,
          0xad0,
          0xaf9,
          0xb3d,
          0xb71,
          0xb83,
          0xb9c,
          0xbd0,
          0xc3d,
          0xc80,
          0xcbd,
          0xcde,
          0xd3d,
          0xd4e,
          0xdbd,
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xebd,
          0xec6,
          0xf00,
          0x103f,
          0x1061,
          0x108e,
          0x10c7,
          0x10cd,
          0x1258,
          0x12c0,
          0x17d7,
          0x17dc,
          0x18aa,
          0x1aa7,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1fbe,
          0x2071,
          0x207f,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x2126,
          0x2128,
          0x214e,
          0x2d27,
          0x2d2d,
          0x2d6f,
          0xa8fb,
          0xa8fd,
          0xa9cf,
          0xaa7a,
          0xaab1,
          0xaac0,
          0xaac2,
          0xfb1d,
          0xfb3e,
          0x10808,
          0x1083c,
          0x10a00,
          0x11176,
          0x111da,
          0x111dc,
          0x11288,
          0x1133d,
          0x11350,
          0x114c7,
          0x11644,
          0x118ff,
          0x11a00,
          0x11a3a,
          0x11a50,
          0x11c40,
          0x11d46,
          0x16f50,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e
        )
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x2c1)
          .addRange(0x2c6, 0x2d1)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x370, 0x374)
          .addRange(0x376, 0x377)
          .addRange(0x37a, 0x37d)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3f5)
          .addRange(0x3f7, 0x481)
          .addRange(0x48a, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x561, 0x587)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f2)
          .addRange(0x620, 0x64a)
          .addRange(0x66e, 0x66f)
          .addRange(0x671, 0x6d3)
          .addRange(0x6e5, 0x6e6)
          .addRange(0x6ee, 0x6ef)
          .addRange(0x6fa, 0x6fc)
          .addRange(0x712, 0x72f)
          .addRange(0x74d, 0x7a5)
          .addRange(0x7ca, 0x7ea)
          .addRange(0x7f4, 0x7f5)
          .addRange(0x800, 0x815)
          .addRange(0x840, 0x858)
          .addRange(0x860, 0x86a)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x904, 0x939)
          .addRange(0x958, 0x961)
          .addRange(0x971, 0x980)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e1)
          .addRange(0x9f0, 0x9f1)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa72, 0xa74)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xae0, 0xae1)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb61)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc61)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xce0, 0xce1)
          .addRange(0xcf1, 0xcf2)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd3a)
          .addRange(0xd54, 0xd56)
          .addRange(0xd5f, 0xd61)
          .addRange(0xd7a, 0xd7f)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xe01, 0xe30)
          .addRange(0xe32, 0xe33)
          .addRange(0xe40, 0xe46)
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb0)
          .addRange(0xeb2, 0xeb3)
          .addRange(0xec0, 0xec4)
          .addRange(0xedc, 0xedf)
          .addRange(0xf40, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf88, 0xf8c)
          .addRange(0x1000, 0x102a)
          .addRange(0x1050, 0x1055)
          .addRange(0x105a, 0x105d)
          .addRange(0x1065, 0x1066)
          .addRange(0x106e, 0x1070)
          .addRange(0x1075, 0x1081)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x10d0, 0x10fa)
          .addRange(0x10fc, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x1380, 0x138f)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1401, 0x166c)
          .addRange(0x166f, 0x167f)
          .addRange(0x1681, 0x169a)
          .addRange(0x16a0, 0x16ea)
          .addRange(0x16ee, 0x16f8)
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1711)
          .addRange(0x1720, 0x1731)
          .addRange(0x1740, 0x1751)
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1780, 0x17b3)
          .addRange(0x1820, 0x1877)
          .addRange(0x1880, 0x18a8)
          .addRange(0x18b0, 0x18f5)
          .addRange(0x1900, 0x191e)
          .addRange(0x1950, 0x196d)
          .addRange(0x1970, 0x1974)
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x1a00, 0x1a16)
          .addRange(0x1a20, 0x1a54)
          .addRange(0x1b05, 0x1b33)
          .addRange(0x1b45, 0x1b4b)
          .addRange(0x1b83, 0x1ba0)
          .addRange(0x1bae, 0x1baf)
          .addRange(0x1bba, 0x1be5)
          .addRange(0x1c00, 0x1c23)
          .addRange(0x1c4d, 0x1c4f)
          .addRange(0x1c5a, 0x1c7d)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1ce9, 0x1cec)
          .addRange(0x1cee, 0x1cf1)
          .addRange(0x1cf5, 0x1cf6)
          .addRange(0x1d00, 0x1dbf)
          .addRange(0x1e00, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fbc)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fcc)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fe0, 0x1fec)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffc)
          .addRange(0x2090, 0x209c)
          .addRange(0x210a, 0x2113)
          .addRange(0x2118, 0x211d)
          .addRange(0x212a, 0x2139)
          .addRange(0x213c, 0x213f)
          .addRange(0x2145, 0x2149)
          .addRange(0x2160, 0x2188)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2ce4)
          .addRange(0x2ceb, 0x2cee)
          .addRange(0x2cf2, 0x2cf3)
          .addRange(0x2d00, 0x2d25)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d80, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0x3005, 0x3007)
          .addRange(0x3021, 0x3029)
          .addRange(0x3031, 0x3035)
          .addRange(0x3038, 0x303c)
          .addRange(0x3041, 0x3096)
          .addRange(0x309b, 0x309f)
          .addRange(0x30a1, 0x30fa)
          .addRange(0x30fc, 0x30ff)
          .addRange(0x3105, 0x312e)
          .addRange(0x3131, 0x318e)
          .addRange(0x31a0, 0x31ba)
          .addRange(0x31f0, 0x31ff)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xa000, 0xa48c)
          .addRange(0xa4d0, 0xa4fd)
          .addRange(0xa500, 0xa60c)
          .addRange(0xa610, 0xa61f)
          .addRange(0xa62a, 0xa62b)
          .addRange(0xa640, 0xa66e)
          .addRange(0xa67f, 0xa69d)
          .addRange(0xa6a0, 0xa6ef)
          .addRange(0xa717, 0xa71f)
          .addRange(0xa722, 0xa788)
          .addRange(0xa78b, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f7, 0xa801)
          .addRange(0xa803, 0xa805)
          .addRange(0xa807, 0xa80a)
          .addRange(0xa80c, 0xa822)
          .addRange(0xa840, 0xa873)
          .addRange(0xa882, 0xa8b3)
          .addRange(0xa8f2, 0xa8f7)
          .addRange(0xa90a, 0xa925)
          .addRange(0xa930, 0xa946)
          .addRange(0xa960, 0xa97c)
          .addRange(0xa984, 0xa9b2)
          .addRange(0xa9e0, 0xa9e4)
          .addRange(0xa9e6, 0xa9ef)
          .addRange(0xa9fa, 0xa9fe)
          .addRange(0xaa00, 0xaa28)
          .addRange(0xaa40, 0xaa42)
          .addRange(0xaa44, 0xaa4b)
          .addRange(0xaa60, 0xaa76)
          .addRange(0xaa7e, 0xaaaf)
          .addRange(0xaab5, 0xaab6)
          .addRange(0xaab9, 0xaabd)
          .addRange(0xaadb, 0xaadd)
          .addRange(0xaae0, 0xaaea)
          .addRange(0xaaf2, 0xaaf4)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab5c, 0xab65)
          .addRange(0xab70, 0xabe2)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xfb1f, 0xfb28)
          .addRange(0xfb2a, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfbb1)
          .addRange(0xfbd3, 0xfd3d)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdfb)
          .addRange(0xfe70, 0xfe74)
          .addRange(0xfe76, 0xfefc)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a)
          .addRange(0xff66, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc)
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa)
          .addRange(0x10140, 0x10174)
          .addRange(0x10280, 0x1029c)
          .addRange(0x102a0, 0x102d0)
          .addRange(0x10300, 0x1031f)
          .addRange(0x1032d, 0x1034a)
          .addRange(0x10350, 0x10375)
          .addRange(0x10380, 0x1039d)
          .addRange(0x103a0, 0x103c3)
          .addRange(0x103c8, 0x103cf)
          .addRange(0x103d1, 0x103d5)
          .addRange(0x10400, 0x1049d)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10500, 0x10527)
          .addRange(0x10530, 0x10563)
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838)
          .addRange(0x1083f, 0x10855)
          .addRange(0x10860, 0x10876)
          .addRange(0x10880, 0x1089e)
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x10900, 0x10915)
          .addRange(0x10920, 0x10939)
          .addRange(0x10980, 0x109b7)
          .addRange(0x109be, 0x109bf)
          .addRange(0x10a10, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a60, 0x10a7c)
          .addRange(0x10a80, 0x10a9c)
          .addRange(0x10ac0, 0x10ac7)
          .addRange(0x10ac9, 0x10ae4)
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b40, 0x10b55)
          .addRange(0x10b60, 0x10b72)
          .addRange(0x10b80, 0x10b91)
          .addRange(0x10c00, 0x10c48)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x11003, 0x11037)
          .addRange(0x11083, 0x110af)
          .addRange(0x110d0, 0x110e8)
          .addRange(0x11103, 0x11126)
          .addRange(0x11150, 0x11172)
          .addRange(0x11183, 0x111b2)
          .addRange(0x111c1, 0x111c4)
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x1122b)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a8)
          .addRange(0x112b0, 0x112de)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x1135d, 0x11361)
          .addRange(0x11400, 0x11434)
          .addRange(0x11447, 0x1144a)
          .addRange(0x11480, 0x114af)
          .addRange(0x114c4, 0x114c5)
          .addRange(0x11580, 0x115ae)
          .addRange(0x115d8, 0x115db)
          .addRange(0x11600, 0x1162f)
          .addRange(0x11680, 0x116aa)
          .addRange(0x11700, 0x11719)
          .addRange(0x118a0, 0x118df)
          .addRange(0x11a0b, 0x11a32)
          .addRange(0x11a5c, 0x11a83)
          .addRange(0x11a86, 0x11a89)
          .addRange(0x11ac0, 0x11af8)
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c2e)
          .addRange(0x11c72, 0x11c8f)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d30)
          .addRange(0x12000, 0x12399)
          .addRange(0x12400, 0x1246e)
          .addRange(0x12480, 0x12543)
          .addRange(0x13000, 0x1342e)
          .addRange(0x14400, 0x14646)
          .addRange(0x16800, 0x16a38)
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16b00, 0x16b2f)
          .addRange(0x16b40, 0x16b43)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f)
          .addRange(0x16f00, 0x16f44)
          .addRange(0x16f93, 0x16f9f)
          .addRange(0x16fe0, 0x16fe1)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2)
          .addRange(0x1b000, 0x1b11e)
          .addRange(0x1b170, 0x1b2fb)
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d6c0)
          .addRange(0x1d6c2, 0x1d6da)
          .addRange(0x1d6dc, 0x1d6fa)
          .addRange(0x1d6fc, 0x1d714)
          .addRange(0x1d716, 0x1d734)
          .addRange(0x1d736, 0x1d74e)
          .addRange(0x1d750, 0x1d76e)
          .addRange(0x1d770, 0x1d788)
          .addRange(0x1d78a, 0x1d7a8)
          .addRange(0x1d7aa, 0x1d7c2)
          .addRange(0x1d7c4, 0x1d7cb)
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1e900, 0x1e943)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d);

        /***/
      },
      /* 590 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x3006, 0x3007)
          .addRange(0x3021, 0x3029)
          .addRange(0x3038, 0x303a)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2)
          .addRange(0x1b170, 0x1b2fb)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d);

        /***/
      },
      /* 591 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x200c, 0x200d);

        /***/
      },
      /* 592 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x19ba, 0xaab9)
          .addRange(0xe40, 0xe44)
          .addRange(0xec0, 0xec4)
          .addRange(0x19b5, 0x19b7)
          .addRange(0xaab5, 0xaab6)
          .addRange(0xaabb, 0xaabc);

        /***/
      },
      /* 593 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xaa,
          0xb5,
          0xba,
          0x101,
          0x103,
          0x105,
          0x107,
          0x109,
          0x10b,
          0x10d,
          0x10f,
          0x111,
          0x113,
          0x115,
          0x117,
          0x119,
          0x11b,
          0x11d,
          0x11f,
          0x121,
          0x123,
          0x125,
          0x127,
          0x129,
          0x12b,
          0x12d,
          0x12f,
          0x131,
          0x133,
          0x135,
          0x13a,
          0x13c,
          0x13e,
          0x140,
          0x142,
          0x144,
          0x146,
          0x14b,
          0x14d,
          0x14f,
          0x151,
          0x153,
          0x155,
          0x157,
          0x159,
          0x15b,
          0x15d,
          0x15f,
          0x161,
          0x163,
          0x165,
          0x167,
          0x169,
          0x16b,
          0x16d,
          0x16f,
          0x171,
          0x173,
          0x175,
          0x177,
          0x17a,
          0x17c,
          0x183,
          0x185,
          0x188,
          0x192,
          0x195,
          0x19e,
          0x1a1,
          0x1a3,
          0x1a5,
          0x1a8,
          0x1ad,
          0x1b0,
          0x1b4,
          0x1b6,
          0x1c6,
          0x1c9,
          0x1cc,
          0x1ce,
          0x1d0,
          0x1d2,
          0x1d4,
          0x1d6,
          0x1d8,
          0x1da,
          0x1df,
          0x1e1,
          0x1e3,
          0x1e5,
          0x1e7,
          0x1e9,
          0x1eb,
          0x1ed,
          0x1f3,
          0x1f5,
          0x1f9,
          0x1fb,
          0x1fd,
          0x1ff,
          0x201,
          0x203,
          0x205,
          0x207,
          0x209,
          0x20b,
          0x20d,
          0x20f,
          0x211,
          0x213,
          0x215,
          0x217,
          0x219,
          0x21b,
          0x21d,
          0x21f,
          0x221,
          0x223,
          0x225,
          0x227,
          0x229,
          0x22b,
          0x22d,
          0x22f,
          0x231,
          0x23c,
          0x242,
          0x247,
          0x249,
          0x24b,
          0x24d,
          0x345,
          0x371,
          0x373,
          0x377,
          0x390,
          0x3d9,
          0x3db,
          0x3dd,
          0x3df,
          0x3e1,
          0x3e3,
          0x3e5,
          0x3e7,
          0x3e9,
          0x3eb,
          0x3ed,
          0x3f5,
          0x3f8,
          0x461,
          0x463,
          0x465,
          0x467,
          0x469,
          0x46b,
          0x46d,
          0x46f,
          0x471,
          0x473,
          0x475,
          0x477,
          0x479,
          0x47b,
          0x47d,
          0x47f,
          0x481,
          0x48b,
          0x48d,
          0x48f,
          0x491,
          0x493,
          0x495,
          0x497,
          0x499,
          0x49b,
          0x49d,
          0x49f,
          0x4a1,
          0x4a3,
          0x4a5,
          0x4a7,
          0x4a9,
          0x4ab,
          0x4ad,
          0x4af,
          0x4b1,
          0x4b3,
          0x4b5,
          0x4b7,
          0x4b9,
          0x4bb,
          0x4bd,
          0x4bf,
          0x4c2,
          0x4c4,
          0x4c6,
          0x4c8,
          0x4ca,
          0x4cc,
          0x4d1,
          0x4d3,
          0x4d5,
          0x4d7,
          0x4d9,
          0x4db,
          0x4dd,
          0x4df,
          0x4e1,
          0x4e3,
          0x4e5,
          0x4e7,
          0x4e9,
          0x4eb,
          0x4ed,
          0x4ef,
          0x4f1,
          0x4f3,
          0x4f5,
          0x4f7,
          0x4f9,
          0x4fb,
          0x4fd,
          0x4ff,
          0x501,
          0x503,
          0x505,
          0x507,
          0x509,
          0x50b,
          0x50d,
          0x50f,
          0x511,
          0x513,
          0x515,
          0x517,
          0x519,
          0x51b,
          0x51d,
          0x51f,
          0x521,
          0x523,
          0x525,
          0x527,
          0x529,
          0x52b,
          0x52d,
          0x52f,
          0x1e01,
          0x1e03,
          0x1e05,
          0x1e07,
          0x1e09,
          0x1e0b,
          0x1e0d,
          0x1e0f,
          0x1e11,
          0x1e13,
          0x1e15,
          0x1e17,
          0x1e19,
          0x1e1b,
          0x1e1d,
          0x1e1f,
          0x1e21,
          0x1e23,
          0x1e25,
          0x1e27,
          0x1e29,
          0x1e2b,
          0x1e2d,
          0x1e2f,
          0x1e31,
          0x1e33,
          0x1e35,
          0x1e37,
          0x1e39,
          0x1e3b,
          0x1e3d,
          0x1e3f,
          0x1e41,
          0x1e43,
          0x1e45,
          0x1e47,
          0x1e49,
          0x1e4b,
          0x1e4d,
          0x1e4f,
          0x1e51,
          0x1e53,
          0x1e55,
          0x1e57,
          0x1e59,
          0x1e5b,
          0x1e5d,
          0x1e5f,
          0x1e61,
          0x1e63,
          0x1e65,
          0x1e67,
          0x1e69,
          0x1e6b,
          0x1e6d,
          0x1e6f,
          0x1e71,
          0x1e73,
          0x1e75,
          0x1e77,
          0x1e79,
          0x1e7b,
          0x1e7d,
          0x1e7f,
          0x1e81,
          0x1e83,
          0x1e85,
          0x1e87,
          0x1e89,
          0x1e8b,
          0x1e8d,
          0x1e8f,
          0x1e91,
          0x1e93,
          0x1e9f,
          0x1ea1,
          0x1ea3,
          0x1ea5,
          0x1ea7,
          0x1ea9,
          0x1eab,
          0x1ead,
          0x1eaf,
          0x1eb1,
          0x1eb3,
          0x1eb5,
          0x1eb7,
          0x1eb9,
          0x1ebb,
          0x1ebd,
          0x1ebf,
          0x1ec1,
          0x1ec3,
          0x1ec5,
          0x1ec7,
          0x1ec9,
          0x1ecb,
          0x1ecd,
          0x1ecf,
          0x1ed1,
          0x1ed3,
          0x1ed5,
          0x1ed7,
          0x1ed9,
          0x1edb,
          0x1edd,
          0x1edf,
          0x1ee1,
          0x1ee3,
          0x1ee5,
          0x1ee7,
          0x1ee9,
          0x1eeb,
          0x1eed,
          0x1eef,
          0x1ef1,
          0x1ef3,
          0x1ef5,
          0x1ef7,
          0x1ef9,
          0x1efb,
          0x1efd,
          0x1fbe,
          0x2071,
          0x207f,
          0x210a,
          0x2113,
          0x212f,
          0x2134,
          0x2139,
          0x214e,
          0x2184,
          0x2c61,
          0x2c68,
          0x2c6a,
          0x2c6c,
          0x2c71,
          0x2c81,
          0x2c83,
          0x2c85,
          0x2c87,
          0x2c89,
          0x2c8b,
          0x2c8d,
          0x2c8f,
          0x2c91,
          0x2c93,
          0x2c95,
          0x2c97,
          0x2c99,
          0x2c9b,
          0x2c9d,
          0x2c9f,
          0x2ca1,
          0x2ca3,
          0x2ca5,
          0x2ca7,
          0x2ca9,
          0x2cab,
          0x2cad,
          0x2caf,
          0x2cb1,
          0x2cb3,
          0x2cb5,
          0x2cb7,
          0x2cb9,
          0x2cbb,
          0x2cbd,
          0x2cbf,
          0x2cc1,
          0x2cc3,
          0x2cc5,
          0x2cc7,
          0x2cc9,
          0x2ccb,
          0x2ccd,
          0x2ccf,
          0x2cd1,
          0x2cd3,
          0x2cd5,
          0x2cd7,
          0x2cd9,
          0x2cdb,
          0x2cdd,
          0x2cdf,
          0x2ce1,
          0x2cec,
          0x2cee,
          0x2cf3,
          0x2d27,
          0x2d2d,
          0xa641,
          0xa643,
          0xa645,
          0xa647,
          0xa649,
          0xa64b,
          0xa64d,
          0xa64f,
          0xa651,
          0xa653,
          0xa655,
          0xa657,
          0xa659,
          0xa65b,
          0xa65d,
          0xa65f,
          0xa661,
          0xa663,
          0xa665,
          0xa667,
          0xa669,
          0xa66b,
          0xa66d,
          0xa681,
          0xa683,
          0xa685,
          0xa687,
          0xa689,
          0xa68b,
          0xa68d,
          0xa68f,
          0xa691,
          0xa693,
          0xa695,
          0xa697,
          0xa699,
          0xa723,
          0xa725,
          0xa727,
          0xa729,
          0xa72b,
          0xa72d,
          0xa733,
          0xa735,
          0xa737,
          0xa739,
          0xa73b,
          0xa73d,
          0xa73f,
          0xa741,
          0xa743,
          0xa745,
          0xa747,
          0xa749,
          0xa74b,
          0xa74d,
          0xa74f,
          0xa751,
          0xa753,
          0xa755,
          0xa757,
          0xa759,
          0xa75b,
          0xa75d,
          0xa75f,
          0xa761,
          0xa763,
          0xa765,
          0xa767,
          0xa769,
          0xa76b,
          0xa76d,
          0xa77a,
          0xa77c,
          0xa77f,
          0xa781,
          0xa783,
          0xa785,
          0xa787,
          0xa78c,
          0xa78e,
          0xa791,
          0xa797,
          0xa799,
          0xa79b,
          0xa79d,
          0xa79f,
          0xa7a1,
          0xa7a3,
          0xa7a5,
          0xa7a7,
          0xa7a9,
          0xa7b5,
          0xa7b7,
          0x1d4bb,
          0x1d7cb
        )
          .addRange(0x61, 0x7a)
          .addRange(0xdf, 0xf6)
          .addRange(0xf8, 0xff)
          .addRange(0x137, 0x138)
          .addRange(0x148, 0x149)
          .addRange(0x17e, 0x180)
          .addRange(0x18c, 0x18d)
          .addRange(0x199, 0x19b)
          .addRange(0x1aa, 0x1ab)
          .addRange(0x1b9, 0x1ba)
          .addRange(0x1bd, 0x1bf)
          .addRange(0x1dc, 0x1dd)
          .addRange(0x1ef, 0x1f0)
          .addRange(0x233, 0x239)
          .addRange(0x23f, 0x240)
          .addRange(0x24f, 0x293)
          .addRange(0x295, 0x2b8)
          .addRange(0x2c0, 0x2c1)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x37a, 0x37d)
          .addRange(0x3ac, 0x3ce)
          .addRange(0x3d0, 0x3d1)
          .addRange(0x3d5, 0x3d7)
          .addRange(0x3ef, 0x3f3)
          .addRange(0x3fb, 0x3fc)
          .addRange(0x430, 0x45f)
          .addRange(0x4ce, 0x4cf)
          .addRange(0x561, 0x587)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1d00, 0x1dbf)
          .addRange(0x1e95, 0x1e9d)
          .addRange(0x1eff, 0x1f07)
          .addRange(0x1f10, 0x1f15)
          .addRange(0x1f20, 0x1f27)
          .addRange(0x1f30, 0x1f37)
          .addRange(0x1f40, 0x1f45)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f60, 0x1f67)
          .addRange(0x1f70, 0x1f7d)
          .addRange(0x1f80, 0x1f87)
          .addRange(0x1f90, 0x1f97)
          .addRange(0x1fa0, 0x1fa7)
          .addRange(0x1fb0, 0x1fb4)
          .addRange(0x1fb6, 0x1fb7)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fc7)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fd7)
          .addRange(0x1fe0, 0x1fe7)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ff7)
          .addRange(0x2090, 0x209c)
          .addRange(0x210e, 0x210f)
          .addRange(0x213c, 0x213d)
          .addRange(0x2146, 0x2149)
          .addRange(0x2170, 0x217f)
          .addRange(0x24d0, 0x24e9)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c65, 0x2c66)
          .addRange(0x2c73, 0x2c74)
          .addRange(0x2c76, 0x2c7d)
          .addRange(0x2ce3, 0x2ce4)
          .addRange(0x2d00, 0x2d25)
          .addRange(0xa69b, 0xa69d)
          .addRange(0xa72f, 0xa731)
          .addRange(0xa76f, 0xa778)
          .addRange(0xa793, 0xa795)
          .addRange(0xa7f8, 0xa7fa)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab5c, 0xab65)
          .addRange(0xab70, 0xabbf)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xff41, 0xff5a)
          .addRange(0x10428, 0x1044f)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x118c0, 0x118df)
          .addRange(0x1d41a, 0x1d433)
          .addRange(0x1d44e, 0x1d454)
          .addRange(0x1d456, 0x1d467)
          .addRange(0x1d482, 0x1d49b)
          .addRange(0x1d4b6, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d4cf)
          .addRange(0x1d4ea, 0x1d503)
          .addRange(0x1d51e, 0x1d537)
          .addRange(0x1d552, 0x1d56b)
          .addRange(0x1d586, 0x1d59f)
          .addRange(0x1d5ba, 0x1d5d3)
          .addRange(0x1d5ee, 0x1d607)
          .addRange(0x1d622, 0x1d63b)
          .addRange(0x1d656, 0x1d66f)
          .addRange(0x1d68a, 0x1d6a5)
          .addRange(0x1d6c2, 0x1d6da)
          .addRange(0x1d6dc, 0x1d6e1)
          .addRange(0x1d6fc, 0x1d714)
          .addRange(0x1d716, 0x1d71b)
          .addRange(0x1d736, 0x1d74e)
          .addRange(0x1d750, 0x1d755)
          .addRange(0x1d770, 0x1d788)
          .addRange(0x1d78a, 0x1d78f)
          .addRange(0x1d7aa, 0x1d7c2)
          .addRange(0x1d7c4, 0x1d7c9)
          .addRange(0x1e922, 0x1e943);

        /***/
      },
      /* 594 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x2b,
          0x5e,
          0x7c,
          0x7e,
          0xac,
          0xb1,
          0xd7,
          0xf7,
          0x3d5,
          0x2016,
          0x2040,
          0x2044,
          0x2052,
          0x20e1,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x214b,
          0x21dd,
          0x237c,
          0x23b7,
          0x23d0,
          0x25e2,
          0x25e4,
          0x2640,
          0x2642,
          0xfb29,
          0xfe68,
          0xff0b,
          0xff3c,
          0xff3e,
          0xff5c,
          0xff5e,
          0xffe2,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e
        )
          .addRange(0x3c, 0x3e)
          .addRange(0x3d0, 0x3d2)
          .addRange(0x3f0, 0x3f1)
          .addRange(0x3f4, 0x3f6)
          .addRange(0x606, 0x608)
          .addRange(0x2032, 0x2034)
          .addRange(0x2061, 0x2064)
          .addRange(0x207a, 0x207e)
          .addRange(0x208a, 0x208e)
          .addRange(0x20d0, 0x20dc)
          .addRange(0x20e5, 0x20e6)
          .addRange(0x20eb, 0x20ef)
          .addRange(0x210a, 0x2113)
          .addRange(0x2118, 0x211d)
          .addRange(0x2128, 0x2129)
          .addRange(0x212c, 0x212d)
          .addRange(0x212f, 0x2131)
          .addRange(0x2133, 0x2138)
          .addRange(0x213c, 0x2149)
          .addRange(0x2190, 0x21a7)
          .addRange(0x21a9, 0x21ae)
          .addRange(0x21b0, 0x21b1)
          .addRange(0x21b6, 0x21b7)
          .addRange(0x21bc, 0x21db)
          .addRange(0x21e4, 0x21e5)
          .addRange(0x21f4, 0x22ff)
          .addRange(0x2308, 0x230b)
          .addRange(0x2320, 0x2321)
          .addRange(0x239b, 0x23b5)
          .addRange(0x23dc, 0x23e2)
          .addRange(0x25a0, 0x25a1)
          .addRange(0x25ae, 0x25b7)
          .addRange(0x25bc, 0x25c1)
          .addRange(0x25c6, 0x25c7)
          .addRange(0x25ca, 0x25cb)
          .addRange(0x25cf, 0x25d3)
          .addRange(0x25e7, 0x25ec)
          .addRange(0x25f8, 0x25ff)
          .addRange(0x2605, 0x2606)
          .addRange(0x2660, 0x2663)
          .addRange(0x266d, 0x266f)
          .addRange(0x27c0, 0x27ff)
          .addRange(0x2900, 0x2aff)
          .addRange(0x2b30, 0x2b44)
          .addRange(0x2b47, 0x2b4c)
          .addRange(0xfe61, 0xfe66)
          .addRange(0xff1c, 0xff1e)
          .addRange(0xffe9, 0xffec)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d7cb)
          .addRange(0x1d7ce, 0x1d7ff)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x1eef0, 0x1eef1);

        /***/
      },
      /* 595 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xfdd0, 0xfdef)
          .addRange(0xfffe, 0xffff)
          .addRange(0x1fffe, 0x1ffff)
          .addRange(0x2fffe, 0x2ffff)
          .addRange(0x3fffe, 0x3ffff)
          .addRange(0x4fffe, 0x4ffff)
          .addRange(0x5fffe, 0x5ffff)
          .addRange(0x6fffe, 0x6ffff)
          .addRange(0x7fffe, 0x7ffff)
          .addRange(0x8fffe, 0x8ffff)
          .addRange(0x9fffe, 0x9ffff)
          .addRange(0xafffe, 0xaffff)
          .addRange(0xbfffe, 0xbffff)
          .addRange(0xcfffe, 0xcffff)
          .addRange(0xdfffe, 0xdffff)
          .addRange(0xefffe, 0xeffff)
          .addRange(0xffffe, 0xfffff)
          .addRange(0x10fffe, 0x10ffff);

        /***/
      },
      /* 596 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x60,
          0xa9,
          0xae,
          0xb6,
          0xbb,
          0xbf,
          0xd7,
          0xf7,
          0x3030
        )
          .addRange(0x21, 0x2f)
          .addRange(0x3a, 0x40)
          .addRange(0x5b, 0x5e)
          .addRange(0x7b, 0x7e)
          .addRange(0xa1, 0xa7)
          .addRange(0xab, 0xac)
          .addRange(0xb0, 0xb1)
          .addRange(0x2010, 0x2027)
          .addRange(0x2030, 0x203e)
          .addRange(0x2041, 0x2053)
          .addRange(0x2055, 0x205e)
          .addRange(0x2190, 0x245f)
          .addRange(0x2500, 0x2775)
          .addRange(0x2794, 0x2bff)
          .addRange(0x2e00, 0x2e7f)
          .addRange(0x3001, 0x3003)
          .addRange(0x3008, 0x3020)
          .addRange(0xfd3e, 0xfd3f)
          .addRange(0xfe45, 0xfe46);

        /***/
      },
      /* 597 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x20, 0x85)
          .addRange(0x9, 0xd)
          .addRange(0x200e, 0x200f)
          .addRange(0x2028, 0x2029);

        /***/
      },
      /* 598 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x22,
          0x27,
          0xab,
          0xbb,
          0x2e42,
          0xff02,
          0xff07
        )
          .addRange(0x2018, 0x201f)
          .addRange(0x2039, 0x203a)
          .addRange(0x300c, 0x300f)
          .addRange(0x301d, 0x301f)
          .addRange(0xfe41, 0xfe44)
          .addRange(0xff62, 0xff63);

        /***/
      },
      /* 599 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x2e80, 0x2e99)
          .addRange(0x2e9b, 0x2ef3)
          .addRange(0x2f00, 0x2fd5);

        /***/
      },
      /* 600 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x1f1e6, 0x1f1ff);

        /***/
      },
      /* 601 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x21,
          0x2e,
          0x3f,
          0x589,
          0x61f,
          0x6d4,
          0x7f9,
          0x1362,
          0x166e,
          0x1803,
          0x1809,
          0x2e2e,
          0x2e3c,
          0x3002,
          0xa4ff,
          0xa6f3,
          0xa6f7,
          0xa92f,
          0xabeb,
          0xfe52,
          0xff01,
          0xff0e,
          0xff1f,
          0xff61,
          0x111cd,
          0x112a9,
          0x16af5,
          0x16b44,
          0x1bc9f,
          0x1da88
        )
          .addRange(0x700, 0x702)
          .addRange(0x964, 0x965)
          .addRange(0x104a, 0x104b)
          .addRange(0x1367, 0x1368)
          .addRange(0x1735, 0x1736)
          .addRange(0x1944, 0x1945)
          .addRange(0x1aa8, 0x1aab)
          .addRange(0x1b5a, 0x1b5b)
          .addRange(0x1b5e, 0x1b5f)
          .addRange(0x1c3b, 0x1c3c)
          .addRange(0x1c7e, 0x1c7f)
          .addRange(0x203c, 0x203d)
          .addRange(0x2047, 0x2049)
          .addRange(0xa60e, 0xa60f)
          .addRange(0xa876, 0xa877)
          .addRange(0xa8ce, 0xa8cf)
          .addRange(0xa9c8, 0xa9c9)
          .addRange(0xaa5d, 0xaa5f)
          .addRange(0xaaf0, 0xaaf1)
          .addRange(0xfe56, 0xfe57)
          .addRange(0x10a56, 0x10a57)
          .addRange(0x11047, 0x11048)
          .addRange(0x110be, 0x110c1)
          .addRange(0x11141, 0x11143)
          .addRange(0x111c5, 0x111c6)
          .addRange(0x111de, 0x111df)
          .addRange(0x11238, 0x11239)
          .addRange(0x1123b, 0x1123c)
          .addRange(0x1144b, 0x1144c)
          .addRange(0x115c2, 0x115c3)
          .addRange(0x115c9, 0x115d7)
          .addRange(0x11641, 0x11642)
          .addRange(0x1173c, 0x1173e)
          .addRange(0x11a42, 0x11a43)
          .addRange(0x11a9b, 0x11a9c)
          .addRange(0x11c41, 0x11c42)
          .addRange(0x16a6e, 0x16a6f)
          .addRange(0x16b37, 0x16b38);

        /***/
      },
      /* 602 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x12f,
          0x249,
          0x268,
          0x29d,
          0x2b2,
          0x3f3,
          0x456,
          0x458,
          0x1d62,
          0x1d96,
          0x1da4,
          0x1da8,
          0x1e2d,
          0x1ecb,
          0x2071,
          0x2c7c
        )
          .addRange(0x69, 0x6a)
          .addRange(0x2148, 0x2149)
          .addRange(0x1d422, 0x1d423)
          .addRange(0x1d456, 0x1d457)
          .addRange(0x1d48a, 0x1d48b)
          .addRange(0x1d4be, 0x1d4bf)
          .addRange(0x1d4f2, 0x1d4f3)
          .addRange(0x1d526, 0x1d527)
          .addRange(0x1d55a, 0x1d55b)
          .addRange(0x1d58e, 0x1d58f)
          .addRange(0x1d5c2, 0x1d5c3)
          .addRange(0x1d5f6, 0x1d5f7)
          .addRange(0x1d62a, 0x1d62b)
          .addRange(0x1d65e, 0x1d65f)
          .addRange(0x1d692, 0x1d693);

        /***/
      },
      /* 603 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x21,
          0x2c,
          0x2e,
          0x3f,
          0x37e,
          0x387,
          0x589,
          0x5c3,
          0x60c,
          0x61b,
          0x61f,
          0x6d4,
          0x70c,
          0x85e,
          0xf08,
          0x17da,
          0x2e2e,
          0x2e3c,
          0x2e41,
          0xa92f,
          0xaadf,
          0xabeb,
          0xff01,
          0xff0c,
          0xff0e,
          0xff1f,
          0xff61,
          0xff64,
          0x1039f,
          0x103d0,
          0x10857,
          0x1091f,
          0x111cd,
          0x112a9,
          0x1145b,
          0x11c71,
          0x16af5,
          0x16b44,
          0x1bc9f
        )
          .addRange(0x3a, 0x3b)
          .addRange(0x700, 0x70a)
          .addRange(0x7f8, 0x7f9)
          .addRange(0x830, 0x83e)
          .addRange(0x964, 0x965)
          .addRange(0xe5a, 0xe5b)
          .addRange(0xf0d, 0xf12)
          .addRange(0x104a, 0x104b)
          .addRange(0x1361, 0x1368)
          .addRange(0x166d, 0x166e)
          .addRange(0x16eb, 0x16ed)
          .addRange(0x1735, 0x1736)
          .addRange(0x17d4, 0x17d6)
          .addRange(0x1802, 0x1805)
          .addRange(0x1808, 0x1809)
          .addRange(0x1944, 0x1945)
          .addRange(0x1aa8, 0x1aab)
          .addRange(0x1b5a, 0x1b5b)
          .addRange(0x1b5d, 0x1b5f)
          .addRange(0x1c3b, 0x1c3f)
          .addRange(0x1c7e, 0x1c7f)
          .addRange(0x203c, 0x203d)
          .addRange(0x2047, 0x2049)
          .addRange(0x3001, 0x3002)
          .addRange(0xa4fe, 0xa4ff)
          .addRange(0xa60d, 0xa60f)
          .addRange(0xa6f3, 0xa6f7)
          .addRange(0xa876, 0xa877)
          .addRange(0xa8ce, 0xa8cf)
          .addRange(0xa9c7, 0xa9c9)
          .addRange(0xaa5d, 0xaa5f)
          .addRange(0xaaf0, 0xaaf1)
          .addRange(0xfe50, 0xfe52)
          .addRange(0xfe54, 0xfe57)
          .addRange(0xff1a, 0xff1b)
          .addRange(0x10a56, 0x10a57)
          .addRange(0x10af0, 0x10af5)
          .addRange(0x10b3a, 0x10b3f)
          .addRange(0x10b99, 0x10b9c)
          .addRange(0x11047, 0x1104d)
          .addRange(0x110be, 0x110c1)
          .addRange(0x11141, 0x11143)
          .addRange(0x111c5, 0x111c6)
          .addRange(0x111de, 0x111df)
          .addRange(0x11238, 0x1123c)
          .addRange(0x1144b, 0x1144d)
          .addRange(0x115c2, 0x115c5)
          .addRange(0x115c9, 0x115d7)
          .addRange(0x11641, 0x11642)
          .addRange(0x1173c, 0x1173e)
          .addRange(0x11a42, 0x11a43)
          .addRange(0x11a9b, 0x11a9c)
          .addRange(0x11aa1, 0x11aa2)
          .addRange(0x11c41, 0x11c43)
          .addRange(0x12470, 0x12474)
          .addRange(0x16a6e, 0x16a6f)
          .addRange(0x16b37, 0x16b39)
          .addRange(0x1da87, 0x1da8a);

        /***/
      },
      /* 604 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xfa11, 0xfa1f, 0xfa21)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xfa0e, 0xfa0f)
          .addRange(0xfa13, 0xfa14)
          .addRange(0xfa23, 0xfa24)
          .addRange(0xfa27, 0xfa29)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0);

        /***/
      },
      /* 605 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x100,
          0x102,
          0x104,
          0x106,
          0x108,
          0x10a,
          0x10c,
          0x10e,
          0x110,
          0x112,
          0x114,
          0x116,
          0x118,
          0x11a,
          0x11c,
          0x11e,
          0x120,
          0x122,
          0x124,
          0x126,
          0x128,
          0x12a,
          0x12c,
          0x12e,
          0x130,
          0x132,
          0x134,
          0x136,
          0x139,
          0x13b,
          0x13d,
          0x13f,
          0x141,
          0x143,
          0x145,
          0x147,
          0x14a,
          0x14c,
          0x14e,
          0x150,
          0x152,
          0x154,
          0x156,
          0x158,
          0x15a,
          0x15c,
          0x15e,
          0x160,
          0x162,
          0x164,
          0x166,
          0x168,
          0x16a,
          0x16c,
          0x16e,
          0x170,
          0x172,
          0x174,
          0x176,
          0x17b,
          0x17d,
          0x184,
          0x1a2,
          0x1a4,
          0x1a9,
          0x1ac,
          0x1b5,
          0x1bc,
          0x1c4,
          0x1c7,
          0x1ca,
          0x1cd,
          0x1cf,
          0x1d1,
          0x1d3,
          0x1d5,
          0x1d7,
          0x1d9,
          0x1db,
          0x1de,
          0x1e0,
          0x1e2,
          0x1e4,
          0x1e6,
          0x1e8,
          0x1ea,
          0x1ec,
          0x1ee,
          0x1f1,
          0x1f4,
          0x1fa,
          0x1fc,
          0x1fe,
          0x200,
          0x202,
          0x204,
          0x206,
          0x208,
          0x20a,
          0x20c,
          0x20e,
          0x210,
          0x212,
          0x214,
          0x216,
          0x218,
          0x21a,
          0x21c,
          0x21e,
          0x220,
          0x222,
          0x224,
          0x226,
          0x228,
          0x22a,
          0x22c,
          0x22e,
          0x230,
          0x232,
          0x241,
          0x248,
          0x24a,
          0x24c,
          0x24e,
          0x370,
          0x372,
          0x376,
          0x37f,
          0x386,
          0x38c,
          0x3cf,
          0x3d8,
          0x3da,
          0x3dc,
          0x3de,
          0x3e0,
          0x3e2,
          0x3e4,
          0x3e6,
          0x3e8,
          0x3ea,
          0x3ec,
          0x3ee,
          0x3f4,
          0x3f7,
          0x460,
          0x462,
          0x464,
          0x466,
          0x468,
          0x46a,
          0x46c,
          0x46e,
          0x470,
          0x472,
          0x474,
          0x476,
          0x478,
          0x47a,
          0x47c,
          0x47e,
          0x480,
          0x48a,
          0x48c,
          0x48e,
          0x490,
          0x492,
          0x494,
          0x496,
          0x498,
          0x49a,
          0x49c,
          0x49e,
          0x4a0,
          0x4a2,
          0x4a4,
          0x4a6,
          0x4a8,
          0x4aa,
          0x4ac,
          0x4ae,
          0x4b0,
          0x4b2,
          0x4b4,
          0x4b6,
          0x4b8,
          0x4ba,
          0x4bc,
          0x4be,
          0x4c3,
          0x4c5,
          0x4c7,
          0x4c9,
          0x4cb,
          0x4cd,
          0x4d0,
          0x4d2,
          0x4d4,
          0x4d6,
          0x4d8,
          0x4da,
          0x4dc,
          0x4de,
          0x4e0,
          0x4e2,
          0x4e4,
          0x4e6,
          0x4e8,
          0x4ea,
          0x4ec,
          0x4ee,
          0x4f0,
          0x4f2,
          0x4f4,
          0x4f6,
          0x4f8,
          0x4fa,
          0x4fc,
          0x4fe,
          0x500,
          0x502,
          0x504,
          0x506,
          0x508,
          0x50a,
          0x50c,
          0x50e,
          0x510,
          0x512,
          0x514,
          0x516,
          0x518,
          0x51a,
          0x51c,
          0x51e,
          0x520,
          0x522,
          0x524,
          0x526,
          0x528,
          0x52a,
          0x52c,
          0x52e,
          0x10c7,
          0x10cd,
          0x1e00,
          0x1e02,
          0x1e04,
          0x1e06,
          0x1e08,
          0x1e0a,
          0x1e0c,
          0x1e0e,
          0x1e10,
          0x1e12,
          0x1e14,
          0x1e16,
          0x1e18,
          0x1e1a,
          0x1e1c,
          0x1e1e,
          0x1e20,
          0x1e22,
          0x1e24,
          0x1e26,
          0x1e28,
          0x1e2a,
          0x1e2c,
          0x1e2e,
          0x1e30,
          0x1e32,
          0x1e34,
          0x1e36,
          0x1e38,
          0x1e3a,
          0x1e3c,
          0x1e3e,
          0x1e40,
          0x1e42,
          0x1e44,
          0x1e46,
          0x1e48,
          0x1e4a,
          0x1e4c,
          0x1e4e,
          0x1e50,
          0x1e52,
          0x1e54,
          0x1e56,
          0x1e58,
          0x1e5a,
          0x1e5c,
          0x1e5e,
          0x1e60,
          0x1e62,
          0x1e64,
          0x1e66,
          0x1e68,
          0x1e6a,
          0x1e6c,
          0x1e6e,
          0x1e70,
          0x1e72,
          0x1e74,
          0x1e76,
          0x1e78,
          0x1e7a,
          0x1e7c,
          0x1e7e,
          0x1e80,
          0x1e82,
          0x1e84,
          0x1e86,
          0x1e88,
          0x1e8a,
          0x1e8c,
          0x1e8e,
          0x1e90,
          0x1e92,
          0x1e94,
          0x1e9e,
          0x1ea0,
          0x1ea2,
          0x1ea4,
          0x1ea6,
          0x1ea8,
          0x1eaa,
          0x1eac,
          0x1eae,
          0x1eb0,
          0x1eb2,
          0x1eb4,
          0x1eb6,
          0x1eb8,
          0x1eba,
          0x1ebc,
          0x1ebe,
          0x1ec0,
          0x1ec2,
          0x1ec4,
          0x1ec6,
          0x1ec8,
          0x1eca,
          0x1ecc,
          0x1ece,
          0x1ed0,
          0x1ed2,
          0x1ed4,
          0x1ed6,
          0x1ed8,
          0x1eda,
          0x1edc,
          0x1ede,
          0x1ee0,
          0x1ee2,
          0x1ee4,
          0x1ee6,
          0x1ee8,
          0x1eea,
          0x1eec,
          0x1eee,
          0x1ef0,
          0x1ef2,
          0x1ef4,
          0x1ef6,
          0x1ef8,
          0x1efa,
          0x1efc,
          0x1efe,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1f5f,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x2126,
          0x2128,
          0x2145,
          0x2183,
          0x2c60,
          0x2c67,
          0x2c69,
          0x2c6b,
          0x2c72,
          0x2c75,
          0x2c82,
          0x2c84,
          0x2c86,
          0x2c88,
          0x2c8a,
          0x2c8c,
          0x2c8e,
          0x2c90,
          0x2c92,
          0x2c94,
          0x2c96,
          0x2c98,
          0x2c9a,
          0x2c9c,
          0x2c9e,
          0x2ca0,
          0x2ca2,
          0x2ca4,
          0x2ca6,
          0x2ca8,
          0x2caa,
          0x2cac,
          0x2cae,
          0x2cb0,
          0x2cb2,
          0x2cb4,
          0x2cb6,
          0x2cb8,
          0x2cba,
          0x2cbc,
          0x2cbe,
          0x2cc0,
          0x2cc2,
          0x2cc4,
          0x2cc6,
          0x2cc8,
          0x2cca,
          0x2ccc,
          0x2cce,
          0x2cd0,
          0x2cd2,
          0x2cd4,
          0x2cd6,
          0x2cd8,
          0x2cda,
          0x2cdc,
          0x2cde,
          0x2ce0,
          0x2ce2,
          0x2ceb,
          0x2ced,
          0x2cf2,
          0xa640,
          0xa642,
          0xa644,
          0xa646,
          0xa648,
          0xa64a,
          0xa64c,
          0xa64e,
          0xa650,
          0xa652,
          0xa654,
          0xa656,
          0xa658,
          0xa65a,
          0xa65c,
          0xa65e,
          0xa660,
          0xa662,
          0xa664,
          0xa666,
          0xa668,
          0xa66a,
          0xa66c,
          0xa680,
          0xa682,
          0xa684,
          0xa686,
          0xa688,
          0xa68a,
          0xa68c,
          0xa68e,
          0xa690,
          0xa692,
          0xa694,
          0xa696,
          0xa698,
          0xa69a,
          0xa722,
          0xa724,
          0xa726,
          0xa728,
          0xa72a,
          0xa72c,
          0xa72e,
          0xa732,
          0xa734,
          0xa736,
          0xa738,
          0xa73a,
          0xa73c,
          0xa73e,
          0xa740,
          0xa742,
          0xa744,
          0xa746,
          0xa748,
          0xa74a,
          0xa74c,
          0xa74e,
          0xa750,
          0xa752,
          0xa754,
          0xa756,
          0xa758,
          0xa75a,
          0xa75c,
          0xa75e,
          0xa760,
          0xa762,
          0xa764,
          0xa766,
          0xa768,
          0xa76a,
          0xa76c,
          0xa76e,
          0xa779,
          0xa77b,
          0xa780,
          0xa782,
          0xa784,
          0xa786,
          0xa78b,
          0xa78d,
          0xa790,
          0xa792,
          0xa796,
          0xa798,
          0xa79a,
          0xa79c,
          0xa79e,
          0xa7a0,
          0xa7a2,
          0xa7a4,
          0xa7a6,
          0xa7a8,
          0xa7b6,
          0x1d49c,
          0x1d4a2,
          0x1d546,
          0x1d7ca
        )
          .addRange(0x41, 0x5a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xde)
          .addRange(0x178, 0x179)
          .addRange(0x181, 0x182)
          .addRange(0x186, 0x187)
          .addRange(0x189, 0x18b)
          .addRange(0x18e, 0x191)
          .addRange(0x193, 0x194)
          .addRange(0x196, 0x198)
          .addRange(0x19c, 0x19d)
          .addRange(0x19f, 0x1a0)
          .addRange(0x1a6, 0x1a7)
          .addRange(0x1ae, 0x1af)
          .addRange(0x1b1, 0x1b3)
          .addRange(0x1b7, 0x1b8)
          .addRange(0x1f6, 0x1f8)
          .addRange(0x23a, 0x23b)
          .addRange(0x23d, 0x23e)
          .addRange(0x243, 0x246)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x38f)
          .addRange(0x391, 0x3a1)
          .addRange(0x3a3, 0x3ab)
          .addRange(0x3d2, 0x3d4)
          .addRange(0x3f9, 0x3fa)
          .addRange(0x3fd, 0x42f)
          .addRange(0x4c0, 0x4c1)
          .addRange(0x531, 0x556)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x1f08, 0x1f0f)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f28, 0x1f2f)
          .addRange(0x1f38, 0x1f3f)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f68, 0x1f6f)
          .addRange(0x1fb8, 0x1fbb)
          .addRange(0x1fc8, 0x1fcb)
          .addRange(0x1fd8, 0x1fdb)
          .addRange(0x1fe8, 0x1fec)
          .addRange(0x1ff8, 0x1ffb)
          .addRange(0x210b, 0x210d)
          .addRange(0x2110, 0x2112)
          .addRange(0x2119, 0x211d)
          .addRange(0x212a, 0x212d)
          .addRange(0x2130, 0x2133)
          .addRange(0x213e, 0x213f)
          .addRange(0x2160, 0x216f)
          .addRange(0x24b6, 0x24cf)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c62, 0x2c64)
          .addRange(0x2c6d, 0x2c70)
          .addRange(0x2c7e, 0x2c80)
          .addRange(0xa77d, 0xa77e)
          .addRange(0xa7aa, 0xa7ae)
          .addRange(0xa7b0, 0xa7b4)
          .addRange(0xff21, 0xff3a)
          .addRange(0x10400, 0x10427)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x118a0, 0x118bf)
          .addRange(0x1d400, 0x1d419)
          .addRange(0x1d434, 0x1d44d)
          .addRange(0x1d468, 0x1d481)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b5)
          .addRange(0x1d4d0, 0x1d4e9)
          .addRange(0x1d504, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d538, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d56c, 0x1d585)
          .addRange(0x1d5a0, 0x1d5b9)
          .addRange(0x1d5d4, 0x1d5ed)
          .addRange(0x1d608, 0x1d621)
          .addRange(0x1d63c, 0x1d655)
          .addRange(0x1d670, 0x1d689)
          .addRange(0x1d6a8, 0x1d6c0)
          .addRange(0x1d6e2, 0x1d6fa)
          .addRange(0x1d71c, 0x1d734)
          .addRange(0x1d756, 0x1d76e)
          .addRange(0x1d790, 0x1d7a8)
          .addRange(0x1e900, 0x1e921)
          .addRange(0x1f130, 0x1f149)
          .addRange(0x1f150, 0x1f169)
          .addRange(0x1f170, 0x1f189);

        /***/
      },
      /* 606 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x180b, 0x180d)
          .addRange(0xfe00, 0xfe0f)
          .addRange(0xe0100, 0xe01ef);

        /***/
      },
      /* 607 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x20,
          0x85,
          0xa0,
          0x1680,
          0x202f,
          0x205f,
          0x3000
        )
          .addRange(0x9, 0xd)
          .addRange(0x2000, 0x200a)
          .addRange(0x2028, 0x2029);

        /***/
      },
      /* 608 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x5f,
          0xaa,
          0xb5,
          0xb7,
          0xba,
          0x2ec,
          0x2ee,
          0x37f,
          0x38c,
          0x559,
          0x5bf,
          0x5c7,
          0x6ff,
          0x7fa,
          0x9b2,
          0x9d7,
          0x9fc,
          0xa3c,
          0xa51,
          0xa5e,
          0xad0,
          0xb71,
          0xb9c,
          0xbd0,
          0xbd7,
          0xcde,
          0xdbd,
          0xdca,
          0xdd6,
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xec6,
          0xf00,
          0xf35,
          0xf37,
          0xf39,
          0xfc6,
          0x10c7,
          0x10cd,
          0x1258,
          0x12c0,
          0x17d7,
          0x1aa7,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1fbe,
          0x2054,
          0x2071,
          0x207f,
          0x20e1,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x2126,
          0x2128,
          0x214e,
          0x2d27,
          0x2d2d,
          0x2d6f,
          0xa8fb,
          0xa8fd,
          0xfb3e,
          0xfe71,
          0xfe73,
          0xfe77,
          0xfe79,
          0xfe7b,
          0xfe7d,
          0xff3f,
          0x101fd,
          0x102e0,
          0x10808,
          0x1083c,
          0x10a3f,
          0x11176,
          0x111dc,
          0x1123e,
          0x11288,
          0x11350,
          0x11357,
          0x114c7,
          0x11644,
          0x118ff,
          0x11a47,
          0x11d3a,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1da75,
          0x1da84,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e
        )
          .addRange(0x30, 0x39)
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x2c1)
          .addRange(0x2c6, 0x2d1)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x300, 0x374)
          .addRange(0x376, 0x377)
          .addRange(0x37b, 0x37d)
          .addRange(0x386, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3f5)
          .addRange(0x3f7, 0x481)
          .addRange(0x483, 0x487)
          .addRange(0x48a, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x561, 0x587)
          .addRange(0x591, 0x5bd)
          .addRange(0x5c1, 0x5c2)
          .addRange(0x5c4, 0x5c5)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f2)
          .addRange(0x610, 0x61a)
          .addRange(0x620, 0x669)
          .addRange(0x66e, 0x6d3)
          .addRange(0x6d5, 0x6dc)
          .addRange(0x6df, 0x6e8)
          .addRange(0x6ea, 0x6fc)
          .addRange(0x710, 0x74a)
          .addRange(0x74d, 0x7b1)
          .addRange(0x7c0, 0x7f5)
          .addRange(0x800, 0x82d)
          .addRange(0x840, 0x85b)
          .addRange(0x860, 0x86a)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x8d4, 0x8e1)
          .addRange(0x8e3, 0x963)
          .addRange(0x966, 0x96f)
          .addRange(0x971, 0x983)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9bc, 0x9c4)
          .addRange(0x9c7, 0x9c8)
          .addRange(0x9cb, 0x9ce)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e3)
          .addRange(0x9e6, 0x9f1)
          .addRange(0xa01, 0xa03)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa3e, 0xa42)
          .addRange(0xa47, 0xa48)
          .addRange(0xa4b, 0xa4d)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa66, 0xa75)
          .addRange(0xa81, 0xa83)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xabc, 0xac5)
          .addRange(0xac7, 0xac9)
          .addRange(0xacb, 0xacd)
          .addRange(0xae0, 0xae3)
          .addRange(0xae6, 0xaef)
          .addRange(0xaf9, 0xaff)
          .addRange(0xb01, 0xb03)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb3c, 0xb44)
          .addRange(0xb47, 0xb48)
          .addRange(0xb4b, 0xb4d)
          .addRange(0xb56, 0xb57)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb63)
          .addRange(0xb66, 0xb6f)
          .addRange(0xb82, 0xb83)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xbbe, 0xbc2)
          .addRange(0xbc6, 0xbc8)
          .addRange(0xbca, 0xbcd)
          .addRange(0xbe6, 0xbef)
          .addRange(0xc00, 0xc03)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc3d, 0xc44)
          .addRange(0xc46, 0xc48)
          .addRange(0xc4a, 0xc4d)
          .addRange(0xc55, 0xc56)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc63)
          .addRange(0xc66, 0xc6f)
          .addRange(0xc80, 0xc83)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xcbc, 0xcc4)
          .addRange(0xcc6, 0xcc8)
          .addRange(0xcca, 0xccd)
          .addRange(0xcd5, 0xcd6)
          .addRange(0xce0, 0xce3)
          .addRange(0xce6, 0xcef)
          .addRange(0xcf1, 0xcf2)
          .addRange(0xd00, 0xd03)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd44)
          .addRange(0xd46, 0xd48)
          .addRange(0xd4a, 0xd4e)
          .addRange(0xd54, 0xd57)
          .addRange(0xd5f, 0xd63)
          .addRange(0xd66, 0xd6f)
          .addRange(0xd7a, 0xd7f)
          .addRange(0xd82, 0xd83)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xdcf, 0xdd4)
          .addRange(0xdd8, 0xddf)
          .addRange(0xde6, 0xdef)
          .addRange(0xdf2, 0xdf3)
          .addRange(0xe01, 0xe3a)
          .addRange(0xe40, 0xe4e)
          .addRange(0xe50, 0xe59)
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb9)
          .addRange(0xebb, 0xebd)
          .addRange(0xec0, 0xec4)
          .addRange(0xec8, 0xecd)
          .addRange(0xed0, 0xed9)
          .addRange(0xedc, 0xedf)
          .addRange(0xf18, 0xf19)
          .addRange(0xf20, 0xf29)
          .addRange(0xf3e, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf71, 0xf84)
          .addRange(0xf86, 0xf97)
          .addRange(0xf99, 0xfbc)
          .addRange(0x1000, 0x1049)
          .addRange(0x1050, 0x109d)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x10d0, 0x10fa)
          .addRange(0x10fc, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x135d, 0x135f)
          .addRange(0x1369, 0x1371)
          .addRange(0x1380, 0x138f)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1401, 0x166c)
          .addRange(0x166f, 0x167f)
          .addRange(0x1681, 0x169a)
          .addRange(0x16a0, 0x16ea)
          .addRange(0x16ee, 0x16f8)
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1714)
          .addRange(0x1720, 0x1734)
          .addRange(0x1740, 0x1753)
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1772, 0x1773)
          .addRange(0x1780, 0x17d3)
          .addRange(0x17dc, 0x17dd)
          .addRange(0x17e0, 0x17e9)
          .addRange(0x180b, 0x180d)
          .addRange(0x1810, 0x1819)
          .addRange(0x1820, 0x1877)
          .addRange(0x1880, 0x18aa)
          .addRange(0x18b0, 0x18f5)
          .addRange(0x1900, 0x191e)
          .addRange(0x1920, 0x192b)
          .addRange(0x1930, 0x193b)
          .addRange(0x1946, 0x196d)
          .addRange(0x1970, 0x1974)
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x19d0, 0x19da)
          .addRange(0x1a00, 0x1a1b)
          .addRange(0x1a20, 0x1a5e)
          .addRange(0x1a60, 0x1a7c)
          .addRange(0x1a7f, 0x1a89)
          .addRange(0x1a90, 0x1a99)
          .addRange(0x1ab0, 0x1abd)
          .addRange(0x1b00, 0x1b4b)
          .addRange(0x1b50, 0x1b59)
          .addRange(0x1b6b, 0x1b73)
          .addRange(0x1b80, 0x1bf3)
          .addRange(0x1c00, 0x1c37)
          .addRange(0x1c40, 0x1c49)
          .addRange(0x1c4d, 0x1c7d)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1cd0, 0x1cd2)
          .addRange(0x1cd4, 0x1cf9)
          .addRange(0x1d00, 0x1df9)
          .addRange(0x1dfb, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fbc)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fcc)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fe0, 0x1fec)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffc)
          .addRange(0x203f, 0x2040)
          .addRange(0x2090, 0x209c)
          .addRange(0x20d0, 0x20dc)
          .addRange(0x20e5, 0x20f0)
          .addRange(0x210a, 0x2113)
          .addRange(0x2118, 0x211d)
          .addRange(0x212a, 0x2139)
          .addRange(0x213c, 0x213f)
          .addRange(0x2145, 0x2149)
          .addRange(0x2160, 0x2188)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2ce4)
          .addRange(0x2ceb, 0x2cf3)
          .addRange(0x2d00, 0x2d25)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d7f, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0x2de0, 0x2dff)
          .addRange(0x3005, 0x3007)
          .addRange(0x3021, 0x302f)
          .addRange(0x3031, 0x3035)
          .addRange(0x3038, 0x303c)
          .addRange(0x3041, 0x3096)
          .addRange(0x3099, 0x309a)
          .addRange(0x309d, 0x309f)
          .addRange(0x30a1, 0x30fa)
          .addRange(0x30fc, 0x30ff)
          .addRange(0x3105, 0x312e)
          .addRange(0x3131, 0x318e)
          .addRange(0x31a0, 0x31ba)
          .addRange(0x31f0, 0x31ff)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xa000, 0xa48c)
          .addRange(0xa4d0, 0xa4fd)
          .addRange(0xa500, 0xa60c)
          .addRange(0xa610, 0xa62b)
          .addRange(0xa640, 0xa66f)
          .addRange(0xa674, 0xa67d)
          .addRange(0xa67f, 0xa6f1)
          .addRange(0xa717, 0xa71f)
          .addRange(0xa722, 0xa788)
          .addRange(0xa78b, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f7, 0xa827)
          .addRange(0xa840, 0xa873)
          .addRange(0xa880, 0xa8c5)
          .addRange(0xa8d0, 0xa8d9)
          .addRange(0xa8e0, 0xa8f7)
          .addRange(0xa900, 0xa92d)
          .addRange(0xa930, 0xa953)
          .addRange(0xa960, 0xa97c)
          .addRange(0xa980, 0xa9c0)
          .addRange(0xa9cf, 0xa9d9)
          .addRange(0xa9e0, 0xa9fe)
          .addRange(0xaa00, 0xaa36)
          .addRange(0xaa40, 0xaa4d)
          .addRange(0xaa50, 0xaa59)
          .addRange(0xaa60, 0xaa76)
          .addRange(0xaa7a, 0xaac2)
          .addRange(0xaadb, 0xaadd)
          .addRange(0xaae0, 0xaaef)
          .addRange(0xaaf2, 0xaaf6)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab5c, 0xab65)
          .addRange(0xab70, 0xabea)
          .addRange(0xabec, 0xabed)
          .addRange(0xabf0, 0xabf9)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xfb1d, 0xfb28)
          .addRange(0xfb2a, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfbb1)
          .addRange(0xfbd3, 0xfc5d)
          .addRange(0xfc64, 0xfd3d)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdf9)
          .addRange(0xfe00, 0xfe0f)
          .addRange(0xfe20, 0xfe2f)
          .addRange(0xfe33, 0xfe34)
          .addRange(0xfe4d, 0xfe4f)
          .addRange(0xfe7f, 0xfefc)
          .addRange(0xff10, 0xff19)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a)
          .addRange(0xff66, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc)
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa)
          .addRange(0x10140, 0x10174)
          .addRange(0x10280, 0x1029c)
          .addRange(0x102a0, 0x102d0)
          .addRange(0x10300, 0x1031f)
          .addRange(0x1032d, 0x1034a)
          .addRange(0x10350, 0x1037a)
          .addRange(0x10380, 0x1039d)
          .addRange(0x103a0, 0x103c3)
          .addRange(0x103c8, 0x103cf)
          .addRange(0x103d1, 0x103d5)
          .addRange(0x10400, 0x1049d)
          .addRange(0x104a0, 0x104a9)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10500, 0x10527)
          .addRange(0x10530, 0x10563)
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838)
          .addRange(0x1083f, 0x10855)
          .addRange(0x10860, 0x10876)
          .addRange(0x10880, 0x1089e)
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x10900, 0x10915)
          .addRange(0x10920, 0x10939)
          .addRange(0x10980, 0x109b7)
          .addRange(0x109be, 0x109bf)
          .addRange(0x10a00, 0x10a03)
          .addRange(0x10a05, 0x10a06)
          .addRange(0x10a0c, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a38, 0x10a3a)
          .addRange(0x10a60, 0x10a7c)
          .addRange(0x10a80, 0x10a9c)
          .addRange(0x10ac0, 0x10ac7)
          .addRange(0x10ac9, 0x10ae6)
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b40, 0x10b55)
          .addRange(0x10b60, 0x10b72)
          .addRange(0x10b80, 0x10b91)
          .addRange(0x10c00, 0x10c48)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x11000, 0x11046)
          .addRange(0x11066, 0x1106f)
          .addRange(0x1107f, 0x110ba)
          .addRange(0x110d0, 0x110e8)
          .addRange(0x110f0, 0x110f9)
          .addRange(0x11100, 0x11134)
          .addRange(0x11136, 0x1113f)
          .addRange(0x11150, 0x11173)
          .addRange(0x11180, 0x111c4)
          .addRange(0x111ca, 0x111cc)
          .addRange(0x111d0, 0x111da)
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x11237)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a8)
          .addRange(0x112b0, 0x112ea)
          .addRange(0x112f0, 0x112f9)
          .addRange(0x11300, 0x11303)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x1133c, 0x11344)
          .addRange(0x11347, 0x11348)
          .addRange(0x1134b, 0x1134d)
          .addRange(0x1135d, 0x11363)
          .addRange(0x11366, 0x1136c)
          .addRange(0x11370, 0x11374)
          .addRange(0x11400, 0x1144a)
          .addRange(0x11450, 0x11459)
          .addRange(0x11480, 0x114c5)
          .addRange(0x114d0, 0x114d9)
          .addRange(0x11580, 0x115b5)
          .addRange(0x115b8, 0x115c0)
          .addRange(0x115d8, 0x115dd)
          .addRange(0x11600, 0x11640)
          .addRange(0x11650, 0x11659)
          .addRange(0x11680, 0x116b7)
          .addRange(0x116c0, 0x116c9)
          .addRange(0x11700, 0x11719)
          .addRange(0x1171d, 0x1172b)
          .addRange(0x11730, 0x11739)
          .addRange(0x118a0, 0x118e9)
          .addRange(0x11a00, 0x11a3e)
          .addRange(0x11a50, 0x11a83)
          .addRange(0x11a86, 0x11a99)
          .addRange(0x11ac0, 0x11af8)
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c36)
          .addRange(0x11c38, 0x11c40)
          .addRange(0x11c50, 0x11c59)
          .addRange(0x11c72, 0x11c8f)
          .addRange(0x11c92, 0x11ca7)
          .addRange(0x11ca9, 0x11cb6)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d36)
          .addRange(0x11d3c, 0x11d3d)
          .addRange(0x11d3f, 0x11d47)
          .addRange(0x11d50, 0x11d59)
          .addRange(0x12000, 0x12399)
          .addRange(0x12400, 0x1246e)
          .addRange(0x12480, 0x12543)
          .addRange(0x13000, 0x1342e)
          .addRange(0x14400, 0x14646)
          .addRange(0x16800, 0x16a38)
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16a60, 0x16a69)
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16af0, 0x16af4)
          .addRange(0x16b00, 0x16b36)
          .addRange(0x16b40, 0x16b43)
          .addRange(0x16b50, 0x16b59)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f)
          .addRange(0x16f00, 0x16f44)
          .addRange(0x16f50, 0x16f7e)
          .addRange(0x16f8f, 0x16f9f)
          .addRange(0x16fe0, 0x16fe1)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2)
          .addRange(0x1b000, 0x1b11e)
          .addRange(0x1b170, 0x1b2fb)
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1bc9d, 0x1bc9e)
          .addRange(0x1d165, 0x1d169)
          .addRange(0x1d16d, 0x1d172)
          .addRange(0x1d17b, 0x1d182)
          .addRange(0x1d185, 0x1d18b)
          .addRange(0x1d1aa, 0x1d1ad)
          .addRange(0x1d242, 0x1d244)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d6c0)
          .addRange(0x1d6c2, 0x1d6da)
          .addRange(0x1d6dc, 0x1d6fa)
          .addRange(0x1d6fc, 0x1d714)
          .addRange(0x1d716, 0x1d734)
          .addRange(0x1d736, 0x1d74e)
          .addRange(0x1d750, 0x1d76e)
          .addRange(0x1d770, 0x1d788)
          .addRange(0x1d78a, 0x1d7a8)
          .addRange(0x1d7aa, 0x1d7c2)
          .addRange(0x1d7c4, 0x1d7cb)
          .addRange(0x1d7ce, 0x1d7ff)
          .addRange(0x1da00, 0x1da36)
          .addRange(0x1da3b, 0x1da6c)
          .addRange(0x1da9b, 0x1da9f)
          .addRange(0x1daa1, 0x1daaf)
          .addRange(0x1e000, 0x1e006)
          .addRange(0x1e008, 0x1e018)
          .addRange(0x1e01b, 0x1e021)
          .addRange(0x1e023, 0x1e024)
          .addRange(0x1e026, 0x1e02a)
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1e8d0, 0x1e8d6)
          .addRange(0x1e900, 0x1e94a)
          .addRange(0x1e950, 0x1e959)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d)
          .addRange(0xe0100, 0xe01ef);

        /***/
      },
      /* 609 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xaa,
          0xb5,
          0xba,
          0x2ec,
          0x2ee,
          0x37f,
          0x386,
          0x38c,
          0x559,
          0x6d5,
          0x6ff,
          0x710,
          0x7b1,
          0x7fa,
          0x81a,
          0x824,
          0x828,
          0x93d,
          0x950,
          0x9b2,
          0x9bd,
          0x9ce,
          0x9fc,
          0xa5e,
          0xabd,
          0xad0,
          0xaf9,
          0xb3d,
          0xb71,
          0xb83,
          0xb9c,
          0xbd0,
          0xc3d,
          0xc80,
          0xcbd,
          0xcde,
          0xd3d,
          0xd4e,
          0xdbd,
          0xe32,
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xeb2,
          0xebd,
          0xec6,
          0xf00,
          0x103f,
          0x1061,
          0x108e,
          0x10c7,
          0x10cd,
          0x1258,
          0x12c0,
          0x17d7,
          0x17dc,
          0x18aa,
          0x1aa7,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1fbe,
          0x2071,
          0x207f,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x2126,
          0x2128,
          0x214e,
          0x2d27,
          0x2d2d,
          0x2d6f,
          0xa8fb,
          0xa8fd,
          0xa9cf,
          0xaa7a,
          0xaab1,
          0xaac0,
          0xaac2,
          0xfb1d,
          0xfb3e,
          0xfe71,
          0xfe73,
          0xfe77,
          0xfe79,
          0xfe7b,
          0xfe7d,
          0x10808,
          0x1083c,
          0x10a00,
          0x11176,
          0x111da,
          0x111dc,
          0x11288,
          0x1133d,
          0x11350,
          0x114c7,
          0x11644,
          0x118ff,
          0x11a00,
          0x11a3a,
          0x11a50,
          0x11c40,
          0x11d46,
          0x16f50,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e
        )
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x2c1)
          .addRange(0x2c6, 0x2d1)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x370, 0x374)
          .addRange(0x376, 0x377)
          .addRange(0x37b, 0x37d)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3f5)
          .addRange(0x3f7, 0x481)
          .addRange(0x48a, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x561, 0x587)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f2)
          .addRange(0x620, 0x64a)
          .addRange(0x66e, 0x66f)
          .addRange(0x671, 0x6d3)
          .addRange(0x6e5, 0x6e6)
          .addRange(0x6ee, 0x6ef)
          .addRange(0x6fa, 0x6fc)
          .addRange(0x712, 0x72f)
          .addRange(0x74d, 0x7a5)
          .addRange(0x7ca, 0x7ea)
          .addRange(0x7f4, 0x7f5)
          .addRange(0x800, 0x815)
          .addRange(0x840, 0x858)
          .addRange(0x860, 0x86a)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x904, 0x939)
          .addRange(0x958, 0x961)
          .addRange(0x971, 0x980)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e1)
          .addRange(0x9f0, 0x9f1)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa72, 0xa74)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xae0, 0xae1)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb61)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc61)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xce0, 0xce1)
          .addRange(0xcf1, 0xcf2)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd3a)
          .addRange(0xd54, 0xd56)
          .addRange(0xd5f, 0xd61)
          .addRange(0xd7a, 0xd7f)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xe01, 0xe30)
          .addRange(0xe40, 0xe46)
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb0)
          .addRange(0xec0, 0xec4)
          .addRange(0xedc, 0xedf)
          .addRange(0xf40, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf88, 0xf8c)
          .addRange(0x1000, 0x102a)
          .addRange(0x1050, 0x1055)
          .addRange(0x105a, 0x105d)
          .addRange(0x1065, 0x1066)
          .addRange(0x106e, 0x1070)
          .addRange(0x1075, 0x1081)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x10d0, 0x10fa)
          .addRange(0x10fc, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x1380, 0x138f)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1401, 0x166c)
          .addRange(0x166f, 0x167f)
          .addRange(0x1681, 0x169a)
          .addRange(0x16a0, 0x16ea)
          .addRange(0x16ee, 0x16f8)
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1711)
          .addRange(0x1720, 0x1731)
          .addRange(0x1740, 0x1751)
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1780, 0x17b3)
          .addRange(0x1820, 0x1877)
          .addRange(0x1880, 0x18a8)
          .addRange(0x18b0, 0x18f5)
          .addRange(0x1900, 0x191e)
          .addRange(0x1950, 0x196d)
          .addRange(0x1970, 0x1974)
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x1a00, 0x1a16)
          .addRange(0x1a20, 0x1a54)
          .addRange(0x1b05, 0x1b33)
          .addRange(0x1b45, 0x1b4b)
          .addRange(0x1b83, 0x1ba0)
          .addRange(0x1bae, 0x1baf)
          .addRange(0x1bba, 0x1be5)
          .addRange(0x1c00, 0x1c23)
          .addRange(0x1c4d, 0x1c4f)
          .addRange(0x1c5a, 0x1c7d)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1ce9, 0x1cec)
          .addRange(0x1cee, 0x1cf1)
          .addRange(0x1cf5, 0x1cf6)
          .addRange(0x1d00, 0x1dbf)
          .addRange(0x1e00, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fbc)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fcc)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fe0, 0x1fec)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffc)
          .addRange(0x2090, 0x209c)
          .addRange(0x210a, 0x2113)
          .addRange(0x2118, 0x211d)
          .addRange(0x212a, 0x2139)
          .addRange(0x213c, 0x213f)
          .addRange(0x2145, 0x2149)
          .addRange(0x2160, 0x2188)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2ce4)
          .addRange(0x2ceb, 0x2cee)
          .addRange(0x2cf2, 0x2cf3)
          .addRange(0x2d00, 0x2d25)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d80, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0x3005, 0x3007)
          .addRange(0x3021, 0x3029)
          .addRange(0x3031, 0x3035)
          .addRange(0x3038, 0x303c)
          .addRange(0x3041, 0x3096)
          .addRange(0x309d, 0x309f)
          .addRange(0x30a1, 0x30fa)
          .addRange(0x30fc, 0x30ff)
          .addRange(0x3105, 0x312e)
          .addRange(0x3131, 0x318e)
          .addRange(0x31a0, 0x31ba)
          .addRange(0x31f0, 0x31ff)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xa000, 0xa48c)
          .addRange(0xa4d0, 0xa4fd)
          .addRange(0xa500, 0xa60c)
          .addRange(0xa610, 0xa61f)
          .addRange(0xa62a, 0xa62b)
          .addRange(0xa640, 0xa66e)
          .addRange(0xa67f, 0xa69d)
          .addRange(0xa6a0, 0xa6ef)
          .addRange(0xa717, 0xa71f)
          .addRange(0xa722, 0xa788)
          .addRange(0xa78b, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f7, 0xa801)
          .addRange(0xa803, 0xa805)
          .addRange(0xa807, 0xa80a)
          .addRange(0xa80c, 0xa822)
          .addRange(0xa840, 0xa873)
          .addRange(0xa882, 0xa8b3)
          .addRange(0xa8f2, 0xa8f7)
          .addRange(0xa90a, 0xa925)
          .addRange(0xa930, 0xa946)
          .addRange(0xa960, 0xa97c)
          .addRange(0xa984, 0xa9b2)
          .addRange(0xa9e0, 0xa9e4)
          .addRange(0xa9e6, 0xa9ef)
          .addRange(0xa9fa, 0xa9fe)
          .addRange(0xaa00, 0xaa28)
          .addRange(0xaa40, 0xaa42)
          .addRange(0xaa44, 0xaa4b)
          .addRange(0xaa60, 0xaa76)
          .addRange(0xaa7e, 0xaaaf)
          .addRange(0xaab5, 0xaab6)
          .addRange(0xaab9, 0xaabd)
          .addRange(0xaadb, 0xaadd)
          .addRange(0xaae0, 0xaaea)
          .addRange(0xaaf2, 0xaaf4)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab5c, 0xab65)
          .addRange(0xab70, 0xabe2)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xfb1f, 0xfb28)
          .addRange(0xfb2a, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfbb1)
          .addRange(0xfbd3, 0xfc5d)
          .addRange(0xfc64, 0xfd3d)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdf9)
          .addRange(0xfe7f, 0xfefc)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a)
          .addRange(0xff66, 0xff9d)
          .addRange(0xffa0, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc)
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa)
          .addRange(0x10140, 0x10174)
          .addRange(0x10280, 0x1029c)
          .addRange(0x102a0, 0x102d0)
          .addRange(0x10300, 0x1031f)
          .addRange(0x1032d, 0x1034a)
          .addRange(0x10350, 0x10375)
          .addRange(0x10380, 0x1039d)
          .addRange(0x103a0, 0x103c3)
          .addRange(0x103c8, 0x103cf)
          .addRange(0x103d1, 0x103d5)
          .addRange(0x10400, 0x1049d)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10500, 0x10527)
          .addRange(0x10530, 0x10563)
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838)
          .addRange(0x1083f, 0x10855)
          .addRange(0x10860, 0x10876)
          .addRange(0x10880, 0x1089e)
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x10900, 0x10915)
          .addRange(0x10920, 0x10939)
          .addRange(0x10980, 0x109b7)
          .addRange(0x109be, 0x109bf)
          .addRange(0x10a10, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a60, 0x10a7c)
          .addRange(0x10a80, 0x10a9c)
          .addRange(0x10ac0, 0x10ac7)
          .addRange(0x10ac9, 0x10ae4)
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b40, 0x10b55)
          .addRange(0x10b60, 0x10b72)
          .addRange(0x10b80, 0x10b91)
          .addRange(0x10c00, 0x10c48)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x11003, 0x11037)
          .addRange(0x11083, 0x110af)
          .addRange(0x110d0, 0x110e8)
          .addRange(0x11103, 0x11126)
          .addRange(0x11150, 0x11172)
          .addRange(0x11183, 0x111b2)
          .addRange(0x111c1, 0x111c4)
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x1122b)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a8)
          .addRange(0x112b0, 0x112de)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x1135d, 0x11361)
          .addRange(0x11400, 0x11434)
          .addRange(0x11447, 0x1144a)
          .addRange(0x11480, 0x114af)
          .addRange(0x114c4, 0x114c5)
          .addRange(0x11580, 0x115ae)
          .addRange(0x115d8, 0x115db)
          .addRange(0x11600, 0x1162f)
          .addRange(0x11680, 0x116aa)
          .addRange(0x11700, 0x11719)
          .addRange(0x118a0, 0x118df)
          .addRange(0x11a0b, 0x11a32)
          .addRange(0x11a5c, 0x11a83)
          .addRange(0x11a86, 0x11a89)
          .addRange(0x11ac0, 0x11af8)
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c2e)
          .addRange(0x11c72, 0x11c8f)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d30)
          .addRange(0x12000, 0x12399)
          .addRange(0x12400, 0x1246e)
          .addRange(0x12480, 0x12543)
          .addRange(0x13000, 0x1342e)
          .addRange(0x14400, 0x14646)
          .addRange(0x16800, 0x16a38)
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16b00, 0x16b2f)
          .addRange(0x16b40, 0x16b43)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f)
          .addRange(0x16f00, 0x16f44)
          .addRange(0x16f93, 0x16f9f)
          .addRange(0x16fe0, 0x16fe1)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2)
          .addRange(0x1b000, 0x1b11e)
          .addRange(0x1b170, 0x1b2fb)
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d6c0)
          .addRange(0x1d6c2, 0x1d6da)
          .addRange(0x1d6dc, 0x1d6fa)
          .addRange(0x1d6fc, 0x1d714)
          .addRange(0x1d716, 0x1d734)
          .addRange(0x1d736, 0x1d74e)
          .addRange(0x1d750, 0x1d76e)
          .addRange(0x1d770, 0x1d788)
          .addRange(0x1d78a, 0x1d7a8)
          .addRange(0x1d7aa, 0x1d7c2)
          .addRange(0x1d7c4, 0x1d7cb)
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1e900, 0x1e943)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d);

        /***/
      },
      /* 610 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xb5,
          0x37f,
          0x386,
          0x38c,
          0x10c7,
          0x10cd,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1fbe,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x2126,
          0x2128,
          0x2139,
          0x214e,
          0x2d27,
          0x2d2d,
          0xa7fa,
          0x1d4a2,
          0x1d4bb,
          0x1d546
        )
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x1ba)
          .addRange(0x1bc, 0x1bf)
          .addRange(0x1c4, 0x293)
          .addRange(0x295, 0x2af)
          .addRange(0x370, 0x373)
          .addRange(0x376, 0x377)
          .addRange(0x37b, 0x37d)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3f5)
          .addRange(0x3f7, 0x481)
          .addRange(0x48a, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x561, 0x587)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1d00, 0x1d2b)
          .addRange(0x1d6b, 0x1d77)
          .addRange(0x1d79, 0x1d9a)
          .addRange(0x1e00, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fbc)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fcc)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fe0, 0x1fec)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffc)
          .addRange(0x210a, 0x2113)
          .addRange(0x2119, 0x211d)
          .addRange(0x212a, 0x212d)
          .addRange(0x212f, 0x2134)
          .addRange(0x213c, 0x213f)
          .addRange(0x2145, 0x2149)
          .addRange(0x2183, 0x2184)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2c7b)
          .addRange(0x2c7e, 0x2ce4)
          .addRange(0x2ceb, 0x2cee)
          .addRange(0x2cf2, 0x2cf3)
          .addRange(0x2d00, 0x2d25)
          .addRange(0xa640, 0xa66d)
          .addRange(0xa680, 0xa69b)
          .addRange(0xa722, 0xa76f)
          .addRange(0xa771, 0xa787)
          .addRange(0xa78b, 0xa78e)
          .addRange(0xa790, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab60, 0xab65)
          .addRange(0xab70, 0xabbf)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a)
          .addRange(0x10400, 0x1044f)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x118a0, 0x118df)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d6c0)
          .addRange(0x1d6c2, 0x1d6da)
          .addRange(0x1d6dc, 0x1d6fa)
          .addRange(0x1d6fc, 0x1d714)
          .addRange(0x1d716, 0x1d734)
          .addRange(0x1d736, 0x1d74e)
          .addRange(0x1d750, 0x1d76e)
          .addRange(0x1d770, 0x1d788)
          .addRange(0x1d78a, 0x1d7a8)
          .addRange(0x1d7aa, 0x1d7c2)
          .addRange(0x1d7c4, 0x1d7cb)
          .addRange(0x1e900, 0x1e943);

        /***/
      },
      /* 611 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x29,
          0x5d,
          0x7d,
          0xf3b,
          0xf3d,
          0x169c,
          0x2046,
          0x207e,
          0x208e,
          0x2309,
          0x230b,
          0x232a,
          0x2769,
          0x276b,
          0x276d,
          0x276f,
          0x2771,
          0x2773,
          0x2775,
          0x27c6,
          0x27e7,
          0x27e9,
          0x27eb,
          0x27ed,
          0x27ef,
          0x2984,
          0x2986,
          0x2988,
          0x298a,
          0x298c,
          0x298e,
          0x2990,
          0x2992,
          0x2994,
          0x2996,
          0x2998,
          0x29d9,
          0x29db,
          0x29fd,
          0x2e23,
          0x2e25,
          0x2e27,
          0x2e29,
          0x3009,
          0x300b,
          0x300d,
          0x300f,
          0x3011,
          0x3015,
          0x3017,
          0x3019,
          0x301b,
          0xfd3e,
          0xfe18,
          0xfe36,
          0xfe38,
          0xfe3a,
          0xfe3c,
          0xfe3e,
          0xfe40,
          0xfe42,
          0xfe44,
          0xfe48,
          0xfe5a,
          0xfe5c,
          0xfe5e,
          0xff09,
          0xff3d,
          0xff5d,
          0xff60,
          0xff63
        ).addRange(0x301e, 0x301f);

        /***/
      },
      /* 612 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x5f, 0x2054, 0xff3f)
          .addRange(0x203f, 0x2040)
          .addRange(0xfe33, 0xfe34)
          .addRange(0xfe4d, 0xfe4f);

        /***/
      },
      /* 613 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x0, 0x1f)
          .addRange(0x7f, 0x9f);

        /***/
      },
      /* 614 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x24,
          0x58f,
          0x60b,
          0x9fb,
          0xaf1,
          0xbf9,
          0xe3f,
          0x17db,
          0xa838,
          0xfdfc,
          0xfe69,
          0xff04
        )
          .addRange(0xa2, 0xa5)
          .addRange(0x9f2, 0x9f3)
          .addRange(0x20a0, 0x20bf)
          .addRange(0xffe0, 0xffe1)
          .addRange(0xffe5, 0xffe6);

        /***/
      },
      /* 615 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x2d,
          0x58a,
          0x5be,
          0x1400,
          0x1806,
          0x2e17,
          0x2e1a,
          0x2e40,
          0x301c,
          0x3030,
          0x30a0,
          0xfe58,
          0xfe63,
          0xff0d
        )
          .addRange(0x2010, 0x2015)
          .addRange(0x2e3a, 0x2e3b)
          .addRange(0xfe31, 0xfe32);

        /***/
      },
      /* 616 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x30, 0x39)
          .addRange(0x660, 0x669)
          .addRange(0x6f0, 0x6f9)
          .addRange(0x7c0, 0x7c9)
          .addRange(0x966, 0x96f)
          .addRange(0x9e6, 0x9ef)
          .addRange(0xa66, 0xa6f)
          .addRange(0xae6, 0xaef)
          .addRange(0xb66, 0xb6f)
          .addRange(0xbe6, 0xbef)
          .addRange(0xc66, 0xc6f)
          .addRange(0xce6, 0xcef)
          .addRange(0xd66, 0xd6f)
          .addRange(0xde6, 0xdef)
          .addRange(0xe50, 0xe59)
          .addRange(0xed0, 0xed9)
          .addRange(0xf20, 0xf29)
          .addRange(0x1040, 0x1049)
          .addRange(0x1090, 0x1099)
          .addRange(0x17e0, 0x17e9)
          .addRange(0x1810, 0x1819)
          .addRange(0x1946, 0x194f)
          .addRange(0x19d0, 0x19d9)
          .addRange(0x1a80, 0x1a89)
          .addRange(0x1a90, 0x1a99)
          .addRange(0x1b50, 0x1b59)
          .addRange(0x1bb0, 0x1bb9)
          .addRange(0x1c40, 0x1c49)
          .addRange(0x1c50, 0x1c59)
          .addRange(0xa620, 0xa629)
          .addRange(0xa8d0, 0xa8d9)
          .addRange(0xa900, 0xa909)
          .addRange(0xa9d0, 0xa9d9)
          .addRange(0xa9f0, 0xa9f9)
          .addRange(0xaa50, 0xaa59)
          .addRange(0xabf0, 0xabf9)
          .addRange(0xff10, 0xff19)
          .addRange(0x104a0, 0x104a9)
          .addRange(0x11066, 0x1106f)
          .addRange(0x110f0, 0x110f9)
          .addRange(0x11136, 0x1113f)
          .addRange(0x111d0, 0x111d9)
          .addRange(0x112f0, 0x112f9)
          .addRange(0x11450, 0x11459)
          .addRange(0x114d0, 0x114d9)
          .addRange(0x11650, 0x11659)
          .addRange(0x116c0, 0x116c9)
          .addRange(0x11730, 0x11739)
          .addRange(0x118e0, 0x118e9)
          .addRange(0x11c50, 0x11c59)
          .addRange(0x11d50, 0x11d59)
          .addRange(0x16a60, 0x16a69)
          .addRange(0x16b50, 0x16b59)
          .addRange(0x1d7ce, 0x1d7ff)
          .addRange(0x1e950, 0x1e959);

        /***/
      },
      /* 617 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1abe)
          .addRange(0x488, 0x489)
          .addRange(0x20dd, 0x20e0)
          .addRange(0x20e2, 0x20e4)
          .addRange(0xa670, 0xa672);

        /***/
      },
      /* 618 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xbb,
          0x2019,
          0x201d,
          0x203a,
          0x2e03,
          0x2e05,
          0x2e0a,
          0x2e0d,
          0x2e1d,
          0x2e21
        );

        /***/
      },
      /* 619 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xad,
          0x61c,
          0x6dd,
          0x70f,
          0x8e2,
          0x180e,
          0xfeff,
          0x110bd,
          0xe0001
        )
          .addRange(0x600, 0x605)
          .addRange(0x200b, 0x200f)
          .addRange(0x202a, 0x202e)
          .addRange(0x2060, 0x2064)
          .addRange(0x2066, 0x206f)
          .addRange(0xfff9, 0xfffb)
          .addRange(0x1bca0, 0x1bca3)
          .addRange(0x1d173, 0x1d17a)
          .addRange(0xe0020, 0xe007f);

        /***/
      },
      /* 620 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xab,
          0x2018,
          0x201f,
          0x2039,
          0x2e02,
          0x2e04,
          0x2e09,
          0x2e0c,
          0x2e1c,
          0x2e20
        ).addRange(0x201b, 0x201c);

        /***/
      },
      /* 621 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xaa,
          0xb5,
          0xba,
          0x2ec,
          0x2ee,
          0x37f,
          0x386,
          0x38c,
          0x559,
          0x6d5,
          0x6ff,
          0x710,
          0x7b1,
          0x7fa,
          0x81a,
          0x824,
          0x828,
          0x93d,
          0x950,
          0x9b2,
          0x9bd,
          0x9ce,
          0x9fc,
          0xa5e,
          0xabd,
          0xad0,
          0xaf9,
          0xb3d,
          0xb71,
          0xb83,
          0xb9c,
          0xbd0,
          0xc3d,
          0xc80,
          0xcbd,
          0xcde,
          0xd3d,
          0xd4e,
          0xdbd,
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xebd,
          0xec6,
          0xf00,
          0x103f,
          0x1061,
          0x108e,
          0x10c7,
          0x10cd,
          0x1258,
          0x12c0,
          0x17d7,
          0x17dc,
          0x18aa,
          0x1aa7,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1fbe,
          0x2071,
          0x207f,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x2126,
          0x2128,
          0x214e,
          0x2d27,
          0x2d2d,
          0x2d6f,
          0x2e2f,
          0xa8fb,
          0xa8fd,
          0xa9cf,
          0xaa7a,
          0xaab1,
          0xaac0,
          0xaac2,
          0xfb1d,
          0xfb3e,
          0x10808,
          0x1083c,
          0x10a00,
          0x11176,
          0x111da,
          0x111dc,
          0x11288,
          0x1133d,
          0x11350,
          0x114c7,
          0x11644,
          0x118ff,
          0x11a00,
          0x11a3a,
          0x11a50,
          0x11c40,
          0x11d46,
          0x16f50,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e
        )
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x2c1)
          .addRange(0x2c6, 0x2d1)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x370, 0x374)
          .addRange(0x376, 0x377)
          .addRange(0x37a, 0x37d)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3f5)
          .addRange(0x3f7, 0x481)
          .addRange(0x48a, 0x52f)
          .addRange(0x531, 0x556)
          .addRange(0x561, 0x587)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f2)
          .addRange(0x620, 0x64a)
          .addRange(0x66e, 0x66f)
          .addRange(0x671, 0x6d3)
          .addRange(0x6e5, 0x6e6)
          .addRange(0x6ee, 0x6ef)
          .addRange(0x6fa, 0x6fc)
          .addRange(0x712, 0x72f)
          .addRange(0x74d, 0x7a5)
          .addRange(0x7ca, 0x7ea)
          .addRange(0x7f4, 0x7f5)
          .addRange(0x800, 0x815)
          .addRange(0x840, 0x858)
          .addRange(0x860, 0x86a)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x904, 0x939)
          .addRange(0x958, 0x961)
          .addRange(0x971, 0x980)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e1)
          .addRange(0x9f0, 0x9f1)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa72, 0xa74)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xae0, 0xae1)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb61)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc61)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xce0, 0xce1)
          .addRange(0xcf1, 0xcf2)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd3a)
          .addRange(0xd54, 0xd56)
          .addRange(0xd5f, 0xd61)
          .addRange(0xd7a, 0xd7f)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xe01, 0xe30)
          .addRange(0xe32, 0xe33)
          .addRange(0xe40, 0xe46)
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb0)
          .addRange(0xeb2, 0xeb3)
          .addRange(0xec0, 0xec4)
          .addRange(0xedc, 0xedf)
          .addRange(0xf40, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf88, 0xf8c)
          .addRange(0x1000, 0x102a)
          .addRange(0x1050, 0x1055)
          .addRange(0x105a, 0x105d)
          .addRange(0x1065, 0x1066)
          .addRange(0x106e, 0x1070)
          .addRange(0x1075, 0x1081)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x10d0, 0x10fa)
          .addRange(0x10fc, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x1380, 0x138f)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1401, 0x166c)
          .addRange(0x166f, 0x167f)
          .addRange(0x1681, 0x169a)
          .addRange(0x16a0, 0x16ea)
          .addRange(0x16f1, 0x16f8)
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1711)
          .addRange(0x1720, 0x1731)
          .addRange(0x1740, 0x1751)
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1780, 0x17b3)
          .addRange(0x1820, 0x1877)
          .addRange(0x1880, 0x1884)
          .addRange(0x1887, 0x18a8)
          .addRange(0x18b0, 0x18f5)
          .addRange(0x1900, 0x191e)
          .addRange(0x1950, 0x196d)
          .addRange(0x1970, 0x1974)
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x1a00, 0x1a16)
          .addRange(0x1a20, 0x1a54)
          .addRange(0x1b05, 0x1b33)
          .addRange(0x1b45, 0x1b4b)
          .addRange(0x1b83, 0x1ba0)
          .addRange(0x1bae, 0x1baf)
          .addRange(0x1bba, 0x1be5)
          .addRange(0x1c00, 0x1c23)
          .addRange(0x1c4d, 0x1c4f)
          .addRange(0x1c5a, 0x1c7d)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1ce9, 0x1cec)
          .addRange(0x1cee, 0x1cf1)
          .addRange(0x1cf5, 0x1cf6)
          .addRange(0x1d00, 0x1dbf)
          .addRange(0x1e00, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fbc)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fcc)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fe0, 0x1fec)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffc)
          .addRange(0x2090, 0x209c)
          .addRange(0x210a, 0x2113)
          .addRange(0x2119, 0x211d)
          .addRange(0x212a, 0x212d)
          .addRange(0x212f, 0x2139)
          .addRange(0x213c, 0x213f)
          .addRange(0x2145, 0x2149)
          .addRange(0x2183, 0x2184)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c60, 0x2ce4)
          .addRange(0x2ceb, 0x2cee)
          .addRange(0x2cf2, 0x2cf3)
          .addRange(0x2d00, 0x2d25)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d80, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0x3005, 0x3006)
          .addRange(0x3031, 0x3035)
          .addRange(0x303b, 0x303c)
          .addRange(0x3041, 0x3096)
          .addRange(0x309d, 0x309f)
          .addRange(0x30a1, 0x30fa)
          .addRange(0x30fc, 0x30ff)
          .addRange(0x3105, 0x312e)
          .addRange(0x3131, 0x318e)
          .addRange(0x31a0, 0x31ba)
          .addRange(0x31f0, 0x31ff)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xa000, 0xa48c)
          .addRange(0xa4d0, 0xa4fd)
          .addRange(0xa500, 0xa60c)
          .addRange(0xa610, 0xa61f)
          .addRange(0xa62a, 0xa62b)
          .addRange(0xa640, 0xa66e)
          .addRange(0xa67f, 0xa69d)
          .addRange(0xa6a0, 0xa6e5)
          .addRange(0xa717, 0xa71f)
          .addRange(0xa722, 0xa788)
          .addRange(0xa78b, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f7, 0xa801)
          .addRange(0xa803, 0xa805)
          .addRange(0xa807, 0xa80a)
          .addRange(0xa80c, 0xa822)
          .addRange(0xa840, 0xa873)
          .addRange(0xa882, 0xa8b3)
          .addRange(0xa8f2, 0xa8f7)
          .addRange(0xa90a, 0xa925)
          .addRange(0xa930, 0xa946)
          .addRange(0xa960, 0xa97c)
          .addRange(0xa984, 0xa9b2)
          .addRange(0xa9e0, 0xa9e4)
          .addRange(0xa9e6, 0xa9ef)
          .addRange(0xa9fa, 0xa9fe)
          .addRange(0xaa00, 0xaa28)
          .addRange(0xaa40, 0xaa42)
          .addRange(0xaa44, 0xaa4b)
          .addRange(0xaa60, 0xaa76)
          .addRange(0xaa7e, 0xaaaf)
          .addRange(0xaab5, 0xaab6)
          .addRange(0xaab9, 0xaabd)
          .addRange(0xaadb, 0xaadd)
          .addRange(0xaae0, 0xaaea)
          .addRange(0xaaf2, 0xaaf4)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab5c, 0xab65)
          .addRange(0xab70, 0xabe2)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xfb1f, 0xfb28)
          .addRange(0xfb2a, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfbb1)
          .addRange(0xfbd3, 0xfd3d)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdfb)
          .addRange(0xfe70, 0xfe74)
          .addRange(0xfe76, 0xfefc)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a)
          .addRange(0xff66, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc)
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa)
          .addRange(0x10280, 0x1029c)
          .addRange(0x102a0, 0x102d0)
          .addRange(0x10300, 0x1031f)
          .addRange(0x1032d, 0x10340)
          .addRange(0x10342, 0x10349)
          .addRange(0x10350, 0x10375)
          .addRange(0x10380, 0x1039d)
          .addRange(0x103a0, 0x103c3)
          .addRange(0x103c8, 0x103cf)
          .addRange(0x10400, 0x1049d)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10500, 0x10527)
          .addRange(0x10530, 0x10563)
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838)
          .addRange(0x1083f, 0x10855)
          .addRange(0x10860, 0x10876)
          .addRange(0x10880, 0x1089e)
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x10900, 0x10915)
          .addRange(0x10920, 0x10939)
          .addRange(0x10980, 0x109b7)
          .addRange(0x109be, 0x109bf)
          .addRange(0x10a10, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a60, 0x10a7c)
          .addRange(0x10a80, 0x10a9c)
          .addRange(0x10ac0, 0x10ac7)
          .addRange(0x10ac9, 0x10ae4)
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b40, 0x10b55)
          .addRange(0x10b60, 0x10b72)
          .addRange(0x10b80, 0x10b91)
          .addRange(0x10c00, 0x10c48)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x11003, 0x11037)
          .addRange(0x11083, 0x110af)
          .addRange(0x110d0, 0x110e8)
          .addRange(0x11103, 0x11126)
          .addRange(0x11150, 0x11172)
          .addRange(0x11183, 0x111b2)
          .addRange(0x111c1, 0x111c4)
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x1122b)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a8)
          .addRange(0x112b0, 0x112de)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x1135d, 0x11361)
          .addRange(0x11400, 0x11434)
          .addRange(0x11447, 0x1144a)
          .addRange(0x11480, 0x114af)
          .addRange(0x114c4, 0x114c5)
          .addRange(0x11580, 0x115ae)
          .addRange(0x115d8, 0x115db)
          .addRange(0x11600, 0x1162f)
          .addRange(0x11680, 0x116aa)
          .addRange(0x11700, 0x11719)
          .addRange(0x118a0, 0x118df)
          .addRange(0x11a0b, 0x11a32)
          .addRange(0x11a5c, 0x11a83)
          .addRange(0x11a86, 0x11a89)
          .addRange(0x11ac0, 0x11af8)
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c2e)
          .addRange(0x11c72, 0x11c8f)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d30)
          .addRange(0x12000, 0x12399)
          .addRange(0x12480, 0x12543)
          .addRange(0x13000, 0x1342e)
          .addRange(0x14400, 0x14646)
          .addRange(0x16800, 0x16a38)
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16b00, 0x16b2f)
          .addRange(0x16b40, 0x16b43)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f)
          .addRange(0x16f00, 0x16f44)
          .addRange(0x16f93, 0x16f9f)
          .addRange(0x16fe0, 0x16fe1)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2)
          .addRange(0x1b000, 0x1b11e)
          .addRange(0x1b170, 0x1b2fb)
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d6c0)
          .addRange(0x1d6c2, 0x1d6da)
          .addRange(0x1d6dc, 0x1d6fa)
          .addRange(0x1d6fc, 0x1d714)
          .addRange(0x1d716, 0x1d734)
          .addRange(0x1d736, 0x1d74e)
          .addRange(0x1d750, 0x1d76e)
          .addRange(0x1d770, 0x1d788)
          .addRange(0x1d78a, 0x1d7a8)
          .addRange(0x1d7aa, 0x1d7c2)
          .addRange(0x1d7c4, 0x1d7cb)
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1e900, 0x1e943)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d);

        /***/
      },
      /* 622 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x3007, 0x10341, 0x1034a)
          .addRange(0x16ee, 0x16f0)
          .addRange(0x2160, 0x2182)
          .addRange(0x2185, 0x2188)
          .addRange(0x3021, 0x3029)
          .addRange(0x3038, 0x303a)
          .addRange(0xa6e6, 0xa6ef)
          .addRange(0x10140, 0x10174)
          .addRange(0x103d1, 0x103d5)
          .addRange(0x12400, 0x1246e);

        /***/
      },
      /* 623 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x2028);

        /***/
      },
      /* 624 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xb5,
          0x101,
          0x103,
          0x105,
          0x107,
          0x109,
          0x10b,
          0x10d,
          0x10f,
          0x111,
          0x113,
          0x115,
          0x117,
          0x119,
          0x11b,
          0x11d,
          0x11f,
          0x121,
          0x123,
          0x125,
          0x127,
          0x129,
          0x12b,
          0x12d,
          0x12f,
          0x131,
          0x133,
          0x135,
          0x13a,
          0x13c,
          0x13e,
          0x140,
          0x142,
          0x144,
          0x146,
          0x14b,
          0x14d,
          0x14f,
          0x151,
          0x153,
          0x155,
          0x157,
          0x159,
          0x15b,
          0x15d,
          0x15f,
          0x161,
          0x163,
          0x165,
          0x167,
          0x169,
          0x16b,
          0x16d,
          0x16f,
          0x171,
          0x173,
          0x175,
          0x177,
          0x17a,
          0x17c,
          0x183,
          0x185,
          0x188,
          0x192,
          0x195,
          0x19e,
          0x1a1,
          0x1a3,
          0x1a5,
          0x1a8,
          0x1ad,
          0x1b0,
          0x1b4,
          0x1b6,
          0x1c6,
          0x1c9,
          0x1cc,
          0x1ce,
          0x1d0,
          0x1d2,
          0x1d4,
          0x1d6,
          0x1d8,
          0x1da,
          0x1df,
          0x1e1,
          0x1e3,
          0x1e5,
          0x1e7,
          0x1e9,
          0x1eb,
          0x1ed,
          0x1f3,
          0x1f5,
          0x1f9,
          0x1fb,
          0x1fd,
          0x1ff,
          0x201,
          0x203,
          0x205,
          0x207,
          0x209,
          0x20b,
          0x20d,
          0x20f,
          0x211,
          0x213,
          0x215,
          0x217,
          0x219,
          0x21b,
          0x21d,
          0x21f,
          0x221,
          0x223,
          0x225,
          0x227,
          0x229,
          0x22b,
          0x22d,
          0x22f,
          0x231,
          0x23c,
          0x242,
          0x247,
          0x249,
          0x24b,
          0x24d,
          0x371,
          0x373,
          0x377,
          0x390,
          0x3d9,
          0x3db,
          0x3dd,
          0x3df,
          0x3e1,
          0x3e3,
          0x3e5,
          0x3e7,
          0x3e9,
          0x3eb,
          0x3ed,
          0x3f5,
          0x3f8,
          0x461,
          0x463,
          0x465,
          0x467,
          0x469,
          0x46b,
          0x46d,
          0x46f,
          0x471,
          0x473,
          0x475,
          0x477,
          0x479,
          0x47b,
          0x47d,
          0x47f,
          0x481,
          0x48b,
          0x48d,
          0x48f,
          0x491,
          0x493,
          0x495,
          0x497,
          0x499,
          0x49b,
          0x49d,
          0x49f,
          0x4a1,
          0x4a3,
          0x4a5,
          0x4a7,
          0x4a9,
          0x4ab,
          0x4ad,
          0x4af,
          0x4b1,
          0x4b3,
          0x4b5,
          0x4b7,
          0x4b9,
          0x4bb,
          0x4bd,
          0x4bf,
          0x4c2,
          0x4c4,
          0x4c6,
          0x4c8,
          0x4ca,
          0x4cc,
          0x4d1,
          0x4d3,
          0x4d5,
          0x4d7,
          0x4d9,
          0x4db,
          0x4dd,
          0x4df,
          0x4e1,
          0x4e3,
          0x4e5,
          0x4e7,
          0x4e9,
          0x4eb,
          0x4ed,
          0x4ef,
          0x4f1,
          0x4f3,
          0x4f5,
          0x4f7,
          0x4f9,
          0x4fb,
          0x4fd,
          0x4ff,
          0x501,
          0x503,
          0x505,
          0x507,
          0x509,
          0x50b,
          0x50d,
          0x50f,
          0x511,
          0x513,
          0x515,
          0x517,
          0x519,
          0x51b,
          0x51d,
          0x51f,
          0x521,
          0x523,
          0x525,
          0x527,
          0x529,
          0x52b,
          0x52d,
          0x52f,
          0x1e01,
          0x1e03,
          0x1e05,
          0x1e07,
          0x1e09,
          0x1e0b,
          0x1e0d,
          0x1e0f,
          0x1e11,
          0x1e13,
          0x1e15,
          0x1e17,
          0x1e19,
          0x1e1b,
          0x1e1d,
          0x1e1f,
          0x1e21,
          0x1e23,
          0x1e25,
          0x1e27,
          0x1e29,
          0x1e2b,
          0x1e2d,
          0x1e2f,
          0x1e31,
          0x1e33,
          0x1e35,
          0x1e37,
          0x1e39,
          0x1e3b,
          0x1e3d,
          0x1e3f,
          0x1e41,
          0x1e43,
          0x1e45,
          0x1e47,
          0x1e49,
          0x1e4b,
          0x1e4d,
          0x1e4f,
          0x1e51,
          0x1e53,
          0x1e55,
          0x1e57,
          0x1e59,
          0x1e5b,
          0x1e5d,
          0x1e5f,
          0x1e61,
          0x1e63,
          0x1e65,
          0x1e67,
          0x1e69,
          0x1e6b,
          0x1e6d,
          0x1e6f,
          0x1e71,
          0x1e73,
          0x1e75,
          0x1e77,
          0x1e79,
          0x1e7b,
          0x1e7d,
          0x1e7f,
          0x1e81,
          0x1e83,
          0x1e85,
          0x1e87,
          0x1e89,
          0x1e8b,
          0x1e8d,
          0x1e8f,
          0x1e91,
          0x1e93,
          0x1e9f,
          0x1ea1,
          0x1ea3,
          0x1ea5,
          0x1ea7,
          0x1ea9,
          0x1eab,
          0x1ead,
          0x1eaf,
          0x1eb1,
          0x1eb3,
          0x1eb5,
          0x1eb7,
          0x1eb9,
          0x1ebb,
          0x1ebd,
          0x1ebf,
          0x1ec1,
          0x1ec3,
          0x1ec5,
          0x1ec7,
          0x1ec9,
          0x1ecb,
          0x1ecd,
          0x1ecf,
          0x1ed1,
          0x1ed3,
          0x1ed5,
          0x1ed7,
          0x1ed9,
          0x1edb,
          0x1edd,
          0x1edf,
          0x1ee1,
          0x1ee3,
          0x1ee5,
          0x1ee7,
          0x1ee9,
          0x1eeb,
          0x1eed,
          0x1eef,
          0x1ef1,
          0x1ef3,
          0x1ef5,
          0x1ef7,
          0x1ef9,
          0x1efb,
          0x1efd,
          0x1fbe,
          0x210a,
          0x2113,
          0x212f,
          0x2134,
          0x2139,
          0x214e,
          0x2184,
          0x2c61,
          0x2c68,
          0x2c6a,
          0x2c6c,
          0x2c71,
          0x2c81,
          0x2c83,
          0x2c85,
          0x2c87,
          0x2c89,
          0x2c8b,
          0x2c8d,
          0x2c8f,
          0x2c91,
          0x2c93,
          0x2c95,
          0x2c97,
          0x2c99,
          0x2c9b,
          0x2c9d,
          0x2c9f,
          0x2ca1,
          0x2ca3,
          0x2ca5,
          0x2ca7,
          0x2ca9,
          0x2cab,
          0x2cad,
          0x2caf,
          0x2cb1,
          0x2cb3,
          0x2cb5,
          0x2cb7,
          0x2cb9,
          0x2cbb,
          0x2cbd,
          0x2cbf,
          0x2cc1,
          0x2cc3,
          0x2cc5,
          0x2cc7,
          0x2cc9,
          0x2ccb,
          0x2ccd,
          0x2ccf,
          0x2cd1,
          0x2cd3,
          0x2cd5,
          0x2cd7,
          0x2cd9,
          0x2cdb,
          0x2cdd,
          0x2cdf,
          0x2ce1,
          0x2cec,
          0x2cee,
          0x2cf3,
          0x2d27,
          0x2d2d,
          0xa641,
          0xa643,
          0xa645,
          0xa647,
          0xa649,
          0xa64b,
          0xa64d,
          0xa64f,
          0xa651,
          0xa653,
          0xa655,
          0xa657,
          0xa659,
          0xa65b,
          0xa65d,
          0xa65f,
          0xa661,
          0xa663,
          0xa665,
          0xa667,
          0xa669,
          0xa66b,
          0xa66d,
          0xa681,
          0xa683,
          0xa685,
          0xa687,
          0xa689,
          0xa68b,
          0xa68d,
          0xa68f,
          0xa691,
          0xa693,
          0xa695,
          0xa697,
          0xa699,
          0xa69b,
          0xa723,
          0xa725,
          0xa727,
          0xa729,
          0xa72b,
          0xa72d,
          0xa733,
          0xa735,
          0xa737,
          0xa739,
          0xa73b,
          0xa73d,
          0xa73f,
          0xa741,
          0xa743,
          0xa745,
          0xa747,
          0xa749,
          0xa74b,
          0xa74d,
          0xa74f,
          0xa751,
          0xa753,
          0xa755,
          0xa757,
          0xa759,
          0xa75b,
          0xa75d,
          0xa75f,
          0xa761,
          0xa763,
          0xa765,
          0xa767,
          0xa769,
          0xa76b,
          0xa76d,
          0xa76f,
          0xa77a,
          0xa77c,
          0xa77f,
          0xa781,
          0xa783,
          0xa785,
          0xa787,
          0xa78c,
          0xa78e,
          0xa791,
          0xa797,
          0xa799,
          0xa79b,
          0xa79d,
          0xa79f,
          0xa7a1,
          0xa7a3,
          0xa7a5,
          0xa7a7,
          0xa7a9,
          0xa7b5,
          0xa7b7,
          0xa7fa,
          0x1d4bb,
          0x1d7cb
        )
          .addRange(0x61, 0x7a)
          .addRange(0xdf, 0xf6)
          .addRange(0xf8, 0xff)
          .addRange(0x137, 0x138)
          .addRange(0x148, 0x149)
          .addRange(0x17e, 0x180)
          .addRange(0x18c, 0x18d)
          .addRange(0x199, 0x19b)
          .addRange(0x1aa, 0x1ab)
          .addRange(0x1b9, 0x1ba)
          .addRange(0x1bd, 0x1bf)
          .addRange(0x1dc, 0x1dd)
          .addRange(0x1ef, 0x1f0)
          .addRange(0x233, 0x239)
          .addRange(0x23f, 0x240)
          .addRange(0x24f, 0x293)
          .addRange(0x295, 0x2af)
          .addRange(0x37b, 0x37d)
          .addRange(0x3ac, 0x3ce)
          .addRange(0x3d0, 0x3d1)
          .addRange(0x3d5, 0x3d7)
          .addRange(0x3ef, 0x3f3)
          .addRange(0x3fb, 0x3fc)
          .addRange(0x430, 0x45f)
          .addRange(0x4ce, 0x4cf)
          .addRange(0x561, 0x587)
          .addRange(0x13f8, 0x13fd)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x1d00, 0x1d2b)
          .addRange(0x1d6b, 0x1d77)
          .addRange(0x1d79, 0x1d9a)
          .addRange(0x1e95, 0x1e9d)
          .addRange(0x1eff, 0x1f07)
          .addRange(0x1f10, 0x1f15)
          .addRange(0x1f20, 0x1f27)
          .addRange(0x1f30, 0x1f37)
          .addRange(0x1f40, 0x1f45)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f60, 0x1f67)
          .addRange(0x1f70, 0x1f7d)
          .addRange(0x1f80, 0x1f87)
          .addRange(0x1f90, 0x1f97)
          .addRange(0x1fa0, 0x1fa7)
          .addRange(0x1fb0, 0x1fb4)
          .addRange(0x1fb6, 0x1fb7)
          .addRange(0x1fc2, 0x1fc4)
          .addRange(0x1fc6, 0x1fc7)
          .addRange(0x1fd0, 0x1fd3)
          .addRange(0x1fd6, 0x1fd7)
          .addRange(0x1fe0, 0x1fe7)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ff7)
          .addRange(0x210e, 0x210f)
          .addRange(0x213c, 0x213d)
          .addRange(0x2146, 0x2149)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x2c65, 0x2c66)
          .addRange(0x2c73, 0x2c74)
          .addRange(0x2c76, 0x2c7b)
          .addRange(0x2ce3, 0x2ce4)
          .addRange(0x2d00, 0x2d25)
          .addRange(0xa72f, 0xa731)
          .addRange(0xa771, 0xa778)
          .addRange(0xa793, 0xa795)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab60, 0xab65)
          .addRange(0xab70, 0xabbf)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xfb13, 0xfb17)
          .addRange(0xff41, 0xff5a)
          .addRange(0x10428, 0x1044f)
          .addRange(0x104d8, 0x104fb)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x118c0, 0x118df)
          .addRange(0x1d41a, 0x1d433)
          .addRange(0x1d44e, 0x1d454)
          .addRange(0x1d456, 0x1d467)
          .addRange(0x1d482, 0x1d49b)
          .addRange(0x1d4b6, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d4cf)
          .addRange(0x1d4ea, 0x1d503)
          .addRange(0x1d51e, 0x1d537)
          .addRange(0x1d552, 0x1d56b)
          .addRange(0x1d586, 0x1d59f)
          .addRange(0x1d5ba, 0x1d5d3)
          .addRange(0x1d5ee, 0x1d607)
          .addRange(0x1d622, 0x1d63b)
          .addRange(0x1d656, 0x1d66f)
          .addRange(0x1d68a, 0x1d6a5)
          .addRange(0x1d6c2, 0x1d6da)
          .addRange(0x1d6dc, 0x1d6e1)
          .addRange(0x1d6fc, 0x1d714)
          .addRange(0x1d716, 0x1d71b)
          .addRange(0x1d736, 0x1d74e)
          .addRange(0x1d750, 0x1d755)
          .addRange(0x1d770, 0x1d788)
          .addRange(0x1d78a, 0x1d78f)
          .addRange(0x1d7aa, 0x1d7c2)
          .addRange(0x1d7c4, 0x1d7c9)
          .addRange(0x1e922, 0x1e943);

        /***/
      },
      /* 625 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x5bf,
          0x5c7,
          0x670,
          0x711,
          0x9bc,
          0x9d7,
          0xa3c,
          0xa51,
          0xa75,
          0xabc,
          0xb3c,
          0xb82,
          0xbd7,
          0xcbc,
          0xd57,
          0xdca,
          0xdd6,
          0xe31,
          0xeb1,
          0xf35,
          0xf37,
          0xf39,
          0xfc6,
          0x108f,
          0x17dd,
          0x18a9,
          0x1a7f,
          0x1ced,
          0x2d7f,
          0xa802,
          0xa806,
          0xa80b,
          0xa9e5,
          0xaa43,
          0xaab0,
          0xaac1,
          0xfb1e,
          0x101fd,
          0x102e0,
          0x10a3f,
          0x11173,
          0x1123e,
          0x1133c,
          0x11357,
          0x11a47,
          0x11d3a,
          0x11d47,
          0x1da75,
          0x1da84
        )
          .addRange(0x300, 0x36f)
          .addRange(0x483, 0x489)
          .addRange(0x591, 0x5bd)
          .addRange(0x5c1, 0x5c2)
          .addRange(0x5c4, 0x5c5)
          .addRange(0x610, 0x61a)
          .addRange(0x64b, 0x65f)
          .addRange(0x6d6, 0x6dc)
          .addRange(0x6df, 0x6e4)
          .addRange(0x6e7, 0x6e8)
          .addRange(0x6ea, 0x6ed)
          .addRange(0x730, 0x74a)
          .addRange(0x7a6, 0x7b0)
          .addRange(0x7eb, 0x7f3)
          .addRange(0x816, 0x819)
          .addRange(0x81b, 0x823)
          .addRange(0x825, 0x827)
          .addRange(0x829, 0x82d)
          .addRange(0x859, 0x85b)
          .addRange(0x8d4, 0x8e1)
          .addRange(0x8e3, 0x903)
          .addRange(0x93a, 0x93c)
          .addRange(0x93e, 0x94f)
          .addRange(0x951, 0x957)
          .addRange(0x962, 0x963)
          .addRange(0x981, 0x983)
          .addRange(0x9be, 0x9c4)
          .addRange(0x9c7, 0x9c8)
          .addRange(0x9cb, 0x9cd)
          .addRange(0x9e2, 0x9e3)
          .addRange(0xa01, 0xa03)
          .addRange(0xa3e, 0xa42)
          .addRange(0xa47, 0xa48)
          .addRange(0xa4b, 0xa4d)
          .addRange(0xa70, 0xa71)
          .addRange(0xa81, 0xa83)
          .addRange(0xabe, 0xac5)
          .addRange(0xac7, 0xac9)
          .addRange(0xacb, 0xacd)
          .addRange(0xae2, 0xae3)
          .addRange(0xafa, 0xaff)
          .addRange(0xb01, 0xb03)
          .addRange(0xb3e, 0xb44)
          .addRange(0xb47, 0xb48)
          .addRange(0xb4b, 0xb4d)
          .addRange(0xb56, 0xb57)
          .addRange(0xb62, 0xb63)
          .addRange(0xbbe, 0xbc2)
          .addRange(0xbc6, 0xbc8)
          .addRange(0xbca, 0xbcd)
          .addRange(0xc00, 0xc03)
          .addRange(0xc3e, 0xc44)
          .addRange(0xc46, 0xc48)
          .addRange(0xc4a, 0xc4d)
          .addRange(0xc55, 0xc56)
          .addRange(0xc62, 0xc63)
          .addRange(0xc81, 0xc83)
          .addRange(0xcbe, 0xcc4)
          .addRange(0xcc6, 0xcc8)
          .addRange(0xcca, 0xccd)
          .addRange(0xcd5, 0xcd6)
          .addRange(0xce2, 0xce3)
          .addRange(0xd00, 0xd03)
          .addRange(0xd3b, 0xd3c)
          .addRange(0xd3e, 0xd44)
          .addRange(0xd46, 0xd48)
          .addRange(0xd4a, 0xd4d)
          .addRange(0xd62, 0xd63)
          .addRange(0xd82, 0xd83)
          .addRange(0xdcf, 0xdd4)
          .addRange(0xdd8, 0xddf)
          .addRange(0xdf2, 0xdf3)
          .addRange(0xe34, 0xe3a)
          .addRange(0xe47, 0xe4e)
          .addRange(0xeb4, 0xeb9)
          .addRange(0xebb, 0xebc)
          .addRange(0xec8, 0xecd)
          .addRange(0xf18, 0xf19)
          .addRange(0xf3e, 0xf3f)
          .addRange(0xf71, 0xf84)
          .addRange(0xf86, 0xf87)
          .addRange(0xf8d, 0xf97)
          .addRange(0xf99, 0xfbc)
          .addRange(0x102b, 0x103e)
          .addRange(0x1056, 0x1059)
          .addRange(0x105e, 0x1060)
          .addRange(0x1062, 0x1064)
          .addRange(0x1067, 0x106d)
          .addRange(0x1071, 0x1074)
          .addRange(0x1082, 0x108d)
          .addRange(0x109a, 0x109d)
          .addRange(0x135d, 0x135f)
          .addRange(0x1712, 0x1714)
          .addRange(0x1732, 0x1734)
          .addRange(0x1752, 0x1753)
          .addRange(0x1772, 0x1773)
          .addRange(0x17b4, 0x17d3)
          .addRange(0x180b, 0x180d)
          .addRange(0x1885, 0x1886)
          .addRange(0x1920, 0x192b)
          .addRange(0x1930, 0x193b)
          .addRange(0x1a17, 0x1a1b)
          .addRange(0x1a55, 0x1a5e)
          .addRange(0x1a60, 0x1a7c)
          .addRange(0x1ab0, 0x1abe)
          .addRange(0x1b00, 0x1b04)
          .addRange(0x1b34, 0x1b44)
          .addRange(0x1b6b, 0x1b73)
          .addRange(0x1b80, 0x1b82)
          .addRange(0x1ba1, 0x1bad)
          .addRange(0x1be6, 0x1bf3)
          .addRange(0x1c24, 0x1c37)
          .addRange(0x1cd0, 0x1cd2)
          .addRange(0x1cd4, 0x1ce8)
          .addRange(0x1cf2, 0x1cf4)
          .addRange(0x1cf7, 0x1cf9)
          .addRange(0x1dc0, 0x1df9)
          .addRange(0x1dfb, 0x1dff)
          .addRange(0x20d0, 0x20f0)
          .addRange(0x2cef, 0x2cf1)
          .addRange(0x2de0, 0x2dff)
          .addRange(0x302a, 0x302f)
          .addRange(0x3099, 0x309a)
          .addRange(0xa66f, 0xa672)
          .addRange(0xa674, 0xa67d)
          .addRange(0xa69e, 0xa69f)
          .addRange(0xa6f0, 0xa6f1)
          .addRange(0xa823, 0xa827)
          .addRange(0xa880, 0xa881)
          .addRange(0xa8b4, 0xa8c5)
          .addRange(0xa8e0, 0xa8f1)
          .addRange(0xa926, 0xa92d)
          .addRange(0xa947, 0xa953)
          .addRange(0xa980, 0xa983)
          .addRange(0xa9b3, 0xa9c0)
          .addRange(0xaa29, 0xaa36)
          .addRange(0xaa4c, 0xaa4d)
          .addRange(0xaa7b, 0xaa7d)
          .addRange(0xaab2, 0xaab4)
          .addRange(0xaab7, 0xaab8)
          .addRange(0xaabe, 0xaabf)
          .addRange(0xaaeb, 0xaaef)
          .addRange(0xaaf5, 0xaaf6)
          .addRange(0xabe3, 0xabea)
          .addRange(0xabec, 0xabed)
          .addRange(0xfe00, 0xfe0f)
          .addRange(0xfe20, 0xfe2f)
          .addRange(0x10376, 0x1037a)
          .addRange(0x10a01, 0x10a03)
          .addRange(0x10a05, 0x10a06)
          .addRange(0x10a0c, 0x10a0f)
          .addRange(0x10a38, 0x10a3a)
          .addRange(0x10ae5, 0x10ae6)
          .addRange(0x11000, 0x11002)
          .addRange(0x11038, 0x11046)
          .addRange(0x1107f, 0x11082)
          .addRange(0x110b0, 0x110ba)
          .addRange(0x11100, 0x11102)
          .addRange(0x11127, 0x11134)
          .addRange(0x11180, 0x11182)
          .addRange(0x111b3, 0x111c0)
          .addRange(0x111ca, 0x111cc)
          .addRange(0x1122c, 0x11237)
          .addRange(0x112df, 0x112ea)
          .addRange(0x11300, 0x11303)
          .addRange(0x1133e, 0x11344)
          .addRange(0x11347, 0x11348)
          .addRange(0x1134b, 0x1134d)
          .addRange(0x11362, 0x11363)
          .addRange(0x11366, 0x1136c)
          .addRange(0x11370, 0x11374)
          .addRange(0x11435, 0x11446)
          .addRange(0x114b0, 0x114c3)
          .addRange(0x115af, 0x115b5)
          .addRange(0x115b8, 0x115c0)
          .addRange(0x115dc, 0x115dd)
          .addRange(0x11630, 0x11640)
          .addRange(0x116ab, 0x116b7)
          .addRange(0x1171d, 0x1172b)
          .addRange(0x11a01, 0x11a0a)
          .addRange(0x11a33, 0x11a39)
          .addRange(0x11a3b, 0x11a3e)
          .addRange(0x11a51, 0x11a5b)
          .addRange(0x11a8a, 0x11a99)
          .addRange(0x11c2f, 0x11c36)
          .addRange(0x11c38, 0x11c3f)
          .addRange(0x11c92, 0x11ca7)
          .addRange(0x11ca9, 0x11cb6)
          .addRange(0x11d31, 0x11d36)
          .addRange(0x11d3c, 0x11d3d)
          .addRange(0x11d3f, 0x11d45)
          .addRange(0x16af0, 0x16af4)
          .addRange(0x16b30, 0x16b36)
          .addRange(0x16f51, 0x16f7e)
          .addRange(0x16f8f, 0x16f92)
          .addRange(0x1bc9d, 0x1bc9e)
          .addRange(0x1d165, 0x1d169)
          .addRange(0x1d16d, 0x1d172)
          .addRange(0x1d17b, 0x1d182)
          .addRange(0x1d185, 0x1d18b)
          .addRange(0x1d1aa, 0x1d1ad)
          .addRange(0x1d242, 0x1d244)
          .addRange(0x1da00, 0x1da36)
          .addRange(0x1da3b, 0x1da6c)
          .addRange(0x1da9b, 0x1da9f)
          .addRange(0x1daa1, 0x1daaf)
          .addRange(0x1e000, 0x1e006)
          .addRange(0x1e008, 0x1e018)
          .addRange(0x1e01b, 0x1e021)
          .addRange(0x1e023, 0x1e024)
          .addRange(0x1e026, 0x1e02a)
          .addRange(0x1e8d0, 0x1e8d6)
          .addRange(0x1e944, 0x1e94a)
          .addRange(0xe0100, 0xe01ef);

        /***/
      },
      /* 626 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x2b,
          0x7c,
          0x7e,
          0xac,
          0xb1,
          0xd7,
          0xf7,
          0x3f6,
          0x2044,
          0x2052,
          0x2118,
          0x214b,
          0x21a0,
          0x21a3,
          0x21a6,
          0x21ae,
          0x21d2,
          0x21d4,
          0x237c,
          0x25b7,
          0x25c1,
          0x266f,
          0xfb29,
          0xfe62,
          0xff0b,
          0xff5c,
          0xff5e,
          0xffe2,
          0x1d6c1,
          0x1d6db,
          0x1d6fb,
          0x1d715,
          0x1d735,
          0x1d74f,
          0x1d76f,
          0x1d789,
          0x1d7a9,
          0x1d7c3
        )
          .addRange(0x3c, 0x3e)
          .addRange(0x606, 0x608)
          .addRange(0x207a, 0x207c)
          .addRange(0x208a, 0x208c)
          .addRange(0x2140, 0x2144)
          .addRange(0x2190, 0x2194)
          .addRange(0x219a, 0x219b)
          .addRange(0x21ce, 0x21cf)
          .addRange(0x21f4, 0x22ff)
          .addRange(0x2320, 0x2321)
          .addRange(0x239b, 0x23b3)
          .addRange(0x23dc, 0x23e1)
          .addRange(0x25f8, 0x25ff)
          .addRange(0x27c0, 0x27c4)
          .addRange(0x27c7, 0x27e5)
          .addRange(0x27f0, 0x27ff)
          .addRange(0x2900, 0x2982)
          .addRange(0x2999, 0x29d7)
          .addRange(0x29dc, 0x29fb)
          .addRange(0x29fe, 0x2aff)
          .addRange(0x2b30, 0x2b44)
          .addRange(0x2b47, 0x2b4c)
          .addRange(0xfe64, 0xfe66)
          .addRange(0xff1c, 0xff1e)
          .addRange(0xffe9, 0xffec)
          .addRange(0x1eef0, 0x1eef1);

        /***/
      },
      /* 627 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x2ec,
          0x2ee,
          0x374,
          0x37a,
          0x559,
          0x640,
          0x7fa,
          0x81a,
          0x824,
          0x828,
          0x971,
          0xe46,
          0xec6,
          0x10fc,
          0x17d7,
          0x1843,
          0x1aa7,
          0x1d78,
          0x2071,
          0x207f,
          0x2d6f,
          0x2e2f,
          0x3005,
          0x303b,
          0xa015,
          0xa60c,
          0xa67f,
          0xa770,
          0xa788,
          0xa9cf,
          0xa9e6,
          0xaa70,
          0xaadd,
          0xff70
        )
          .addRange(0x2b0, 0x2c1)
          .addRange(0x2c6, 0x2d1)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x6e5, 0x6e6)
          .addRange(0x7f4, 0x7f5)
          .addRange(0x1c78, 0x1c7d)
          .addRange(0x1d2c, 0x1d6a)
          .addRange(0x1d9b, 0x1dbf)
          .addRange(0x2090, 0x209c)
          .addRange(0x2c7c, 0x2c7d)
          .addRange(0x3031, 0x3035)
          .addRange(0x309d, 0x309e)
          .addRange(0x30fc, 0x30fe)
          .addRange(0xa4f8, 0xa4fd)
          .addRange(0xa69c, 0xa69d)
          .addRange(0xa717, 0xa71f)
          .addRange(0xa7f8, 0xa7f9)
          .addRange(0xaaf3, 0xaaf4)
          .addRange(0xab5c, 0xab5f)
          .addRange(0xff9e, 0xff9f)
          .addRange(0x16b40, 0x16b43)
          .addRange(0x16f93, 0x16f9f)
          .addRange(0x16fe0, 0x16fe1);

        /***/
      },
      /* 628 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x5e,
          0x60,
          0xa8,
          0xaf,
          0xb4,
          0xb8,
          0x2ed,
          0x375,
          0x1fbd,
          0xab5b,
          0xff3e,
          0xff40,
          0xffe3
        )
          .addRange(0x2c2, 0x2c5)
          .addRange(0x2d2, 0x2df)
          .addRange(0x2e5, 0x2eb)
          .addRange(0x2ef, 0x2ff)
          .addRange(0x384, 0x385)
          .addRange(0x1fbf, 0x1fc1)
          .addRange(0x1fcd, 0x1fcf)
          .addRange(0x1fdd, 0x1fdf)
          .addRange(0x1fed, 0x1fef)
          .addRange(0x1ffd, 0x1ffe)
          .addRange(0x309b, 0x309c)
          .addRange(0xa700, 0xa716)
          .addRange(0xa720, 0xa721)
          .addRange(0xa789, 0xa78a)
          .addRange(0xfbb2, 0xfbc1)
          .addRange(0x1f3fb, 0x1f3ff);

        /***/
      },
      /* 629 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x5bf,
          0x5c7,
          0x670,
          0x711,
          0x93a,
          0x93c,
          0x94d,
          0x981,
          0x9bc,
          0x9cd,
          0xa3c,
          0xa51,
          0xa75,
          0xabc,
          0xacd,
          0xb01,
          0xb3c,
          0xb3f,
          0xb4d,
          0xb56,
          0xb82,
          0xbc0,
          0xbcd,
          0xc00,
          0xc81,
          0xcbc,
          0xcbf,
          0xcc6,
          0xd4d,
          0xdca,
          0xdd6,
          0xe31,
          0xeb1,
          0xf35,
          0xf37,
          0xf39,
          0xfc6,
          0x1082,
          0x108d,
          0x109d,
          0x17c6,
          0x17dd,
          0x18a9,
          0x1932,
          0x1a1b,
          0x1a56,
          0x1a60,
          0x1a62,
          0x1a7f,
          0x1b34,
          0x1b3c,
          0x1b42,
          0x1be6,
          0x1bed,
          0x1ced,
          0x1cf4,
          0x20e1,
          0x2d7f,
          0xa66f,
          0xa802,
          0xa806,
          0xa80b,
          0xa9b3,
          0xa9bc,
          0xa9e5,
          0xaa43,
          0xaa4c,
          0xaa7c,
          0xaab0,
          0xaac1,
          0xaaf6,
          0xabe5,
          0xabe8,
          0xabed,
          0xfb1e,
          0x101fd,
          0x102e0,
          0x10a3f,
          0x11001,
          0x11173,
          0x11234,
          0x1123e,
          0x112df,
          0x1133c,
          0x11340,
          0x11446,
          0x114ba,
          0x1163d,
          0x116ab,
          0x116ad,
          0x116b7,
          0x11a47,
          0x11c3f,
          0x11d3a,
          0x11d47,
          0x1da75,
          0x1da84
        )
          .addRange(0x300, 0x36f)
          .addRange(0x483, 0x487)
          .addRange(0x591, 0x5bd)
          .addRange(0x5c1, 0x5c2)
          .addRange(0x5c4, 0x5c5)
          .addRange(0x610, 0x61a)
          .addRange(0x64b, 0x65f)
          .addRange(0x6d6, 0x6dc)
          .addRange(0x6df, 0x6e4)
          .addRange(0x6e7, 0x6e8)
          .addRange(0x6ea, 0x6ed)
          .addRange(0x730, 0x74a)
          .addRange(0x7a6, 0x7b0)
          .addRange(0x7eb, 0x7f3)
          .addRange(0x816, 0x819)
          .addRange(0x81b, 0x823)
          .addRange(0x825, 0x827)
          .addRange(0x829, 0x82d)
          .addRange(0x859, 0x85b)
          .addRange(0x8d4, 0x8e1)
          .addRange(0x8e3, 0x902)
          .addRange(0x941, 0x948)
          .addRange(0x951, 0x957)
          .addRange(0x962, 0x963)
          .addRange(0x9c1, 0x9c4)
          .addRange(0x9e2, 0x9e3)
          .addRange(0xa01, 0xa02)
          .addRange(0xa41, 0xa42)
          .addRange(0xa47, 0xa48)
          .addRange(0xa4b, 0xa4d)
          .addRange(0xa70, 0xa71)
          .addRange(0xa81, 0xa82)
          .addRange(0xac1, 0xac5)
          .addRange(0xac7, 0xac8)
          .addRange(0xae2, 0xae3)
          .addRange(0xafa, 0xaff)
          .addRange(0xb41, 0xb44)
          .addRange(0xb62, 0xb63)
          .addRange(0xc3e, 0xc40)
          .addRange(0xc46, 0xc48)
          .addRange(0xc4a, 0xc4d)
          .addRange(0xc55, 0xc56)
          .addRange(0xc62, 0xc63)
          .addRange(0xccc, 0xccd)
          .addRange(0xce2, 0xce3)
          .addRange(0xd00, 0xd01)
          .addRange(0xd3b, 0xd3c)
          .addRange(0xd41, 0xd44)
          .addRange(0xd62, 0xd63)
          .addRange(0xdd2, 0xdd4)
          .addRange(0xe34, 0xe3a)
          .addRange(0xe47, 0xe4e)
          .addRange(0xeb4, 0xeb9)
          .addRange(0xebb, 0xebc)
          .addRange(0xec8, 0xecd)
          .addRange(0xf18, 0xf19)
          .addRange(0xf71, 0xf7e)
          .addRange(0xf80, 0xf84)
          .addRange(0xf86, 0xf87)
          .addRange(0xf8d, 0xf97)
          .addRange(0xf99, 0xfbc)
          .addRange(0x102d, 0x1030)
          .addRange(0x1032, 0x1037)
          .addRange(0x1039, 0x103a)
          .addRange(0x103d, 0x103e)
          .addRange(0x1058, 0x1059)
          .addRange(0x105e, 0x1060)
          .addRange(0x1071, 0x1074)
          .addRange(0x1085, 0x1086)
          .addRange(0x135d, 0x135f)
          .addRange(0x1712, 0x1714)
          .addRange(0x1732, 0x1734)
          .addRange(0x1752, 0x1753)
          .addRange(0x1772, 0x1773)
          .addRange(0x17b4, 0x17b5)
          .addRange(0x17b7, 0x17bd)
          .addRange(0x17c9, 0x17d3)
          .addRange(0x180b, 0x180d)
          .addRange(0x1885, 0x1886)
          .addRange(0x1920, 0x1922)
          .addRange(0x1927, 0x1928)
          .addRange(0x1939, 0x193b)
          .addRange(0x1a17, 0x1a18)
          .addRange(0x1a58, 0x1a5e)
          .addRange(0x1a65, 0x1a6c)
          .addRange(0x1a73, 0x1a7c)
          .addRange(0x1ab0, 0x1abd)
          .addRange(0x1b00, 0x1b03)
          .addRange(0x1b36, 0x1b3a)
          .addRange(0x1b6b, 0x1b73)
          .addRange(0x1b80, 0x1b81)
          .addRange(0x1ba2, 0x1ba5)
          .addRange(0x1ba8, 0x1ba9)
          .addRange(0x1bab, 0x1bad)
          .addRange(0x1be8, 0x1be9)
          .addRange(0x1bef, 0x1bf1)
          .addRange(0x1c2c, 0x1c33)
          .addRange(0x1c36, 0x1c37)
          .addRange(0x1cd0, 0x1cd2)
          .addRange(0x1cd4, 0x1ce0)
          .addRange(0x1ce2, 0x1ce8)
          .addRange(0x1cf8, 0x1cf9)
          .addRange(0x1dc0, 0x1df9)
          .addRange(0x1dfb, 0x1dff)
          .addRange(0x20d0, 0x20dc)
          .addRange(0x20e5, 0x20f0)
          .addRange(0x2cef, 0x2cf1)
          .addRange(0x2de0, 0x2dff)
          .addRange(0x302a, 0x302d)
          .addRange(0x3099, 0x309a)
          .addRange(0xa674, 0xa67d)
          .addRange(0xa69e, 0xa69f)
          .addRange(0xa6f0, 0xa6f1)
          .addRange(0xa825, 0xa826)
          .addRange(0xa8c4, 0xa8c5)
          .addRange(0xa8e0, 0xa8f1)
          .addRange(0xa926, 0xa92d)
          .addRange(0xa947, 0xa951)
          .addRange(0xa980, 0xa982)
          .addRange(0xa9b6, 0xa9b9)
          .addRange(0xaa29, 0xaa2e)
          .addRange(0xaa31, 0xaa32)
          .addRange(0xaa35, 0xaa36)
          .addRange(0xaab2, 0xaab4)
          .addRange(0xaab7, 0xaab8)
          .addRange(0xaabe, 0xaabf)
          .addRange(0xaaec, 0xaaed)
          .addRange(0xfe00, 0xfe0f)
          .addRange(0xfe20, 0xfe2f)
          .addRange(0x10376, 0x1037a)
          .addRange(0x10a01, 0x10a03)
          .addRange(0x10a05, 0x10a06)
          .addRange(0x10a0c, 0x10a0f)
          .addRange(0x10a38, 0x10a3a)
          .addRange(0x10ae5, 0x10ae6)
          .addRange(0x11038, 0x11046)
          .addRange(0x1107f, 0x11081)
          .addRange(0x110b3, 0x110b6)
          .addRange(0x110b9, 0x110ba)
          .addRange(0x11100, 0x11102)
          .addRange(0x11127, 0x1112b)
          .addRange(0x1112d, 0x11134)
          .addRange(0x11180, 0x11181)
          .addRange(0x111b6, 0x111be)
          .addRange(0x111ca, 0x111cc)
          .addRange(0x1122f, 0x11231)
          .addRange(0x11236, 0x11237)
          .addRange(0x112e3, 0x112ea)
          .addRange(0x11300, 0x11301)
          .addRange(0x11366, 0x1136c)
          .addRange(0x11370, 0x11374)
          .addRange(0x11438, 0x1143f)
          .addRange(0x11442, 0x11444)
          .addRange(0x114b3, 0x114b8)
          .addRange(0x114bf, 0x114c0)
          .addRange(0x114c2, 0x114c3)
          .addRange(0x115b2, 0x115b5)
          .addRange(0x115bc, 0x115bd)
          .addRange(0x115bf, 0x115c0)
          .addRange(0x115dc, 0x115dd)
          .addRange(0x11633, 0x1163a)
          .addRange(0x1163f, 0x11640)
          .addRange(0x116b0, 0x116b5)
          .addRange(0x1171d, 0x1171f)
          .addRange(0x11722, 0x11725)
          .addRange(0x11727, 0x1172b)
          .addRange(0x11a01, 0x11a06)
          .addRange(0x11a09, 0x11a0a)
          .addRange(0x11a33, 0x11a38)
          .addRange(0x11a3b, 0x11a3e)
          .addRange(0x11a51, 0x11a56)
          .addRange(0x11a59, 0x11a5b)
          .addRange(0x11a8a, 0x11a96)
          .addRange(0x11a98, 0x11a99)
          .addRange(0x11c30, 0x11c36)
          .addRange(0x11c38, 0x11c3d)
          .addRange(0x11c92, 0x11ca7)
          .addRange(0x11caa, 0x11cb0)
          .addRange(0x11cb2, 0x11cb3)
          .addRange(0x11cb5, 0x11cb6)
          .addRange(0x11d31, 0x11d36)
          .addRange(0x11d3c, 0x11d3d)
          .addRange(0x11d3f, 0x11d45)
          .addRange(0x16af0, 0x16af4)
          .addRange(0x16b30, 0x16b36)
          .addRange(0x16f8f, 0x16f92)
          .addRange(0x1bc9d, 0x1bc9e)
          .addRange(0x1d167, 0x1d169)
          .addRange(0x1d17b, 0x1d182)
          .addRange(0x1d185, 0x1d18b)
          .addRange(0x1d1aa, 0x1d1ad)
          .addRange(0x1d242, 0x1d244)
          .addRange(0x1da00, 0x1da36)
          .addRange(0x1da3b, 0x1da6c)
          .addRange(0x1da9b, 0x1da9f)
          .addRange(0x1daa1, 0x1daaf)
          .addRange(0x1e000, 0x1e006)
          .addRange(0x1e008, 0x1e018)
          .addRange(0x1e01b, 0x1e021)
          .addRange(0x1e023, 0x1e024)
          .addRange(0x1e026, 0x1e02a)
          .addRange(0x1e8d0, 0x1e8d6)
          .addRange(0x1e944, 0x1e94a)
          .addRange(0xe0100, 0xe01ef);

        /***/
      },
      /* 630 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xb9,
          0x2070,
          0x2cfd,
          0x3007,
          0x10341,
          0x1034a
        )
          .addRange(0x30, 0x39)
          .addRange(0xb2, 0xb3)
          .addRange(0xbc, 0xbe)
          .addRange(0x660, 0x669)
          .addRange(0x6f0, 0x6f9)
          .addRange(0x7c0, 0x7c9)
          .addRange(0x966, 0x96f)
          .addRange(0x9e6, 0x9ef)
          .addRange(0x9f4, 0x9f9)
          .addRange(0xa66, 0xa6f)
          .addRange(0xae6, 0xaef)
          .addRange(0xb66, 0xb6f)
          .addRange(0xb72, 0xb77)
          .addRange(0xbe6, 0xbf2)
          .addRange(0xc66, 0xc6f)
          .addRange(0xc78, 0xc7e)
          .addRange(0xce6, 0xcef)
          .addRange(0xd58, 0xd5e)
          .addRange(0xd66, 0xd78)
          .addRange(0xde6, 0xdef)
          .addRange(0xe50, 0xe59)
          .addRange(0xed0, 0xed9)
          .addRange(0xf20, 0xf33)
          .addRange(0x1040, 0x1049)
          .addRange(0x1090, 0x1099)
          .addRange(0x1369, 0x137c)
          .addRange(0x16ee, 0x16f0)
          .addRange(0x17e0, 0x17e9)
          .addRange(0x17f0, 0x17f9)
          .addRange(0x1810, 0x1819)
          .addRange(0x1946, 0x194f)
          .addRange(0x19d0, 0x19da)
          .addRange(0x1a80, 0x1a89)
          .addRange(0x1a90, 0x1a99)
          .addRange(0x1b50, 0x1b59)
          .addRange(0x1bb0, 0x1bb9)
          .addRange(0x1c40, 0x1c49)
          .addRange(0x1c50, 0x1c59)
          .addRange(0x2074, 0x2079)
          .addRange(0x2080, 0x2089)
          .addRange(0x2150, 0x2182)
          .addRange(0x2185, 0x2189)
          .addRange(0x2460, 0x249b)
          .addRange(0x24ea, 0x24ff)
          .addRange(0x2776, 0x2793)
          .addRange(0x3021, 0x3029)
          .addRange(0x3038, 0x303a)
          .addRange(0x3192, 0x3195)
          .addRange(0x3220, 0x3229)
          .addRange(0x3248, 0x324f)
          .addRange(0x3251, 0x325f)
          .addRange(0x3280, 0x3289)
          .addRange(0x32b1, 0x32bf)
          .addRange(0xa620, 0xa629)
          .addRange(0xa6e6, 0xa6ef)
          .addRange(0xa830, 0xa835)
          .addRange(0xa8d0, 0xa8d9)
          .addRange(0xa900, 0xa909)
          .addRange(0xa9d0, 0xa9d9)
          .addRange(0xa9f0, 0xa9f9)
          .addRange(0xaa50, 0xaa59)
          .addRange(0xabf0, 0xabf9)
          .addRange(0xff10, 0xff19)
          .addRange(0x10107, 0x10133)
          .addRange(0x10140, 0x10178)
          .addRange(0x1018a, 0x1018b)
          .addRange(0x102e1, 0x102fb)
          .addRange(0x10320, 0x10323)
          .addRange(0x103d1, 0x103d5)
          .addRange(0x104a0, 0x104a9)
          .addRange(0x10858, 0x1085f)
          .addRange(0x10879, 0x1087f)
          .addRange(0x108a7, 0x108af)
          .addRange(0x108fb, 0x108ff)
          .addRange(0x10916, 0x1091b)
          .addRange(0x109bc, 0x109bd)
          .addRange(0x109c0, 0x109cf)
          .addRange(0x109d2, 0x109ff)
          .addRange(0x10a40, 0x10a47)
          .addRange(0x10a7d, 0x10a7e)
          .addRange(0x10a9d, 0x10a9f)
          .addRange(0x10aeb, 0x10aef)
          .addRange(0x10b58, 0x10b5f)
          .addRange(0x10b78, 0x10b7f)
          .addRange(0x10ba9, 0x10baf)
          .addRange(0x10cfa, 0x10cff)
          .addRange(0x10e60, 0x10e7e)
          .addRange(0x11052, 0x1106f)
          .addRange(0x110f0, 0x110f9)
          .addRange(0x11136, 0x1113f)
          .addRange(0x111d0, 0x111d9)
          .addRange(0x111e1, 0x111f4)
          .addRange(0x112f0, 0x112f9)
          .addRange(0x11450, 0x11459)
          .addRange(0x114d0, 0x114d9)
          .addRange(0x11650, 0x11659)
          .addRange(0x116c0, 0x116c9)
          .addRange(0x11730, 0x1173b)
          .addRange(0x118e0, 0x118f2)
          .addRange(0x11c50, 0x11c6c)
          .addRange(0x11d50, 0x11d59)
          .addRange(0x12400, 0x1246e)
          .addRange(0x16a60, 0x16a69)
          .addRange(0x16b50, 0x16b59)
          .addRange(0x16b5b, 0x16b61)
          .addRange(0x1d360, 0x1d371)
          .addRange(0x1d7ce, 0x1d7ff)
          .addRange(0x1e8c7, 0x1e8cf)
          .addRange(0x1e950, 0x1e959)
          .addRange(0x1f100, 0x1f10c);

        /***/
      },
      /* 631 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x28,
          0x5b,
          0x7b,
          0xf3a,
          0xf3c,
          0x169b,
          0x201a,
          0x201e,
          0x2045,
          0x207d,
          0x208d,
          0x2308,
          0x230a,
          0x2329,
          0x2768,
          0x276a,
          0x276c,
          0x276e,
          0x2770,
          0x2772,
          0x2774,
          0x27c5,
          0x27e6,
          0x27e8,
          0x27ea,
          0x27ec,
          0x27ee,
          0x2983,
          0x2985,
          0x2987,
          0x2989,
          0x298b,
          0x298d,
          0x298f,
          0x2991,
          0x2993,
          0x2995,
          0x2997,
          0x29d8,
          0x29da,
          0x29fc,
          0x2e22,
          0x2e24,
          0x2e26,
          0x2e28,
          0x2e42,
          0x3008,
          0x300a,
          0x300c,
          0x300e,
          0x3010,
          0x3014,
          0x3016,
          0x3018,
          0x301a,
          0x301d,
          0xfd3f,
          0xfe17,
          0xfe35,
          0xfe37,
          0xfe39,
          0xfe3b,
          0xfe3d,
          0xfe3f,
          0xfe41,
          0xfe43,
          0xfe47,
          0xfe59,
          0xfe5b,
          0xfe5d,
          0xff08,
          0xff3b,
          0xff5b,
          0xff5f,
          0xff62
        );

        /***/
      },
      /* 632 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xad,
          0x38b,
          0x38d,
          0x3a2,
          0x530,
          0x560,
          0x588,
          0x590,
          0x6dd,
          0x83f,
          0x85f,
          0x8b5,
          0x8e2,
          0x984,
          0x9a9,
          0x9b1,
          0x9de,
          0xa04,
          0xa29,
          0xa31,
          0xa34,
          0xa37,
          0xa3d,
          0xa5d,
          0xa84,
          0xa8e,
          0xa92,
          0xaa9,
          0xab1,
          0xab4,
          0xac6,
          0xaca,
          0xb00,
          0xb04,
          0xb29,
          0xb31,
          0xb34,
          0xb5e,
          0xb84,
          0xb91,
          0xb9b,
          0xb9d,
          0xbc9,
          0xc04,
          0xc0d,
          0xc11,
          0xc29,
          0xc45,
          0xc49,
          0xc57,
          0xc84,
          0xc8d,
          0xc91,
          0xca9,
          0xcb4,
          0xcc5,
          0xcc9,
          0xcdf,
          0xcf0,
          0xd04,
          0xd0d,
          0xd11,
          0xd45,
          0xd49,
          0xd84,
          0xdb2,
          0xdbc,
          0xdd5,
          0xdd7,
          0xe83,
          0xe89,
          0xe98,
          0xea0,
          0xea4,
          0xea6,
          0xeac,
          0xeba,
          0xec5,
          0xec7,
          0xf48,
          0xf98,
          0xfbd,
          0xfcd,
          0x10c6,
          0x1249,
          0x1257,
          0x1259,
          0x1289,
          0x12b1,
          0x12bf,
          0x12c1,
          0x12d7,
          0x1311,
          0x170d,
          0x176d,
          0x1771,
          0x191f,
          0x1a5f,
          0x1dfa,
          0x1f58,
          0x1f5a,
          0x1f5c,
          0x1f5e,
          0x1fb5,
          0x1fc5,
          0x1fdc,
          0x1ff5,
          0x1fff,
          0x208f,
          0x2bc9,
          0x2c2f,
          0x2c5f,
          0x2d26,
          0x2da7,
          0x2daf,
          0x2db7,
          0x2dbf,
          0x2dc7,
          0x2dcf,
          0x2dd7,
          0x2ddf,
          0x2e9a,
          0x3040,
          0x318f,
          0x321f,
          0x32ff,
          0xa7af,
          0xa9ce,
          0xa9ff,
          0xab27,
          0xab2f,
          0xfb37,
          0xfb3d,
          0xfb3f,
          0xfb42,
          0xfb45,
          0xfe53,
          0xfe67,
          0xfe75,
          0xffe7,
          0x1000c,
          0x10027,
          0x1003b,
          0x1003e,
          0x1018f,
          0x1039e,
          0x10809,
          0x10836,
          0x10856,
          0x108f3,
          0x10a04,
          0x10a14,
          0x10a18,
          0x110bd,
          0x11135,
          0x111e0,
          0x11212,
          0x11287,
          0x11289,
          0x1128e,
          0x1129e,
          0x11304,
          0x11329,
          0x11331,
          0x11334,
          0x1145a,
          0x1145c,
          0x11a9d,
          0x11c09,
          0x11c37,
          0x11ca8,
          0x11d07,
          0x11d0a,
          0x11d3b,
          0x11d3e,
          0x1246f,
          0x16a5f,
          0x16b5a,
          0x16b62,
          0x1d455,
          0x1d49d,
          0x1d4ad,
          0x1d4ba,
          0x1d4bc,
          0x1d4c4,
          0x1d506,
          0x1d515,
          0x1d51d,
          0x1d53a,
          0x1d53f,
          0x1d545,
          0x1d551,
          0x1daa0,
          0x1e007,
          0x1e022,
          0x1e025,
          0x1ee04,
          0x1ee20,
          0x1ee23,
          0x1ee28,
          0x1ee33,
          0x1ee38,
          0x1ee3a,
          0x1ee48,
          0x1ee4a,
          0x1ee4c,
          0x1ee50,
          0x1ee53,
          0x1ee58,
          0x1ee5a,
          0x1ee5c,
          0x1ee5e,
          0x1ee60,
          0x1ee63,
          0x1ee6b,
          0x1ee73,
          0x1ee78,
          0x1ee7d,
          0x1ee7f,
          0x1ee8a,
          0x1eea4,
          0x1eeaa,
          0x1f0c0,
          0x1f0d0,
          0x1f12f,
          0x1f93f
        )
          .addRange(0x0, 0x1f)
          .addRange(0x7f, 0x9f)
          .addRange(0x378, 0x379)
          .addRange(0x380, 0x383)
          .addRange(0x557, 0x558)
          .addRange(0x58b, 0x58c)
          .addRange(0x5c8, 0x5cf)
          .addRange(0x5eb, 0x5ef)
          .addRange(0x5f5, 0x605)
          .addRange(0x61c, 0x61d)
          .addRange(0x70e, 0x70f)
          .addRange(0x74b, 0x74c)
          .addRange(0x7b2, 0x7bf)
          .addRange(0x7fb, 0x7ff)
          .addRange(0x82e, 0x82f)
          .addRange(0x85c, 0x85d)
          .addRange(0x86b, 0x89f)
          .addRange(0x8be, 0x8d3)
          .addRange(0x98d, 0x98e)
          .addRange(0x991, 0x992)
          .addRange(0x9b3, 0x9b5)
          .addRange(0x9ba, 0x9bb)
          .addRange(0x9c5, 0x9c6)
          .addRange(0x9c9, 0x9ca)
          .addRange(0x9cf, 0x9d6)
          .addRange(0x9d8, 0x9db)
          .addRange(0x9e4, 0x9e5)
          .addRange(0x9fe, 0xa00)
          .addRange(0xa0b, 0xa0e)
          .addRange(0xa11, 0xa12)
          .addRange(0xa3a, 0xa3b)
          .addRange(0xa43, 0xa46)
          .addRange(0xa49, 0xa4a)
          .addRange(0xa4e, 0xa50)
          .addRange(0xa52, 0xa58)
          .addRange(0xa5f, 0xa65)
          .addRange(0xa76, 0xa80)
          .addRange(0xaba, 0xabb)
          .addRange(0xace, 0xacf)
          .addRange(0xad1, 0xadf)
          .addRange(0xae4, 0xae5)
          .addRange(0xaf2, 0xaf8)
          .addRange(0xb0d, 0xb0e)
          .addRange(0xb11, 0xb12)
          .addRange(0xb3a, 0xb3b)
          .addRange(0xb45, 0xb46)
          .addRange(0xb49, 0xb4a)
          .addRange(0xb4e, 0xb55)
          .addRange(0xb58, 0xb5b)
          .addRange(0xb64, 0xb65)
          .addRange(0xb78, 0xb81)
          .addRange(0xb8b, 0xb8d)
          .addRange(0xb96, 0xb98)
          .addRange(0xba0, 0xba2)
          .addRange(0xba5, 0xba7)
          .addRange(0xbab, 0xbad)
          .addRange(0xbba, 0xbbd)
          .addRange(0xbc3, 0xbc5)
          .addRange(0xbce, 0xbcf)
          .addRange(0xbd1, 0xbd6)
          .addRange(0xbd8, 0xbe5)
          .addRange(0xbfb, 0xbff)
          .addRange(0xc3a, 0xc3c)
          .addRange(0xc4e, 0xc54)
          .addRange(0xc5b, 0xc5f)
          .addRange(0xc64, 0xc65)
          .addRange(0xc70, 0xc77)
          .addRange(0xcba, 0xcbb)
          .addRange(0xcce, 0xcd4)
          .addRange(0xcd7, 0xcdd)
          .addRange(0xce4, 0xce5)
          .addRange(0xcf3, 0xcff)
          .addRange(0xd50, 0xd53)
          .addRange(0xd64, 0xd65)
          .addRange(0xd80, 0xd81)
          .addRange(0xd97, 0xd99)
          .addRange(0xdbe, 0xdbf)
          .addRange(0xdc7, 0xdc9)
          .addRange(0xdcb, 0xdce)
          .addRange(0xde0, 0xde5)
          .addRange(0xdf0, 0xdf1)
          .addRange(0xdf5, 0xe00)
          .addRange(0xe3b, 0xe3e)
          .addRange(0xe5c, 0xe80)
          .addRange(0xe85, 0xe86)
          .addRange(0xe8b, 0xe8c)
          .addRange(0xe8e, 0xe93)
          .addRange(0xea8, 0xea9)
          .addRange(0xebe, 0xebf)
          .addRange(0xece, 0xecf)
          .addRange(0xeda, 0xedb)
          .addRange(0xee0, 0xeff)
          .addRange(0xf6d, 0xf70)
          .addRange(0xfdb, 0xfff)
          .addRange(0x10c8, 0x10cc)
          .addRange(0x10ce, 0x10cf)
          .addRange(0x124e, 0x124f)
          .addRange(0x125e, 0x125f)
          .addRange(0x128e, 0x128f)
          .addRange(0x12b6, 0x12b7)
          .addRange(0x12c6, 0x12c7)
          .addRange(0x1316, 0x1317)
          .addRange(0x135b, 0x135c)
          .addRange(0x137d, 0x137f)
          .addRange(0x139a, 0x139f)
          .addRange(0x13f6, 0x13f7)
          .addRange(0x13fe, 0x13ff)
          .addRange(0x169d, 0x169f)
          .addRange(0x16f9, 0x16ff)
          .addRange(0x1715, 0x171f)
          .addRange(0x1737, 0x173f)
          .addRange(0x1754, 0x175f)
          .addRange(0x1774, 0x177f)
          .addRange(0x17de, 0x17df)
          .addRange(0x17ea, 0x17ef)
          .addRange(0x17fa, 0x17ff)
          .addRange(0x180e, 0x180f)
          .addRange(0x181a, 0x181f)
          .addRange(0x1878, 0x187f)
          .addRange(0x18ab, 0x18af)
          .addRange(0x18f6, 0x18ff)
          .addRange(0x192c, 0x192f)
          .addRange(0x193c, 0x193f)
          .addRange(0x1941, 0x1943)
          .addRange(0x196e, 0x196f)
          .addRange(0x1975, 0x197f)
          .addRange(0x19ac, 0x19af)
          .addRange(0x19ca, 0x19cf)
          .addRange(0x19db, 0x19dd)
          .addRange(0x1a1c, 0x1a1d)
          .addRange(0x1a7d, 0x1a7e)
          .addRange(0x1a8a, 0x1a8f)
          .addRange(0x1a9a, 0x1a9f)
          .addRange(0x1aae, 0x1aaf)
          .addRange(0x1abf, 0x1aff)
          .addRange(0x1b4c, 0x1b4f)
          .addRange(0x1b7d, 0x1b7f)
          .addRange(0x1bf4, 0x1bfb)
          .addRange(0x1c38, 0x1c3a)
          .addRange(0x1c4a, 0x1c4c)
          .addRange(0x1c89, 0x1cbf)
          .addRange(0x1cc8, 0x1ccf)
          .addRange(0x1cfa, 0x1cff)
          .addRange(0x1f16, 0x1f17)
          .addRange(0x1f1e, 0x1f1f)
          .addRange(0x1f46, 0x1f47)
          .addRange(0x1f4e, 0x1f4f)
          .addRange(0x1f7e, 0x1f7f)
          .addRange(0x1fd4, 0x1fd5)
          .addRange(0x1ff0, 0x1ff1)
          .addRange(0x200b, 0x200f)
          .addRange(0x202a, 0x202e)
          .addRange(0x2060, 0x206f)
          .addRange(0x2072, 0x2073)
          .addRange(0x209d, 0x209f)
          .addRange(0x20c0, 0x20cf)
          .addRange(0x20f1, 0x20ff)
          .addRange(0x218c, 0x218f)
          .addRange(0x2427, 0x243f)
          .addRange(0x244b, 0x245f)
          .addRange(0x2b74, 0x2b75)
          .addRange(0x2b96, 0x2b97)
          .addRange(0x2bba, 0x2bbc)
          .addRange(0x2bd3, 0x2beb)
          .addRange(0x2bf0, 0x2bff)
          .addRange(0x2cf4, 0x2cf8)
          .addRange(0x2d28, 0x2d2c)
          .addRange(0x2d2e, 0x2d2f)
          .addRange(0x2d68, 0x2d6e)
          .addRange(0x2d71, 0x2d7e)
          .addRange(0x2d97, 0x2d9f)
          .addRange(0x2e4a, 0x2e7f)
          .addRange(0x2ef4, 0x2eff)
          .addRange(0x2fd6, 0x2fef)
          .addRange(0x2ffc, 0x2fff)
          .addRange(0x3097, 0x3098)
          .addRange(0x3100, 0x3104)
          .addRange(0x312f, 0x3130)
          .addRange(0x31bb, 0x31bf)
          .addRange(0x31e4, 0x31ef)
          .addRange(0x4db6, 0x4dbf)
          .addRange(0x9feb, 0x9fff)
          .addRange(0xa48d, 0xa48f)
          .addRange(0xa4c7, 0xa4cf)
          .addRange(0xa62c, 0xa63f)
          .addRange(0xa6f8, 0xa6ff)
          .addRange(0xa7b8, 0xa7f6)
          .addRange(0xa82c, 0xa82f)
          .addRange(0xa83a, 0xa83f)
          .addRange(0xa878, 0xa87f)
          .addRange(0xa8c6, 0xa8cd)
          .addRange(0xa8da, 0xa8df)
          .addRange(0xa8fe, 0xa8ff)
          .addRange(0xa954, 0xa95e)
          .addRange(0xa97d, 0xa97f)
          .addRange(0xa9da, 0xa9dd)
          .addRange(0xaa37, 0xaa3f)
          .addRange(0xaa4e, 0xaa4f)
          .addRange(0xaa5a, 0xaa5b)
          .addRange(0xaac3, 0xaada)
          .addRange(0xaaf7, 0xab00)
          .addRange(0xab07, 0xab08)
          .addRange(0xab0f, 0xab10)
          .addRange(0xab17, 0xab1f)
          .addRange(0xab66, 0xab6f)
          .addRange(0xabee, 0xabef)
          .addRange(0xabfa, 0xabff)
          .addRange(0xd7a4, 0xd7af)
          .addRange(0xd7c7, 0xd7ca)
          .addRange(0xd7fc, 0xf8ff)
          .addRange(0xfa6e, 0xfa6f)
          .addRange(0xfada, 0xfaff)
          .addRange(0xfb07, 0xfb12)
          .addRange(0xfb18, 0xfb1c)
          .addRange(0xfbc2, 0xfbd2)
          .addRange(0xfd40, 0xfd4f)
          .addRange(0xfd90, 0xfd91)
          .addRange(0xfdc8, 0xfdef)
          .addRange(0xfdfe, 0xfdff)
          .addRange(0xfe1a, 0xfe1f)
          .addRange(0xfe6c, 0xfe6f)
          .addRange(0xfefd, 0xff00)
          .addRange(0xffbf, 0xffc1)
          .addRange(0xffc8, 0xffc9)
          .addRange(0xffd0, 0xffd1)
          .addRange(0xffd8, 0xffd9)
          .addRange(0xffdd, 0xffdf)
          .addRange(0xffef, 0xfffb)
          .addRange(0xfffe, 0xffff)
          .addRange(0x1004e, 0x1004f)
          .addRange(0x1005e, 0x1007f)
          .addRange(0x100fb, 0x100ff)
          .addRange(0x10103, 0x10106)
          .addRange(0x10134, 0x10136)
          .addRange(0x1019c, 0x1019f)
          .addRange(0x101a1, 0x101cf)
          .addRange(0x101fe, 0x1027f)
          .addRange(0x1029d, 0x1029f)
          .addRange(0x102d1, 0x102df)
          .addRange(0x102fc, 0x102ff)
          .addRange(0x10324, 0x1032c)
          .addRange(0x1034b, 0x1034f)
          .addRange(0x1037b, 0x1037f)
          .addRange(0x103c4, 0x103c7)
          .addRange(0x103d6, 0x103ff)
          .addRange(0x1049e, 0x1049f)
          .addRange(0x104aa, 0x104af)
          .addRange(0x104d4, 0x104d7)
          .addRange(0x104fc, 0x104ff)
          .addRange(0x10528, 0x1052f)
          .addRange(0x10564, 0x1056e)
          .addRange(0x10570, 0x105ff)
          .addRange(0x10737, 0x1073f)
          .addRange(0x10756, 0x1075f)
          .addRange(0x10768, 0x107ff)
          .addRange(0x10806, 0x10807)
          .addRange(0x10839, 0x1083b)
          .addRange(0x1083d, 0x1083e)
          .addRange(0x1089f, 0x108a6)
          .addRange(0x108b0, 0x108df)
          .addRange(0x108f6, 0x108fa)
          .addRange(0x1091c, 0x1091e)
          .addRange(0x1093a, 0x1093e)
          .addRange(0x10940, 0x1097f)
          .addRange(0x109b8, 0x109bb)
          .addRange(0x109d0, 0x109d1)
          .addRange(0x10a07, 0x10a0b)
          .addRange(0x10a34, 0x10a37)
          .addRange(0x10a3b, 0x10a3e)
          .addRange(0x10a48, 0x10a4f)
          .addRange(0x10a59, 0x10a5f)
          .addRange(0x10aa0, 0x10abf)
          .addRange(0x10ae7, 0x10aea)
          .addRange(0x10af7, 0x10aff)
          .addRange(0x10b36, 0x10b38)
          .addRange(0x10b56, 0x10b57)
          .addRange(0x10b73, 0x10b77)
          .addRange(0x10b92, 0x10b98)
          .addRange(0x10b9d, 0x10ba8)
          .addRange(0x10bb0, 0x10bff)
          .addRange(0x10c49, 0x10c7f)
          .addRange(0x10cb3, 0x10cbf)
          .addRange(0x10cf3, 0x10cf9)
          .addRange(0x10d00, 0x10e5f)
          .addRange(0x10e7f, 0x10fff)
          .addRange(0x1104e, 0x11051)
          .addRange(0x11070, 0x1107e)
          .addRange(0x110c2, 0x110cf)
          .addRange(0x110e9, 0x110ef)
          .addRange(0x110fa, 0x110ff)
          .addRange(0x11144, 0x1114f)
          .addRange(0x11177, 0x1117f)
          .addRange(0x111ce, 0x111cf)
          .addRange(0x111f5, 0x111ff)
          .addRange(0x1123f, 0x1127f)
          .addRange(0x112aa, 0x112af)
          .addRange(0x112eb, 0x112ef)
          .addRange(0x112fa, 0x112ff)
          .addRange(0x1130d, 0x1130e)
          .addRange(0x11311, 0x11312)
          .addRange(0x1133a, 0x1133b)
          .addRange(0x11345, 0x11346)
          .addRange(0x11349, 0x1134a)
          .addRange(0x1134e, 0x1134f)
          .addRange(0x11351, 0x11356)
          .addRange(0x11358, 0x1135c)
          .addRange(0x11364, 0x11365)
          .addRange(0x1136d, 0x1136f)
          .addRange(0x11375, 0x113ff)
          .addRange(0x1145e, 0x1147f)
          .addRange(0x114c8, 0x114cf)
          .addRange(0x114da, 0x1157f)
          .addRange(0x115b6, 0x115b7)
          .addRange(0x115de, 0x115ff)
          .addRange(0x11645, 0x1164f)
          .addRange(0x1165a, 0x1165f)
          .addRange(0x1166d, 0x1167f)
          .addRange(0x116b8, 0x116bf)
          .addRange(0x116ca, 0x116ff)
          .addRange(0x1171a, 0x1171c)
          .addRange(0x1172c, 0x1172f)
          .addRange(0x11740, 0x1189f)
          .addRange(0x118f3, 0x118fe)
          .addRange(0x11900, 0x119ff)
          .addRange(0x11a48, 0x11a4f)
          .addRange(0x11a84, 0x11a85)
          .addRange(0x11aa3, 0x11abf)
          .addRange(0x11af9, 0x11bff)
          .addRange(0x11c46, 0x11c4f)
          .addRange(0x11c6d, 0x11c6f)
          .addRange(0x11c90, 0x11c91)
          .addRange(0x11cb7, 0x11cff)
          .addRange(0x11d37, 0x11d39)
          .addRange(0x11d48, 0x11d4f)
          .addRange(0x11d5a, 0x11fff)
          .addRange(0x1239a, 0x123ff)
          .addRange(0x12475, 0x1247f)
          .addRange(0x12544, 0x12fff)
          .addRange(0x1342f, 0x143ff)
          .addRange(0x14647, 0x167ff)
          .addRange(0x16a39, 0x16a3f)
          .addRange(0x16a6a, 0x16a6d)
          .addRange(0x16a70, 0x16acf)
          .addRange(0x16aee, 0x16aef)
          .addRange(0x16af6, 0x16aff)
          .addRange(0x16b46, 0x16b4f)
          .addRange(0x16b78, 0x16b7c)
          .addRange(0x16b90, 0x16eff)
          .addRange(0x16f45, 0x16f4f)
          .addRange(0x16f7f, 0x16f8e)
          .addRange(0x16fa0, 0x16fdf)
          .addRange(0x16fe2, 0x16fff)
          .addRange(0x187ed, 0x187ff)
          .addRange(0x18af3, 0x1afff)
          .addRange(0x1b11f, 0x1b16f)
          .addRange(0x1b2fc, 0x1bbff)
          .addRange(0x1bc6b, 0x1bc6f)
          .addRange(0x1bc7d, 0x1bc7f)
          .addRange(0x1bc89, 0x1bc8f)
          .addRange(0x1bc9a, 0x1bc9b)
          .addRange(0x1bca0, 0x1cfff)
          .addRange(0x1d0f6, 0x1d0ff)
          .addRange(0x1d127, 0x1d128)
          .addRange(0x1d173, 0x1d17a)
          .addRange(0x1d1e9, 0x1d1ff)
          .addRange(0x1d246, 0x1d2ff)
          .addRange(0x1d357, 0x1d35f)
          .addRange(0x1d372, 0x1d3ff)
          .addRange(0x1d4a0, 0x1d4a1)
          .addRange(0x1d4a3, 0x1d4a4)
          .addRange(0x1d4a7, 0x1d4a8)
          .addRange(0x1d50b, 0x1d50c)
          .addRange(0x1d547, 0x1d549)
          .addRange(0x1d6a6, 0x1d6a7)
          .addRange(0x1d7cc, 0x1d7cd)
          .addRange(0x1da8c, 0x1da9a)
          .addRange(0x1dab0, 0x1dfff)
          .addRange(0x1e019, 0x1e01a)
          .addRange(0x1e02b, 0x1e7ff)
          .addRange(0x1e8c5, 0x1e8c6)
          .addRange(0x1e8d7, 0x1e8ff)
          .addRange(0x1e94b, 0x1e94f)
          .addRange(0x1e95a, 0x1e95d)
          .addRange(0x1e960, 0x1edff)
          .addRange(0x1ee25, 0x1ee26)
          .addRange(0x1ee3c, 0x1ee41)
          .addRange(0x1ee43, 0x1ee46)
          .addRange(0x1ee55, 0x1ee56)
          .addRange(0x1ee65, 0x1ee66)
          .addRange(0x1ee9c, 0x1eea0)
          .addRange(0x1eebc, 0x1eeef)
          .addRange(0x1eef2, 0x1efff)
          .addRange(0x1f02c, 0x1f02f)
          .addRange(0x1f094, 0x1f09f)
          .addRange(0x1f0af, 0x1f0b0)
          .addRange(0x1f0f6, 0x1f0ff)
          .addRange(0x1f10d, 0x1f10f)
          .addRange(0x1f16c, 0x1f16f)
          .addRange(0x1f1ad, 0x1f1e5)
          .addRange(0x1f203, 0x1f20f)
          .addRange(0x1f23c, 0x1f23f)
          .addRange(0x1f249, 0x1f24f)
          .addRange(0x1f252, 0x1f25f)
          .addRange(0x1f266, 0x1f2ff)
          .addRange(0x1f6d5, 0x1f6df)
          .addRange(0x1f6ed, 0x1f6ef)
          .addRange(0x1f6f9, 0x1f6ff)
          .addRange(0x1f774, 0x1f77f)
          .addRange(0x1f7d5, 0x1f7ff)
          .addRange(0x1f80c, 0x1f80f)
          .addRange(0x1f848, 0x1f84f)
          .addRange(0x1f85a, 0x1f85f)
          .addRange(0x1f888, 0x1f88f)
          .addRange(0x1f8ae, 0x1f8ff)
          .addRange(0x1f90c, 0x1f90f)
          .addRange(0x1f94d, 0x1f94f)
          .addRange(0x1f96c, 0x1f97f)
          .addRange(0x1f998, 0x1f9bf)
          .addRange(0x1f9c1, 0x1f9cf)
          .addRange(0x1f9e7, 0x1ffff)
          .addRange(0x2a6d7, 0x2a6ff)
          .addRange(0x2b735, 0x2b73f)
          .addRange(0x2b81e, 0x2b81f)
          .addRange(0x2cea2, 0x2ceaf)
          .addRange(0x2ebe1, 0x2f7ff)
          .addRange(0x2fa1e, 0xe00ff)
          .addRange(0xe01f0, 0x10ffff);

        /***/
      },
      /* 633 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xaa,
          0xba,
          0x1bb,
          0x294,
          0x6d5,
          0x6ff,
          0x710,
          0x7b1,
          0x93d,
          0x950,
          0x9b2,
          0x9bd,
          0x9ce,
          0x9fc,
          0xa5e,
          0xabd,
          0xad0,
          0xaf9,
          0xb3d,
          0xb71,
          0xb83,
          0xb9c,
          0xbd0,
          0xc3d,
          0xc80,
          0xcbd,
          0xcde,
          0xd3d,
          0xd4e,
          0xdbd,
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xebd,
          0xf00,
          0x103f,
          0x1061,
          0x108e,
          0x1258,
          0x12c0,
          0x17dc,
          0x18aa,
          0x3006,
          0x303c,
          0x309f,
          0x30ff,
          0xa66e,
          0xa78f,
          0xa7f7,
          0xa8fb,
          0xa8fd,
          0xaa7a,
          0xaab1,
          0xaac0,
          0xaac2,
          0xaaf2,
          0xfb1d,
          0xfb3e,
          0x10808,
          0x1083c,
          0x10a00,
          0x11176,
          0x111da,
          0x111dc,
          0x11288,
          0x1133d,
          0x11350,
          0x114c7,
          0x11644,
          0x118ff,
          0x11a00,
          0x11a3a,
          0x11a50,
          0x11c40,
          0x11d46,
          0x16f50,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e
        )
          .addRange(0x1c0, 0x1c3)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f2)
          .addRange(0x620, 0x63f)
          .addRange(0x641, 0x64a)
          .addRange(0x66e, 0x66f)
          .addRange(0x671, 0x6d3)
          .addRange(0x6ee, 0x6ef)
          .addRange(0x6fa, 0x6fc)
          .addRange(0x712, 0x72f)
          .addRange(0x74d, 0x7a5)
          .addRange(0x7ca, 0x7ea)
          .addRange(0x800, 0x815)
          .addRange(0x840, 0x858)
          .addRange(0x860, 0x86a)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x904, 0x939)
          .addRange(0x958, 0x961)
          .addRange(0x972, 0x980)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e1)
          .addRange(0x9f0, 0x9f1)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa72, 0xa74)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xae0, 0xae1)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb61)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc61)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xce0, 0xce1)
          .addRange(0xcf1, 0xcf2)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd3a)
          .addRange(0xd54, 0xd56)
          .addRange(0xd5f, 0xd61)
          .addRange(0xd7a, 0xd7f)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xe01, 0xe30)
          .addRange(0xe32, 0xe33)
          .addRange(0xe40, 0xe45)
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb0)
          .addRange(0xeb2, 0xeb3)
          .addRange(0xec0, 0xec4)
          .addRange(0xedc, 0xedf)
          .addRange(0xf40, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf88, 0xf8c)
          .addRange(0x1000, 0x102a)
          .addRange(0x1050, 0x1055)
          .addRange(0x105a, 0x105d)
          .addRange(0x1065, 0x1066)
          .addRange(0x106e, 0x1070)
          .addRange(0x1075, 0x1081)
          .addRange(0x10d0, 0x10fa)
          .addRange(0x10fd, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x1380, 0x138f)
          .addRange(0x1401, 0x166c)
          .addRange(0x166f, 0x167f)
          .addRange(0x1681, 0x169a)
          .addRange(0x16a0, 0x16ea)
          .addRange(0x16f1, 0x16f8)
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1711)
          .addRange(0x1720, 0x1731)
          .addRange(0x1740, 0x1751)
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1780, 0x17b3)
          .addRange(0x1820, 0x1842)
          .addRange(0x1844, 0x1877)
          .addRange(0x1880, 0x1884)
          .addRange(0x1887, 0x18a8)
          .addRange(0x18b0, 0x18f5)
          .addRange(0x1900, 0x191e)
          .addRange(0x1950, 0x196d)
          .addRange(0x1970, 0x1974)
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x1a00, 0x1a16)
          .addRange(0x1a20, 0x1a54)
          .addRange(0x1b05, 0x1b33)
          .addRange(0x1b45, 0x1b4b)
          .addRange(0x1b83, 0x1ba0)
          .addRange(0x1bae, 0x1baf)
          .addRange(0x1bba, 0x1be5)
          .addRange(0x1c00, 0x1c23)
          .addRange(0x1c4d, 0x1c4f)
          .addRange(0x1c5a, 0x1c77)
          .addRange(0x1ce9, 0x1cec)
          .addRange(0x1cee, 0x1cf1)
          .addRange(0x1cf5, 0x1cf6)
          .addRange(0x2135, 0x2138)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d80, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0x3041, 0x3096)
          .addRange(0x30a1, 0x30fa)
          .addRange(0x3105, 0x312e)
          .addRange(0x3131, 0x318e)
          .addRange(0x31a0, 0x31ba)
          .addRange(0x31f0, 0x31ff)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xa000, 0xa014)
          .addRange(0xa016, 0xa48c)
          .addRange(0xa4d0, 0xa4f7)
          .addRange(0xa500, 0xa60b)
          .addRange(0xa610, 0xa61f)
          .addRange(0xa62a, 0xa62b)
          .addRange(0xa6a0, 0xa6e5)
          .addRange(0xa7fb, 0xa801)
          .addRange(0xa803, 0xa805)
          .addRange(0xa807, 0xa80a)
          .addRange(0xa80c, 0xa822)
          .addRange(0xa840, 0xa873)
          .addRange(0xa882, 0xa8b3)
          .addRange(0xa8f2, 0xa8f7)
          .addRange(0xa90a, 0xa925)
          .addRange(0xa930, 0xa946)
          .addRange(0xa960, 0xa97c)
          .addRange(0xa984, 0xa9b2)
          .addRange(0xa9e0, 0xa9e4)
          .addRange(0xa9e7, 0xa9ef)
          .addRange(0xa9fa, 0xa9fe)
          .addRange(0xaa00, 0xaa28)
          .addRange(0xaa40, 0xaa42)
          .addRange(0xaa44, 0xaa4b)
          .addRange(0xaa60, 0xaa6f)
          .addRange(0xaa71, 0xaa76)
          .addRange(0xaa7e, 0xaaaf)
          .addRange(0xaab5, 0xaab6)
          .addRange(0xaab9, 0xaabd)
          .addRange(0xaadb, 0xaadc)
          .addRange(0xaae0, 0xaaea)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e)
          .addRange(0xabc0, 0xabe2)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfb1f, 0xfb28)
          .addRange(0xfb2a, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfbb1)
          .addRange(0xfbd3, 0xfd3d)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdfb)
          .addRange(0xfe70, 0xfe74)
          .addRange(0xfe76, 0xfefc)
          .addRange(0xff66, 0xff6f)
          .addRange(0xff71, 0xff9d)
          .addRange(0xffa0, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc)
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa)
          .addRange(0x10280, 0x1029c)
          .addRange(0x102a0, 0x102d0)
          .addRange(0x10300, 0x1031f)
          .addRange(0x1032d, 0x10340)
          .addRange(0x10342, 0x10349)
          .addRange(0x10350, 0x10375)
          .addRange(0x10380, 0x1039d)
          .addRange(0x103a0, 0x103c3)
          .addRange(0x103c8, 0x103cf)
          .addRange(0x10450, 0x1049d)
          .addRange(0x10500, 0x10527)
          .addRange(0x10530, 0x10563)
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838)
          .addRange(0x1083f, 0x10855)
          .addRange(0x10860, 0x10876)
          .addRange(0x10880, 0x1089e)
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x10900, 0x10915)
          .addRange(0x10920, 0x10939)
          .addRange(0x10980, 0x109b7)
          .addRange(0x109be, 0x109bf)
          .addRange(0x10a10, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a60, 0x10a7c)
          .addRange(0x10a80, 0x10a9c)
          .addRange(0x10ac0, 0x10ac7)
          .addRange(0x10ac9, 0x10ae4)
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b40, 0x10b55)
          .addRange(0x10b60, 0x10b72)
          .addRange(0x10b80, 0x10b91)
          .addRange(0x10c00, 0x10c48)
          .addRange(0x11003, 0x11037)
          .addRange(0x11083, 0x110af)
          .addRange(0x110d0, 0x110e8)
          .addRange(0x11103, 0x11126)
          .addRange(0x11150, 0x11172)
          .addRange(0x11183, 0x111b2)
          .addRange(0x111c1, 0x111c4)
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x1122b)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a8)
          .addRange(0x112b0, 0x112de)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x1135d, 0x11361)
          .addRange(0x11400, 0x11434)
          .addRange(0x11447, 0x1144a)
          .addRange(0x11480, 0x114af)
          .addRange(0x114c4, 0x114c5)
          .addRange(0x11580, 0x115ae)
          .addRange(0x115d8, 0x115db)
          .addRange(0x11600, 0x1162f)
          .addRange(0x11680, 0x116aa)
          .addRange(0x11700, 0x11719)
          .addRange(0x11a0b, 0x11a32)
          .addRange(0x11a5c, 0x11a83)
          .addRange(0x11a86, 0x11a89)
          .addRange(0x11ac0, 0x11af8)
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c2e)
          .addRange(0x11c72, 0x11c8f)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d30)
          .addRange(0x12000, 0x12399)
          .addRange(0x12480, 0x12543)
          .addRange(0x13000, 0x1342e)
          .addRange(0x14400, 0x14646)
          .addRange(0x16800, 0x16a38)
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16b00, 0x16b2f)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f)
          .addRange(0x16f00, 0x16f44)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2)
          .addRange(0x1b000, 0x1b11e)
          .addRange(0x1b170, 0x1b2fb)
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d);

        /***/
      },
      /* 634 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xb9,
          0x19da,
          0x2070,
          0x2189,
          0x2cfd
        )
          .addRange(0xb2, 0xb3)
          .addRange(0xbc, 0xbe)
          .addRange(0x9f4, 0x9f9)
          .addRange(0xb72, 0xb77)
          .addRange(0xbf0, 0xbf2)
          .addRange(0xc78, 0xc7e)
          .addRange(0xd58, 0xd5e)
          .addRange(0xd70, 0xd78)
          .addRange(0xf2a, 0xf33)
          .addRange(0x1369, 0x137c)
          .addRange(0x17f0, 0x17f9)
          .addRange(0x2074, 0x2079)
          .addRange(0x2080, 0x2089)
          .addRange(0x2150, 0x215f)
          .addRange(0x2460, 0x249b)
          .addRange(0x24ea, 0x24ff)
          .addRange(0x2776, 0x2793)
          .addRange(0x3192, 0x3195)
          .addRange(0x3220, 0x3229)
          .addRange(0x3248, 0x324f)
          .addRange(0x3251, 0x325f)
          .addRange(0x3280, 0x3289)
          .addRange(0x32b1, 0x32bf)
          .addRange(0xa830, 0xa835)
          .addRange(0x10107, 0x10133)
          .addRange(0x10175, 0x10178)
          .addRange(0x1018a, 0x1018b)
          .addRange(0x102e1, 0x102fb)
          .addRange(0x10320, 0x10323)
          .addRange(0x10858, 0x1085f)
          .addRange(0x10879, 0x1087f)
          .addRange(0x108a7, 0x108af)
          .addRange(0x108fb, 0x108ff)
          .addRange(0x10916, 0x1091b)
          .addRange(0x109bc, 0x109bd)
          .addRange(0x109c0, 0x109cf)
          .addRange(0x109d2, 0x109ff)
          .addRange(0x10a40, 0x10a47)
          .addRange(0x10a7d, 0x10a7e)
          .addRange(0x10a9d, 0x10a9f)
          .addRange(0x10aeb, 0x10aef)
          .addRange(0x10b58, 0x10b5f)
          .addRange(0x10b78, 0x10b7f)
          .addRange(0x10ba9, 0x10baf)
          .addRange(0x10cfa, 0x10cff)
          .addRange(0x10e60, 0x10e7e)
          .addRange(0x11052, 0x11065)
          .addRange(0x111e1, 0x111f4)
          .addRange(0x1173a, 0x1173b)
          .addRange(0x118ea, 0x118f2)
          .addRange(0x11c5a, 0x11c6c)
          .addRange(0x16b5b, 0x16b61)
          .addRange(0x1d360, 0x1d371)
          .addRange(0x1e8c7, 0x1e8cf)
          .addRange(0x1f100, 0x1f10c);

        /***/
      },
      /* 635 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x2a,
          0x2c,
          0x5c,
          0xa1,
          0xa7,
          0xbf,
          0x37e,
          0x387,
          0x589,
          0x5c0,
          0x5c3,
          0x5c6,
          0x61b,
          0x6d4,
          0x85e,
          0x970,
          0x9fd,
          0xaf0,
          0xdf4,
          0xe4f,
          0xf14,
          0xf85,
          0x10fb,
          0x1cd3,
          0x2053,
          0x2d70,
          0x2e0b,
          0x2e1b,
          0x2e41,
          0x303d,
          0x30fb,
          0xa673,
          0xa67e,
          0xa8fc,
          0xa95f,
          0xabeb,
          0xfe19,
          0xfe30,
          0xfe68,
          0xff0a,
          0xff0c,
          0xff3c,
          0xff61,
          0x1039f,
          0x103d0,
          0x1056f,
          0x10857,
          0x1091f,
          0x1093f,
          0x10a7f,
          0x111cd,
          0x111db,
          0x112a9,
          0x1145b,
          0x1145d,
          0x114c6,
          0x16af5,
          0x16b44,
          0x1bc9f
        )
          .addRange(0x21, 0x23)
          .addRange(0x25, 0x27)
          .addRange(0x2e, 0x2f)
          .addRange(0x3a, 0x3b)
          .addRange(0x3f, 0x40)
          .addRange(0xb6, 0xb7)
          .addRange(0x55a, 0x55f)
          .addRange(0x5f3, 0x5f4)
          .addRange(0x609, 0x60a)
          .addRange(0x60c, 0x60d)
          .addRange(0x61e, 0x61f)
          .addRange(0x66a, 0x66d)
          .addRange(0x700, 0x70d)
          .addRange(0x7f7, 0x7f9)
          .addRange(0x830, 0x83e)
          .addRange(0x964, 0x965)
          .addRange(0xe5a, 0xe5b)
          .addRange(0xf04, 0xf12)
          .addRange(0xfd0, 0xfd4)
          .addRange(0xfd9, 0xfda)
          .addRange(0x104a, 0x104f)
          .addRange(0x1360, 0x1368)
          .addRange(0x166d, 0x166e)
          .addRange(0x16eb, 0x16ed)
          .addRange(0x1735, 0x1736)
          .addRange(0x17d4, 0x17d6)
          .addRange(0x17d8, 0x17da)
          .addRange(0x1800, 0x1805)
          .addRange(0x1807, 0x180a)
          .addRange(0x1944, 0x1945)
          .addRange(0x1a1e, 0x1a1f)
          .addRange(0x1aa0, 0x1aa6)
          .addRange(0x1aa8, 0x1aad)
          .addRange(0x1b5a, 0x1b60)
          .addRange(0x1bfc, 0x1bff)
          .addRange(0x1c3b, 0x1c3f)
          .addRange(0x1c7e, 0x1c7f)
          .addRange(0x1cc0, 0x1cc7)
          .addRange(0x2016, 0x2017)
          .addRange(0x2020, 0x2027)
          .addRange(0x2030, 0x2038)
          .addRange(0x203b, 0x203e)
          .addRange(0x2041, 0x2043)
          .addRange(0x2047, 0x2051)
          .addRange(0x2055, 0x205e)
          .addRange(0x2cf9, 0x2cfc)
          .addRange(0x2cfe, 0x2cff)
          .addRange(0x2e00, 0x2e01)
          .addRange(0x2e06, 0x2e08)
          .addRange(0x2e0e, 0x2e16)
          .addRange(0x2e18, 0x2e19)
          .addRange(0x2e1e, 0x2e1f)
          .addRange(0x2e2a, 0x2e2e)
          .addRange(0x2e30, 0x2e39)
          .addRange(0x2e3c, 0x2e3f)
          .addRange(0x2e43, 0x2e49)
          .addRange(0x3001, 0x3003)
          .addRange(0xa4fe, 0xa4ff)
          .addRange(0xa60d, 0xa60f)
          .addRange(0xa6f2, 0xa6f7)
          .addRange(0xa874, 0xa877)
          .addRange(0xa8ce, 0xa8cf)
          .addRange(0xa8f8, 0xa8fa)
          .addRange(0xa92e, 0xa92f)
          .addRange(0xa9c1, 0xa9cd)
          .addRange(0xa9de, 0xa9df)
          .addRange(0xaa5c, 0xaa5f)
          .addRange(0xaade, 0xaadf)
          .addRange(0xaaf0, 0xaaf1)
          .addRange(0xfe10, 0xfe16)
          .addRange(0xfe45, 0xfe46)
          .addRange(0xfe49, 0xfe4c)
          .addRange(0xfe50, 0xfe52)
          .addRange(0xfe54, 0xfe57)
          .addRange(0xfe5f, 0xfe61)
          .addRange(0xfe6a, 0xfe6b)
          .addRange(0xff01, 0xff03)
          .addRange(0xff05, 0xff07)
          .addRange(0xff0e, 0xff0f)
          .addRange(0xff1a, 0xff1b)
          .addRange(0xff1f, 0xff20)
          .addRange(0xff64, 0xff65)
          .addRange(0x10100, 0x10102)
          .addRange(0x10a50, 0x10a58)
          .addRange(0x10af0, 0x10af6)
          .addRange(0x10b39, 0x10b3f)
          .addRange(0x10b99, 0x10b9c)
          .addRange(0x11047, 0x1104d)
          .addRange(0x110bb, 0x110bc)
          .addRange(0x110be, 0x110c1)
          .addRange(0x11140, 0x11143)
          .addRange(0x11174, 0x11175)
          .addRange(0x111c5, 0x111c9)
          .addRange(0x111dd, 0x111df)
          .addRange(0x11238, 0x1123d)
          .addRange(0x1144b, 0x1144f)
          .addRange(0x115c1, 0x115d7)
          .addRange(0x11641, 0x11643)
          .addRange(0x11660, 0x1166c)
          .addRange(0x1173c, 0x1173e)
          .addRange(0x11a3f, 0x11a46)
          .addRange(0x11a9a, 0x11a9c)
          .addRange(0x11a9e, 0x11aa2)
          .addRange(0x11c41, 0x11c45)
          .addRange(0x11c70, 0x11c71)
          .addRange(0x12470, 0x12474)
          .addRange(0x16a6e, 0x16a6f)
          .addRange(0x16b37, 0x16b3b)
          .addRange(0x1da87, 0x1da8b)
          .addRange(0x1e95e, 0x1e95f);

        /***/
      },
      /* 636 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xa6,
          0xa9,
          0xae,
          0xb0,
          0x482,
          0x6de,
          0x6e9,
          0x7f6,
          0x9fa,
          0xb70,
          0xbfa,
          0xc7f,
          0xd4f,
          0xd79,
          0xf13,
          0xf34,
          0xf36,
          0xf38,
          0x1940,
          0x2114,
          0x2125,
          0x2127,
          0x2129,
          0x212e,
          0x214a,
          0x214f,
          0x21d3,
          0x3004,
          0x3020,
          0x3250,
          0xa839,
          0xfdfd,
          0xffe4,
          0xffe8,
          0x101a0,
          0x10ac8,
          0x1173f,
          0x16b45,
          0x1bc9c,
          0x1d245,
          0x1f9c0
        )
          .addRange(0x58d, 0x58e)
          .addRange(0x60e, 0x60f)
          .addRange(0x6fd, 0x6fe)
          .addRange(0xbf3, 0xbf8)
          .addRange(0xf01, 0xf03)
          .addRange(0xf15, 0xf17)
          .addRange(0xf1a, 0xf1f)
          .addRange(0xfbe, 0xfc5)
          .addRange(0xfc7, 0xfcc)
          .addRange(0xfce, 0xfcf)
          .addRange(0xfd5, 0xfd8)
          .addRange(0x109e, 0x109f)
          .addRange(0x1390, 0x1399)
          .addRange(0x19de, 0x19ff)
          .addRange(0x1b61, 0x1b6a)
          .addRange(0x1b74, 0x1b7c)
          .addRange(0x2100, 0x2101)
          .addRange(0x2103, 0x2106)
          .addRange(0x2108, 0x2109)
          .addRange(0x2116, 0x2117)
          .addRange(0x211e, 0x2123)
          .addRange(0x213a, 0x213b)
          .addRange(0x214c, 0x214d)
          .addRange(0x218a, 0x218b)
          .addRange(0x2195, 0x2199)
          .addRange(0x219c, 0x219f)
          .addRange(0x21a1, 0x21a2)
          .addRange(0x21a4, 0x21a5)
          .addRange(0x21a7, 0x21ad)
          .addRange(0x21af, 0x21cd)
          .addRange(0x21d0, 0x21d1)
          .addRange(0x21d5, 0x21f3)
          .addRange(0x2300, 0x2307)
          .addRange(0x230c, 0x231f)
          .addRange(0x2322, 0x2328)
          .addRange(0x232b, 0x237b)
          .addRange(0x237d, 0x239a)
          .addRange(0x23b4, 0x23db)
          .addRange(0x23e2, 0x2426)
          .addRange(0x2440, 0x244a)
          .addRange(0x249c, 0x24e9)
          .addRange(0x2500, 0x25b6)
          .addRange(0x25b8, 0x25c0)
          .addRange(0x25c2, 0x25f7)
          .addRange(0x2600, 0x266e)
          .addRange(0x2670, 0x2767)
          .addRange(0x2794, 0x27bf)
          .addRange(0x2800, 0x28ff)
          .addRange(0x2b00, 0x2b2f)
          .addRange(0x2b45, 0x2b46)
          .addRange(0x2b4d, 0x2b73)
          .addRange(0x2b76, 0x2b95)
          .addRange(0x2b98, 0x2bb9)
          .addRange(0x2bbd, 0x2bc8)
          .addRange(0x2bca, 0x2bd2)
          .addRange(0x2bec, 0x2bef)
          .addRange(0x2ce5, 0x2cea)
          .addRange(0x2e80, 0x2e99)
          .addRange(0x2e9b, 0x2ef3)
          .addRange(0x2f00, 0x2fd5)
          .addRange(0x2ff0, 0x2ffb)
          .addRange(0x3012, 0x3013)
          .addRange(0x3036, 0x3037)
          .addRange(0x303e, 0x303f)
          .addRange(0x3190, 0x3191)
          .addRange(0x3196, 0x319f)
          .addRange(0x31c0, 0x31e3)
          .addRange(0x3200, 0x321e)
          .addRange(0x322a, 0x3247)
          .addRange(0x3260, 0x327f)
          .addRange(0x328a, 0x32b0)
          .addRange(0x32c0, 0x32fe)
          .addRange(0x3300, 0x33ff)
          .addRange(0x4dc0, 0x4dff)
          .addRange(0xa490, 0xa4c6)
          .addRange(0xa828, 0xa82b)
          .addRange(0xa836, 0xa837)
          .addRange(0xaa77, 0xaa79)
          .addRange(0xffed, 0xffee)
          .addRange(0xfffc, 0xfffd)
          .addRange(0x10137, 0x1013f)
          .addRange(0x10179, 0x10189)
          .addRange(0x1018c, 0x1018e)
          .addRange(0x10190, 0x1019b)
          .addRange(0x101d0, 0x101fc)
          .addRange(0x10877, 0x10878)
          .addRange(0x16b3c, 0x16b3f)
          .addRange(0x1d000, 0x1d0f5)
          .addRange(0x1d100, 0x1d126)
          .addRange(0x1d129, 0x1d164)
          .addRange(0x1d16a, 0x1d16c)
          .addRange(0x1d183, 0x1d184)
          .addRange(0x1d18c, 0x1d1a9)
          .addRange(0x1d1ae, 0x1d1e8)
          .addRange(0x1d200, 0x1d241)
          .addRange(0x1d300, 0x1d356)
          .addRange(0x1d800, 0x1d9ff)
          .addRange(0x1da37, 0x1da3a)
          .addRange(0x1da6d, 0x1da74)
          .addRange(0x1da76, 0x1da83)
          .addRange(0x1da85, 0x1da86)
          .addRange(0x1f000, 0x1f02b)
          .addRange(0x1f030, 0x1f093)
          .addRange(0x1f0a0, 0x1f0ae)
          .addRange(0x1f0b1, 0x1f0bf)
          .addRange(0x1f0c1, 0x1f0cf)
          .addRange(0x1f0d1, 0x1f0f5)
          .addRange(0x1f110, 0x1f12e)
          .addRange(0x1f130, 0x1f16b)
          .addRange(0x1f170, 0x1f1ac)
          .addRange(0x1f1e6, 0x1f202)
          .addRange(0x1f210, 0x1f23b)
          .addRange(0x1f240, 0x1f248)
          .addRange(0x1f250, 0x1f251)
          .addRange(0x1f260, 0x1f265)
          .addRange(0x1f300, 0x1f3fa)
          .addRange(0x1f400, 0x1f6d4)
          .addRange(0x1f6e0, 0x1f6ec)
          .addRange(0x1f6f0, 0x1f6f8)
          .addRange(0x1f700, 0x1f773)
          .addRange(0x1f780, 0x1f7d4)
          .addRange(0x1f800, 0x1f80b)
          .addRange(0x1f810, 0x1f847)
          .addRange(0x1f850, 0x1f859)
          .addRange(0x1f860, 0x1f887)
          .addRange(0x1f890, 0x1f8ad)
          .addRange(0x1f900, 0x1f90b)
          .addRange(0x1f910, 0x1f93e)
          .addRange(0x1f940, 0x1f94c)
          .addRange(0x1f950, 0x1f96b)
          .addRange(0x1f980, 0x1f997)
          .addRange(0x1f9d0, 0x1f9e6);

        /***/
      },
      /* 637 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x2029);

        /***/
      },
      /* 638 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xe000, 0xf8ff)
          .addRange(0xf0000, 0xffffd)
          .addRange(0x100000, 0x10fffd);

        /***/
      },
      /* 639 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x5f,
          0x7b,
          0x7d,
          0xa1,
          0xa7,
          0xab,
          0xbb,
          0xbf,
          0x37e,
          0x387,
          0x5be,
          0x5c0,
          0x5c3,
          0x5c6,
          0x61b,
          0x6d4,
          0x85e,
          0x970,
          0x9fd,
          0xaf0,
          0xdf4,
          0xe4f,
          0xf14,
          0xf85,
          0x10fb,
          0x1400,
          0x1cd3,
          0x2d70,
          0x3030,
          0x303d,
          0x30a0,
          0x30fb,
          0xa673,
          0xa67e,
          0xa8fc,
          0xa95f,
          0xabeb,
          0xfe63,
          0xfe68,
          0xff3f,
          0xff5b,
          0xff5d,
          0x1039f,
          0x103d0,
          0x1056f,
          0x10857,
          0x1091f,
          0x1093f,
          0x10a7f,
          0x111cd,
          0x111db,
          0x112a9,
          0x1145b,
          0x1145d,
          0x114c6,
          0x16af5,
          0x16b44,
          0x1bc9f
        )
          .addRange(0x21, 0x23)
          .addRange(0x25, 0x2a)
          .addRange(0x2c, 0x2f)
          .addRange(0x3a, 0x3b)
          .addRange(0x3f, 0x40)
          .addRange(0x5b, 0x5d)
          .addRange(0xb6, 0xb7)
          .addRange(0x55a, 0x55f)
          .addRange(0x589, 0x58a)
          .addRange(0x5f3, 0x5f4)
          .addRange(0x609, 0x60a)
          .addRange(0x60c, 0x60d)
          .addRange(0x61e, 0x61f)
          .addRange(0x66a, 0x66d)
          .addRange(0x700, 0x70d)
          .addRange(0x7f7, 0x7f9)
          .addRange(0x830, 0x83e)
          .addRange(0x964, 0x965)
          .addRange(0xe5a, 0xe5b)
          .addRange(0xf04, 0xf12)
          .addRange(0xf3a, 0xf3d)
          .addRange(0xfd0, 0xfd4)
          .addRange(0xfd9, 0xfda)
          .addRange(0x104a, 0x104f)
          .addRange(0x1360, 0x1368)
          .addRange(0x166d, 0x166e)
          .addRange(0x169b, 0x169c)
          .addRange(0x16eb, 0x16ed)
          .addRange(0x1735, 0x1736)
          .addRange(0x17d4, 0x17d6)
          .addRange(0x17d8, 0x17da)
          .addRange(0x1800, 0x180a)
          .addRange(0x1944, 0x1945)
          .addRange(0x1a1e, 0x1a1f)
          .addRange(0x1aa0, 0x1aa6)
          .addRange(0x1aa8, 0x1aad)
          .addRange(0x1b5a, 0x1b60)
          .addRange(0x1bfc, 0x1bff)
          .addRange(0x1c3b, 0x1c3f)
          .addRange(0x1c7e, 0x1c7f)
          .addRange(0x1cc0, 0x1cc7)
          .addRange(0x2010, 0x2027)
          .addRange(0x2030, 0x2043)
          .addRange(0x2045, 0x2051)
          .addRange(0x2053, 0x205e)
          .addRange(0x207d, 0x207e)
          .addRange(0x208d, 0x208e)
          .addRange(0x2308, 0x230b)
          .addRange(0x2329, 0x232a)
          .addRange(0x2768, 0x2775)
          .addRange(0x27c5, 0x27c6)
          .addRange(0x27e6, 0x27ef)
          .addRange(0x2983, 0x2998)
          .addRange(0x29d8, 0x29db)
          .addRange(0x29fc, 0x29fd)
          .addRange(0x2cf9, 0x2cfc)
          .addRange(0x2cfe, 0x2cff)
          .addRange(0x2e00, 0x2e2e)
          .addRange(0x2e30, 0x2e49)
          .addRange(0x3001, 0x3003)
          .addRange(0x3008, 0x3011)
          .addRange(0x3014, 0x301f)
          .addRange(0xa4fe, 0xa4ff)
          .addRange(0xa60d, 0xa60f)
          .addRange(0xa6f2, 0xa6f7)
          .addRange(0xa874, 0xa877)
          .addRange(0xa8ce, 0xa8cf)
          .addRange(0xa8f8, 0xa8fa)
          .addRange(0xa92e, 0xa92f)
          .addRange(0xa9c1, 0xa9cd)
          .addRange(0xa9de, 0xa9df)
          .addRange(0xaa5c, 0xaa5f)
          .addRange(0xaade, 0xaadf)
          .addRange(0xaaf0, 0xaaf1)
          .addRange(0xfd3e, 0xfd3f)
          .addRange(0xfe10, 0xfe19)
          .addRange(0xfe30, 0xfe52)
          .addRange(0xfe54, 0xfe61)
          .addRange(0xfe6a, 0xfe6b)
          .addRange(0xff01, 0xff03)
          .addRange(0xff05, 0xff0a)
          .addRange(0xff0c, 0xff0f)
          .addRange(0xff1a, 0xff1b)
          .addRange(0xff1f, 0xff20)
          .addRange(0xff3b, 0xff3d)
          .addRange(0xff5f, 0xff65)
          .addRange(0x10100, 0x10102)
          .addRange(0x10a50, 0x10a58)
          .addRange(0x10af0, 0x10af6)
          .addRange(0x10b39, 0x10b3f)
          .addRange(0x10b99, 0x10b9c)
          .addRange(0x11047, 0x1104d)
          .addRange(0x110bb, 0x110bc)
          .addRange(0x110be, 0x110c1)
          .addRange(0x11140, 0x11143)
          .addRange(0x11174, 0x11175)
          .addRange(0x111c5, 0x111c9)
          .addRange(0x111dd, 0x111df)
          .addRange(0x11238, 0x1123d)
          .addRange(0x1144b, 0x1144f)
          .addRange(0x115c1, 0x115d7)
          .addRange(0x11641, 0x11643)
          .addRange(0x11660, 0x1166c)
          .addRange(0x1173c, 0x1173e)
          .addRange(0x11a3f, 0x11a46)
          .addRange(0x11a9a, 0x11a9c)
          .addRange(0x11a9e, 0x11aa2)
          .addRange(0x11c41, 0x11c45)
          .addRange(0x11c70, 0x11c71)
          .addRange(0x12470, 0x12474)
          .addRange(0x16a6e, 0x16a6f)
          .addRange(0x16b37, 0x16b3b)
          .addRange(0x1da87, 0x1da8b)
          .addRange(0x1e95e, 0x1e95f);

        /***/
      },
      /* 640 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x20,
          0xa0,
          0x1680,
          0x202f,
          0x205f,
          0x3000
        )
          .addRange(0x2000, 0x200a)
          .addRange(0x2028, 0x2029);

        /***/
      },
      /* 641 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x20,
          0xa0,
          0x1680,
          0x202f,
          0x205f,
          0x3000
        ).addRange(0x2000, 0x200a);

        /***/
      },
      /* 642 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x903,
          0x93b,
          0x9d7,
          0xa03,
          0xa83,
          0xac9,
          0xb3e,
          0xb40,
          0xb57,
          0xbd7,
          0xcbe,
          0xd57,
          0xf7f,
          0x1031,
          0x1038,
          0x108f,
          0x17b6,
          0x1a55,
          0x1a57,
          0x1a61,
          0x1b04,
          0x1b35,
          0x1b3b,
          0x1b82,
          0x1ba1,
          0x1baa,
          0x1be7,
          0x1bee,
          0x1ce1,
          0x1cf7,
          0xa827,
          0xa983,
          0xaa4d,
          0xaa7b,
          0xaa7d,
          0xaaeb,
          0xaaf5,
          0xabec,
          0x11000,
          0x11002,
          0x11082,
          0x1112c,
          0x11182,
          0x11235,
          0x11357,
          0x11445,
          0x114b9,
          0x114c1,
          0x115be,
          0x1163e,
          0x116ac,
          0x116b6,
          0x11726,
          0x11a39,
          0x11a97,
          0x11c2f,
          0x11c3e,
          0x11ca9,
          0x11cb1,
          0x11cb4
        )
          .addRange(0x93e, 0x940)
          .addRange(0x949, 0x94c)
          .addRange(0x94e, 0x94f)
          .addRange(0x982, 0x983)
          .addRange(0x9be, 0x9c0)
          .addRange(0x9c7, 0x9c8)
          .addRange(0x9cb, 0x9cc)
          .addRange(0xa3e, 0xa40)
          .addRange(0xabe, 0xac0)
          .addRange(0xacb, 0xacc)
          .addRange(0xb02, 0xb03)
          .addRange(0xb47, 0xb48)
          .addRange(0xb4b, 0xb4c)
          .addRange(0xbbe, 0xbbf)
          .addRange(0xbc1, 0xbc2)
          .addRange(0xbc6, 0xbc8)
          .addRange(0xbca, 0xbcc)
          .addRange(0xc01, 0xc03)
          .addRange(0xc41, 0xc44)
          .addRange(0xc82, 0xc83)
          .addRange(0xcc0, 0xcc4)
          .addRange(0xcc7, 0xcc8)
          .addRange(0xcca, 0xccb)
          .addRange(0xcd5, 0xcd6)
          .addRange(0xd02, 0xd03)
          .addRange(0xd3e, 0xd40)
          .addRange(0xd46, 0xd48)
          .addRange(0xd4a, 0xd4c)
          .addRange(0xd82, 0xd83)
          .addRange(0xdcf, 0xdd1)
          .addRange(0xdd8, 0xddf)
          .addRange(0xdf2, 0xdf3)
          .addRange(0xf3e, 0xf3f)
          .addRange(0x102b, 0x102c)
          .addRange(0x103b, 0x103c)
          .addRange(0x1056, 0x1057)
          .addRange(0x1062, 0x1064)
          .addRange(0x1067, 0x106d)
          .addRange(0x1083, 0x1084)
          .addRange(0x1087, 0x108c)
          .addRange(0x109a, 0x109c)
          .addRange(0x17be, 0x17c5)
          .addRange(0x17c7, 0x17c8)
          .addRange(0x1923, 0x1926)
          .addRange(0x1929, 0x192b)
          .addRange(0x1930, 0x1931)
          .addRange(0x1933, 0x1938)
          .addRange(0x1a19, 0x1a1a)
          .addRange(0x1a63, 0x1a64)
          .addRange(0x1a6d, 0x1a72)
          .addRange(0x1b3d, 0x1b41)
          .addRange(0x1b43, 0x1b44)
          .addRange(0x1ba6, 0x1ba7)
          .addRange(0x1bea, 0x1bec)
          .addRange(0x1bf2, 0x1bf3)
          .addRange(0x1c24, 0x1c2b)
          .addRange(0x1c34, 0x1c35)
          .addRange(0x1cf2, 0x1cf3)
          .addRange(0x302e, 0x302f)
          .addRange(0xa823, 0xa824)
          .addRange(0xa880, 0xa881)
          .addRange(0xa8b4, 0xa8c3)
          .addRange(0xa952, 0xa953)
          .addRange(0xa9b4, 0xa9b5)
          .addRange(0xa9ba, 0xa9bb)
          .addRange(0xa9bd, 0xa9c0)
          .addRange(0xaa2f, 0xaa30)
          .addRange(0xaa33, 0xaa34)
          .addRange(0xaaee, 0xaaef)
          .addRange(0xabe3, 0xabe4)
          .addRange(0xabe6, 0xabe7)
          .addRange(0xabe9, 0xabea)
          .addRange(0x110b0, 0x110b2)
          .addRange(0x110b7, 0x110b8)
          .addRange(0x111b3, 0x111b5)
          .addRange(0x111bf, 0x111c0)
          .addRange(0x1122c, 0x1122e)
          .addRange(0x11232, 0x11233)
          .addRange(0x112e0, 0x112e2)
          .addRange(0x11302, 0x11303)
          .addRange(0x1133e, 0x1133f)
          .addRange(0x11341, 0x11344)
          .addRange(0x11347, 0x11348)
          .addRange(0x1134b, 0x1134d)
          .addRange(0x11362, 0x11363)
          .addRange(0x11435, 0x11437)
          .addRange(0x11440, 0x11441)
          .addRange(0x114b0, 0x114b2)
          .addRange(0x114bb, 0x114be)
          .addRange(0x115af, 0x115b1)
          .addRange(0x115b8, 0x115bb)
          .addRange(0x11630, 0x11632)
          .addRange(0x1163b, 0x1163c)
          .addRange(0x116ae, 0x116af)
          .addRange(0x11720, 0x11721)
          .addRange(0x11a07, 0x11a08)
          .addRange(0x11a57, 0x11a58)
          .addRange(0x16f51, 0x16f7e)
          .addRange(0x1d165, 0x1d166)
          .addRange(0x1d16d, 0x1d172);

        /***/
      },
      /* 643 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0xd800, 0xdfff);

        /***/
      },
      /* 644 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x24,
          0x2b,
          0x5e,
          0x60,
          0x7c,
          0x7e,
          0xac,
          0xb4,
          0xb8,
          0xd7,
          0xf7,
          0x2ed,
          0x375,
          0x3f6,
          0x482,
          0x60b,
          0x6de,
          0x6e9,
          0x7f6,
          0xaf1,
          0xb70,
          0xc7f,
          0xd4f,
          0xd79,
          0xe3f,
          0xf13,
          0xf34,
          0xf36,
          0xf38,
          0x17db,
          0x1940,
          0x1fbd,
          0x2044,
          0x2052,
          0x2114,
          0x2125,
          0x2127,
          0x2129,
          0x212e,
          0x214f,
          0x3004,
          0x3020,
          0x3250,
          0xab5b,
          0xfb29,
          0xfe62,
          0xfe69,
          0xff04,
          0xff0b,
          0xff3e,
          0xff40,
          0xff5c,
          0xff5e,
          0x101a0,
          0x10ac8,
          0x1173f,
          0x16b45,
          0x1bc9c,
          0x1d245,
          0x1d6c1,
          0x1d6db,
          0x1d6fb,
          0x1d715,
          0x1d735,
          0x1d74f,
          0x1d76f,
          0x1d789,
          0x1d7a9,
          0x1d7c3,
          0x1f9c0
        )
          .addRange(0x3c, 0x3e)
          .addRange(0xa2, 0xa6)
          .addRange(0xa8, 0xa9)
          .addRange(0xae, 0xb1)
          .addRange(0x2c2, 0x2c5)
          .addRange(0x2d2, 0x2df)
          .addRange(0x2e5, 0x2eb)
          .addRange(0x2ef, 0x2ff)
          .addRange(0x384, 0x385)
          .addRange(0x58d, 0x58f)
          .addRange(0x606, 0x608)
          .addRange(0x60e, 0x60f)
          .addRange(0x6fd, 0x6fe)
          .addRange(0x9f2, 0x9f3)
          .addRange(0x9fa, 0x9fb)
          .addRange(0xbf3, 0xbfa)
          .addRange(0xf01, 0xf03)
          .addRange(0xf15, 0xf17)
          .addRange(0xf1a, 0xf1f)
          .addRange(0xfbe, 0xfc5)
          .addRange(0xfc7, 0xfcc)
          .addRange(0xfce, 0xfcf)
          .addRange(0xfd5, 0xfd8)
          .addRange(0x109e, 0x109f)
          .addRange(0x1390, 0x1399)
          .addRange(0x19de, 0x19ff)
          .addRange(0x1b61, 0x1b6a)
          .addRange(0x1b74, 0x1b7c)
          .addRange(0x1fbf, 0x1fc1)
          .addRange(0x1fcd, 0x1fcf)
          .addRange(0x1fdd, 0x1fdf)
          .addRange(0x1fed, 0x1fef)
          .addRange(0x1ffd, 0x1ffe)
          .addRange(0x207a, 0x207c)
          .addRange(0x208a, 0x208c)
          .addRange(0x20a0, 0x20bf)
          .addRange(0x2100, 0x2101)
          .addRange(0x2103, 0x2106)
          .addRange(0x2108, 0x2109)
          .addRange(0x2116, 0x2118)
          .addRange(0x211e, 0x2123)
          .addRange(0x213a, 0x213b)
          .addRange(0x2140, 0x2144)
          .addRange(0x214a, 0x214d)
          .addRange(0x218a, 0x218b)
          .addRange(0x2190, 0x2307)
          .addRange(0x230c, 0x2328)
          .addRange(0x232b, 0x2426)
          .addRange(0x2440, 0x244a)
          .addRange(0x249c, 0x24e9)
          .addRange(0x2500, 0x2767)
          .addRange(0x2794, 0x27c4)
          .addRange(0x27c7, 0x27e5)
          .addRange(0x27f0, 0x2982)
          .addRange(0x2999, 0x29d7)
          .addRange(0x29dc, 0x29fb)
          .addRange(0x29fe, 0x2b73)
          .addRange(0x2b76, 0x2b95)
          .addRange(0x2b98, 0x2bb9)
          .addRange(0x2bbd, 0x2bc8)
          .addRange(0x2bca, 0x2bd2)
          .addRange(0x2bec, 0x2bef)
          .addRange(0x2ce5, 0x2cea)
          .addRange(0x2e80, 0x2e99)
          .addRange(0x2e9b, 0x2ef3)
          .addRange(0x2f00, 0x2fd5)
          .addRange(0x2ff0, 0x2ffb)
          .addRange(0x3012, 0x3013)
          .addRange(0x3036, 0x3037)
          .addRange(0x303e, 0x303f)
          .addRange(0x309b, 0x309c)
          .addRange(0x3190, 0x3191)
          .addRange(0x3196, 0x319f)
          .addRange(0x31c0, 0x31e3)
          .addRange(0x3200, 0x321e)
          .addRange(0x322a, 0x3247)
          .addRange(0x3260, 0x327f)
          .addRange(0x328a, 0x32b0)
          .addRange(0x32c0, 0x32fe)
          .addRange(0x3300, 0x33ff)
          .addRange(0x4dc0, 0x4dff)
          .addRange(0xa490, 0xa4c6)
          .addRange(0xa700, 0xa716)
          .addRange(0xa720, 0xa721)
          .addRange(0xa789, 0xa78a)
          .addRange(0xa828, 0xa82b)
          .addRange(0xa836, 0xa839)
          .addRange(0xaa77, 0xaa79)
          .addRange(0xfbb2, 0xfbc1)
          .addRange(0xfdfc, 0xfdfd)
          .addRange(0xfe64, 0xfe66)
          .addRange(0xff1c, 0xff1e)
          .addRange(0xffe0, 0xffe6)
          .addRange(0xffe8, 0xffee)
          .addRange(0xfffc, 0xfffd)
          .addRange(0x10137, 0x1013f)
          .addRange(0x10179, 0x10189)
          .addRange(0x1018c, 0x1018e)
          .addRange(0x10190, 0x1019b)
          .addRange(0x101d0, 0x101fc)
          .addRange(0x10877, 0x10878)
          .addRange(0x16b3c, 0x16b3f)
          .addRange(0x1d000, 0x1d0f5)
          .addRange(0x1d100, 0x1d126)
          .addRange(0x1d129, 0x1d164)
          .addRange(0x1d16a, 0x1d16c)
          .addRange(0x1d183, 0x1d184)
          .addRange(0x1d18c, 0x1d1a9)
          .addRange(0x1d1ae, 0x1d1e8)
          .addRange(0x1d200, 0x1d241)
          .addRange(0x1d300, 0x1d356)
          .addRange(0x1d800, 0x1d9ff)
          .addRange(0x1da37, 0x1da3a)
          .addRange(0x1da6d, 0x1da74)
          .addRange(0x1da76, 0x1da83)
          .addRange(0x1da85, 0x1da86)
          .addRange(0x1eef0, 0x1eef1)
          .addRange(0x1f000, 0x1f02b)
          .addRange(0x1f030, 0x1f093)
          .addRange(0x1f0a0, 0x1f0ae)
          .addRange(0x1f0b1, 0x1f0bf)
          .addRange(0x1f0c1, 0x1f0cf)
          .addRange(0x1f0d1, 0x1f0f5)
          .addRange(0x1f110, 0x1f12e)
          .addRange(0x1f130, 0x1f16b)
          .addRange(0x1f170, 0x1f1ac)
          .addRange(0x1f1e6, 0x1f202)
          .addRange(0x1f210, 0x1f23b)
          .addRange(0x1f240, 0x1f248)
          .addRange(0x1f250, 0x1f251)
          .addRange(0x1f260, 0x1f265)
          .addRange(0x1f300, 0x1f6d4)
          .addRange(0x1f6e0, 0x1f6ec)
          .addRange(0x1f6f0, 0x1f6f8)
          .addRange(0x1f700, 0x1f773)
          .addRange(0x1f780, 0x1f7d4)
          .addRange(0x1f800, 0x1f80b)
          .addRange(0x1f810, 0x1f847)
          .addRange(0x1f850, 0x1f859)
          .addRange(0x1f860, 0x1f887)
          .addRange(0x1f890, 0x1f8ad)
          .addRange(0x1f900, 0x1f90b)
          .addRange(0x1f910, 0x1f93e)
          .addRange(0x1f940, 0x1f94c)
          .addRange(0x1f950, 0x1f96b)
          .addRange(0x1f980, 0x1f997)
          .addRange(0x1f9d0, 0x1f9e6);

        /***/
      },
      /* 645 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x1c5,
          0x1c8,
          0x1cb,
          0x1f2,
          0x1fbc,
          0x1fcc,
          0x1ffc
        )
          .addRange(0x1f88, 0x1f8f)
          .addRange(0x1f98, 0x1f9f)
          .addRange(0x1fa8, 0x1faf);

        /***/
      },
      /* 646 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x38b,
          0x38d,
          0x3a2,
          0x530,
          0x560,
          0x588,
          0x590,
          0x61d,
          0x70e,
          0x83f,
          0x85f,
          0x8b5,
          0x984,
          0x9a9,
          0x9b1,
          0x9de,
          0xa04,
          0xa29,
          0xa31,
          0xa34,
          0xa37,
          0xa3d,
          0xa5d,
          0xa84,
          0xa8e,
          0xa92,
          0xaa9,
          0xab1,
          0xab4,
          0xac6,
          0xaca,
          0xb00,
          0xb04,
          0xb29,
          0xb31,
          0xb34,
          0xb5e,
          0xb84,
          0xb91,
          0xb9b,
          0xb9d,
          0xbc9,
          0xc04,
          0xc0d,
          0xc11,
          0xc29,
          0xc45,
          0xc49,
          0xc57,
          0xc84,
          0xc8d,
          0xc91,
          0xca9,
          0xcb4,
          0xcc5,
          0xcc9,
          0xcdf,
          0xcf0,
          0xd04,
          0xd0d,
          0xd11,
          0xd45,
          0xd49,
          0xd84,
          0xdb2,
          0xdbc,
          0xdd5,
          0xdd7,
          0xe83,
          0xe89,
          0xe98,
          0xea0,
          0xea4,
          0xea6,
          0xeac,
          0xeba,
          0xec5,
          0xec7,
          0xf48,
          0xf98,
          0xfbd,
          0xfcd,
          0x10c6,
          0x1249,
          0x1257,
          0x1259,
          0x1289,
          0x12b1,
          0x12bf,
          0x12c1,
          0x12d7,
          0x1311,
          0x170d,
          0x176d,
          0x1771,
          0x180f,
          0x191f,
          0x1a5f,
          0x1dfa,
          0x1f58,
          0x1f5a,
          0x1f5c,
          0x1f5e,
          0x1fb5,
          0x1fc5,
          0x1fdc,
          0x1ff5,
          0x1fff,
          0x2065,
          0x208f,
          0x2bc9,
          0x2c2f,
          0x2c5f,
          0x2d26,
          0x2da7,
          0x2daf,
          0x2db7,
          0x2dbf,
          0x2dc7,
          0x2dcf,
          0x2dd7,
          0x2ddf,
          0x2e9a,
          0x3040,
          0x318f,
          0x321f,
          0x32ff,
          0xa7af,
          0xa9ce,
          0xa9ff,
          0xab27,
          0xab2f,
          0xfb37,
          0xfb3d,
          0xfb3f,
          0xfb42,
          0xfb45,
          0xfe53,
          0xfe67,
          0xfe75,
          0xff00,
          0xffe7,
          0x1000c,
          0x10027,
          0x1003b,
          0x1003e,
          0x1018f,
          0x1039e,
          0x10809,
          0x10836,
          0x10856,
          0x108f3,
          0x10a04,
          0x10a14,
          0x10a18,
          0x11135,
          0x111e0,
          0x11212,
          0x11287,
          0x11289,
          0x1128e,
          0x1129e,
          0x11304,
          0x11329,
          0x11331,
          0x11334,
          0x1145a,
          0x1145c,
          0x11a9d,
          0x11c09,
          0x11c37,
          0x11ca8,
          0x11d07,
          0x11d0a,
          0x11d3b,
          0x11d3e,
          0x1246f,
          0x16a5f,
          0x16b5a,
          0x16b62,
          0x1d455,
          0x1d49d,
          0x1d4ad,
          0x1d4ba,
          0x1d4bc,
          0x1d4c4,
          0x1d506,
          0x1d515,
          0x1d51d,
          0x1d53a,
          0x1d53f,
          0x1d545,
          0x1d551,
          0x1daa0,
          0x1e007,
          0x1e022,
          0x1e025,
          0x1ee04,
          0x1ee20,
          0x1ee23,
          0x1ee28,
          0x1ee33,
          0x1ee38,
          0x1ee3a,
          0x1ee48,
          0x1ee4a,
          0x1ee4c,
          0x1ee50,
          0x1ee53,
          0x1ee58,
          0x1ee5a,
          0x1ee5c,
          0x1ee5e,
          0x1ee60,
          0x1ee63,
          0x1ee6b,
          0x1ee73,
          0x1ee78,
          0x1ee7d,
          0x1ee7f,
          0x1ee8a,
          0x1eea4,
          0x1eeaa,
          0x1f0c0,
          0x1f0d0,
          0x1f12f,
          0x1f93f
        )
          .addRange(0x378, 0x379)
          .addRange(0x380, 0x383)
          .addRange(0x557, 0x558)
          .addRange(0x58b, 0x58c)
          .addRange(0x5c8, 0x5cf)
          .addRange(0x5eb, 0x5ef)
          .addRange(0x5f5, 0x5ff)
          .addRange(0x74b, 0x74c)
          .addRange(0x7b2, 0x7bf)
          .addRange(0x7fb, 0x7ff)
          .addRange(0x82e, 0x82f)
          .addRange(0x85c, 0x85d)
          .addRange(0x86b, 0x89f)
          .addRange(0x8be, 0x8d3)
          .addRange(0x98d, 0x98e)
          .addRange(0x991, 0x992)
          .addRange(0x9b3, 0x9b5)
          .addRange(0x9ba, 0x9bb)
          .addRange(0x9c5, 0x9c6)
          .addRange(0x9c9, 0x9ca)
          .addRange(0x9cf, 0x9d6)
          .addRange(0x9d8, 0x9db)
          .addRange(0x9e4, 0x9e5)
          .addRange(0x9fe, 0xa00)
          .addRange(0xa0b, 0xa0e)
          .addRange(0xa11, 0xa12)
          .addRange(0xa3a, 0xa3b)
          .addRange(0xa43, 0xa46)
          .addRange(0xa49, 0xa4a)
          .addRange(0xa4e, 0xa50)
          .addRange(0xa52, 0xa58)
          .addRange(0xa5f, 0xa65)
          .addRange(0xa76, 0xa80)
          .addRange(0xaba, 0xabb)
          .addRange(0xace, 0xacf)
          .addRange(0xad1, 0xadf)
          .addRange(0xae4, 0xae5)
          .addRange(0xaf2, 0xaf8)
          .addRange(0xb0d, 0xb0e)
          .addRange(0xb11, 0xb12)
          .addRange(0xb3a, 0xb3b)
          .addRange(0xb45, 0xb46)
          .addRange(0xb49, 0xb4a)
          .addRange(0xb4e, 0xb55)
          .addRange(0xb58, 0xb5b)
          .addRange(0xb64, 0xb65)
          .addRange(0xb78, 0xb81)
          .addRange(0xb8b, 0xb8d)
          .addRange(0xb96, 0xb98)
          .addRange(0xba0, 0xba2)
          .addRange(0xba5, 0xba7)
          .addRange(0xbab, 0xbad)
          .addRange(0xbba, 0xbbd)
          .addRange(0xbc3, 0xbc5)
          .addRange(0xbce, 0xbcf)
          .addRange(0xbd1, 0xbd6)
          .addRange(0xbd8, 0xbe5)
          .addRange(0xbfb, 0xbff)
          .addRange(0xc3a, 0xc3c)
          .addRange(0xc4e, 0xc54)
          .addRange(0xc5b, 0xc5f)
          .addRange(0xc64, 0xc65)
          .addRange(0xc70, 0xc77)
          .addRange(0xcba, 0xcbb)
          .addRange(0xcce, 0xcd4)
          .addRange(0xcd7, 0xcdd)
          .addRange(0xce4, 0xce5)
          .addRange(0xcf3, 0xcff)
          .addRange(0xd50, 0xd53)
          .addRange(0xd64, 0xd65)
          .addRange(0xd80, 0xd81)
          .addRange(0xd97, 0xd99)
          .addRange(0xdbe, 0xdbf)
          .addRange(0xdc7, 0xdc9)
          .addRange(0xdcb, 0xdce)
          .addRange(0xde0, 0xde5)
          .addRange(0xdf0, 0xdf1)
          .addRange(0xdf5, 0xe00)
          .addRange(0xe3b, 0xe3e)
          .addRange(0xe5c, 0xe80)
          .addRange(0xe85, 0xe86)
          .addRange(0xe8b, 0xe8c)
          .addRange(0xe8e, 0xe93)
          .addRange(0xea8, 0xea9)
          .addRange(0xebe, 0xebf)
          .addRange(0xece, 0xecf)
          .addRange(0xeda, 0xedb)
          .addRange(0xee0, 0xeff)
          .addRange(0xf6d, 0xf70)
          .addRange(0xfdb, 0xfff)
          .addRange(0x10c8, 0x10cc)
          .addRange(0x10ce, 0x10cf)
          .addRange(0x124e, 0x124f)
          .addRange(0x125e, 0x125f)
          .addRange(0x128e, 0x128f)
          .addRange(0x12b6, 0x12b7)
          .addRange(0x12c6, 0x12c7)
          .addRange(0x1316, 0x1317)
          .addRange(0x135b, 0x135c)
          .addRange(0x137d, 0x137f)
          .addRange(0x139a, 0x139f)
          .addRange(0x13f6, 0x13f7)
          .addRange(0x13fe, 0x13ff)
          .addRange(0x169d, 0x169f)
          .addRange(0x16f9, 0x16ff)
          .addRange(0x1715, 0x171f)
          .addRange(0x1737, 0x173f)
          .addRange(0x1754, 0x175f)
          .addRange(0x1774, 0x177f)
          .addRange(0x17de, 0x17df)
          .addRange(0x17ea, 0x17ef)
          .addRange(0x17fa, 0x17ff)
          .addRange(0x181a, 0x181f)
          .addRange(0x1878, 0x187f)
          .addRange(0x18ab, 0x18af)
          .addRange(0x18f6, 0x18ff)
          .addRange(0x192c, 0x192f)
          .addRange(0x193c, 0x193f)
          .addRange(0x1941, 0x1943)
          .addRange(0x196e, 0x196f)
          .addRange(0x1975, 0x197f)
          .addRange(0x19ac, 0x19af)
          .addRange(0x19ca, 0x19cf)
          .addRange(0x19db, 0x19dd)
          .addRange(0x1a1c, 0x1a1d)
          .addRange(0x1a7d, 0x1a7e)
          .addRange(0x1a8a, 0x1a8f)
          .addRange(0x1a9a, 0x1a9f)
          .addRange(0x1aae, 0x1aaf)
          .addRange(0x1abf, 0x1aff)
          .addRange(0x1b4c, 0x1b4f)
          .addRange(0x1b7d, 0x1b7f)
          .addRange(0x1bf4, 0x1bfb)
          .addRange(0x1c38, 0x1c3a)
          .addRange(0x1c4a, 0x1c4c)
          .addRange(0x1c89, 0x1cbf)
          .addRange(0x1cc8, 0x1ccf)
          .addRange(0x1cfa, 0x1cff)
          .addRange(0x1f16, 0x1f17)
          .addRange(0x1f1e, 0x1f1f)
          .addRange(0x1f46, 0x1f47)
          .addRange(0x1f4e, 0x1f4f)
          .addRange(0x1f7e, 0x1f7f)
          .addRange(0x1fd4, 0x1fd5)
          .addRange(0x1ff0, 0x1ff1)
          .addRange(0x2072, 0x2073)
          .addRange(0x209d, 0x209f)
          .addRange(0x20c0, 0x20cf)
          .addRange(0x20f1, 0x20ff)
          .addRange(0x218c, 0x218f)
          .addRange(0x2427, 0x243f)
          .addRange(0x244b, 0x245f)
          .addRange(0x2b74, 0x2b75)
          .addRange(0x2b96, 0x2b97)
          .addRange(0x2bba, 0x2bbc)
          .addRange(0x2bd3, 0x2beb)
          .addRange(0x2bf0, 0x2bff)
          .addRange(0x2cf4, 0x2cf8)
          .addRange(0x2d28, 0x2d2c)
          .addRange(0x2d2e, 0x2d2f)
          .addRange(0x2d68, 0x2d6e)
          .addRange(0x2d71, 0x2d7e)
          .addRange(0x2d97, 0x2d9f)
          .addRange(0x2e4a, 0x2e7f)
          .addRange(0x2ef4, 0x2eff)
          .addRange(0x2fd6, 0x2fef)
          .addRange(0x2ffc, 0x2fff)
          .addRange(0x3097, 0x3098)
          .addRange(0x3100, 0x3104)
          .addRange(0x312f, 0x3130)
          .addRange(0x31bb, 0x31bf)
          .addRange(0x31e4, 0x31ef)
          .addRange(0x4db6, 0x4dbf)
          .addRange(0x9feb, 0x9fff)
          .addRange(0xa48d, 0xa48f)
          .addRange(0xa4c7, 0xa4cf)
          .addRange(0xa62c, 0xa63f)
          .addRange(0xa6f8, 0xa6ff)
          .addRange(0xa7b8, 0xa7f6)
          .addRange(0xa82c, 0xa82f)
          .addRange(0xa83a, 0xa83f)
          .addRange(0xa878, 0xa87f)
          .addRange(0xa8c6, 0xa8cd)
          .addRange(0xa8da, 0xa8df)
          .addRange(0xa8fe, 0xa8ff)
          .addRange(0xa954, 0xa95e)
          .addRange(0xa97d, 0xa97f)
          .addRange(0xa9da, 0xa9dd)
          .addRange(0xaa37, 0xaa3f)
          .addRange(0xaa4e, 0xaa4f)
          .addRange(0xaa5a, 0xaa5b)
          .addRange(0xaac3, 0xaada)
          .addRange(0xaaf7, 0xab00)
          .addRange(0xab07, 0xab08)
          .addRange(0xab0f, 0xab10)
          .addRange(0xab17, 0xab1f)
          .addRange(0xab66, 0xab6f)
          .addRange(0xabee, 0xabef)
          .addRange(0xabfa, 0xabff)
          .addRange(0xd7a4, 0xd7af)
          .addRange(0xd7c7, 0xd7ca)
          .addRange(0xd7fc, 0xd7ff)
          .addRange(0xfa6e, 0xfa6f)
          .addRange(0xfada, 0xfaff)
          .addRange(0xfb07, 0xfb12)
          .addRange(0xfb18, 0xfb1c)
          .addRange(0xfbc2, 0xfbd2)
          .addRange(0xfd40, 0xfd4f)
          .addRange(0xfd90, 0xfd91)
          .addRange(0xfdc8, 0xfdef)
          .addRange(0xfdfe, 0xfdff)
          .addRange(0xfe1a, 0xfe1f)
          .addRange(0xfe6c, 0xfe6f)
          .addRange(0xfefd, 0xfefe)
          .addRange(0xffbf, 0xffc1)
          .addRange(0xffc8, 0xffc9)
          .addRange(0xffd0, 0xffd1)
          .addRange(0xffd8, 0xffd9)
          .addRange(0xffdd, 0xffdf)
          .addRange(0xffef, 0xfff8)
          .addRange(0xfffe, 0xffff)
          .addRange(0x1004e, 0x1004f)
          .addRange(0x1005e, 0x1007f)
          .addRange(0x100fb, 0x100ff)
          .addRange(0x10103, 0x10106)
          .addRange(0x10134, 0x10136)
          .addRange(0x1019c, 0x1019f)
          .addRange(0x101a1, 0x101cf)
          .addRange(0x101fe, 0x1027f)
          .addRange(0x1029d, 0x1029f)
          .addRange(0x102d1, 0x102df)
          .addRange(0x102fc, 0x102ff)
          .addRange(0x10324, 0x1032c)
          .addRange(0x1034b, 0x1034f)
          .addRange(0x1037b, 0x1037f)
          .addRange(0x103c4, 0x103c7)
          .addRange(0x103d6, 0x103ff)
          .addRange(0x1049e, 0x1049f)
          .addRange(0x104aa, 0x104af)
          .addRange(0x104d4, 0x104d7)
          .addRange(0x104fc, 0x104ff)
          .addRange(0x10528, 0x1052f)
          .addRange(0x10564, 0x1056e)
          .addRange(0x10570, 0x105ff)
          .addRange(0x10737, 0x1073f)
          .addRange(0x10756, 0x1075f)
          .addRange(0x10768, 0x107ff)
          .addRange(0x10806, 0x10807)
          .addRange(0x10839, 0x1083b)
          .addRange(0x1083d, 0x1083e)
          .addRange(0x1089f, 0x108a6)
          .addRange(0x108b0, 0x108df)
          .addRange(0x108f6, 0x108fa)
          .addRange(0x1091c, 0x1091e)
          .addRange(0x1093a, 0x1093e)
          .addRange(0x10940, 0x1097f)
          .addRange(0x109b8, 0x109bb)
          .addRange(0x109d0, 0x109d1)
          .addRange(0x10a07, 0x10a0b)
          .addRange(0x10a34, 0x10a37)
          .addRange(0x10a3b, 0x10a3e)
          .addRange(0x10a48, 0x10a4f)
          .addRange(0x10a59, 0x10a5f)
          .addRange(0x10aa0, 0x10abf)
          .addRange(0x10ae7, 0x10aea)
          .addRange(0x10af7, 0x10aff)
          .addRange(0x10b36, 0x10b38)
          .addRange(0x10b56, 0x10b57)
          .addRange(0x10b73, 0x10b77)
          .addRange(0x10b92, 0x10b98)
          .addRange(0x10b9d, 0x10ba8)
          .addRange(0x10bb0, 0x10bff)
          .addRange(0x10c49, 0x10c7f)
          .addRange(0x10cb3, 0x10cbf)
          .addRange(0x10cf3, 0x10cf9)
          .addRange(0x10d00, 0x10e5f)
          .addRange(0x10e7f, 0x10fff)
          .addRange(0x1104e, 0x11051)
          .addRange(0x11070, 0x1107e)
          .addRange(0x110c2, 0x110cf)
          .addRange(0x110e9, 0x110ef)
          .addRange(0x110fa, 0x110ff)
          .addRange(0x11144, 0x1114f)
          .addRange(0x11177, 0x1117f)
          .addRange(0x111ce, 0x111cf)
          .addRange(0x111f5, 0x111ff)
          .addRange(0x1123f, 0x1127f)
          .addRange(0x112aa, 0x112af)
          .addRange(0x112eb, 0x112ef)
          .addRange(0x112fa, 0x112ff)
          .addRange(0x1130d, 0x1130e)
          .addRange(0x11311, 0x11312)
          .addRange(0x1133a, 0x1133b)
          .addRange(0x11345, 0x11346)
          .addRange(0x11349, 0x1134a)
          .addRange(0x1134e, 0x1134f)
          .addRange(0x11351, 0x11356)
          .addRange(0x11358, 0x1135c)
          .addRange(0x11364, 0x11365)
          .addRange(0x1136d, 0x1136f)
          .addRange(0x11375, 0x113ff)
          .addRange(0x1145e, 0x1147f)
          .addRange(0x114c8, 0x114cf)
          .addRange(0x114da, 0x1157f)
          .addRange(0x115b6, 0x115b7)
          .addRange(0x115de, 0x115ff)
          .addRange(0x11645, 0x1164f)
          .addRange(0x1165a, 0x1165f)
          .addRange(0x1166d, 0x1167f)
          .addRange(0x116b8, 0x116bf)
          .addRange(0x116ca, 0x116ff)
          .addRange(0x1171a, 0x1171c)
          .addRange(0x1172c, 0x1172f)
          .addRange(0x11740, 0x1189f)
          .addRange(0x118f3, 0x118fe)
          .addRange(0x11900, 0x119ff)
          .addRange(0x11a48, 0x11a4f)
          .addRange(0x11a84, 0x11a85)
          .addRange(0x11aa3, 0x11abf)
          .addRange(0x11af9, 0x11bff)
          .addRange(0x11c46, 0x11c4f)
          .addRange(0x11c6d, 0x11c6f)
          .addRange(0x11c90, 0x11c91)
          .addRange(0x11cb7, 0x11cff)
          .addRange(0x11d37, 0x11d39)
          .addRange(0x11d48, 0x11d4f)
          .addRange(0x11d5a, 0x11fff)
          .addRange(0x1239a, 0x123ff)
          .addRange(0x12475, 0x1247f)
          .addRange(0x12544, 0x12fff)
          .addRange(0x1342f, 0x143ff)
          .addRange(0x14647, 0x167ff)
          .addRange(0x16a39, 0x16a3f)
          .addRange(0x16a6a, 0x16a6d)
          .addRange(0x16a70, 0x16acf)
          .addRange(0x16aee, 0x16aef)
          .addRange(0x16af6, 0x16aff)
          .addRange(0x16b46, 0x16b4f)
          .addRange(0x16b78, 0x16b7c)
          .addRange(0x16b90, 0x16eff)
          .addRange(0x16f45, 0x16f4f)
          .addRange(0x16f7f, 0x16f8e)
          .addRange(0x16fa0, 0x16fdf)
          .addRange(0x16fe2, 0x16fff)
          .addRange(0x187ed, 0x187ff)
          .addRange(0x18af3, 0x1afff)
          .addRange(0x1b11f, 0x1b16f)
          .addRange(0x1b2fc, 0x1bbff)
          .addRange(0x1bc6b, 0x1bc6f)
          .addRange(0x1bc7d, 0x1bc7f)
          .addRange(0x1bc89, 0x1bc8f)
          .addRange(0x1bc9a, 0x1bc9b)
          .addRange(0x1bca4, 0x1cfff)
          .addRange(0x1d0f6, 0x1d0ff)
          .addRange(0x1d127, 0x1d128)
          .addRange(0x1d1e9, 0x1d1ff)
          .addRange(0x1d246, 0x1d2ff)
          .addRange(0x1d357, 0x1d35f)
          .addRange(0x1d372, 0x1d3ff)
          .addRange(0x1d4a0, 0x1d4a1)
          .addRange(0x1d4a3, 0x1d4a4)
          .addRange(0x1d4a7, 0x1d4a8)
          .addRange(0x1d50b, 0x1d50c)
          .addRange(0x1d547, 0x1d549)
          .addRange(0x1d6a6, 0x1d6a7)
          .addRange(0x1d7cc, 0x1d7cd)
          .addRange(0x1da8c, 0x1da9a)
          .addRange(0x1dab0, 0x1dfff)
          .addRange(0x1e019, 0x1e01a)
          .addRange(0x1e02b, 0x1e7ff)
          .addRange(0x1e8c5, 0x1e8c6)
          .addRange(0x1e8d7, 0x1e8ff)
          .addRange(0x1e94b, 0x1e94f)
          .addRange(0x1e95a, 0x1e95d)
          .addRange(0x1e960, 0x1edff)
          .addRange(0x1ee25, 0x1ee26)
          .addRange(0x1ee3c, 0x1ee41)
          .addRange(0x1ee43, 0x1ee46)
          .addRange(0x1ee55, 0x1ee56)
          .addRange(0x1ee65, 0x1ee66)
          .addRange(0x1ee9c, 0x1eea0)
          .addRange(0x1eebc, 0x1eeef)
          .addRange(0x1eef2, 0x1efff)
          .addRange(0x1f02c, 0x1f02f)
          .addRange(0x1f094, 0x1f09f)
          .addRange(0x1f0af, 0x1f0b0)
          .addRange(0x1f0f6, 0x1f0ff)
          .addRange(0x1f10d, 0x1f10f)
          .addRange(0x1f16c, 0x1f16f)
          .addRange(0x1f1ad, 0x1f1e5)
          .addRange(0x1f203, 0x1f20f)
          .addRange(0x1f23c, 0x1f23f)
          .addRange(0x1f249, 0x1f24f)
          .addRange(0x1f252, 0x1f25f)
          .addRange(0x1f266, 0x1f2ff)
          .addRange(0x1f6d5, 0x1f6df)
          .addRange(0x1f6ed, 0x1f6ef)
          .addRange(0x1f6f9, 0x1f6ff)
          .addRange(0x1f774, 0x1f77f)
          .addRange(0x1f7d5, 0x1f7ff)
          .addRange(0x1f80c, 0x1f80f)
          .addRange(0x1f848, 0x1f84f)
          .addRange(0x1f85a, 0x1f85f)
          .addRange(0x1f888, 0x1f88f)
          .addRange(0x1f8ae, 0x1f8ff)
          .addRange(0x1f90c, 0x1f90f)
          .addRange(0x1f94d, 0x1f94f)
          .addRange(0x1f96c, 0x1f97f)
          .addRange(0x1f998, 0x1f9bf)
          .addRange(0x1f9c1, 0x1f9cf)
          .addRange(0x1f9e7, 0x1ffff)
          .addRange(0x2a6d7, 0x2a6ff)
          .addRange(0x2b735, 0x2b73f)
          .addRange(0x2b81e, 0x2b81f)
          .addRange(0x2cea2, 0x2ceaf)
          .addRange(0x2ebe1, 0x2f7ff)
          .addRange(0x2fa1e, 0xe0000)
          .addRange(0xe0002, 0xe001f)
          .addRange(0xe0080, 0xe00ff)
          .addRange(0xe01f0, 0xeffff)
          .addRange(0xffffe, 0xfffff)
          .addRange(0x10fffe, 0x10ffff);

        /***/
      },
      /* 647 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x100,
          0x102,
          0x104,
          0x106,
          0x108,
          0x10a,
          0x10c,
          0x10e,
          0x110,
          0x112,
          0x114,
          0x116,
          0x118,
          0x11a,
          0x11c,
          0x11e,
          0x120,
          0x122,
          0x124,
          0x126,
          0x128,
          0x12a,
          0x12c,
          0x12e,
          0x130,
          0x132,
          0x134,
          0x136,
          0x139,
          0x13b,
          0x13d,
          0x13f,
          0x141,
          0x143,
          0x145,
          0x147,
          0x14a,
          0x14c,
          0x14e,
          0x150,
          0x152,
          0x154,
          0x156,
          0x158,
          0x15a,
          0x15c,
          0x15e,
          0x160,
          0x162,
          0x164,
          0x166,
          0x168,
          0x16a,
          0x16c,
          0x16e,
          0x170,
          0x172,
          0x174,
          0x176,
          0x17b,
          0x17d,
          0x184,
          0x1a2,
          0x1a4,
          0x1a9,
          0x1ac,
          0x1b5,
          0x1bc,
          0x1c4,
          0x1c7,
          0x1ca,
          0x1cd,
          0x1cf,
          0x1d1,
          0x1d3,
          0x1d5,
          0x1d7,
          0x1d9,
          0x1db,
          0x1de,
          0x1e0,
          0x1e2,
          0x1e4,
          0x1e6,
          0x1e8,
          0x1ea,
          0x1ec,
          0x1ee,
          0x1f1,
          0x1f4,
          0x1fa,
          0x1fc,
          0x1fe,
          0x200,
          0x202,
          0x204,
          0x206,
          0x208,
          0x20a,
          0x20c,
          0x20e,
          0x210,
          0x212,
          0x214,
          0x216,
          0x218,
          0x21a,
          0x21c,
          0x21e,
          0x220,
          0x222,
          0x224,
          0x226,
          0x228,
          0x22a,
          0x22c,
          0x22e,
          0x230,
          0x232,
          0x241,
          0x248,
          0x24a,
          0x24c,
          0x24e,
          0x370,
          0x372,
          0x376,
          0x37f,
          0x386,
          0x38c,
          0x3cf,
          0x3d8,
          0x3da,
          0x3dc,
          0x3de,
          0x3e0,
          0x3e2,
          0x3e4,
          0x3e6,
          0x3e8,
          0x3ea,
          0x3ec,
          0x3ee,
          0x3f4,
          0x3f7,
          0x460,
          0x462,
          0x464,
          0x466,
          0x468,
          0x46a,
          0x46c,
          0x46e,
          0x470,
          0x472,
          0x474,
          0x476,
          0x478,
          0x47a,
          0x47c,
          0x47e,
          0x480,
          0x48a,
          0x48c,
          0x48e,
          0x490,
          0x492,
          0x494,
          0x496,
          0x498,
          0x49a,
          0x49c,
          0x49e,
          0x4a0,
          0x4a2,
          0x4a4,
          0x4a6,
          0x4a8,
          0x4aa,
          0x4ac,
          0x4ae,
          0x4b0,
          0x4b2,
          0x4b4,
          0x4b6,
          0x4b8,
          0x4ba,
          0x4bc,
          0x4be,
          0x4c3,
          0x4c5,
          0x4c7,
          0x4c9,
          0x4cb,
          0x4cd,
          0x4d0,
          0x4d2,
          0x4d4,
          0x4d6,
          0x4d8,
          0x4da,
          0x4dc,
          0x4de,
          0x4e0,
          0x4e2,
          0x4e4,
          0x4e6,
          0x4e8,
          0x4ea,
          0x4ec,
          0x4ee,
          0x4f0,
          0x4f2,
          0x4f4,
          0x4f6,
          0x4f8,
          0x4fa,
          0x4fc,
          0x4fe,
          0x500,
          0x502,
          0x504,
          0x506,
          0x508,
          0x50a,
          0x50c,
          0x50e,
          0x510,
          0x512,
          0x514,
          0x516,
          0x518,
          0x51a,
          0x51c,
          0x51e,
          0x520,
          0x522,
          0x524,
          0x526,
          0x528,
          0x52a,
          0x52c,
          0x52e,
          0x10c7,
          0x10cd,
          0x1e00,
          0x1e02,
          0x1e04,
          0x1e06,
          0x1e08,
          0x1e0a,
          0x1e0c,
          0x1e0e,
          0x1e10,
          0x1e12,
          0x1e14,
          0x1e16,
          0x1e18,
          0x1e1a,
          0x1e1c,
          0x1e1e,
          0x1e20,
          0x1e22,
          0x1e24,
          0x1e26,
          0x1e28,
          0x1e2a,
          0x1e2c,
          0x1e2e,
          0x1e30,
          0x1e32,
          0x1e34,
          0x1e36,
          0x1e38,
          0x1e3a,
          0x1e3c,
          0x1e3e,
          0x1e40,
          0x1e42,
          0x1e44,
          0x1e46,
          0x1e48,
          0x1e4a,
          0x1e4c,
          0x1e4e,
          0x1e50,
          0x1e52,
          0x1e54,
          0x1e56,
          0x1e58,
          0x1e5a,
          0x1e5c,
          0x1e5e,
          0x1e60,
          0x1e62,
          0x1e64,
          0x1e66,
          0x1e68,
          0x1e6a,
          0x1e6c,
          0x1e6e,
          0x1e70,
          0x1e72,
          0x1e74,
          0x1e76,
          0x1e78,
          0x1e7a,
          0x1e7c,
          0x1e7e,
          0x1e80,
          0x1e82,
          0x1e84,
          0x1e86,
          0x1e88,
          0x1e8a,
          0x1e8c,
          0x1e8e,
          0x1e90,
          0x1e92,
          0x1e94,
          0x1e9e,
          0x1ea0,
          0x1ea2,
          0x1ea4,
          0x1ea6,
          0x1ea8,
          0x1eaa,
          0x1eac,
          0x1eae,
          0x1eb0,
          0x1eb2,
          0x1eb4,
          0x1eb6,
          0x1eb8,
          0x1eba,
          0x1ebc,
          0x1ebe,
          0x1ec0,
          0x1ec2,
          0x1ec4,
          0x1ec6,
          0x1ec8,
          0x1eca,
          0x1ecc,
          0x1ece,
          0x1ed0,
          0x1ed2,
          0x1ed4,
          0x1ed6,
          0x1ed8,
          0x1eda,
          0x1edc,
          0x1ede,
          0x1ee0,
          0x1ee2,
          0x1ee4,
          0x1ee6,
          0x1ee8,
          0x1eea,
          0x1eec,
          0x1eee,
          0x1ef0,
          0x1ef2,
          0x1ef4,
          0x1ef6,
          0x1ef8,
          0x1efa,
          0x1efc,
          0x1efe,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x1f5f,
          0x2102,
          0x2107,
          0x2115,
          0x2124,
          0x2126,
          0x2128,
          0x2145,
          0x2183,
          0x2c60,
          0x2c67,
          0x2c69,
          0x2c6b,
          0x2c72,
          0x2c75,
          0x2c82,
          0x2c84,
          0x2c86,
          0x2c88,
          0x2c8a,
          0x2c8c,
          0x2c8e,
          0x2c90,
          0x2c92,
          0x2c94,
          0x2c96,
          0x2c98,
          0x2c9a,
          0x2c9c,
          0x2c9e,
          0x2ca0,
          0x2ca2,
          0x2ca4,
          0x2ca6,
          0x2ca8,
          0x2caa,
          0x2cac,
          0x2cae,
          0x2cb0,
          0x2cb2,
          0x2cb4,
          0x2cb6,
          0x2cb8,
          0x2cba,
          0x2cbc,
          0x2cbe,
          0x2cc0,
          0x2cc2,
          0x2cc4,
          0x2cc6,
          0x2cc8,
          0x2cca,
          0x2ccc,
          0x2cce,
          0x2cd0,
          0x2cd2,
          0x2cd4,
          0x2cd6,
          0x2cd8,
          0x2cda,
          0x2cdc,
          0x2cde,
          0x2ce0,
          0x2ce2,
          0x2ceb,
          0x2ced,
          0x2cf2,
          0xa640,
          0xa642,
          0xa644,
          0xa646,
          0xa648,
          0xa64a,
          0xa64c,
          0xa64e,
          0xa650,
          0xa652,
          0xa654,
          0xa656,
          0xa658,
          0xa65a,
          0xa65c,
          0xa65e,
          0xa660,
          0xa662,
          0xa664,
          0xa666,
          0xa668,
          0xa66a,
          0xa66c,
          0xa680,
          0xa682,
          0xa684,
          0xa686,
          0xa688,
          0xa68a,
          0xa68c,
          0xa68e,
          0xa690,
          0xa692,
          0xa694,
          0xa696,
          0xa698,
          0xa69a,
          0xa722,
          0xa724,
          0xa726,
          0xa728,
          0xa72a,
          0xa72c,
          0xa72e,
          0xa732,
          0xa734,
          0xa736,
          0xa738,
          0xa73a,
          0xa73c,
          0xa73e,
          0xa740,
          0xa742,
          0xa744,
          0xa746,
          0xa748,
          0xa74a,
          0xa74c,
          0xa74e,
          0xa750,
          0xa752,
          0xa754,
          0xa756,
          0xa758,
          0xa75a,
          0xa75c,
          0xa75e,
          0xa760,
          0xa762,
          0xa764,
          0xa766,
          0xa768,
          0xa76a,
          0xa76c,
          0xa76e,
          0xa779,
          0xa77b,
          0xa780,
          0xa782,
          0xa784,
          0xa786,
          0xa78b,
          0xa78d,
          0xa790,
          0xa792,
          0xa796,
          0xa798,
          0xa79a,
          0xa79c,
          0xa79e,
          0xa7a0,
          0xa7a2,
          0xa7a4,
          0xa7a6,
          0xa7a8,
          0xa7b6,
          0x1d49c,
          0x1d4a2,
          0x1d546,
          0x1d7ca
        )
          .addRange(0x41, 0x5a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xde)
          .addRange(0x178, 0x179)
          .addRange(0x181, 0x182)
          .addRange(0x186, 0x187)
          .addRange(0x189, 0x18b)
          .addRange(0x18e, 0x191)
          .addRange(0x193, 0x194)
          .addRange(0x196, 0x198)
          .addRange(0x19c, 0x19d)
          .addRange(0x19f, 0x1a0)
          .addRange(0x1a6, 0x1a7)
          .addRange(0x1ae, 0x1af)
          .addRange(0x1b1, 0x1b3)
          .addRange(0x1b7, 0x1b8)
          .addRange(0x1f6, 0x1f8)
          .addRange(0x23a, 0x23b)
          .addRange(0x23d, 0x23e)
          .addRange(0x243, 0x246)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x38f)
          .addRange(0x391, 0x3a1)
          .addRange(0x3a3, 0x3ab)
          .addRange(0x3d2, 0x3d4)
          .addRange(0x3f9, 0x3fa)
          .addRange(0x3fd, 0x42f)
          .addRange(0x4c0, 0x4c1)
          .addRange(0x531, 0x556)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x13a0, 0x13f5)
          .addRange(0x1f08, 0x1f0f)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f28, 0x1f2f)
          .addRange(0x1f38, 0x1f3f)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f68, 0x1f6f)
          .addRange(0x1fb8, 0x1fbb)
          .addRange(0x1fc8, 0x1fcb)
          .addRange(0x1fd8, 0x1fdb)
          .addRange(0x1fe8, 0x1fec)
          .addRange(0x1ff8, 0x1ffb)
          .addRange(0x210b, 0x210d)
          .addRange(0x2110, 0x2112)
          .addRange(0x2119, 0x211d)
          .addRange(0x212a, 0x212d)
          .addRange(0x2130, 0x2133)
          .addRange(0x213e, 0x213f)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c62, 0x2c64)
          .addRange(0x2c6d, 0x2c70)
          .addRange(0x2c7e, 0x2c80)
          .addRange(0xa77d, 0xa77e)
          .addRange(0xa7aa, 0xa7ae)
          .addRange(0xa7b0, 0xa7b4)
          .addRange(0xff21, 0xff3a)
          .addRange(0x10400, 0x10427)
          .addRange(0x104b0, 0x104d3)
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x118a0, 0x118bf)
          .addRange(0x1d400, 0x1d419)
          .addRange(0x1d434, 0x1d44d)
          .addRange(0x1d468, 0x1d481)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b5)
          .addRange(0x1d4d0, 0x1d4e9)
          .addRange(0x1d504, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d538, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d56c, 0x1d585)
          .addRange(0x1d5a0, 0x1d5b9)
          .addRange(0x1d5d4, 0x1d5ed)
          .addRange(0x1d608, 0x1d621)
          .addRange(0x1d63c, 0x1d655)
          .addRange(0x1d670, 0x1d689)
          .addRange(0x1d6a8, 0x1d6c0)
          .addRange(0x1d6e2, 0x1d6fa)
          .addRange(0x1d71c, 0x1d734)
          .addRange(0x1d756, 0x1d76e)
          .addRange(0x1d790, 0x1d7a8)
          .addRange(0x1e900, 0x1e921);

        /***/
      },
      /* 648 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1e900, 0x1e94a)
          .addRange(0x1e950, 0x1e959)
          .addRange(0x1e95e, 0x1e95f);

        /***/
      },
      /* 649 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11700, 0x11719)
          .addRange(0x1171d, 0x1172b)
          .addRange(0x11730, 0x1173f);

        /***/
      },
      /* 650 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x14400, 0x14646);

        /***/
      },
      /* 651 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x61c,
          0x61e,
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e
        )
          .addRange(0x600, 0x604)
          .addRange(0x606, 0x60b)
          .addRange(0x60d, 0x61a)
          .addRange(0x620, 0x63f)
          .addRange(0x641, 0x64a)
          .addRange(0x656, 0x66f)
          .addRange(0x671, 0x6dc)
          .addRange(0x6de, 0x6ff)
          .addRange(0x750, 0x77f)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x8d4, 0x8e1)
          .addRange(0x8e3, 0x8ff)
          .addRange(0xfb50, 0xfbc1)
          .addRange(0xfbd3, 0xfd3d)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdfd)
          .addRange(0xfe70, 0xfe74)
          .addRange(0xfe76, 0xfefc)
          .addRange(0x10e60, 0x10e7e)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x1eef0, 0x1eef1);

        /***/
      },
      /* 652 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x58a)
          .addRange(0x531, 0x556)
          .addRange(0x559, 0x55f)
          .addRange(0x561, 0x587)
          .addRange(0x58d, 0x58f)
          .addRange(0xfb13, 0xfb17);

        /***/
      },
      /* 653 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b39, 0x10b3f);

        /***/
      },
      /* 654 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1b00, 0x1b4b)
          .addRange(0x1b50, 0x1b7c);

        /***/
      },
      /* 655 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xa6a0, 0xa6f7)
          .addRange(0x16800, 0x16a38);

        /***/
      },
      /* 656 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16af0, 0x16af5);

        /***/
      },
      /* 657 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1bc0, 0x1bf3)
          .addRange(0x1bfc, 0x1bff);

        /***/
      },
      /* 658 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x9b2, 0x9d7)
          .addRange(0x980, 0x983)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9bc, 0x9c4)
          .addRange(0x9c7, 0x9c8)
          .addRange(0x9cb, 0x9ce)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e3)
          .addRange(0x9e6, 0x9fd);

        /***/
      },
      /* 659 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c36)
          .addRange(0x11c38, 0x11c45)
          .addRange(0x11c50, 0x11c6c);

        /***/
      },
      /* 660 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x2ea, 0x2eb)
          .addRange(0x3105, 0x312e)
          .addRange(0x31a0, 0x31ba);

        /***/
      },
      /* 661 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1107f)
          .addRange(0x11000, 0x1104d)
          .addRange(0x11052, 0x1106f);

        /***/
      },
      /* 662 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x2800, 0x28ff);

        /***/
      },
      /* 663 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1a00, 0x1a1b)
          .addRange(0x1a1e, 0x1a1f);

        /***/
      },
      /* 664 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x1740, 0x1753);

        /***/
      },
      /* 665 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1400, 0x167f)
          .addRange(0x18b0, 0x18f5);

        /***/
      },
      /* 666 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x102a0, 0x102d0);

        /***/
      },
      /* 667 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1056f).addRange(
          0x10530,
          0x10563
        );

        /***/
      },
      /* 668 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11100, 0x11134)
          .addRange(0x11136, 0x11143);

        /***/
      },
      /* 669 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xaa00, 0xaa36)
          .addRange(0xaa40, 0xaa4d)
          .addRange(0xaa50, 0xaa59)
          .addRange(0xaa5c, 0xaa5f);

        /***/
      },
      /* 670 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0xab70, 0xabbf);

        /***/
      },
      /* 671 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xd7,
          0xf7,
          0x374,
          0x37e,
          0x385,
          0x387,
          0x589,
          0x605,
          0x60c,
          0x61b,
          0x61f,
          0x640,
          0x6dd,
          0x8e2,
          0xe3f,
          0x10fb,
          0x1805,
          0x1cd3,
          0x1ce1,
          0x3006,
          0x30a0,
          0xa92e,
          0xa9cf,
          0xab5b,
          0xfeff,
          0xff70,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1f9c0,
          0xe0001
        )
          .addRange(0x0, 0x40)
          .addRange(0x5b, 0x60)
          .addRange(0x7b, 0xa9)
          .addRange(0xab, 0xb9)
          .addRange(0xbb, 0xbf)
          .addRange(0x2b9, 0x2df)
          .addRange(0x2e5, 0x2e9)
          .addRange(0x2ec, 0x2ff)
          .addRange(0x964, 0x965)
          .addRange(0xfd5, 0xfd8)
          .addRange(0x16eb, 0x16ed)
          .addRange(0x1735, 0x1736)
          .addRange(0x1802, 0x1803)
          .addRange(0x1ce9, 0x1cec)
          .addRange(0x1cee, 0x1cf3)
          .addRange(0x1cf5, 0x1cf7)
          .addRange(0x2000, 0x200b)
          .addRange(0x200e, 0x2064)
          .addRange(0x2066, 0x2070)
          .addRange(0x2074, 0x207e)
          .addRange(0x2080, 0x208e)
          .addRange(0x20a0, 0x20bf)
          .addRange(0x2100, 0x2125)
          .addRange(0x2127, 0x2129)
          .addRange(0x212c, 0x2131)
          .addRange(0x2133, 0x214d)
          .addRange(0x214f, 0x215f)
          .addRange(0x2189, 0x218b)
          .addRange(0x2190, 0x2426)
          .addRange(0x2440, 0x244a)
          .addRange(0x2460, 0x27ff)
          .addRange(0x2900, 0x2b73)
          .addRange(0x2b76, 0x2b95)
          .addRange(0x2b98, 0x2bb9)
          .addRange(0x2bbd, 0x2bc8)
          .addRange(0x2bca, 0x2bd2)
          .addRange(0x2bec, 0x2bef)
          .addRange(0x2e00, 0x2e49)
          .addRange(0x2ff0, 0x2ffb)
          .addRange(0x3000, 0x3004)
          .addRange(0x3008, 0x3020)
          .addRange(0x3030, 0x3037)
          .addRange(0x303c, 0x303f)
          .addRange(0x309b, 0x309c)
          .addRange(0x30fb, 0x30fc)
          .addRange(0x3190, 0x319f)
          .addRange(0x31c0, 0x31e3)
          .addRange(0x3220, 0x325f)
          .addRange(0x327f, 0x32cf)
          .addRange(0x3358, 0x33ff)
          .addRange(0x4dc0, 0x4dff)
          .addRange(0xa700, 0xa721)
          .addRange(0xa788, 0xa78a)
          .addRange(0xa830, 0xa839)
          .addRange(0xfd3e, 0xfd3f)
          .addRange(0xfe10, 0xfe19)
          .addRange(0xfe30, 0xfe52)
          .addRange(0xfe54, 0xfe66)
          .addRange(0xfe68, 0xfe6b)
          .addRange(0xff01, 0xff20)
          .addRange(0xff3b, 0xff40)
          .addRange(0xff5b, 0xff65)
          .addRange(0xff9e, 0xff9f)
          .addRange(0xffe0, 0xffe6)
          .addRange(0xffe8, 0xffee)
          .addRange(0xfff9, 0xfffd)
          .addRange(0x10100, 0x10102)
          .addRange(0x10107, 0x10133)
          .addRange(0x10137, 0x1013f)
          .addRange(0x10190, 0x1019b)
          .addRange(0x101d0, 0x101fc)
          .addRange(0x102e1, 0x102fb)
          .addRange(0x1bca0, 0x1bca3)
          .addRange(0x1d000, 0x1d0f5)
          .addRange(0x1d100, 0x1d126)
          .addRange(0x1d129, 0x1d166)
          .addRange(0x1d16a, 0x1d17a)
          .addRange(0x1d183, 0x1d184)
          .addRange(0x1d18c, 0x1d1a9)
          .addRange(0x1d1ae, 0x1d1e8)
          .addRange(0x1d300, 0x1d356)
          .addRange(0x1d360, 0x1d371)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d7cb)
          .addRange(0x1d7ce, 0x1d7ff)
          .addRange(0x1f000, 0x1f02b)
          .addRange(0x1f030, 0x1f093)
          .addRange(0x1f0a0, 0x1f0ae)
          .addRange(0x1f0b1, 0x1f0bf)
          .addRange(0x1f0c1, 0x1f0cf)
          .addRange(0x1f0d1, 0x1f0f5)
          .addRange(0x1f100, 0x1f10c)
          .addRange(0x1f110, 0x1f12e)
          .addRange(0x1f130, 0x1f16b)
          .addRange(0x1f170, 0x1f1ac)
          .addRange(0x1f1e6, 0x1f1ff)
          .addRange(0x1f201, 0x1f202)
          .addRange(0x1f210, 0x1f23b)
          .addRange(0x1f240, 0x1f248)
          .addRange(0x1f250, 0x1f251)
          .addRange(0x1f260, 0x1f265)
          .addRange(0x1f300, 0x1f6d4)
          .addRange(0x1f6e0, 0x1f6ec)
          .addRange(0x1f6f0, 0x1f6f8)
          .addRange(0x1f700, 0x1f773)
          .addRange(0x1f780, 0x1f7d4)
          .addRange(0x1f800, 0x1f80b)
          .addRange(0x1f810, 0x1f847)
          .addRange(0x1f850, 0x1f859)
          .addRange(0x1f860, 0x1f887)
          .addRange(0x1f890, 0x1f8ad)
          .addRange(0x1f900, 0x1f90b)
          .addRange(0x1f910, 0x1f93e)
          .addRange(0x1f940, 0x1f94c)
          .addRange(0x1f950, 0x1f96b)
          .addRange(0x1f980, 0x1f997)
          .addRange(0x1f9d0, 0x1f9e6)
          .addRange(0xe0020, 0xe007f);

        /***/
      },
      /* 672 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x3e2, 0x3ef)
          .addRange(0x2c80, 0x2cf3)
          .addRange(0x2cf9, 0x2cff);

        /***/
      },
      /* 673 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x12000, 0x12399)
          .addRange(0x12400, 0x1246e)
          .addRange(0x12470, 0x12474)
          .addRange(0x12480, 0x12543);

        /***/
      },
      /* 674 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x10808, 0x1083c, 0x1083f)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838);

        /***/
      },
      /* 675 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1d2b, 0x1d78)
          .addRange(0x400, 0x484)
          .addRange(0x487, 0x52f)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x2de0, 0x2dff)
          .addRange(0xa640, 0xa69f)
          .addRange(0xfe2e, 0xfe2f);

        /***/
      },
      /* 676 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10400, 0x1044f);

        /***/
      },
      /* 677 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x900, 0x950)
          .addRange(0x953, 0x963)
          .addRange(0x966, 0x97f)
          .addRange(0xa8e0, 0xa8fd);

        /***/
      },
      /* 678 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1bc9c, 0x1bc9f);

        /***/
      },
      /* 679 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x13000, 0x1342e);

        /***/
      },
      /* 680 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10500, 0x10527);

        /***/
      },
      /* 681 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1258, 0x12c0)
          .addRange(0x1200, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x135d, 0x137c)
          .addRange(0x1380, 0x1399)
          .addRange(0x2d80, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e);

        /***/
      },
      /* 682 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x10c7, 0x10cd, 0x2d27, 0x2d2d)
          .addRange(0x10a0, 0x10c5)
          .addRange(0x10d0, 0x10fa)
          .addRange(0x10fc, 0x10ff)
          .addRange(0x2d00, 0x2d25);

        /***/
      },
      /* 683 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x1e000, 0x1e006)
          .addRange(0x1e008, 0x1e018)
          .addRange(0x1e01b, 0x1e021)
          .addRange(0x1e023, 0x1e024)
          .addRange(0x1e026, 0x1e02a);

        /***/
      },
      /* 684 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10330, 0x1034a);

        /***/
      },
      /* 685 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x11350, 0x11357)
          .addRange(0x11300, 0x11303)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x1133c, 0x11344)
          .addRange(0x11347, 0x11348)
          .addRange(0x1134b, 0x1134d)
          .addRange(0x1135d, 0x11363)
          .addRange(0x11366, 0x1136c)
          .addRange(0x11370, 0x11374);

        /***/
      },
      /* 686 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x37f,
          0x384,
          0x386,
          0x38c,
          0x1dbf,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x2126,
          0xab65,
          0x101a0
        )
          .addRange(0x370, 0x373)
          .addRange(0x375, 0x377)
          .addRange(0x37a, 0x37d)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3e1)
          .addRange(0x3f0, 0x3ff)
          .addRange(0x1d26, 0x1d2a)
          .addRange(0x1d5d, 0x1d61)
          .addRange(0x1d66, 0x1d6a)
          .addRange(0x1f00, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fc4)
          .addRange(0x1fc6, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fdd, 0x1fef)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffe)
          .addRange(0x10140, 0x1018e)
          .addRange(0x1d200, 0x1d245);

        /***/
      },
      /* 687 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xad0)
          .addRange(0xa81, 0xa83)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xabc, 0xac5)
          .addRange(0xac7, 0xac9)
          .addRange(0xacb, 0xacd)
          .addRange(0xae0, 0xae3)
          .addRange(0xae6, 0xaf1)
          .addRange(0xaf9, 0xaff);

        /***/
      },
      /* 688 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xa3c, 0xa51, 0xa5e)
          .addRange(0xa01, 0xa03)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa3e, 0xa42)
          .addRange(0xa47, 0xa48)
          .addRange(0xa4b, 0xa4d)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa66, 0xa75);

        /***/
      },
      /* 689 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x3005, 0x3007)
          .addRange(0x2e80, 0x2e99)
          .addRange(0x2e9b, 0x2ef3)
          .addRange(0x2f00, 0x2fd5)
          .addRange(0x3021, 0x3029)
          .addRange(0x3038, 0x303b)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d);

        /***/
      },
      /* 690 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1100, 0x11ff)
          .addRange(0x302e, 0x302f)
          .addRange(0x3131, 0x318e)
          .addRange(0x3200, 0x321e)
          .addRange(0x3260, 0x327e)
          .addRange(0xa960, 0xa97c)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xffa0, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc);

        /***/
      },
      /* 691 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x1720, 0x1734);

        /***/
      },
      /* 692 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x108fb, 0x108ff);

        /***/
      },
      /* 693 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xfb3e)
          .addRange(0x591, 0x5c7)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f4)
          .addRange(0xfb1d, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfb4f);

        /***/
      },
      /* 694 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1f200)
          .addRange(0x3041, 0x3096)
          .addRange(0x309d, 0x309f)
          .addRange(0x1b001, 0x1b11e);

        /***/
      },
      /* 695 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10840, 0x10855)
          .addRange(0x10857, 0x1085f);

        /***/
      },
      /* 696 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x670,
          0x1ced,
          0x1cf4,
          0x101fd,
          0x102e0
        )
          .addRange(0x300, 0x36f)
          .addRange(0x485, 0x486)
          .addRange(0x64b, 0x655)
          .addRange(0x951, 0x952)
          .addRange(0x1ab0, 0x1abe)
          .addRange(0x1cd0, 0x1cd2)
          .addRange(0x1cd4, 0x1ce0)
          .addRange(0x1ce2, 0x1ce8)
          .addRange(0x1cf8, 0x1cf9)
          .addRange(0x1dc0, 0x1df9)
          .addRange(0x1dfb, 0x1dff)
          .addRange(0x200c, 0x200d)
          .addRange(0x20d0, 0x20f0)
          .addRange(0x302a, 0x302d)
          .addRange(0x3099, 0x309a)
          .addRange(0xfe00, 0xfe0f)
          .addRange(0xfe20, 0xfe2d)
          .addRange(0x1d167, 0x1d169)
          .addRange(0x1d17b, 0x1d182)
          .addRange(0x1d185, 0x1d18b)
          .addRange(0x1d1aa, 0x1d1ad)
          .addRange(0xe0100, 0xe01ef);

        /***/
      },
      /* 697 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10b60, 0x10b72)
          .addRange(0x10b78, 0x10b7f);

        /***/
      },
      /* 698 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10b40, 0x10b55)
          .addRange(0x10b58, 0x10b5f);

        /***/
      },
      /* 699 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xa980, 0xa9cd)
          .addRange(0xa9d0, 0xa9d9)
          .addRange(0xa9de, 0xa9df);

        /***/
      },
      /* 700 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x11080, 0x110c1);

        /***/
      },
      /* 701 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xcde)
          .addRange(0xc80, 0xc83)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xcbc, 0xcc4)
          .addRange(0xcc6, 0xcc8)
          .addRange(0xcca, 0xccd)
          .addRange(0xcd5, 0xcd6)
          .addRange(0xce0, 0xce3)
          .addRange(0xce6, 0xcef)
          .addRange(0xcf1, 0xcf2);

        /***/
      },
      /* 702 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1b000)
          .addRange(0x30a1, 0x30fa)
          .addRange(0x30fd, 0x30ff)
          .addRange(0x31f0, 0x31ff)
          .addRange(0x32d0, 0x32fe)
          .addRange(0x3300, 0x3357)
          .addRange(0xff66, 0xff6f)
          .addRange(0xff71, 0xff9d);

        /***/
      },
      /* 703 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xa92f).addRange(
          0xa900,
          0xa92d
        );

        /***/
      },
      /* 704 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10a00, 0x10a03)
          .addRange(0x10a05, 0x10a06)
          .addRange(0x10a0c, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a38, 0x10a3a)
          .addRange(0x10a3f, 0x10a47)
          .addRange(0x10a50, 0x10a58);

        /***/
      },
      /* 705 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1780, 0x17dd)
          .addRange(0x17e0, 0x17e9)
          .addRange(0x17f0, 0x17f9)
          .addRange(0x19e0, 0x19ff);

        /***/
      },
      /* 706 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x1123e);

        /***/
      },
      /* 707 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x112b0, 0x112ea)
          .addRange(0x112f0, 0x112f9);

        /***/
      },
      /* 708 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xec6
        )
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb9)
          .addRange(0xebb, 0xebd)
          .addRange(0xec0, 0xec4)
          .addRange(0xec8, 0xecd)
          .addRange(0xed0, 0xed9)
          .addRange(0xedc, 0xedf);

        /***/
      },
      /* 709 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xaa,
          0xba,
          0x2071,
          0x207f,
          0x2132,
          0x214e
        )
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x2b8)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x1d00, 0x1d25)
          .addRange(0x1d2c, 0x1d5c)
          .addRange(0x1d62, 0x1d65)
          .addRange(0x1d6b, 0x1d77)
          .addRange(0x1d79, 0x1dbe)
          .addRange(0x1e00, 0x1eff)
          .addRange(0x2090, 0x209c)
          .addRange(0x212a, 0x212b)
          .addRange(0x2160, 0x2188)
          .addRange(0x2c60, 0x2c7f)
          .addRange(0xa722, 0xa787)
          .addRange(0xa78b, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f7, 0xa7ff)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab5c, 0xab64)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a);

        /***/
      },
      /* 710 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1c00, 0x1c37)
          .addRange(0x1c3b, 0x1c49)
          .addRange(0x1c4d, 0x1c4f);

        /***/
      },
      /* 711 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1940)
          .addRange(0x1900, 0x191e)
          .addRange(0x1920, 0x192b)
          .addRange(0x1930, 0x193b)
          .addRange(0x1944, 0x194f);

        /***/
      },
      /* 712 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767);

        /***/
      },
      /* 713 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa);

        /***/
      },
      /* 714 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0xa4d0, 0xa4ff);

        /***/
      },
      /* 715 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10280, 0x1029c);

        /***/
      },
      /* 716 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1093f).addRange(
          0x10920,
          0x10939
        );

        /***/
      },
      /* 717 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x11150, 0x11176);

        /***/
      },
      /* 718 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xd00, 0xd03)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd44)
          .addRange(0xd46, 0xd48)
          .addRange(0xd4a, 0xd4f)
          .addRange(0xd54, 0xd63)
          .addRange(0xd66, 0xd7f);

        /***/
      },
      /* 719 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x85e).addRange(0x840, 0x85b);

        /***/
      },
      /* 720 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10ac0, 0x10ae6)
          .addRange(0x10aeb, 0x10af6);

        /***/
      },
      /* 721 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11c70, 0x11c8f)
          .addRange(0x11c92, 0x11ca7)
          .addRange(0x11ca9, 0x11cb6);

        /***/
      },
      /* 722 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x11d3a)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d36)
          .addRange(0x11d3c, 0x11d3d)
          .addRange(0x11d3f, 0x11d47)
          .addRange(0x11d50, 0x11d59);

        /***/
      },
      /* 723 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xaae0, 0xaaf6)
          .addRange(0xabc0, 0xabed)
          .addRange(0xabf0, 0xabf9);

        /***/
      },
      /* 724 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1e8c7, 0x1e8d6);

        /***/
      },
      /* 725 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x109a0, 0x109b7)
          .addRange(0x109bc, 0x109cf)
          .addRange(0x109d2, 0x109ff);

        /***/
      },
      /* 726 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10980, 0x1099f);

        /***/
      },
      /* 727 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x16f00, 0x16f44)
          .addRange(0x16f50, 0x16f7e)
          .addRange(0x16f8f, 0x16f9f);

        /***/
      },
      /* 728 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11600, 0x11644)
          .addRange(0x11650, 0x11659);

        /***/
      },
      /* 729 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1804)
          .addRange(0x1800, 0x1801)
          .addRange(0x1806, 0x180e)
          .addRange(0x1810, 0x1819)
          .addRange(0x1820, 0x1877)
          .addRange(0x1880, 0x18aa)
          .addRange(0x11660, 0x1166c);

        /***/
      },
      /* 730 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16a60, 0x16a69)
          .addRange(0x16a6e, 0x16a6f);

        /***/
      },
      /* 731 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x11288)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a9);

        /***/
      },
      /* 732 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1000, 0x109f)
          .addRange(0xa9e0, 0xa9fe)
          .addRange(0xaa60, 0xaa7f);

        /***/
      },
      /* 733 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10880, 0x1089e)
          .addRange(0x108a7, 0x108af);

        /***/
      },
      /* 734 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x19d0, 0x19da)
          .addRange(0x19de, 0x19df);

        /***/
      },
      /* 735 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1145b, 0x1145d).addRange(
          0x11400,
          0x11459
        );

        /***/
      },
      /* 736 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x7c0, 0x7fa);

        /***/
      },
      /* 737 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x16fe1).addRange(
          0x1b170,
          0x1b2fb
        );

        /***/
      },
      /* 738 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x1680, 0x169c);

        /***/
      },
      /* 739 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x1c50, 0x1c7f);

        /***/
      },
      /* 740 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x10cfa, 0x10cff);

        /***/
      },
      /* 741 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10300, 0x10323)
          .addRange(0x1032d, 0x1032f);

        /***/
      },
      /* 742 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10a80, 0x10a9f);

        /***/
      },
      /* 743 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10350, 0x1037a);

        /***/
      },
      /* 744 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x103a0, 0x103c3)
          .addRange(0x103c8, 0x103d5);

        /***/
      },
      /* 745 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10a60, 0x10a7f);

        /***/
      },
      /* 746 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10c00, 0x10c48);

        /***/
      },
      /* 747 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xb01, 0xb03)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb3c, 0xb44)
          .addRange(0xb47, 0xb48)
          .addRange(0xb4b, 0xb4d)
          .addRange(0xb56, 0xb57)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb63)
          .addRange(0xb66, 0xb77);

        /***/
      },
      /* 748 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb);

        /***/
      },
      /* 749 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10480, 0x1049d)
          .addRange(0x104a0, 0x104a9);

        /***/
      },
      /* 750 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x16b00, 0x16b45)
          .addRange(0x16b50, 0x16b59)
          .addRange(0x16b5b, 0x16b61)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f);

        /***/
      },
      /* 751 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10860, 0x1087f);

        /***/
      },
      /* 752 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x11ac0, 0x11af8);

        /***/
      },
      /* 753 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0xa840, 0xa877);

        /***/
      },
      /* 754 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1091f).addRange(
          0x10900,
          0x1091b
        );

        /***/
      },
      /* 755 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10b80, 0x10b91)
          .addRange(0x10b99, 0x10b9c)
          .addRange(0x10ba9, 0x10baf);

        /***/
      },
      /* 756 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xa95f).addRange(
          0xa930,
          0xa953
        );

        /***/
      },
      /* 757 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x16a0, 0x16ea)
          .addRange(0x16ee, 0x16f8);

        /***/
      },
      /* 758 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x800, 0x82d)
          .addRange(0x830, 0x83e);

        /***/
      },
      /* 759 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xa880, 0xa8c5)
          .addRange(0xa8ce, 0xa8d9);

        /***/
      },
      /* 760 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11180, 0x111cd)
          .addRange(0x111d0, 0x111df);

        /***/
      },
      /* 761 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10450, 0x1047f);

        /***/
      },
      /* 762 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11580, 0x115b5)
          .addRange(0x115b8, 0x115dd);

        /***/
      },
      /* 763 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1d800, 0x1da8b)
          .addRange(0x1da9b, 0x1da9f)
          .addRange(0x1daa1, 0x1daaf);

        /***/
      },
      /* 764 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xdbd, 0xdca, 0xdd6)
          .addRange(0xd82, 0xd83)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xdcf, 0xdd4)
          .addRange(0xdd8, 0xddf)
          .addRange(0xde6, 0xdef)
          .addRange(0xdf2, 0xdf4)
          .addRange(0x111e1, 0x111f4);

        /***/
      },
      /* 765 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x110d0, 0x110e8)
          .addRange(0x110f0, 0x110f9);

        /***/
      },
      /* 766 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11a50, 0x11a83)
          .addRange(0x11a86, 0x11a9c)
          .addRange(0x11a9e, 0x11aa2);

        /***/
      },
      /* 767 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1b80, 0x1bbf)
          .addRange(0x1cc0, 0x1cc7);

        /***/
      },
      /* 768 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0xa800, 0xa82b);

        /***/
      },
      /* 769 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x700, 0x70d)
          .addRange(0x70f, 0x74a)
          .addRange(0x74d, 0x74f)
          .addRange(0x860, 0x86a);

        /***/
      },
      /* 770 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1714);

        /***/
      },
      /* 771 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1772, 0x1773);

        /***/
      },
      /* 772 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1950, 0x196d)
          .addRange(0x1970, 0x1974);

        /***/
      },
      /* 773 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1a20, 0x1a5e)
          .addRange(0x1a60, 0x1a7c)
          .addRange(0x1a7f, 0x1a89)
          .addRange(0x1a90, 0x1a99)
          .addRange(0x1aa0, 0x1aad);

        /***/
      },
      /* 774 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xaa80, 0xaac2)
          .addRange(0xaadb, 0xaadf);

        /***/
      },
      /* 775 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11680, 0x116b7)
          .addRange(0x116c0, 0x116c9);

        /***/
      },
      /* 776 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xb9c, 0xbd0, 0xbd7)
          .addRange(0xb82, 0xb83)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xbbe, 0xbc2)
          .addRange(0xbc6, 0xbc8)
          .addRange(0xbca, 0xbcd)
          .addRange(0xbe6, 0xbfa);

        /***/
      },
      /* 777 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x16fe0)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2);

        /***/
      },
      /* 778 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xc00, 0xc03)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc3d, 0xc44)
          .addRange(0xc46, 0xc48)
          .addRange(0xc4a, 0xc4d)
          .addRange(0xc55, 0xc56)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc63)
          .addRange(0xc66, 0xc6f)
          .addRange(0xc78, 0xc7f);

        /***/
      },
      /* 779 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x780, 0x7b1);

        /***/
      },
      /* 780 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xe01, 0xe3a)
          .addRange(0xe40, 0xe5b);

        /***/
      },
      /* 781 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xf00, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf71, 0xf97)
          .addRange(0xf99, 0xfbc)
          .addRange(0xfbe, 0xfcc)
          .addRange(0xfce, 0xfd4)
          .addRange(0xfd9, 0xfda);

        /***/
      },
      /* 782 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x2d7f)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d6f, 0x2d70);

        /***/
      },
      /* 783 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11480, 0x114c7)
          .addRange(0x114d0, 0x114d9);

        /***/
      },
      /* 784 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1039f).addRange(
          0x10380,
          0x1039d
        );

        /***/
      },
      /* 785 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0xa500, 0xa62b);

        /***/
      },
      /* 786 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x118ff).addRange(
          0x118a0,
          0x118f2
        );

        /***/
      },
      /* 787 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xa000, 0xa48c)
          .addRange(0xa490, 0xa4c6);

        /***/
      },
      /* 788 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x11a00, 0x11a47);

        /***/
      },
      /* 789 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x640)
          .addRange(0x1e900, 0x1e94a)
          .addRange(0x1e950, 0x1e959)
          .addRange(0x1e95e, 0x1e95f);

        /***/
      },
      /* 790 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11700, 0x11719)
          .addRange(0x1171d, 0x1172b)
          .addRange(0x11730, 0x1173f);

        /***/
      },
      /* 791 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x14400, 0x14646);

        /***/
      },
      /* 792 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x1ee24,
          0x1ee27,
          0x1ee39,
          0x1ee3b,
          0x1ee42,
          0x1ee47,
          0x1ee49,
          0x1ee4b,
          0x1ee54,
          0x1ee57,
          0x1ee59,
          0x1ee5b,
          0x1ee5d,
          0x1ee5f,
          0x1ee64,
          0x1ee7e
        )
          .addRange(0x600, 0x604)
          .addRange(0x606, 0x61c)
          .addRange(0x61e, 0x6dc)
          .addRange(0x6de, 0x6ff)
          .addRange(0x750, 0x77f)
          .addRange(0x8a0, 0x8b4)
          .addRange(0x8b6, 0x8bd)
          .addRange(0x8d4, 0x8e1)
          .addRange(0x8e3, 0x8ff)
          .addRange(0xfb50, 0xfbc1)
          .addRange(0xfbd3, 0xfd3d)
          .addRange(0xfd50, 0xfd8f)
          .addRange(0xfd92, 0xfdc7)
          .addRange(0xfdf0, 0xfdfd)
          .addRange(0xfe70, 0xfe74)
          .addRange(0xfe76, 0xfefc)
          .addRange(0x102e0, 0x102fb)
          .addRange(0x10e60, 0x10e7e)
          .addRange(0x1ee00, 0x1ee03)
          .addRange(0x1ee05, 0x1ee1f)
          .addRange(0x1ee21, 0x1ee22)
          .addRange(0x1ee29, 0x1ee32)
          .addRange(0x1ee34, 0x1ee37)
          .addRange(0x1ee4d, 0x1ee4f)
          .addRange(0x1ee51, 0x1ee52)
          .addRange(0x1ee61, 0x1ee62)
          .addRange(0x1ee67, 0x1ee6a)
          .addRange(0x1ee6c, 0x1ee72)
          .addRange(0x1ee74, 0x1ee77)
          .addRange(0x1ee79, 0x1ee7c)
          .addRange(0x1ee80, 0x1ee89)
          .addRange(0x1ee8b, 0x1ee9b)
          .addRange(0x1eea1, 0x1eea3)
          .addRange(0x1eea5, 0x1eea9)
          .addRange(0x1eeab, 0x1eebb)
          .addRange(0x1eef0, 0x1eef1);

        /***/
      },
      /* 793 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x531, 0x556)
          .addRange(0x559, 0x55f)
          .addRange(0x561, 0x587)
          .addRange(0x589, 0x58a)
          .addRange(0x58d, 0x58f)
          .addRange(0xfb13, 0xfb17);

        /***/
      },
      /* 794 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10b00, 0x10b35)
          .addRange(0x10b39, 0x10b3f);

        /***/
      },
      /* 795 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1b00, 0x1b4b)
          .addRange(0x1b50, 0x1b7c);

        /***/
      },
      /* 796 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xa6a0, 0xa6f7)
          .addRange(0x16800, 0x16a38);

        /***/
      },
      /* 797 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x16ad0, 0x16aed)
          .addRange(0x16af0, 0x16af5);

        /***/
      },
      /* 798 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1bc0, 0x1bf3)
          .addRange(0x1bfc, 0x1bff);

        /***/
      },
      /* 799 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x9b2, 0x9d7, 0x1cf7, 0xa8f1)
          .addRange(0x951, 0x952)
          .addRange(0x964, 0x965)
          .addRange(0x980, 0x983)
          .addRange(0x985, 0x98c)
          .addRange(0x98f, 0x990)
          .addRange(0x993, 0x9a8)
          .addRange(0x9aa, 0x9b0)
          .addRange(0x9b6, 0x9b9)
          .addRange(0x9bc, 0x9c4)
          .addRange(0x9c7, 0x9c8)
          .addRange(0x9cb, 0x9ce)
          .addRange(0x9dc, 0x9dd)
          .addRange(0x9df, 0x9e3)
          .addRange(0x9e6, 0x9fd);

        /***/
      },
      /* 800 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11c00, 0x11c08)
          .addRange(0x11c0a, 0x11c36)
          .addRange(0x11c38, 0x11c45)
          .addRange(0x11c50, 0x11c6c);

        /***/
      },
      /* 801 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x3030, 0x3037, 0x30fb)
          .addRange(0x2ea, 0x2eb)
          .addRange(0x3001, 0x3003)
          .addRange(0x3008, 0x3011)
          .addRange(0x3013, 0x301f)
          .addRange(0x302a, 0x302d)
          .addRange(0x3105, 0x312e)
          .addRange(0x31a0, 0x31ba)
          .addRange(0xfe45, 0xfe46)
          .addRange(0xff61, 0xff65);

        /***/
      },
      /* 802 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1107f)
          .addRange(0x11000, 0x1104d)
          .addRange(0x11052, 0x1106f);

        /***/
      },
      /* 803 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x2800, 0x28ff);

        /***/
      },
      /* 804 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xa9cf)
          .addRange(0x1a00, 0x1a1b)
          .addRange(0x1a1e, 0x1a1f);

        /***/
      },
      /* 805 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1735, 0x1736)
          .addRange(0x1740, 0x1753);

        /***/
      },
      /* 806 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1400, 0x167f)
          .addRange(0x18b0, 0x18f5);

        /***/
      },
      /* 807 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x102a0, 0x102d0);

        /***/
      },
      /* 808 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1056f).addRange(
          0x10530,
          0x10563
        );

        /***/
      },
      /* 809 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x9e6, 0x9ef)
          .addRange(0x1040, 0x1049)
          .addRange(0x11100, 0x11134)
          .addRange(0x11136, 0x11143);

        /***/
      },
      /* 810 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xaa00, 0xaa36)
          .addRange(0xaa40, 0xaa4d)
          .addRange(0xaa50, 0xaa59)
          .addRange(0xaa5c, 0xaa5f);

        /***/
      },
      /* 811 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x13a0, 0x13f5)
          .addRange(0x13f8, 0x13fd)
          .addRange(0xab70, 0xabbf);

        /***/
      },
      /* 812 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xd7,
          0xf7,
          0x374,
          0x37e,
          0x385,
          0x387,
          0x605,
          0x6dd,
          0x8e2,
          0xe3f,
          0x3000,
          0x3004,
          0x3012,
          0x3020,
          0x3036,
          0x327f,
          0x33ff,
          0xab5b,
          0xfeff,
          0x1d4a2,
          0x1d4bb,
          0x1d546,
          0x1f9c0,
          0xe0001
        )
          .addRange(0x0, 0x40)
          .addRange(0x5b, 0x60)
          .addRange(0x7b, 0xa9)
          .addRange(0xab, 0xb9)
          .addRange(0xbb, 0xbf)
          .addRange(0x2b9, 0x2df)
          .addRange(0x2e5, 0x2e9)
          .addRange(0x2ec, 0x2ff)
          .addRange(0xfd5, 0xfd8)
          .addRange(0x16eb, 0x16ed)
          .addRange(0x2000, 0x200b)
          .addRange(0x200e, 0x2064)
          .addRange(0x2066, 0x2070)
          .addRange(0x2074, 0x207e)
          .addRange(0x2080, 0x208e)
          .addRange(0x20a0, 0x20bf)
          .addRange(0x2100, 0x2125)
          .addRange(0x2127, 0x2129)
          .addRange(0x212c, 0x2131)
          .addRange(0x2133, 0x214d)
          .addRange(0x214f, 0x215f)
          .addRange(0x2189, 0x218b)
          .addRange(0x2190, 0x2426)
          .addRange(0x2440, 0x244a)
          .addRange(0x2460, 0x27ff)
          .addRange(0x2900, 0x2b73)
          .addRange(0x2b76, 0x2b95)
          .addRange(0x2b98, 0x2bb9)
          .addRange(0x2bbd, 0x2bc8)
          .addRange(0x2bca, 0x2bd2)
          .addRange(0x2bec, 0x2bef)
          .addRange(0x2e00, 0x2e42)
          .addRange(0x2e44, 0x2e49)
          .addRange(0x2ff0, 0x2ffb)
          .addRange(0x3248, 0x325f)
          .addRange(0x32b1, 0x32bf)
          .addRange(0x32cc, 0x32cf)
          .addRange(0x3371, 0x337a)
          .addRange(0x3380, 0x33df)
          .addRange(0x4dc0, 0x4dff)
          .addRange(0xa700, 0xa721)
          .addRange(0xa788, 0xa78a)
          .addRange(0xfd3e, 0xfd3f)
          .addRange(0xfe10, 0xfe19)
          .addRange(0xfe30, 0xfe44)
          .addRange(0xfe47, 0xfe52)
          .addRange(0xfe54, 0xfe66)
          .addRange(0xfe68, 0xfe6b)
          .addRange(0xff01, 0xff20)
          .addRange(0xff3b, 0xff40)
          .addRange(0xff5b, 0xff60)
          .addRange(0xffe0, 0xffe6)
          .addRange(0xffe8, 0xffee)
          .addRange(0xfff9, 0xfffd)
          .addRange(0x10190, 0x1019b)
          .addRange(0x101d0, 0x101fc)
          .addRange(0x1d000, 0x1d0f5)
          .addRange(0x1d100, 0x1d126)
          .addRange(0x1d129, 0x1d166)
          .addRange(0x1d16a, 0x1d17a)
          .addRange(0x1d183, 0x1d184)
          .addRange(0x1d18c, 0x1d1a9)
          .addRange(0x1d1ae, 0x1d1e8)
          .addRange(0x1d300, 0x1d356)
          .addRange(0x1d400, 0x1d454)
          .addRange(0x1d456, 0x1d49c)
          .addRange(0x1d49e, 0x1d49f)
          .addRange(0x1d4a5, 0x1d4a6)
          .addRange(0x1d4a9, 0x1d4ac)
          .addRange(0x1d4ae, 0x1d4b9)
          .addRange(0x1d4bd, 0x1d4c3)
          .addRange(0x1d4c5, 0x1d505)
          .addRange(0x1d507, 0x1d50a)
          .addRange(0x1d50d, 0x1d514)
          .addRange(0x1d516, 0x1d51c)
          .addRange(0x1d51e, 0x1d539)
          .addRange(0x1d53b, 0x1d53e)
          .addRange(0x1d540, 0x1d544)
          .addRange(0x1d54a, 0x1d550)
          .addRange(0x1d552, 0x1d6a5)
          .addRange(0x1d6a8, 0x1d7cb)
          .addRange(0x1d7ce, 0x1d7ff)
          .addRange(0x1f000, 0x1f02b)
          .addRange(0x1f030, 0x1f093)
          .addRange(0x1f0a0, 0x1f0ae)
          .addRange(0x1f0b1, 0x1f0bf)
          .addRange(0x1f0c1, 0x1f0cf)
          .addRange(0x1f0d1, 0x1f0f5)
          .addRange(0x1f100, 0x1f10c)
          .addRange(0x1f110, 0x1f12e)
          .addRange(0x1f130, 0x1f16b)
          .addRange(0x1f170, 0x1f1ac)
          .addRange(0x1f1e6, 0x1f1ff)
          .addRange(0x1f201, 0x1f202)
          .addRange(0x1f210, 0x1f23b)
          .addRange(0x1f240, 0x1f248)
          .addRange(0x1f260, 0x1f265)
          .addRange(0x1f300, 0x1f6d4)
          .addRange(0x1f6e0, 0x1f6ec)
          .addRange(0x1f6f0, 0x1f6f8)
          .addRange(0x1f700, 0x1f773)
          .addRange(0x1f780, 0x1f7d4)
          .addRange(0x1f800, 0x1f80b)
          .addRange(0x1f810, 0x1f847)
          .addRange(0x1f850, 0x1f859)
          .addRange(0x1f860, 0x1f887)
          .addRange(0x1f890, 0x1f8ad)
          .addRange(0x1f900, 0x1f90b)
          .addRange(0x1f910, 0x1f93e)
          .addRange(0x1f940, 0x1f94c)
          .addRange(0x1f950, 0x1f96b)
          .addRange(0x1f980, 0x1f997)
          .addRange(0x1f9d0, 0x1f9e6)
          .addRange(0xe0020, 0xe007f);

        /***/
      },
      /* 813 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x3e2, 0x3ef)
          .addRange(0x2c80, 0x2cf3)
          .addRange(0x2cf9, 0x2cff)
          .addRange(0x102e0, 0x102fb);

        /***/
      },
      /* 814 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x12000, 0x12399)
          .addRange(0x12400, 0x1246e)
          .addRange(0x12470, 0x12474)
          .addRange(0x12480, 0x12543);

        /***/
      },
      /* 815 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x10808, 0x1083c, 0x1083f)
          .addRange(0x10100, 0x10102)
          .addRange(0x10107, 0x10133)
          .addRange(0x10137, 0x1013f)
          .addRange(0x10800, 0x10805)
          .addRange(0x1080a, 0x10835)
          .addRange(0x10837, 0x10838);

        /***/
      },
      /* 816 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1d2b, 0x1d78, 0x2e43)
          .addRange(0x400, 0x52f)
          .addRange(0x1c80, 0x1c88)
          .addRange(0x2de0, 0x2dff)
          .addRange(0xa640, 0xa69f)
          .addRange(0xfe2e, 0xfe2f);

        /***/
      },
      /* 817 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10400, 0x1044f);

        /***/
      },
      /* 818 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x20f0)
          .addRange(0x900, 0x97f)
          .addRange(0x1cd0, 0x1cf6)
          .addRange(0x1cf8, 0x1cf9)
          .addRange(0xa830, 0xa839)
          .addRange(0xa8e0, 0xa8fd);

        /***/
      },
      /* 819 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1bc00, 0x1bc6a)
          .addRange(0x1bc70, 0x1bc7c)
          .addRange(0x1bc80, 0x1bc88)
          .addRange(0x1bc90, 0x1bc99)
          .addRange(0x1bc9c, 0x1bca3);

        /***/
      },
      /* 820 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x13000, 0x1342e);

        /***/
      },
      /* 821 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10500, 0x10527);

        /***/
      },
      /* 822 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1258, 0x12c0)
          .addRange(0x1200, 0x1248)
          .addRange(0x124a, 0x124d)
          .addRange(0x1250, 0x1256)
          .addRange(0x125a, 0x125d)
          .addRange(0x1260, 0x1288)
          .addRange(0x128a, 0x128d)
          .addRange(0x1290, 0x12b0)
          .addRange(0x12b2, 0x12b5)
          .addRange(0x12b8, 0x12be)
          .addRange(0x12c2, 0x12c5)
          .addRange(0x12c8, 0x12d6)
          .addRange(0x12d8, 0x1310)
          .addRange(0x1312, 0x1315)
          .addRange(0x1318, 0x135a)
          .addRange(0x135d, 0x137c)
          .addRange(0x1380, 0x1399)
          .addRange(0x2d80, 0x2d96)
          .addRange(0x2da0, 0x2da6)
          .addRange(0x2da8, 0x2dae)
          .addRange(0x2db0, 0x2db6)
          .addRange(0x2db8, 0x2dbe)
          .addRange(0x2dc0, 0x2dc6)
          .addRange(0x2dc8, 0x2dce)
          .addRange(0x2dd0, 0x2dd6)
          .addRange(0x2dd8, 0x2dde)
          .addRange(0xab01, 0xab06)
          .addRange(0xab09, 0xab0e)
          .addRange(0xab11, 0xab16)
          .addRange(0xab20, 0xab26)
          .addRange(0xab28, 0xab2e);

        /***/
      },
      /* 823 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x589,
          0x10c7,
          0x10cd,
          0x2d27,
          0x2d2d
        )
          .addRange(0x10a0, 0x10c5)
          .addRange(0x10d0, 0x10ff)
          .addRange(0x2d00, 0x2d25);

        /***/
      },
      /* 824 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x484, 0x487, 0x2e43, 0xa66f)
          .addRange(0x2c00, 0x2c2e)
          .addRange(0x2c30, 0x2c5e)
          .addRange(0x1e000, 0x1e006)
          .addRange(0x1e008, 0x1e018)
          .addRange(0x1e01b, 0x1e021)
          .addRange(0x1e023, 0x1e024)
          .addRange(0x1e026, 0x1e02a);

        /***/
      },
      /* 825 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10330, 0x1034a);

        /***/
      },
      /* 826 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xbaa,
          0xbb5,
          0x1cd0,
          0x20f0,
          0x11350,
          0x11357
        )
          .addRange(0x951, 0x952)
          .addRange(0x964, 0x965)
          .addRange(0xbe6, 0xbf2)
          .addRange(0x1cd2, 0x1cd3)
          .addRange(0x1cf2, 0x1cf4)
          .addRange(0x1cf8, 0x1cf9)
          .addRange(0x11300, 0x11303)
          .addRange(0x11305, 0x1130c)
          .addRange(0x1130f, 0x11310)
          .addRange(0x11313, 0x11328)
          .addRange(0x1132a, 0x11330)
          .addRange(0x11332, 0x11333)
          .addRange(0x11335, 0x11339)
          .addRange(0x1133c, 0x11344)
          .addRange(0x11347, 0x11348)
          .addRange(0x1134b, 0x1134d)
          .addRange(0x1135d, 0x11363)
          .addRange(0x11366, 0x1136c)
          .addRange(0x11370, 0x11374);

        /***/
      },
      /* 827 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0x342,
          0x345,
          0x37f,
          0x384,
          0x386,
          0x38c,
          0x1f59,
          0x1f5b,
          0x1f5d,
          0x2126,
          0xab65,
          0x101a0
        )
          .addRange(0x370, 0x373)
          .addRange(0x375, 0x377)
          .addRange(0x37a, 0x37d)
          .addRange(0x388, 0x38a)
          .addRange(0x38e, 0x3a1)
          .addRange(0x3a3, 0x3e1)
          .addRange(0x3f0, 0x3ff)
          .addRange(0x1d26, 0x1d2a)
          .addRange(0x1d5d, 0x1d61)
          .addRange(0x1d66, 0x1d6a)
          .addRange(0x1dbf, 0x1dc1)
          .addRange(0x1f00, 0x1f15)
          .addRange(0x1f18, 0x1f1d)
          .addRange(0x1f20, 0x1f45)
          .addRange(0x1f48, 0x1f4d)
          .addRange(0x1f50, 0x1f57)
          .addRange(0x1f5f, 0x1f7d)
          .addRange(0x1f80, 0x1fb4)
          .addRange(0x1fb6, 0x1fc4)
          .addRange(0x1fc6, 0x1fd3)
          .addRange(0x1fd6, 0x1fdb)
          .addRange(0x1fdd, 0x1fef)
          .addRange(0x1ff2, 0x1ff4)
          .addRange(0x1ff6, 0x1ffe)
          .addRange(0x10140, 0x1018e)
          .addRange(0x1d200, 0x1d245);

        /***/
      },
      /* 828 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xad0)
          .addRange(0x951, 0x952)
          .addRange(0x964, 0x965)
          .addRange(0xa81, 0xa83)
          .addRange(0xa85, 0xa8d)
          .addRange(0xa8f, 0xa91)
          .addRange(0xa93, 0xaa8)
          .addRange(0xaaa, 0xab0)
          .addRange(0xab2, 0xab3)
          .addRange(0xab5, 0xab9)
          .addRange(0xabc, 0xac5)
          .addRange(0xac7, 0xac9)
          .addRange(0xacb, 0xacd)
          .addRange(0xae0, 0xae3)
          .addRange(0xae6, 0xaf1)
          .addRange(0xaf9, 0xaff)
          .addRange(0xa830, 0xa839);

        /***/
      },
      /* 829 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xa3c, 0xa51, 0xa5e)
          .addRange(0x951, 0x952)
          .addRange(0x964, 0x965)
          .addRange(0xa01, 0xa03)
          .addRange(0xa05, 0xa0a)
          .addRange(0xa0f, 0xa10)
          .addRange(0xa13, 0xa28)
          .addRange(0xa2a, 0xa30)
          .addRange(0xa32, 0xa33)
          .addRange(0xa35, 0xa36)
          .addRange(0xa38, 0xa39)
          .addRange(0xa3e, 0xa42)
          .addRange(0xa47, 0xa48)
          .addRange(0xa4b, 0xa4d)
          .addRange(0xa59, 0xa5c)
          .addRange(0xa66, 0xa75)
          .addRange(0xa830, 0xa839);

        /***/
      },
      /* 830 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x3030, 0x30fb)
          .addRange(0x2e80, 0x2e99)
          .addRange(0x2e9b, 0x2ef3)
          .addRange(0x2f00, 0x2fd5)
          .addRange(0x3001, 0x3003)
          .addRange(0x3005, 0x3011)
          .addRange(0x3013, 0x301f)
          .addRange(0x3021, 0x302d)
          .addRange(0x3037, 0x303f)
          .addRange(0x3190, 0x319f)
          .addRange(0x31c0, 0x31e3)
          .addRange(0x3220, 0x3247)
          .addRange(0x3280, 0x32b0)
          .addRange(0x32c0, 0x32cb)
          .addRange(0x3358, 0x3370)
          .addRange(0x337b, 0x337f)
          .addRange(0x33e0, 0x33fe)
          .addRange(0x3400, 0x4db5)
          .addRange(0x4e00, 0x9fea)
          .addRange(0xf900, 0xfa6d)
          .addRange(0xfa70, 0xfad9)
          .addRange(0xfe45, 0xfe46)
          .addRange(0xff61, 0xff65)
          .addRange(0x1d360, 0x1d371)
          .addRange(0x1f250, 0x1f251)
          .addRange(0x20000, 0x2a6d6)
          .addRange(0x2a700, 0x2b734)
          .addRange(0x2b740, 0x2b81d)
          .addRange(0x2b820, 0x2cea1)
          .addRange(0x2ceb0, 0x2ebe0)
          .addRange(0x2f800, 0x2fa1d);

        /***/
      },
      /* 831 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x3037, 0x30fb)
          .addRange(0x1100, 0x11ff)
          .addRange(0x3001, 0x3003)
          .addRange(0x3008, 0x3011)
          .addRange(0x3013, 0x301f)
          .addRange(0x302e, 0x3030)
          .addRange(0x3131, 0x318e)
          .addRange(0x3200, 0x321e)
          .addRange(0x3260, 0x327e)
          .addRange(0xa960, 0xa97c)
          .addRange(0xac00, 0xd7a3)
          .addRange(0xd7b0, 0xd7c6)
          .addRange(0xd7cb, 0xd7fb)
          .addRange(0xfe45, 0xfe46)
          .addRange(0xff61, 0xff65)
          .addRange(0xffa0, 0xffbe)
          .addRange(0xffc2, 0xffc7)
          .addRange(0xffca, 0xffcf)
          .addRange(0xffd2, 0xffd7)
          .addRange(0xffda, 0xffdc);

        /***/
      },
      /* 832 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x1720, 0x1736);

        /***/
      },
      /* 833 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x108e0, 0x108f2)
          .addRange(0x108f4, 0x108f5)
          .addRange(0x108fb, 0x108ff);

        /***/
      },
      /* 834 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xfb3e)
          .addRange(0x591, 0x5c7)
          .addRange(0x5d0, 0x5ea)
          .addRange(0x5f0, 0x5f4)
          .addRange(0xfb1d, 0xfb36)
          .addRange(0xfb38, 0xfb3c)
          .addRange(0xfb40, 0xfb41)
          .addRange(0xfb43, 0xfb44)
          .addRange(0xfb46, 0xfb4f);

        /***/
      },
      /* 835 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x3037, 0xff70, 0x1f200)
          .addRange(0x3001, 0x3003)
          .addRange(0x3008, 0x3011)
          .addRange(0x3013, 0x301f)
          .addRange(0x3030, 0x3035)
          .addRange(0x303c, 0x303d)
          .addRange(0x3041, 0x3096)
          .addRange(0x3099, 0x30a0)
          .addRange(0x30fb, 0x30fc)
          .addRange(0xfe45, 0xfe46)
          .addRange(0xff61, 0xff65)
          .addRange(0xff9e, 0xff9f)
          .addRange(0x1b001, 0x1b11e);

        /***/
      },
      /* 836 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10840, 0x10855)
          .addRange(0x10857, 0x1085f);

        /***/
      },
      /* 837 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x101fd)
          .addRange(0x300, 0x341)
          .addRange(0x343, 0x344)
          .addRange(0x346, 0x362)
          .addRange(0x1ab0, 0x1abe)
          .addRange(0x1dc2, 0x1df9)
          .addRange(0x1dfb, 0x1dff)
          .addRange(0x200c, 0x200d)
          .addRange(0x20d0, 0x20ef)
          .addRange(0xfe00, 0xfe0f)
          .addRange(0xfe20, 0xfe2d)
          .addRange(0x1d167, 0x1d169)
          .addRange(0x1d17b, 0x1d182)
          .addRange(0x1d185, 0x1d18b)
          .addRange(0x1d1aa, 0x1d1ad)
          .addRange(0xe0100, 0xe01ef);

        /***/
      },
      /* 838 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10b60, 0x10b72)
          .addRange(0x10b78, 0x10b7f);

        /***/
      },
      /* 839 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10b40, 0x10b55)
          .addRange(0x10b58, 0x10b5f);

        /***/
      },
      /* 840 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xa980, 0xa9cd)
          .addRange(0xa9cf, 0xa9d9)
          .addRange(0xa9de, 0xa9df);

        /***/
      },
      /* 841 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x966, 0x96f)
          .addRange(0xa830, 0xa839)
          .addRange(0x11080, 0x110c1);

        /***/
      },
      /* 842 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xcde, 0x1cda, 0x1cf5)
          .addRange(0x951, 0x952)
          .addRange(0x964, 0x965)
          .addRange(0xc80, 0xc83)
          .addRange(0xc85, 0xc8c)
          .addRange(0xc8e, 0xc90)
          .addRange(0xc92, 0xca8)
          .addRange(0xcaa, 0xcb3)
          .addRange(0xcb5, 0xcb9)
          .addRange(0xcbc, 0xcc4)
          .addRange(0xcc6, 0xcc8)
          .addRange(0xcca, 0xccd)
          .addRange(0xcd5, 0xcd6)
          .addRange(0xce0, 0xce3)
          .addRange(0xce6, 0xcef)
          .addRange(0xcf1, 0xcf2)
          .addRange(0xa830, 0xa835);

        /***/
      },
      /* 843 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x3037, 0x1b000)
          .addRange(0x3001, 0x3003)
          .addRange(0x3008, 0x3011)
          .addRange(0x3013, 0x301f)
          .addRange(0x3030, 0x3035)
          .addRange(0x303c, 0x303d)
          .addRange(0x3099, 0x309c)
          .addRange(0x30a0, 0x30ff)
          .addRange(0x31f0, 0x31ff)
          .addRange(0x32d0, 0x32fe)
          .addRange(0x3300, 0x3357)
          .addRange(0xfe45, 0xfe46)
          .addRange(0xff61, 0xff9f);

        /***/
      },
      /* 844 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0xa900, 0xa92f);

        /***/
      },
      /* 845 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10a00, 0x10a03)
          .addRange(0x10a05, 0x10a06)
          .addRange(0x10a0c, 0x10a13)
          .addRange(0x10a15, 0x10a17)
          .addRange(0x10a19, 0x10a33)
          .addRange(0x10a38, 0x10a3a)
          .addRange(0x10a3f, 0x10a47)
          .addRange(0x10a50, 0x10a58);

        /***/
      },
      /* 846 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1780, 0x17dd)
          .addRange(0x17e0, 0x17e9)
          .addRange(0x17f0, 0x17f9)
          .addRange(0x19e0, 0x19ff);

        /***/
      },
      /* 847 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xae6, 0xaef)
          .addRange(0x11200, 0x11211)
          .addRange(0x11213, 0x1123e);

        /***/
      },
      /* 848 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x964, 0x965)
          .addRange(0xa830, 0xa839)
          .addRange(0x112b0, 0x112ea)
          .addRange(0x112f0, 0x112f9);

        /***/
      },
      /* 849 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xe84,
          0xe8a,
          0xe8d,
          0xea5,
          0xea7,
          0xec6
        )
          .addRange(0xe81, 0xe82)
          .addRange(0xe87, 0xe88)
          .addRange(0xe94, 0xe97)
          .addRange(0xe99, 0xe9f)
          .addRange(0xea1, 0xea3)
          .addRange(0xeaa, 0xeab)
          .addRange(0xead, 0xeb9)
          .addRange(0xebb, 0xebd)
          .addRange(0xec0, 0xec4)
          .addRange(0xec8, 0xecd)
          .addRange(0xed0, 0xed9)
          .addRange(0xedc, 0xedf);

        /***/
      },
      /* 850 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xaa,
          0xba,
          0x10fb,
          0x2071,
          0x207f,
          0x20f0,
          0x2132,
          0x214e,
          0xa92e
        )
          .addRange(0x41, 0x5a)
          .addRange(0x61, 0x7a)
          .addRange(0xc0, 0xd6)
          .addRange(0xd8, 0xf6)
          .addRange(0xf8, 0x2b8)
          .addRange(0x2e0, 0x2e4)
          .addRange(0x363, 0x36f)
          .addRange(0x485, 0x486)
          .addRange(0x951, 0x952)
          .addRange(0x1d00, 0x1d25)
          .addRange(0x1d2c, 0x1d5c)
          .addRange(0x1d62, 0x1d65)
          .addRange(0x1d6b, 0x1d77)
          .addRange(0x1d79, 0x1dbe)
          .addRange(0x1e00, 0x1eff)
          .addRange(0x2090, 0x209c)
          .addRange(0x212a, 0x212b)
          .addRange(0x2160, 0x2188)
          .addRange(0x2c60, 0x2c7f)
          .addRange(0xa722, 0xa787)
          .addRange(0xa78b, 0xa7ae)
          .addRange(0xa7b0, 0xa7b7)
          .addRange(0xa7f7, 0xa7ff)
          .addRange(0xab30, 0xab5a)
          .addRange(0xab5c, 0xab64)
          .addRange(0xfb00, 0xfb06)
          .addRange(0xff21, 0xff3a)
          .addRange(0xff41, 0xff5a);

        /***/
      },
      /* 851 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1c00, 0x1c37)
          .addRange(0x1c3b, 0x1c49)
          .addRange(0x1c4d, 0x1c4f);

        /***/
      },
      /* 852 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x965, 0x1940)
          .addRange(0x1900, 0x191e)
          .addRange(0x1920, 0x192b)
          .addRange(0x1930, 0x193b)
          .addRange(0x1944, 0x194f);

        /***/
      },
      /* 853 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10107, 0x10133)
          .addRange(0x10600, 0x10736)
          .addRange(0x10740, 0x10755)
          .addRange(0x10760, 0x10767);

        /***/
      },
      /* 854 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10000, 0x1000b)
          .addRange(0x1000d, 0x10026)
          .addRange(0x10028, 0x1003a)
          .addRange(0x1003c, 0x1003d)
          .addRange(0x1003f, 0x1004d)
          .addRange(0x10050, 0x1005d)
          .addRange(0x10080, 0x100fa)
          .addRange(0x10100, 0x10102)
          .addRange(0x10107, 0x10133)
          .addRange(0x10137, 0x1013f);

        /***/
      },
      /* 855 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0xa4d0, 0xa4ff);

        /***/
      },
      /* 856 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10280, 0x1029c);

        /***/
      },
      /* 857 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1093f).addRange(
          0x10920,
          0x10939
        );

        /***/
      },
      /* 858 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x964, 0x96f)
          .addRange(0xa830, 0xa839)
          .addRange(0x11150, 0x11176);

        /***/
      },
      /* 859 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1cda)
          .addRange(0x951, 0x952)
          .addRange(0x964, 0x965)
          .addRange(0xd00, 0xd03)
          .addRange(0xd05, 0xd0c)
          .addRange(0xd0e, 0xd10)
          .addRange(0xd12, 0xd44)
          .addRange(0xd46, 0xd48)
          .addRange(0xd4a, 0xd4f)
          .addRange(0xd54, 0xd63)
          .addRange(0xd66, 0xd7f);

        /***/
      },
      /* 860 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x640, 0x85e).addRange(
          0x840,
          0x85b
        );

        /***/
      },
      /* 861 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x640)
          .addRange(0x10ac0, 0x10ae6)
          .addRange(0x10aeb, 0x10af6);

        /***/
      },
      /* 862 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11c70, 0x11c8f)
          .addRange(0x11c92, 0x11ca7)
          .addRange(0x11ca9, 0x11cb6);

        /***/
      },
      /* 863 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x11d3a)
          .addRange(0x11d00, 0x11d06)
          .addRange(0x11d08, 0x11d09)
          .addRange(0x11d0b, 0x11d36)
          .addRange(0x11d3c, 0x11d3d)
          .addRange(0x11d3f, 0x11d47)
          .addRange(0x11d50, 0x11d59);

        /***/
      },
      /* 864 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xaae0, 0xaaf6)
          .addRange(0xabc0, 0xabed)
          .addRange(0xabf0, 0xabf9);

        /***/
      },
      /* 865 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1e800, 0x1e8c4)
          .addRange(0x1e8c7, 0x1e8d6);

        /***/
      },
      /* 866 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x109a0, 0x109b7)
          .addRange(0x109bc, 0x109cf)
          .addRange(0x109d2, 0x109ff);

        /***/
      },
      /* 867 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10980, 0x1099f);

        /***/
      },
      /* 868 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x16f00, 0x16f44)
          .addRange(0x16f50, 0x16f7e)
          .addRange(0x16f8f, 0x16f9f);

        /***/
      },
      /* 869 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xa830, 0xa839)
          .addRange(0x11600, 0x11644)
          .addRange(0x11650, 0x11659);

        /***/
      },
      /* 870 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1800, 0x180e)
          .addRange(0x1810, 0x1819)
          .addRange(0x1820, 0x1877)
          .addRange(0x1880, 0x18aa)
          .addRange(0x11660, 0x1166c);

        /***/
      },
      /* 871 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x16a40, 0x16a5e)
          .addRange(0x16a60, 0x16a69)
          .addRange(0x16a6e, 0x16a6f);

        /***/
      },
      /* 872 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x11288)
          .addRange(0xa66, 0xa6f)
          .addRange(0x11280, 0x11286)
          .addRange(0x1128a, 0x1128d)
          .addRange(0x1128f, 0x1129d)
          .addRange(0x1129f, 0x112a9);

        /***/
      },
      /* 873 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xa92e)
          .addRange(0x1000, 0x109f)
          .addRange(0xa9e0, 0xa9fe)
          .addRange(0xaa60, 0xaa7f);

        /***/
      },
      /* 874 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10880, 0x1089e)
          .addRange(0x108a7, 0x108af);

        /***/
      },
      /* 875 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1980, 0x19ab)
          .addRange(0x19b0, 0x19c9)
          .addRange(0x19d0, 0x19da)
          .addRange(0x19de, 0x19df);

        /***/
      },
      /* 876 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1145b, 0x1145d).addRange(
          0x11400,
          0x11459
        );

        /***/
      },
      /* 877 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x7c0, 0x7fa);

        /***/
      },
      /* 878 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x16fe1).addRange(
          0x1b170,
          0x1b2fb
        );

        /***/
      },
      /* 879 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x1680, 0x169c);

        /***/
      },
      /* 880 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x1c50, 0x1c7f);

        /***/
      },
      /* 881 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10c80, 0x10cb2)
          .addRange(0x10cc0, 0x10cf2)
          .addRange(0x10cfa, 0x10cff);

        /***/
      },
      /* 882 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10300, 0x10323)
          .addRange(0x1032d, 0x1032f);

        /***/
      },
      /* 883 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10a80, 0x10a9f);

        /***/
      },
      /* 884 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x483).addRange(
          0x10350,
          0x1037a
        );

        /***/
      },
      /* 885 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x103a0, 0x103c3)
          .addRange(0x103c8, 0x103d5);

        /***/
      },
      /* 886 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10a60, 0x10a7f);

        /***/
      },
      /* 887 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10c00, 0x10c48);

        /***/
      },
      /* 888 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x951, 0x952)
          .addRange(0x964, 0x965)
          .addRange(0xb01, 0xb03)
          .addRange(0xb05, 0xb0c)
          .addRange(0xb0f, 0xb10)
          .addRange(0xb13, 0xb28)
          .addRange(0xb2a, 0xb30)
          .addRange(0xb32, 0xb33)
          .addRange(0xb35, 0xb39)
          .addRange(0xb3c, 0xb44)
          .addRange(0xb47, 0xb48)
          .addRange(0xb4b, 0xb4d)
          .addRange(0xb56, 0xb57)
          .addRange(0xb5c, 0xb5d)
          .addRange(0xb5f, 0xb63)
          .addRange(0xb66, 0xb77);

        /***/
      },
      /* 889 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x104b0, 0x104d3)
          .addRange(0x104d8, 0x104fb);

        /***/
      },
      /* 890 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x10480, 0x1049d)
          .addRange(0x104a0, 0x104a9);

        /***/
      },
      /* 891 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x16b00, 0x16b45)
          .addRange(0x16b50, 0x16b59)
          .addRange(0x16b5b, 0x16b61)
          .addRange(0x16b63, 0x16b77)
          .addRange(0x16b7d, 0x16b8f);

        /***/
      },
      /* 892 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10860, 0x1087f);

        /***/
      },
      /* 893 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x11ac0, 0x11af8);

        /***/
      },
      /* 894 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1805)
          .addRange(0x1802, 0x1803)
          .addRange(0xa840, 0xa877);

        /***/
      },
      /* 895 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1091f).addRange(
          0x10900,
          0x1091b
        );

        /***/
      },
      /* 896 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x640)
          .addRange(0x10b80, 0x10b91)
          .addRange(0x10b99, 0x10b9c)
          .addRange(0x10ba9, 0x10baf);

        /***/
      },
      /* 897 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xa95f).addRange(
          0xa930,
          0xa953
        );

        /***/
      },
      /* 898 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x16a0, 0x16ea)
          .addRange(0x16ee, 0x16f8);

        /***/
      },
      /* 899 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x800, 0x82d)
          .addRange(0x830, 0x83e);

        /***/
      },
      /* 900 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xa880, 0xa8c5)
          .addRange(0xa8ce, 0xa8d9);

        /***/
      },
      /* 901 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x951, 0x1cd7, 0x1cd9, 0x1ce0)
          .addRange(0x1cdc, 0x1cdd)
          .addRange(0x11180, 0x111cd)
          .addRange(0x111d0, 0x111df);

        /***/
      },
      /* 902 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x10450, 0x1047f);

        /***/
      },
      /* 903 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11580, 0x115b5)
          .addRange(0x115b8, 0x115dd);

        /***/
      },
      /* 904 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1d800, 0x1da8b)
          .addRange(0x1da9b, 0x1da9f)
          .addRange(0x1daa1, 0x1daaf);

        /***/
      },
      /* 905 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0xdbd, 0xdca, 0xdd6)
          .addRange(0x964, 0x965)
          .addRange(0xd82, 0xd83)
          .addRange(0xd85, 0xd96)
          .addRange(0xd9a, 0xdb1)
          .addRange(0xdb3, 0xdbb)
          .addRange(0xdc0, 0xdc6)
          .addRange(0xdcf, 0xdd4)
          .addRange(0xdd8, 0xddf)
          .addRange(0xde6, 0xdef)
          .addRange(0xdf2, 0xdf4)
          .addRange(0x111e1, 0x111f4);

        /***/
      },
      /* 906 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x110d0, 0x110e8)
          .addRange(0x110f0, 0x110f9);

        /***/
      },
      /* 907 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x11a50, 0x11a83)
          .addRange(0x11a86, 0x11a9c)
          .addRange(0x11a9e, 0x11aa2);

        /***/
      },
      /* 908 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1b80, 0x1bbf)
          .addRange(0x1cc0, 0x1cc7);

        /***/
      },
      /* 909 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x964, 0x965)
          .addRange(0x9e6, 0x9ef)
          .addRange(0xa800, 0xa82b);

        /***/
      },
      /* 910 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x60c, 0x61f, 0x640, 0x670)
          .addRange(0x61b, 0x61c)
          .addRange(0x64b, 0x655)
          .addRange(0x700, 0x70d)
          .addRange(0x70f, 0x74a)
          .addRange(0x74d, 0x74f)
          .addRange(0x860, 0x86a);

        /***/
      },
      /* 911 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1700, 0x170c)
          .addRange(0x170e, 0x1714)
          .addRange(0x1735, 0x1736);

        /***/
      },
      /* 912 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1735, 0x1736)
          .addRange(0x1760, 0x176c)
          .addRange(0x176e, 0x1770)
          .addRange(0x1772, 0x1773);

        /***/
      },
      /* 913 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1040, 0x1049)
          .addRange(0x1950, 0x196d)
          .addRange(0x1970, 0x1974);

        /***/
      },
      /* 914 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x1a20, 0x1a5e)
          .addRange(0x1a60, 0x1a7c)
          .addRange(0x1a7f, 0x1a89)
          .addRange(0x1a90, 0x1a99)
          .addRange(0x1aa0, 0x1aad);

        /***/
      },
      /* 915 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xaa80, 0xaac2)
          .addRange(0xaadb, 0xaadf);

        /***/
      },
      /* 916 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x964, 0x965)
          .addRange(0xa830, 0xa839)
          .addRange(0x11680, 0x116b7)
          .addRange(0x116c0, 0x116c9);

        /***/
      },
      /* 917 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(
          0xb9c,
          0xbd0,
          0xbd7,
          0x1cda,
          0xa8f3,
          0x11301,
          0x11303,
          0x1133c
        )
          .addRange(0x951, 0x952)
          .addRange(0x964, 0x965)
          .addRange(0xb82, 0xb83)
          .addRange(0xb85, 0xb8a)
          .addRange(0xb8e, 0xb90)
          .addRange(0xb92, 0xb95)
          .addRange(0xb99, 0xb9a)
          .addRange(0xb9e, 0xb9f)
          .addRange(0xba3, 0xba4)
          .addRange(0xba8, 0xbaa)
          .addRange(0xbae, 0xbb9)
          .addRange(0xbbe, 0xbc2)
          .addRange(0xbc6, 0xbc8)
          .addRange(0xbca, 0xbcd)
          .addRange(0xbe6, 0xbfa);

        /***/
      },
      /* 918 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x16fe0)
          .addRange(0x17000, 0x187ec)
          .addRange(0x18800, 0x18af2);

        /***/
      },
      /* 919 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1cda)
          .addRange(0x951, 0x952)
          .addRange(0x964, 0x965)
          .addRange(0xc00, 0xc03)
          .addRange(0xc05, 0xc0c)
          .addRange(0xc0e, 0xc10)
          .addRange(0xc12, 0xc28)
          .addRange(0xc2a, 0xc39)
          .addRange(0xc3d, 0xc44)
          .addRange(0xc46, 0xc48)
          .addRange(0xc4a, 0xc4d)
          .addRange(0xc55, 0xc56)
          .addRange(0xc58, 0xc5a)
          .addRange(0xc60, 0xc63)
          .addRange(0xc66, 0xc6f)
          .addRange(0xc78, 0xc7f);

        /***/
      },
      /* 920 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x60c, 0x61f, 0xfdf2, 0xfdfd)
          .addRange(0x61b, 0x61c)
          .addRange(0x660, 0x669)
          .addRange(0x780, 0x7b1);

        /***/
      },
      /* 921 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xe01, 0xe3a)
          .addRange(0xe40, 0xe5b);

        /***/
      },
      /* 922 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0xf00, 0xf47)
          .addRange(0xf49, 0xf6c)
          .addRange(0xf71, 0xf97)
          .addRange(0xf99, 0xfbc)
          .addRange(0xfbe, 0xfcc)
          .addRange(0xfce, 0xfd4)
          .addRange(0xfd9, 0xfda);

        /***/
      },
      /* 923 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x2d7f)
          .addRange(0x2d30, 0x2d67)
          .addRange(0x2d6f, 0x2d70);

        /***/
      },
      /* 924 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)()
          .addRange(0x964, 0x965)
          .addRange(0xa830, 0xa839)
          .addRange(0x11480, 0x114c7)
          .addRange(0x114d0, 0x114d9);

        /***/
      },
      /* 925 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x1039f).addRange(
          0x10380,
          0x1039d
        );

        /***/
      },
      /* 926 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0xa500, 0xa62b);

        /***/
      },
      /* 927 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x118ff).addRange(
          0x118a0,
          0x118f2
        );

        /***/
      },
      /* 928 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)(0x30fb)
          .addRange(0x3001, 0x3002)
          .addRange(0x3008, 0x3011)
          .addRange(0x3014, 0x301b)
          .addRange(0xa000, 0xa48c)
          .addRange(0xa490, 0xa4c6)
          .addRange(0xff61, 0xff65);

        /***/
      },
      /* 929 */
      /***/ function(module, exports, __webpack_require__) {
        module.exports = __webpack_require__(0)().addRange(0x11a00, 0x11a47);

        /***/
      },
      /* 930 */
      /***/ function(module, exports) {
        module.exports = "5.0";

        /***/
      },
      /* 931 */
      /***/ function(module, exports) {
        module.exports = new Map([
          [
            "General_Category",
            [
              "Cased_Letter",
              "Close_Punctuation",
              "Connector_Punctuation",
              "Control",
              "Currency_Symbol",
              "Dash_Punctuation",
              "Decimal_Number",
              "Enclosing_Mark",
              "Final_Punctuation",
              "Format",
              "Initial_Punctuation",
              "Letter",
              "Letter_Number",
              "Line_Separator",
              "Lowercase_Letter",
              "Mark",
              "Math_Symbol",
              "Modifier_Letter",
              "Modifier_Symbol",
              "Nonspacing_Mark",
              "Number",
              "Open_Punctuation",
              "Other",
              "Other_Letter",
              "Other_Number",
              "Other_Punctuation",
              "Other_Symbol",
              "Paragraph_Separator",
              "Private_Use",
              "Punctuation",
              "Separator",
              "Space_Separator",
              "Spacing_Mark",
              "Surrogate",
              "Symbol",
              "Titlecase_Letter",
              "Unassigned",
              "Uppercase_Letter"
            ]
          ],
          [
            "Script",
            [
              "Adlam",
              "Ahom",
              "Anatolian_Hieroglyphs",
              "Arabic",
              "Armenian",
              "Avestan",
              "Balinese",
              "Bamum",
              "Bassa_Vah",
              "Batak",
              "Bengali",
              "Bhaiksuki",
              "Bopomofo",
              "Brahmi",
              "Braille",
              "Buginese",
              "Buhid",
              "Canadian_Aboriginal",
              "Carian",
              "Caucasian_Albanian",
              "Chakma",
              "Cham",
              "Cherokee",
              "Common",
              "Coptic",
              "Cuneiform",
              "Cypriot",
              "Cyrillic",
              "Deseret",
              "Devanagari",
              "Duployan",
              "Egyptian_Hieroglyphs",
              "Elbasan",
              "Ethiopic",
              "Georgian",
              "Glagolitic",
              "Gothic",
              "Grantha",
              "Greek",
              "Gujarati",
              "Gurmukhi",
              "Han",
              "Hangul",
              "Hanunoo",
              "Hatran",
              "Hebrew",
              "Hiragana",
              "Imperial_Aramaic",
              "Inherited",
              "Inscriptional_Pahlavi",
              "Inscriptional_Parthian",
              "Javanese",
              "Kaithi",
              "Kannada",
              "Katakana",
              "Kayah_Li",
              "Kharoshthi",
              "Khmer",
              "Khojki",
              "Khudawadi",
              "Lao",
              "Latin",
              "Lepcha",
              "Limbu",
              "Linear_A",
              "Linear_B",
              "Lisu",
              "Lycian",
              "Lydian",
              "Mahajani",
              "Malayalam",
              "Mandaic",
              "Manichaean",
              "Marchen",
              "Masaram_Gondi",
              "Meetei_Mayek",
              "Mende_Kikakui",
              "Meroitic_Cursive",
              "Meroitic_Hieroglyphs",
              "Miao",
              "Modi",
              "Mongolian",
              "Mro",
              "Multani",
              "Myanmar",
              "Nabataean",
              "New_Tai_Lue",
              "Newa",
              "Nko",
              "Nushu",
              "Ogham",
              "Ol_Chiki",
              "Old_Hungarian",
              "Old_Italic",
              "Old_North_Arabian",
              "Old_Permic",
              "Old_Persian",
              "Old_South_Arabian",
              "Old_Turkic",
              "Oriya",
              "Osage",
              "Osmanya",
              "Pahawh_Hmong",
              "Palmyrene",
              "Pau_Cin_Hau",
              "Phags_Pa",
              "Phoenician",
              "Psalter_Pahlavi",
              "Rejang",
              "Runic",
              "Samaritan",
              "Saurashtra",
              "Sharada",
              "Shavian",
              "Siddham",
              "SignWriting",
              "Sinhala",
              "Sora_Sompeng",
              "Soyombo",
              "Sundanese",
              "Syloti_Nagri",
              "Syriac",
              "Tagalog",
              "Tagbanwa",
              "Tai_Le",
              "Tai_Tham",
              "Tai_Viet",
              "Takri",
              "Tamil",
              "Tangut",
              "Telugu",
              "Thaana",
              "Thai",
              "Tibetan",
              "Tifinagh",
              "Tirhuta",
              "Ugaritic",
              "Vai",
              "Warang_Citi",
              "Yi",
              "Zanabazar_Square"
            ]
          ],
          [
            "Script_Extensions",
            [
              "Adlam",
              "Ahom",
              "Anatolian_Hieroglyphs",
              "Arabic",
              "Armenian",
              "Avestan",
              "Balinese",
              "Bamum",
              "Bassa_Vah",
              "Batak",
              "Bengali",
              "Bhaiksuki",
              "Bopomofo",
              "Brahmi",
              "Braille",
              "Buginese",
              "Buhid",
              "Canadian_Aboriginal",
              "Carian",
              "Caucasian_Albanian",
              "Chakma",
              "Cham",
              "Cherokee",
              "Common",
              "Coptic",
              "Cuneiform",
              "Cypriot",
              "Cyrillic",
              "Deseret",
              "Devanagari",
              "Duployan",
              "Egyptian_Hieroglyphs",
              "Elbasan",
              "Ethiopic",
              "Georgian",
              "Glagolitic",
              "Gothic",
              "Grantha",
              "Greek",
              "Gujarati",
              "Gurmukhi",
              "Han",
              "Hangul",
              "Hanunoo",
              "Hatran",
              "Hebrew",
              "Hiragana",
              "Imperial_Aramaic",
              "Inherited",
              "Inscriptional_Pahlavi",
              "Inscriptional_Parthian",
              "Javanese",
              "Kaithi",
              "Kannada",
              "Katakana",
              "Kayah_Li",
              "Kharoshthi",
              "Khmer",
              "Khojki",
              "Khudawadi",
              "Lao",
              "Latin",
              "Lepcha",
              "Limbu",
              "Linear_A",
              "Linear_B",
              "Lisu",
              "Lycian",
              "Lydian",
              "Mahajani",
              "Malayalam",
              "Mandaic",
              "Manichaean",
              "Marchen",
              "Masaram_Gondi",
              "Meetei_Mayek",
              "Mende_Kikakui",
              "Meroitic_Cursive",
              "Meroitic_Hieroglyphs",
              "Miao",
              "Modi",
              "Mongolian",
              "Mro",
              "Multani",
              "Myanmar",
              "Nabataean",
              "New_Tai_Lue",
              "Newa",
              "Nko",
              "Nushu",
              "Ogham",
              "Ol_Chiki",
              "Old_Hungarian",
              "Old_Italic",
              "Old_North_Arabian",
              "Old_Permic",
              "Old_Persian",
              "Old_South_Arabian",
              "Old_Turkic",
              "Oriya",
              "Osage",
              "Osmanya",
              "Pahawh_Hmong",
              "Palmyrene",
              "Pau_Cin_Hau",
              "Phags_Pa",
              "Phoenician",
              "Psalter_Pahlavi",
              "Rejang",
              "Runic",
              "Samaritan",
              "Saurashtra",
              "Sharada",
              "Shavian",
              "Siddham",
              "SignWriting",
              "Sinhala",
              "Sora_Sompeng",
              "Soyombo",
              "Sundanese",
              "Syloti_Nagri",
              "Syriac",
              "Tagalog",
              "Tagbanwa",
              "Tai_Le",
              "Tai_Tham",
              "Tai_Viet",
              "Takri",
              "Tamil",
              "Tangut",
              "Telugu",
              "Thaana",
              "Thai",
              "Tibetan",
              "Tifinagh",
              "Tirhuta",
              "Ugaritic",
              "Vai",
              "Warang_Citi",
              "Yi",
              "Zanabazar_Square"
            ]
          ],
          [
            "Binary_Property",
            [
              "ASCII",
              "ASCII_Hex_Digit",
              "Alphabetic",
              "Any",
              "Assigned",
              "Bidi_Control",
              "Bidi_Mirrored",
              "Case_Ignorable",
              "Cased",
              "Changes_When_Casefolded",
              "Changes_When_Casemapped",
              "Changes_When_Lowercased",
              "Changes_When_NFKC_Casefolded",
              "Changes_When_Titlecased",
              "Changes_When_Uppercased",
              "Dash",
              "Default_Ignorable_Code_Point",
              "Deprecated",
              "Diacritic",
              "Emoji",
              "Emoji_Component",
              "Emoji_Modifier",
              "Emoji_Modifier_Base",
              "Emoji_Presentation",
              "Extender",
              "Grapheme_Base",
              "Grapheme_Extend",
              "Hex_Digit",
              "IDS_Binary_Operator",
              "IDS_Trinary_Operator",
              "ID_Continue",
              "ID_Start",
              "Ideographic",
              "Join_Control",
              "Logical_Order_Exception",
              "Lowercase",
              "Math",
              "Noncharacter_Code_Point",
              "Pattern_Syntax",
              "Pattern_White_Space",
              "Quotation_Mark",
              "Radical",
              "Regional_Indicator",
              "Sentence_Terminal",
              "Soft_Dotted",
              "Terminal_Punctuation",
              "Unified_Ideograph",
              "Uppercase",
              "Variation_Selector",
              "White_Space",
              "XID_Continue",
              "XID_Start"
            ]
          ]
        ]);

        /***/
      },
      /* 932 */
      /***/ function(module, exports) {
        module.exports = "10.0.0";

        /***/
      },
      /* 933 */
      /***/ function(module, exports, __webpack_require__) {
        var basePullAll = __webpack_require__(934);

        function pullAll(array, values) {
          return array && array.length && values && values.length
            ? basePullAll(array, values)
            : array;
        }

        module.exports = pullAll;

        /***/
      },
      /* 934 */
      /***/ function(module, exports, __webpack_require__) {
        var arrayMap = __webpack_require__(46),
          baseIndexOf = __webpack_require__(77),
          baseIndexOfWith = __webpack_require__(935),
          baseUnary = __webpack_require__(27),
          copyArray = __webpack_require__(115);

        var arrayProto = Array.prototype;
        var splice = arrayProto.splice;

        function basePullAll(array, values, iteratee, comparator) {
          var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

          if (array === values) {
            values = copyArray(values);
          }

          if (iteratee) {
            seen = arrayMap(array, baseUnary(iteratee));
          }

          while (++index < length) {
            var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

            while (
              (fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1
            ) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }

              splice.call(array, fromIndex, 1);
            }
          }

          return array;
        }

        module.exports = basePullAll;

        /***/
      },
      /* 935 */
      /***/ function(module, exports) {
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1,
            length = array.length;

          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }

          return -1;
        }

        module.exports = baseIndexOfWith;

        /***/
      },
      /* 936 */
      /***/ function(module, exports, __webpack_require__) {
        var baseSlice = __webpack_require__(937),
          isIterateeCall = __webpack_require__(35),
          toInteger = __webpack_require__(45);

        var nativeCeil = Math.ceil,
          nativeMax = Math.max;

        function chunk(array, size, guard) {
          if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
            size = 1;
          } else {
            size = nativeMax(toInteger(size), 0);
          }

          var length = array == null ? 0 : array.length;

          if (!length || size < 1) {
            return [];
          }

          var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

          while (index < length) {
            result[resIndex++] = baseSlice(array, index, (index += size));
          }

          return result;
        }

        module.exports = chunk;

        /***/
      },
      /* 937 */
      /***/ function(module, exports) {
        function baseSlice(array, start, end) {
          var index = -1,
            length = array.length;

          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }

          end = end > length ? length : end;

          if (end < 0) {
            end += length;
          }

          length = start > end ? 0 : (end - start) >>> 0;
          start >>>= 0;
          var result = Array(length);

          while (++index < length) {
            result[index] = array[index + start];
          }

          return result;
        }

        module.exports = baseSlice;

        /***/
      },
      /* 938 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = rewriteThis;

        function rewriteThis(programPath) {
          programPath.traverse(rewriteThisVisitor);
        }

        var rewriteThisVisitor = {
          ThisExpression: function ThisExpression(path) {
            path.replaceWith(path.scope.buildUndefinedNode());
          },
          Function: function Function(path) {
            if (!path.isArrowFunctionExpression()) path.skip();
          },
          ClassProperty: function ClassProperty(path) {
            path.skip();
          }
        };

        /***/
      },
      /* 939 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = rewriteLiveReferences;

        function _assert() {
          var data = _interopRequireDefault(__webpack_require__(13));

          _assert = function _assert() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _template() {
          var data = _interopRequireDefault(__webpack_require__(21));

          _template = function _template() {
            return data;
          };

          return data;
        }

        function _helperSimpleAccess() {
          var data = _interopRequireDefault(__webpack_require__(218));

          _helperSimpleAccess = function _helperSimpleAccess() {
            return data;
          };

          return data;
        }

        var _templateObject = _taggedTemplateLiteralLoose([
          "\n    (function() {\n      throw new Error('\"' + '",
          "' + '\" is read-only.');\n    })()\n  "
        ]);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _taggedTemplateLiteralLoose(strings, raw) {
          if (!raw) {
            raw = strings.slice(0);
          }

          strings.raw = raw;
          return strings;
        }

        function rewriteLiveReferences(programPath, metadata) {
          var imported = new Map();
          var exported = new Map();

          var requeueInParent = function requeueInParent(path) {
            programPath.requeue(path);
          };

          for (
            var _iterator = metadata.source,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var _ref4 = _ref,
              source = _ref4[0],
              data = _ref4[1];

            for (
              var _iterator3 = data.imports,
                _isArray3 = Array.isArray(_iterator3),
                _i3 = 0,
                _iterator3 = _isArray3
                  ? _iterator3
                  : _iterator3[Symbol.iterator]();
              ;

            ) {
              var _ref5;

              if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref5 = _iterator3[_i3++];
              } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref5 = _i3.value;
              }

              var _ref7 = _ref5,
                localName = _ref7[0],
                importName = _ref7[1];
              imported.set(localName, [source, importName, null]);
            }

            for (
              var _iterator4 = data.importsNamespace,
                _isArray4 = Array.isArray(_iterator4),
                _i4 = 0,
                _iterator4 = _isArray4
                  ? _iterator4
                  : _iterator4[Symbol.iterator]();
              ;

            ) {
              var _ref6;

              if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref6 = _iterator4[_i4++];
              } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref6 = _i4.value;
              }

              var localName = _ref6;
              imported.set(localName, [source, null, localName]);
            }
          }

          for (
            var _iterator2 = metadata.local,
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2
                ? _iterator2
                : _iterator2[Symbol.iterator]();
            ;

          ) {
            var _exportMeta;

            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var _ref8 = _ref2,
              local = _ref8[0],
              data = _ref8[1];
            var exportMeta = exported.get(local);

            if (!exportMeta) {
              exportMeta = [];
              exported.set(local, exportMeta);
            }

            (_exportMeta = exportMeta).push.apply(_exportMeta, data.names);
          }

          programPath.traverse(rewriteBindingInitVisitor, {
            metadata: metadata,
            requeueInParent: requeueInParent,
            scope: programPath.scope,
            exported: exported
          });
          (0, _helperSimpleAccess().default)(
            programPath,
            new Set(
              Array.from(imported.keys()).concat(Array.from(exported.keys()))
            )
          );
          programPath.traverse(rewriteReferencesVisitor, {
            seen: new WeakSet(),
            metadata: metadata,
            requeueInParent: requeueInParent,
            scope: programPath.scope,
            imported: imported,
            exported: exported,
            buildImportReference: function buildImportReference(
              _ref3,
              identNode
            ) {
              var source = _ref3[0],
                importName = _ref3[1],
                localName = _ref3[2];
              var meta = metadata.source.get(source);

              if (localName) {
                if (meta.lazy) identNode = t().callExpression(identNode, []);
                return identNode;
              }

              var namespace = t().identifier(meta.name);
              if (meta.lazy) namespace = t().callExpression(namespace, []);
              return t().memberExpression(
                namespace,
                t().identifier(importName)
              );
            }
          });
        }

        var rewriteBindingInitVisitor = {
          ClassProperty: function ClassProperty(path) {
            path.skip();
          },
          Function: function Function(path) {
            path.skip();
          },
          ClassDeclaration: function ClassDeclaration(path) {
            var requeueInParent = this.requeueInParent,
              exported = this.exported,
              metadata = this.metadata;
            var id = path.node.id;
            if (!id) throw new Error("Expected class to have a name");
            var localName = id.name;
            var exportNames = exported.get(localName) || [];

            if (exportNames.length > 0) {
              var statement = t().expressionStatement(
                buildBindingExportAssignmentExpression(
                  metadata,
                  exportNames,
                  t().identifier(localName)
                )
              );
              statement._blockHoist = path.node._blockHoist;
              requeueInParent(path.insertAfter(statement)[0]);
            }
          },
          VariableDeclaration: function VariableDeclaration(path) {
            var requeueInParent = this.requeueInParent,
              exported = this.exported,
              metadata = this.metadata;
            Object.keys(path.getOuterBindingIdentifiers()).forEach(function(
              localName
            ) {
              var exportNames = exported.get(localName) || [];

              if (exportNames.length > 0) {
                var statement = t().expressionStatement(
                  buildBindingExportAssignmentExpression(
                    metadata,
                    exportNames,
                    t().identifier(localName)
                  )
                );
                statement._blockHoist = path.node._blockHoist;
                requeueInParent(path.insertAfter(statement)[0]);
              }
            });
          }
        };

        var buildBindingExportAssignmentExpression = function buildBindingExportAssignmentExpression(
          metadata,
          exportNames,
          localExpr
        ) {
          return (exportNames || []).reduce(function(expr, exportName) {
            return t().assignmentExpression(
              "=",
              t().memberExpression(
                t().identifier(metadata.exportName),
                t().identifier(exportName)
              ),
              expr
            );
          }, localExpr);
        };

        var buildImportThrow = function buildImportThrow(localName) {
          return _template().default.expression.ast(_templateObject, localName);
        };

        var rewriteReferencesVisitor = {
          ReferencedIdentifier: function ReferencedIdentifier(path) {
            var seen = this.seen,
              buildImportReference = this.buildImportReference,
              scope = this.scope,
              imported = this.imported,
              requeueInParent = this.requeueInParent;
            if (seen.has(path.node)) return;
            seen.add(path.node);
            var localName = path.node.name;
            var localBinding = path.scope.getBinding(localName);
            var rootBinding = scope.getBinding(localName);
            if (rootBinding !== localBinding) return;
            var importData = imported.get(localName);

            if (importData) {
              var ref = buildImportReference(importData, path.node);
              ref.loc = path.node.loc;

              if (
                path.parentPath.isCallExpression({
                  callee: path.node
                }) &&
                t().isMemberExpression(ref)
              ) {
                path.replaceWith(
                  t().sequenceExpression([t().numericLiteral(0), ref])
                );
              } else if (
                path.isJSXIdentifier() &&
                t().isMemberExpression(ref)
              ) {
                var object = ref.object,
                  property = ref.property;
                path.replaceWith(
                  t().JSXMemberExpression(
                    t().JSXIdentifier(object.name),
                    t().JSXIdentifier(property.name)
                  )
                );
              } else {
                path.replaceWith(ref);
              }

              requeueInParent(path);
              path.skip();
            }
          },
          AssignmentExpression: {
            exit: function exit(path) {
              var _this = this;

              var scope = this.scope,
                seen = this.seen,
                imported = this.imported,
                exported = this.exported,
                requeueInParent = this.requeueInParent,
                buildImportReference = this.buildImportReference;
              if (seen.has(path.node)) return;
              seen.add(path.node);
              var left = path.get("left");

              if (left.isIdentifier()) {
                var localName = left.node.name;

                if (
                  scope.getBinding(localName) !==
                  path.scope.getBinding(localName)
                ) {
                  return;
                }

                var exportedNames = exported.get(localName) || [];
                var importData = imported.get(localName);

                if (exportedNames.length > 0 || importData) {
                  (0, _assert().default)(
                    path.node.operator === "=",
                    "Path was not simplified"
                  );
                  var assignment = path.node;

                  if (importData) {
                    assignment.left = buildImportReference(
                      importData,
                      assignment.left
                    );
                    assignment.right = t().sequenceExpression([
                      assignment.right,
                      buildImportThrow(localName)
                    ]);
                  }

                  path.replaceWith(
                    buildBindingExportAssignmentExpression(
                      this.metadata,
                      exportedNames,
                      assignment
                    )
                  );
                  requeueInParent(path);
                }
              } else if (left.isMemberExpression()) {
              } else {
                var ids = left.getOuterBindingIdentifiers();
                var id = Object.keys(ids)
                  .filter(function(localName) {
                    return imported.has(localName);
                  })
                  .pop();

                if (id) {
                  path.node.right = t().sequenceExpression([
                    path.node.right,
                    buildImportThrow(id)
                  ]);
                }

                var items = [];
                Object.keys(ids).forEach(function(localName) {
                  if (
                    scope.getBinding(localName) !==
                    path.scope.getBinding(localName)
                  ) {
                    return;
                  }

                  var exportedNames = exported.get(localName) || [];

                  if (exportedNames.length > 0) {
                    items.push(
                      buildBindingExportAssignmentExpression(
                        _this.metadata,
                        exportedNames,
                        t().identifier(localName)
                      )
                    );
                  }
                });

                if (items.length > 0) {
                  var node = t().sequenceExpression(items);

                  if (path.parentPath.isExpressionStatement()) {
                    node = t().expressionStatement(node);
                    node._blockHoist = path.parentPath.node._blockHoist;
                  }

                  var statement = path.insertAfter(node)[0];
                  requeueInParent(statement);
                }
              }
            }
          }
        };

        /***/
      },
      /* 940 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.hasExports = hasExports;
        exports.isSideEffectImport = isSideEffectImport;
        exports.default = normalizeModuleAndLoadMetadata;

        function _path() {
          var data = __webpack_require__(7);

          _path = function _path() {
            return data;
          };

          return data;
        }

        function _helperSplitExportDeclaration() {
          var data = _interopRequireDefault(__webpack_require__(80));

          _helperSplitExportDeclaration = function _helperSplitExportDeclaration() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function hasExports(metadata) {
          var local = metadata.local,
            source = metadata.source;
          return (
            local.size > 0 ||
            Array.from(source).some(function(_ref) {
              var meta = _ref[1];
              return (
                meta.reexports.size > 0 ||
                meta.reexportNamespace.size > 0 ||
                !!meta.reexportAll
              );
            })
          );
        }

        function isSideEffectImport(source) {
          return (
            source.imports.size === 0 &&
            source.importsNamespace.size === 0 &&
            source.reexports.size === 0 &&
            source.reexportNamespace.size === 0 &&
            !source.reexportAll
          );
        }

        function normalizeModuleAndLoadMetadata(
          programPath,
          exportName,
          _temp
        ) {
          var _ref2 = _temp === void 0 ? {} : _temp,
            _ref2$noInterop = _ref2.noInterop,
            noInterop = _ref2$noInterop === void 0 ? false : _ref2$noInterop,
            _ref2$loose = _ref2.loose,
            loose = _ref2$loose === void 0 ? false : _ref2$loose,
            _ref2$lazy = _ref2.lazy,
            lazy = _ref2$lazy === void 0 ? false : _ref2$lazy,
            _ref2$esNamespaceOnly = _ref2.esNamespaceOnly,
            esNamespaceOnly =
              _ref2$esNamespaceOnly === void 0 ? false : _ref2$esNamespaceOnly;

          if (!exportName) {
            exportName = programPath.scope.generateUidIdentifier("exports")
              .name;
          }

          nameAnonymousExports(programPath);

          var _getModuleMetadata = getModuleMetadata(programPath, {
              loose: loose,
              lazy: lazy
            }),
            local = _getModuleMetadata.local,
            source = _getModuleMetadata.source;

          removeModuleDeclarations(programPath);

          for (
            var _iterator = source,
              _isArray = Array.isArray(_iterator),
              _i = 0,
              _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();
            ;

          ) {
            var _ref3;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref3 = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref3 = _i.value;
            }

            var _ref4 = _ref3,
              metadata = _ref4[1];

            if (metadata.importsNamespace.size > 0) {
              metadata.name = metadata.importsNamespace.values().next().value;
            }

            if (noInterop) metadata.interop = "none";
            else if (esNamespaceOnly) {
              if (metadata.interop === "namespace") {
                metadata.interop = "default";
              }
            }
          }

          return {
            exportName: exportName,
            exportNameListName: null,
            local: local,
            source: source
          };
        }

        function getModuleMetadata(programPath, _ref5) {
          var loose = _ref5.loose,
            lazy = _ref5.lazy;
          var localData = getLocalExportMetadata(programPath, loose);
          var sourceData = new Map();

          var getData = function getData(sourceNode) {
            var source = sourceNode.value;
            var data = sourceData.get(source);

            if (!data) {
              data = {
                name: programPath.scope.generateUidIdentifier(
                  (0, _path().basename)(source, (0, _path().extname)(source))
                ).name,
                interop: "none",
                loc: null,
                imports: new Map(),
                importsNamespace: new Set(),
                reexports: new Map(),
                reexportNamespace: new Set(),
                reexportAll: null,
                lazy: false
              };
              sourceData.set(source, data);
            }

            return data;
          };

          programPath.get("body").forEach(function(child) {
            if (child.isImportDeclaration()) {
              var data = getData(child.node.source);
              if (!data.loc) data.loc = child.node.loc;
              child.get("specifiers").forEach(function(spec) {
                if (spec.isImportDefaultSpecifier()) {
                  var localName = spec.get("local").node.name;
                  data.imports.set(localName, "default");
                  var reexport = localData.get(localName);

                  if (reexport) {
                    localData.delete(localName);
                    reexport.names.forEach(function(name) {
                      data.reexports.set(name, "default");
                    });
                  }
                } else if (spec.isImportNamespaceSpecifier()) {
                  var _localName = spec.get("local").node.name;
                  data.importsNamespace.add(_localName);

                  var _reexport = localData.get(_localName);

                  if (_reexport) {
                    localData.delete(_localName);

                    _reexport.names.forEach(function(name) {
                      data.reexportNamespace.add(name);
                    });
                  }
                } else if (spec.isImportSpecifier()) {
                  var importName = spec.get("imported").node.name;
                  var _localName2 = spec.get("local").node.name;
                  data.imports.set(_localName2, importName);

                  var _reexport2 = localData.get(_localName2);

                  if (_reexport2) {
                    localData.delete(_localName2);

                    _reexport2.names.forEach(function(name) {
                      data.reexports.set(name, importName);
                    });
                  }
                }
              });
            } else if (child.isExportAllDeclaration()) {
              var _data = getData(child.node.source);

              if (!_data.loc) _data.loc = child.node.loc;
              _data.reexportAll = {
                loc: child.node.loc
              };
            } else if (child.isExportNamedDeclaration() && child.node.source) {
              var _data2 = getData(child.node.source);

              if (!_data2.loc) _data2.loc = child.node.loc;
              child.get("specifiers").forEach(function(spec) {
                if (!spec.isExportSpecifier()) {
                  throw spec.buildCodeFrameError(
                    "Unexpected export specifier type"
                  );
                }

                var importName = spec.get("local").node.name;
                var exportName = spec.get("exported").node.name;

                _data2.reexports.set(exportName, importName);

                if (exportName === "__esModule") {
                  throw exportName.buildCodeFrameError(
                    'Illegal export "__esModule".'
                  );
                }
              });
            }
          });

          for (
            var _iterator2 = sourceData.values(),
              _isArray2 = Array.isArray(_iterator2),
              _i2 = 0,
              _iterator2 = _isArray2
                ? _iterator2
                : _iterator2[Symbol.iterator]();
            ;

          ) {
            var _ref6;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref6 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref6 = _i2.value;
            }

            var metadata = _ref6;

            if (metadata.importsNamespace.size > 0) {
              metadata.interop = "namespace";
              continue;
            }

            var needsDefault = false;
            var needsNamed = false;

            for (
              var _iterator4 = metadata.imports.values(),
                _isArray4 = Array.isArray(_iterator4),
                _i4 = 0,
                _iterator4 = _isArray4
                  ? _iterator4
                  : _iterator4[Symbol.iterator]();
              ;

            ) {
              var _ref8;

              if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref8 = _iterator4[_i4++];
              } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref8 = _i4.value;
              }

              var importName = _ref8;
              if (importName === "default") needsDefault = true;
              else needsNamed = true;
            }

            for (
              var _iterator5 = metadata.reexports.values(),
                _isArray5 = Array.isArray(_iterator5),
                _i5 = 0,
                _iterator5 = _isArray5
                  ? _iterator5
                  : _iterator5[Symbol.iterator]();
              ;

            ) {
              var _ref9;

              if (_isArray5) {
                if (_i5 >= _iterator5.length) break;
                _ref9 = _iterator5[_i5++];
              } else {
                _i5 = _iterator5.next();
                if (_i5.done) break;
                _ref9 = _i5.value;
              }

              var _importName = _ref9;
              if (_importName === "default") needsDefault = true;
              else needsNamed = true;
            }

            if (needsDefault && needsNamed) {
              metadata.interop = "namespace";
            } else if (needsDefault) {
              metadata.interop = "default";
            }
          }

          for (
            var _iterator3 = sourceData,
              _isArray3 = Array.isArray(_iterator3),
              _i3 = 0,
              _iterator3 = _isArray3
                ? _iterator3
                : _iterator3[Symbol.iterator]();
            ;

          ) {
            var _ref7;

            if (_isArray3) {
              if (_i3 >= _iterator3.length) break;
              _ref7 = _iterator3[_i3++];
            } else {
              _i3 = _iterator3.next();
              if (_i3.done) break;
              _ref7 = _i3.value;
            }

            var _ref10 = _ref7,
              _source = _ref10[0],
              _metadata = _ref10[1];

            if (
              lazy !== false &&
              !(isSideEffectImport(_metadata) || _metadata.reexportAll)
            ) {
              if (lazy === true) {
                _metadata.lazy = !/\./.test(_source);
              } else if (Array.isArray(lazy)) {
                _metadata.lazy = lazy.indexOf(_source);
              } else if (typeof lazy === "function") {
                _metadata.lazy = lazy(_source);
              } else {
                throw new Error(
                  ".lazy must be a boolean, string array, or function"
                );
              }
            }
          }

          return {
            local: localData,
            source: sourceData
          };
        }

        function getLocalExportMetadata(programPath, loose) {
          var bindingKindLookup = new Map();
          programPath.get("body").forEach(function(child) {
            var kind;

            if (child.isImportDeclaration()) {
              kind = "import";
            } else {
              if (child.isExportDefaultDeclaration())
                child = child.get("declaration");

              if (child.isExportNamedDeclaration()) {
                if (child.node.declaration) {
                  child = child.get("declaration");
                } else if (
                  loose &&
                  child.node.source &&
                  child.get("source").isStringLiteral()
                ) {
                  child.node.specifiers.forEach(function(specifier) {
                    bindingKindLookup.set(specifier.local.name, "block");
                  });
                  return;
                }
              }

              if (child.isFunctionDeclaration()) {
                kind = "hoisted";
              } else if (child.isClassDeclaration()) {
                kind = "block";
              } else if (
                child.isVariableDeclaration({
                  kind: "var"
                })
              ) {
                kind = "var";
              } else if (child.isVariableDeclaration()) {
                kind = "block";
              } else {
                return;
              }
            }

            Object.keys(child.getOuterBindingIdentifiers()).forEach(function(
              name
            ) {
              bindingKindLookup.set(name, kind);
            });
          });
          var localMetadata = new Map();

          var getLocalMetadata = function getLocalMetadata(idPath) {
            var localName = idPath.node.name;
            var metadata = localMetadata.get(localName);

            if (!metadata) {
              var _kind = bindingKindLookup.get(localName);

              if (_kind === undefined) {
                throw idPath.buildCodeFrameError(
                  'Exporting local "' + localName + '", which is not declared.'
                );
              }

              metadata = {
                names: [],
                kind: _kind
              };
              localMetadata.set(localName, metadata);
            }

            return metadata;
          };

          programPath.get("body").forEach(function(child) {
            if (
              child.isExportNamedDeclaration() &&
              (loose || !child.node.source)
            ) {
              if (child.node.declaration) {
                var declaration = child.get("declaration");
                var ids = declaration.getOuterBindingIdentifierPaths();
                Object.keys(ids).forEach(function(name) {
                  if (name === "__esModule") {
                    throw declaration.buildCodeFrameError(
                      'Illegal export "__esModule".'
                    );
                  }

                  getLocalMetadata(ids[name]).names.push(name);
                });
              } else {
                child.get("specifiers").forEach(function(spec) {
                  var local = spec.get("local");
                  var exported = spec.get("exported");

                  if (exported.node.name === "__esModule") {
                    throw exported.buildCodeFrameError(
                      'Illegal export "__esModule".'
                    );
                  }

                  getLocalMetadata(local).names.push(exported.node.name);
                });
              }
            } else if (child.isExportDefaultDeclaration()) {
              var _declaration = child.get("declaration");

              if (
                _declaration.isFunctionDeclaration() ||
                _declaration.isClassDeclaration()
              ) {
                getLocalMetadata(_declaration.get("id")).names.push("default");
              } else {
                throw _declaration.buildCodeFrameError(
                  "Unexpected default expression export."
                );
              }
            }
          });
          return localMetadata;
        }

        function nameAnonymousExports(programPath) {
          programPath.get("body").forEach(function(child) {
            if (!child.isExportDefaultDeclaration()) return;
            (0, _helperSplitExportDeclaration().default)(child);
          });
        }

        function removeModuleDeclarations(programPath) {
          programPath.get("body").forEach(function(child) {
            if (child.isImportDeclaration()) {
              child.remove();
            } else if (child.isExportNamedDeclaration()) {
              if (child.node.declaration) {
                child.node.declaration._blockHoist = child.node._blockHoist;
                child.replaceWith(child.node.declaration);
              } else {
                child.remove();
              }
            } else if (child.isExportDefaultDeclaration()) {
              var declaration = child.get("declaration");

              if (
                declaration.isFunctionDeclaration() ||
                declaration.isClassDeclaration()
              ) {
                declaration._blockHoist = child.node._blockHoist;
                child.replaceWith(declaration);
              } else {
                throw declaration.buildCodeFrameError(
                  "Unexpected default expression export."
                );
              }
            } else if (child.isExportAllDeclaration()) {
              child.remove();
            }
          });
        }

        /***/
      },
      /* 941 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = convertFunctionParams;

        function _helperCallDelegate() {
          var data = _interopRequireDefault(__webpack_require__(942));

          _helperCallDelegate = function _helperCallDelegate() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var buildDefaultParam = (0, _core().template)(
          "\n  let VARIABLE_NAME =\n    arguments.length > ARGUMENT_KEY && arguments[ARGUMENT_KEY] !== undefined ?\n      arguments[ARGUMENT_KEY]\n    :\n      DEFAULT_VALUE;\n"
        );
        var buildLooseDefaultParam = (0, _core().template)(
          "\n  if (ASSIGNMENT_IDENTIFIER === UNDEFINED) {\n    ASSIGNMENT_IDENTIFIER = DEFAULT_VALUE;\n  }\n"
        );
        var buildLooseDestructuredDefaultParam = (0, _core().template)(
          "\n  let ASSIGNMENT_IDENTIFIER = PARAMETER_NAME === UNDEFINED ? DEFAULT_VALUE : PARAMETER_NAME ;\n"
        );
        var buildSafeArgumentsAccess = (0, _core().template)(
          "\n  let $0 = arguments.length > $1 ? arguments[$1] : undefined;\n"
        );

        function isSafeBinding(scope, node) {
          if (!scope.hasOwnBinding(node.name)) return true;

          var _scope$getOwnBinding = scope.getOwnBinding(node.name),
            kind = _scope$getOwnBinding.kind;

          return kind === "param" || kind === "local";
        }

        var iifeVisitor = {
          ReferencedIdentifier: function ReferencedIdentifier(path, state) {
            var scope = path.scope,
              node = path.node;

            if (node.name === "eval" || !isSafeBinding(scope, node)) {
              state.iife = true;
              path.stop();
            }
          },
          Scope: function Scope(path) {
            path.skip();
          }
        };

        function convertFunctionParams(path, loose) {
          var node = path.node,
            scope = path.scope;
          var state = {
            iife: false,
            scope: scope
          };
          var body = [];
          var params = path.get("params");
          var firstOptionalIndex = null;

          for (var i = 0; i < params.length; i++) {
            var param = params[i];

            if (param.isAssignmentPattern() && loose) {
              var left = param.get("left");
              var right = param.get("right");
              var undefinedNode = scope.buildUndefinedNode();

              if (left.isIdentifier()) {
                body.push(
                  buildLooseDefaultParam({
                    ASSIGNMENT_IDENTIFIER: _core().types.cloneNode(left.node),
                    DEFAULT_VALUE: right.node,
                    UNDEFINED: undefinedNode
                  })
                );
                param.replaceWith(left.node);
              } else if (left.isObjectPattern() || left.isArrayPattern()) {
                var paramName = scope.generateUidIdentifier();
                body.push(
                  buildLooseDestructuredDefaultParam({
                    ASSIGNMENT_IDENTIFIER: left.node,
                    DEFAULT_VALUE: right.node,
                    PARAMETER_NAME: _core().types.cloneNode(paramName),
                    UNDEFINED: undefinedNode
                  })
                );
                param.replaceWith(paramName);
              }
            } else if (param.isAssignmentPattern()) {
              if (firstOptionalIndex === null) firstOptionalIndex = i;

              var _left = param.get("left");

              var _right = param.get("right");

              if (!state.iife) {
                if (
                  _right.isIdentifier() &&
                  !isSafeBinding(scope, _right.node)
                ) {
                  state.iife = true;
                } else {
                  _right.traverse(iifeVisitor, state);
                }
              }

              var defNode = buildDefaultParam({
                VARIABLE_NAME: _left.node,
                DEFAULT_VALUE: _right.node,
                ARGUMENT_KEY: _core().types.numericLiteral(i)
              });
              body.push(defNode);
            } else if (firstOptionalIndex !== null) {
              var _defNode = buildSafeArgumentsAccess([
                param.node,
                _core().types.numericLiteral(i)
              ]);

              body.push(_defNode);
            } else if (param.isObjectPattern() || param.isArrayPattern()) {
              var uid = path.scope.generateUidIdentifier("ref");

              var _defNode2 = _core().types.variableDeclaration("let", [
                _core().types.variableDeclarator(param.node, uid)
              ]);

              body.push(_defNode2);
              param.replaceWith(_core().types.cloneNode(uid));
            }

            if (!state.iife && !param.isIdentifier()) {
              param.traverse(iifeVisitor, state);
            }
          }

          if (body.length === 0) return false;

          if (firstOptionalIndex !== null) {
            node.params = node.params.slice(0, firstOptionalIndex);
          }

          path.ensureBlock();

          if (state.iife) {
            body.push((0, _helperCallDelegate().default)(path, scope));
            path.set("body", _core().types.blockStatement(body));
          } else {
            path.get("body").unshiftContainer("body", body);
          }

          return true;
        }

        /***/
      },
      /* 942 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function _helperHoistVariables() {
          var data = _interopRequireDefault(__webpack_require__(221));

          _helperHoistVariables = function _helperHoistVariables() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var visitor = {
          enter: function enter(path, state) {
            if (path.isThisExpression()) {
              state.foundThis = true;
            }

            if (
              path.isReferencedIdentifier({
                name: "arguments"
              })
            ) {
              state.foundArguments = true;
            }
          },
          Function: function Function(path) {
            path.skip();
          }
        };

        function _default(path, scope) {
          if (scope === void 0) {
            scope = path.scope;
          }

          var node = path.node;
          var container = t().functionExpression(
            null,
            [],
            node.body,
            node.generator,
            node.async
          );
          var callee = container;
          var args = [];
          (0, _helperHoistVariables().default)(path, function(id) {
            return scope.push({
              id: id
            });
          });
          var state = {
            foundThis: false,
            foundArguments: false
          };
          path.traverse(visitor, state);

          if (state.foundArguments) {
            callee = t().memberExpression(container, t().identifier("apply"));
            args = [];

            if (state.foundThis) {
              args.push(t().thisExpression());
            }

            if (state.foundArguments) {
              if (!state.foundThis) args.push(t().nullLiteral());
              args.push(t().identifier("arguments"));
            }
          }

          var call = t().callExpression(callee, args);
          if (node.generator) call = t().yieldExpression(call, true);
          return t().returnStatement(call);
        }

        /***/
      },
      /* 943 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = convertFunctionRest;

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var buildRest = (0, _core().template)(
          "\n  for (var LEN = ARGUMENTS.length,\n           ARRAY = new Array(ARRAY_LEN),\n           KEY = START;\n       KEY < LEN;\n       KEY++) {\n    ARRAY[ARRAY_KEY] = ARGUMENTS[KEY];\n  }\n"
        );
        var restIndex = (0, _core().template)(
          "\n  (INDEX < OFFSET || ARGUMENTS.length <= INDEX) ? undefined : ARGUMENTS[INDEX]\n"
        );
        var restIndexImpure = (0, _core().template)(
          "\n  REF = INDEX, (REF < OFFSET || ARGUMENTS.length <= REF) ? undefined : ARGUMENTS[REF]\n"
        );
        var restLength = (0, _core().template)(
          "\n  ARGUMENTS.length <= OFFSET ? 0 : ARGUMENTS.length - OFFSET\n"
        );

        function referencesRest(path, state) {
          if (path.node.name === state.name) {
            return path.scope.bindingIdentifierEquals(
              state.name,
              state.outerBinding
            );
          }

          return false;
        }

        var memberExpressionOptimisationVisitor = {
          Scope: function Scope(path, state) {
            if (
              !path.scope.bindingIdentifierEquals(
                state.name,
                state.outerBinding
              )
            ) {
              path.skip();
            }
          },
          Flow: function Flow(path) {
            if (path.isTypeCastExpression()) return;
            path.skip();
          },
          Function: function Function(path, state) {
            var oldNoOptimise = state.noOptimise;
            state.noOptimise = true;
            path.traverse(memberExpressionOptimisationVisitor, state);
            state.noOptimise = oldNoOptimise;
            path.skip();
          },
          ReferencedIdentifier: function ReferencedIdentifier(path, state) {
            var node = path.node;

            if (node.name === "arguments") {
              state.deopted = true;
            }

            if (!referencesRest(path, state)) return;

            if (state.noOptimise) {
              state.deopted = true;
            } else {
              var parentPath = path.parentPath;

              if (
                parentPath.listKey === "params" &&
                parentPath.key < state.offset
              ) {
                return;
              }

              if (
                parentPath.isMemberExpression({
                  object: node
                })
              ) {
                var grandparentPath = parentPath.parentPath;
                var argsOptEligible =
                  !state.deopted &&
                  !(
                    (grandparentPath.isAssignmentExpression() &&
                      parentPath.node === grandparentPath.node.left) ||
                    grandparentPath.isLVal() ||
                    grandparentPath.isForXStatement() ||
                    grandparentPath.isUpdateExpression() ||
                    grandparentPath.isUnaryExpression({
                      operator: "delete"
                    }) ||
                    ((grandparentPath.isCallExpression() ||
                      grandparentPath.isNewExpression()) &&
                      parentPath.node === grandparentPath.node.callee)
                  );

                if (argsOptEligible) {
                  if (parentPath.node.computed) {
                    if (parentPath.get("property").isBaseType("number")) {
                      state.candidates.push({
                        cause: "indexGetter",
                        path: path
                      });
                      return;
                    }
                  } else if (parentPath.node.property.name === "length") {
                    state.candidates.push({
                      cause: "lengthGetter",
                      path: path
                    });
                    return;
                  }
                }
              }

              if (state.offset === 0 && parentPath.isSpreadElement()) {
                var call = parentPath.parentPath;

                if (
                  call.isCallExpression() &&
                  call.node.arguments.length === 1
                ) {
                  state.candidates.push({
                    cause: "argSpread",
                    path: path
                  });
                  return;
                }
              }

              state.references.push(path);
            }
          },
          BindingIdentifier: function BindingIdentifier(path, state) {
            if (referencesRest(path, state)) {
              state.deopted = true;
            }
          }
        };

        function hasRest(node) {
          var length = node.params.length;
          return (
            length > 0 && _core().types.isRestElement(node.params[length - 1])
          );
        }

        function optimiseIndexGetter(path, argsId, offset) {
          var offsetLiteral = _core().types.numericLiteral(offset);

          var index;

          if (_core().types.isNumericLiteral(path.parent.property)) {
            index = _core().types.numericLiteral(
              path.parent.property.value + offset
            );
          } else if (offset === 0) {
            index = path.parent.property;
          } else {
            index = _core().types.binaryExpression(
              "+",
              path.parent.property,
              _core().types.cloneNode(offsetLiteral)
            );
          }

          var scope = path.scope;

          if (!scope.isPure(index)) {
            var temp = scope.generateUidIdentifierBasedOnNode(index);
            scope.push({
              id: temp,
              kind: "var"
            });
            path.parentPath.replaceWith(
              restIndexImpure({
                ARGUMENTS: argsId,
                OFFSET: offsetLiteral,
                INDEX: index,
                REF: _core().types.cloneNode(temp)
              })
            );
          } else {
            var parentPath = path.parentPath;
            parentPath.replaceWith(
              restIndex({
                ARGUMENTS: argsId,
                OFFSET: offsetLiteral,
                INDEX: index
              })
            );
            var offsetTestPath = parentPath.get("test").get("left");
            var valRes = offsetTestPath.evaluate();

            if (valRes.confident) {
              if (valRes.value === true) {
                parentPath.replaceWith(parentPath.scope.buildUndefinedNode());
              } else {
                parentPath
                  .get("test")
                  .replaceWith(parentPath.get("test").get("right"));
              }
            }
          }
        }

        function optimiseLengthGetter(path, argsId, offset) {
          if (offset) {
            path.parentPath.replaceWith(
              restLength({
                ARGUMENTS: argsId,
                OFFSET: _core().types.numericLiteral(offset)
              })
            );
          } else {
            path.replaceWith(argsId);
          }
        }

        function convertFunctionRest(path) {
          var node = path.node,
            scope = path.scope;
          if (!hasRest(node)) return false;
          var rest = node.params.pop().argument;

          var argsId = _core().types.identifier("arguments");

          var state = {
            references: [],
            offset: node.params.length,
            argumentsNode: argsId,
            outerBinding: scope.getBindingIdentifier(rest.name),
            candidates: [],
            name: rest.name,
            deopted: false
          };
          path.traverse(memberExpressionOptimisationVisitor, state);

          if (!state.deopted && !state.references.length) {
            var _arr = state.candidates;

            for (var _i = 0; _i < _arr.length; _i++) {
              var _ref2 = _arr[_i];
              var _path = _ref2.path,
                cause = _ref2.cause;

              var clonedArgsId = _core().types.cloneNode(argsId);

              switch (cause) {
                case "indexGetter":
                  optimiseIndexGetter(_path, clonedArgsId, state.offset);
                  break;

                case "lengthGetter":
                  optimiseLengthGetter(_path, clonedArgsId, state.offset);
                  break;

                default:
                  _path.replaceWith(clonedArgsId);
              }
            }

            return true;
          }

          state.references = state.references.concat(
            state.candidates.map(function(_ref3) {
              var path = _ref3.path;
              return path;
            })
          );

          var start = _core().types.numericLiteral(node.params.length);

          var key = scope.generateUidIdentifier("key");
          var len = scope.generateUidIdentifier("len");
          var arrKey, arrLen;

          if (node.params.length) {
            arrKey = _core().types.binaryExpression(
              "-",
              _core().types.cloneNode(key),
              _core().types.cloneNode(start)
            );
            arrLen = _core().types.conditionalExpression(
              _core().types.binaryExpression(
                ">",
                _core().types.cloneNode(len),
                _core().types.cloneNode(start)
              ),
              _core().types.binaryExpression(
                "-",
                _core().types.cloneNode(len),
                _core().types.cloneNode(start)
              ),
              _core().types.numericLiteral(0)
            );
          } else {
            arrKey = _core().types.identifier(key.name);
            arrLen = _core().types.identifier(len.name);
          }

          var loop = buildRest({
            ARGUMENTS: argsId,
            ARRAY_KEY: arrKey,
            ARRAY_LEN: arrLen,
            START: start,
            ARRAY: rest,
            KEY: key,
            LEN: len
          });

          if (state.deopted) {
            node.body.body.unshift(loop);
          } else {
            var target = path
              .getEarliestCommonAncestorFrom(state.references)
              .getStatementParent();
            target.findParent(function(path) {
              if (path.isLoop()) {
                target = path;
              } else {
                return path.isFunction();
              }
            });
            target.insertBefore(loop);
          }

          return true;
        }

        /***/
      },
      /* 944 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = transpileEnum;

        function _assert() {
          var data = _interopRequireDefault(__webpack_require__(13));

          _assert = function _assert() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function transpileEnum(path, t) {
          var node = path.node;

          if (node.declare) {
            path.remove();
            return;
          }

          if (node.const) {
            throw path.buildCodeFrameError("'const' enums are not supported.");
          }

          var name = node.id.name;
          var fill = enumFill(path, t, node.id);

          switch (path.parent.type) {
            case "BlockStatement":
            case "ExportNamedDeclaration":
            case "Program": {
              path.insertAfter(fill);

              if (seen(path.parentPath)) {
                path.remove();
              } else {
                var isGlobal = t.isProgram(path.parent);
                path.replaceWith(makeVar(node.id, t, isGlobal ? "var" : "let"));
              }

              break;
            }

            default:
              throw new Error("Unexpected enum parent '" + path.parent.type);
          }

          function seen(parentPath) {
            if (parentPath.isExportDeclaration()) {
              return seen(parentPath.parentPath);
            }

            if (parentPath.getData(name)) {
              return true;
            } else {
              parentPath.setData(name, true);
              return false;
            }
          }
        }

        function makeVar(id, t, kind) {
          return t.variableDeclaration(kind, [t.variableDeclarator(id)]);
        }

        var buildEnumWrapper = (0, _core().template)(
          "\n  (function (ID) {\n    ASSIGNMENTS;\n  })(ID || (ID = {}));\n"
        );
        var buildStringAssignment = (0, _core().template)(
          '\n  ENUM["NAME"] = VALUE;\n'
        );
        var buildNumericAssignment = (0, _core().template)(
          '\n  ENUM[ENUM["NAME"] = VALUE] = "NAME";\n'
        );

        var buildEnumMember = function buildEnumMember(isString, options) {
          return (isString ? buildStringAssignment : buildNumericAssignment)(
            options
          );
        };

        function enumFill(path, t, id) {
          var x = translateEnumValues(path, t);
          var assignments = x.map(function(_ref) {
            var memberName = _ref[0],
              memberValue = _ref[1];
            return buildEnumMember(t.isStringLiteral(memberValue), {
              ENUM: t.cloneNode(id),
              NAME: memberName,
              VALUE: memberValue
            });
          });
          return buildEnumWrapper({
            ID: t.cloneNode(id),
            ASSIGNMENTS: assignments
          });
        }

        function translateEnumValues(path, t) {
          var seen = Object.create(null);
          var prev = -1;
          return path.node.members.map(function(member) {
            var name = t.isIdentifier(member.id)
              ? member.id.name
              : member.id.value;
            var initializer = member.initializer;
            var value;

            if (initializer) {
              var constValue = evaluate(initializer, seen);

              if (constValue !== undefined) {
                seen[name] = constValue;

                if (typeof constValue === "number") {
                  value = t.numericLiteral(constValue);
                  prev = constValue;
                } else {
                  (0, _assert().default)(typeof constValue === "string");
                  value = t.stringLiteral(constValue);
                  prev = undefined;
                }
              } else {
                value = initializer;
                prev = undefined;
              }
            } else {
              if (prev !== undefined) {
                prev++;
                value = t.numericLiteral(prev);
                seen[name] = prev;
              } else {
                throw path.buildCodeFrameError(
                  "Enum member must have initializer."
                );
              }
            }

            return [name, value];
          });
        }

        function evaluate(expr, seen) {
          if (expr.type === "StringLiteral") {
            return expr.value;
          }

          return evalConstant(expr);

          function evalConstant(expr) {
            switch (expr.type) {
              case "UnaryExpression":
                return evalUnaryExpression(expr);

              case "BinaryExpression":
                return evalBinaryExpression(expr);

              case "NumericLiteral":
                return expr.value;

              case "ParenthesizedExpression":
                return evalConstant(expr.expression);

              case "Identifier":
                return seen[expr.name];

              default:
                return undefined;
            }
          }

          function evalUnaryExpression(_ref2) {
            var argument = _ref2.argument,
              operator = _ref2.operator;
            var value = evalConstant(argument);

            if (value === undefined) {
              return undefined;
            }

            switch (operator) {
              case "+":
                return value;

              case "-":
                return -value;

              case "~":
                return ~value;

              default:
                return undefined;
            }
          }

          function evalBinaryExpression(expr) {
            var left = evalConstant(expr.left);

            if (left === undefined) {
              return undefined;
            }

            var right = evalConstant(expr.right);

            if (right === undefined) {
              return undefined;
            }

            switch (expr.operator) {
              case "|":
                return left | right;

              case "&":
                return left & right;

              case ">>":
                return left >> right;

              case ">>>":
                return left >>> right;

              case "<<":
                return left << right;

              case "^":
                return left ^ right;

              case "*":
                return left * right;

              case "/":
                return left / right;

              case "+":
                return left + right;

              case "-":
                return left - right;

              case "%":
                return left % right;

              default:
                return undefined;
            }
          }
        }

        /***/
      },
      /* 945 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              MemberExpression: {
                exit: function exit(_ref) {
                  var node = _ref.node;
                  var prop = node.property;

                  if (
                    !node.computed &&
                    _core().types.isIdentifier(prop) &&
                    !_core().types.isValidES3Identifier(prop.name)
                  ) {
                    node.property = _core().types.stringLiteral(prop.name);
                    node.computed = true;
                  }
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 946 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              ObjectProperty: {
                exit: function exit(_ref) {
                  var node = _ref.node;
                  var key = node.key;

                  if (
                    !node.computed &&
                    _core().types.isIdentifier(key) &&
                    !_core().types.isValidES3Identifier(key.name)
                  ) {
                    node.key = _core().types.stringLiteral(key.name);
                  }
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 947 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function defineMap() {
          var data = _interopRequireWildcard(__webpack_require__(208));

          defineMap = function defineMap() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              ObjectExpression: function ObjectExpression(path, file) {
                var node = path.node;
                var hasAny = false;
                var _arr = node.properties;

                for (var _i = 0; _i < _arr.length; _i++) {
                  var prop = _arr[_i];

                  if (prop.kind === "get" || prop.kind === "set") {
                    hasAny = true;
                    break;
                  }
                }

                if (!hasAny) return;
                var mutatorMap = {};
                node.properties = node.properties.filter(function(prop) {
                  if (
                    !prop.computed &&
                    (prop.kind === "get" || prop.kind === "set")
                  ) {
                    defineMap().push(mutatorMap, prop, null, file);
                    return false;
                  } else {
                    return true;
                  }
                });
                path.replaceWith(
                  _core().types.callExpression(
                    _core().types.memberExpression(
                      _core().types.identifier("Object"),
                      _core().types.identifier("defineProperties")
                    ),
                    [node, defineMap().toDefineObject(mutatorMap)]
                  )
                );
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 948 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function _helperExplodeAssignableExpression() {
          var data = _interopRequireDefault(__webpack_require__(949));

          _helperExplodeAssignableExpression = function _helperExplodeAssignableExpression() {
            return data;
          };

          return data;
        }

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function _default(opts) {
          var build = opts.build,
            operator = opts.operator;
          return {
            AssignmentExpression: function AssignmentExpression(path) {
              var node = path.node,
                scope = path.scope;
              if (node.operator !== operator + "=") return;
              var nodes = [];
              var exploded = (0, _helperExplodeAssignableExpression().default)(
                node.left,
                nodes,
                this,
                scope
              );
              nodes.push(
                t().assignmentExpression(
                  "=",
                  exploded.ref,
                  build(exploded.uid, node.right)
                )
              );
              path.replaceWith(t().sequenceExpression(nodes));
            },
            BinaryExpression: function BinaryExpression(path) {
              var node = path.node;

              if (node.operator === operator) {
                path.replaceWith(build(node.left, node.right));
              }
            }
          };
        }

        /***/
      },
      /* 949 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = _default;

        function t() {
          var data = _interopRequireWildcard(__webpack_require__(3));

          t = function t() {
            return data;
          };

          return data;
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty && Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {};

                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc);
                  } else {
                    newObj[key] = obj[key];
                  }
                }
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function getObjRef(node, nodes, file, scope) {
          var ref;

          if (t().isSuper(node)) {
            return node;
          } else if (t().isIdentifier(node)) {
            if (scope.hasBinding(node.name)) {
              return node;
            } else {
              ref = node;
            }
          } else if (t().isMemberExpression(node)) {
            ref = node.object;

            if (
              t().isSuper(ref) ||
              (t().isIdentifier(ref) && scope.hasBinding(ref.name))
            ) {
              return ref;
            }
          } else {
            throw new Error("We can't explode this node type " + node.type);
          }

          var temp = scope.generateUidIdentifierBasedOnNode(ref);
          scope.push({
            id: temp
          });
          nodes.push(
            t().assignmentExpression(
              "=",
              t().cloneNode(temp),
              t().cloneNode(ref)
            )
          );
          return temp;
        }

        function getPropRef(node, nodes, file, scope) {
          var prop = node.property;
          var key = t().toComputedKey(node, prop);
          if (t().isLiteral(key) && t().isPureish(key)) return key;
          var temp = scope.generateUidIdentifierBasedOnNode(prop);
          scope.push({
            id: temp
          });
          nodes.push(
            t().assignmentExpression(
              "=",
              t().cloneNode(temp),
              t().cloneNode(prop)
            )
          );
          return temp;
        }

        function _default(node, nodes, file, scope, allowedSingleIdent) {
          var obj;

          if (t().isIdentifier(node) && allowedSingleIdent) {
            obj = node;
          } else {
            obj = getObjRef(node, nodes, file, scope);
          }

          var ref, uid;

          if (t().isIdentifier(node)) {
            ref = t().cloneNode(node);
            uid = obj;
          } else {
            var prop = getPropRef(node, nodes, file, scope);
            var computed = node.computed || t().isLiteral(prop);
            uid = t().memberExpression(
              t().cloneNode(obj),
              t().cloneNode(prop),
              computed
            );
            ref = t().memberExpression(
              t().cloneNode(obj),
              t().cloneNode(prop),
              computed
            );
          }

          return {
            uid: uid,
            ref: ref
          };
        }

        /***/
      },
      /* 950 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxFlow() {
          var data = _interopRequireDefault(__webpack_require__(92));

          _pluginSyntaxFlow = function _pluginSyntaxFlow() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);

          function wrapInFlowComment(path, parent) {
            var attach = path.getPrevSibling();
            var where = "trailing";

            if (!attach.node) {
              attach = path.parentPath;
              where = "inner";
            }

            attach.addComment(where, generateComment(path, parent));
            path.remove();
          }

          function generateComment(path, parent) {
            var comment = path
              .getSource()
              .replace(/\*-\//g, "*-ESCAPED/")
              .replace(/\*\//g, "*-/");
            if (parent && parent.optional) comment = "?" + comment;
            if (comment[0] !== ":") comment = ":: " + comment;
            return comment;
          }

          return {
            inherits: _pluginSyntaxFlow().default,
            visitor: {
              TypeCastExpression: function TypeCastExpression(path) {
                var node = path.node;
                path
                  .get("expression")
                  .addComment(
                    "trailing",
                    generateComment(path.get("typeAnnotation"))
                  );
                path.replaceWith(
                  _core().types.parenthesizedExpression(node.expression)
                );
              },
              Identifier: function Identifier(path) {
                if (path.parentPath.isFlow()) {
                  return;
                }

                var node = path.node;

                if (node.typeAnnotation) {
                  var typeAnnotation = path.get("typeAnnotation");
                  path.addComment(
                    "trailing",
                    generateComment(typeAnnotation, node)
                  );
                  typeAnnotation.remove();

                  if (node.optional) {
                    node.optional = false;
                  }
                } else if (node.optional) {
                  path.addComment("trailing", ":: ?");
                  node.optional = false;
                }
              },
              AssignmentPattern: {
                exit: function exit(_ref) {
                  var node = _ref.node;
                  var left = node.left;

                  if (left.optional) {
                    left.optional = false;
                  }
                }
              },
              Function: function Function(path) {
                if (path.isDeclareFunction()) return;
                var node = path.node;

                if (node.returnType) {
                  var returnType = path.get("returnType");
                  var typeAnnotation = returnType.get("typeAnnotation");
                  var block = path.get("body");
                  block.addComment(
                    "leading",
                    generateComment(returnType, typeAnnotation.node)
                  );
                  returnType.remove();
                }

                if (node.typeParameters) {
                  var typeParameters = path.get("typeParameters");
                  var id = path.get("id");
                  id.addComment(
                    "trailing",
                    generateComment(typeParameters, typeParameters.node)
                  );
                  typeParameters.remove();
                }
              },
              ClassProperty: function ClassProperty(path) {
                var node = path.node,
                  parent = path.parent;

                if (!node.value) {
                  wrapInFlowComment(path, parent);
                } else if (node.typeAnnotation) {
                  var typeAnnotation = path.get("typeAnnotation");
                  path
                    .get("key")
                    .addComment(
                      "trailing",
                      generateComment(typeAnnotation, typeAnnotation.node)
                    );
                  typeAnnotation.remove();
                }
              },
              ExportNamedDeclaration: function ExportNamedDeclaration(path) {
                var node = path.node,
                  parent = path.parent;

                if (
                  node.exportKind !== "type" &&
                  !_core().types.isFlow(node.declaration)
                ) {
                  return;
                }

                wrapInFlowComment(path, parent);
              },
              ImportDeclaration: function ImportDeclaration(path) {
                var node = path.node,
                  parent = path.parent;

                if (
                  node.importKind !== "type" &&
                  node.importKind !== "typeof"
                ) {
                  return;
                }

                wrapInFlowComment(path, parent);
              },
              Flow: function Flow(path) {
                var parent = path.parent;
                wrapInFlowComment(path, parent);
              },
              Class: function Class(path) {
                var node = path.node;

                if (node.typeParameters) {
                  var typeParameters = path.get("typeParameters");
                  var block = path.get("body");
                  block.addComment(
                    "leading",
                    generateComment(typeParameters, typeParameters.node)
                  );
                  typeParameters.remove();
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 951 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              FunctionExpression: {
                exit: function exit(path) {
                  var node = path.node;
                  if (!node.id) return;
                  path.replaceWith(
                    _core().types.callExpression(
                      _core().types.functionExpression(
                        null,
                        [],
                        _core().types.blockStatement([
                          _core().types.toStatement(node),
                          _core().types.returnStatement(
                            _core().types.cloneNode(node.id)
                          )
                        ])
                      ),
                      []
                    )
                  );
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 952 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            name: "transform-new-target",
            visitor: {
              MetaProperty: function MetaProperty(path) {
                var meta = path.get("meta");
                var property = path.get("property");
                var scope = path.scope;

                if (
                  meta.isIdentifier({
                    name: "new"
                  }) &&
                  property.isIdentifier({
                    name: "target"
                  })
                ) {
                  var func = path.findParent(function(path) {
                    if (path.isClass()) return true;

                    if (
                      path.isFunction() &&
                      !path.isArrowFunctionExpression()
                    ) {
                      if (
                        path.isClassMethod({
                          kind: "constructor"
                        })
                      ) {
                        return false;
                      }

                      return true;
                    }

                    return false;
                  });

                  if (!func) {
                    throw path.buildCodeFrameError(
                      "new.target must be under a (non-arrow) function or a class."
                    );
                  }

                  var node = func.node;

                  if (!node.id) {
                    if (func.isMethod()) {
                      path.replaceWith(scope.buildUndefinedNode());
                      return;
                    }

                    node.id = scope.generateUidIdentifier("target");
                  }

                  var _constructor = _core().types.memberExpression(
                    _core().types.thisExpression(),
                    _core().types.identifier("constructor")
                  );

                  if (func.isClass()) {
                    path.replaceWith(_constructor);
                    return;
                  }

                  path.replaceWith(
                    _core().types.conditionalExpression(
                      _core().types.binaryExpression(
                        "instanceof",
                        _core().types.thisExpression(),
                        _core().types.cloneNode(node.id)
                      ),
                      _constructor,
                      scope.buildUndefinedNode()
                    )
                  );
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 953 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              CallExpression: function CallExpression(path, file) {
                if (path.get("callee").matchesPattern("Object.assign")) {
                  path.node.callee = file.addHelper("extends");
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 954 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              CallExpression: function CallExpression(path, file) {
                if (
                  path.get("callee").matchesPattern("Object.setPrototypeOf")
                ) {
                  path.node.callee = file.addHelper("defaults");
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 955 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pull() {
          var data = _interopRequireDefault(__webpack_require__(211));

          _pull = function _pull() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);

          function isProtoKey(node) {
            return _core().types.isLiteral(
              _core().types.toComputedKey(node, node.key),
              {
                value: "__proto__"
              }
            );
          }

          function isProtoAssignmentExpression(node) {
            var left = node.left;
            return (
              _core().types.isMemberExpression(left) &&
              _core().types.isLiteral(
                _core().types.toComputedKey(left, left.property),
                {
                  value: "__proto__"
                }
              )
            );
          }

          function buildDefaultsCallExpression(expr, ref, file) {
            return _core().types.expressionStatement(
              _core().types.callExpression(file.addHelper("defaults"), [
                ref,
                expr.right
              ])
            );
          }

          return {
            visitor: {
              AssignmentExpression: function AssignmentExpression(path, file) {
                if (!isProtoAssignmentExpression(path.node)) return;
                var nodes = [];
                var left = path.node.left.object;
                var temp = path.scope.maybeGenerateMemoised(left);

                if (temp) {
                  nodes.push(
                    _core().types.expressionStatement(
                      _core().types.assignmentExpression("=", temp, left)
                    )
                  );
                }

                nodes.push(
                  buildDefaultsCallExpression(
                    path.node,
                    _core().types.cloneNode(temp || left),
                    file
                  )
                );
                if (temp) nodes.push(_core().types.cloneNode(temp));
                path.replaceWithMultiple(nodes);
              },
              ExpressionStatement: function ExpressionStatement(path, file) {
                var expr = path.node.expression;
                if (
                  !_core().types.isAssignmentExpression(expr, {
                    operator: "="
                  })
                )
                  return;

                if (isProtoAssignmentExpression(expr)) {
                  path.replaceWith(
                    buildDefaultsCallExpression(expr, expr.left.object, file)
                  );
                }
              },
              ObjectExpression: function ObjectExpression(path, file) {
                var proto;
                var node = path.node;
                var _arr = node.properties;

                for (var _i = 0; _i < _arr.length; _i++) {
                  var prop = _arr[_i];

                  if (isProtoKey(prop)) {
                    proto = prop.value;
                    (0, _pull().default)(node.properties, prop);
                  }
                }

                if (proto) {
                  var args = [_core().types.objectExpression([]), proto];
                  if (node.properties.length) args.push(node);
                  path.replaceWith(
                    _core().types.callExpression(
                      file.addHelper("extends"),
                      args
                    )
                  );
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 956 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _helperAnnotateAsPure() {
          var data = _interopRequireDefault(__webpack_require__(56));

          _helperAnnotateAsPure = function _helperAnnotateAsPure() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var allowMutablePropsOnTags = options.allowMutablePropsOnTags;

          if (
            allowMutablePropsOnTags != null &&
            !Array.isArray(allowMutablePropsOnTags)
          ) {
            throw new Error(
              ".allowMutablePropsOnTags must be an array, null, or undefined."
            );
          }

          var HOISTED = new WeakSet();
          var immutabilityVisitor = {
            enter: function enter(path, state) {
              var stop = function stop() {
                state.isImmutable = false;
                path.stop();
              };

              if (path.isJSXClosingElement()) {
                path.skip();
                return;
              }

              if (
                path.isJSXIdentifier({
                  name: "ref"
                }) &&
                path.parentPath.isJSXAttribute({
                  name: path.node
                })
              ) {
                return stop();
              }

              if (
                path.isJSXIdentifier() ||
                path.isIdentifier() ||
                path.isJSXMemberExpression()
              ) {
                return;
              }

              if (!path.isImmutable()) {
                if (path.isPure()) {
                  var expressionResult = path.evaluate();

                  if (expressionResult.confident) {
                    var value = expressionResult.value;
                    var isMutable =
                      (!state.mutablePropsAllowed &&
                        value &&
                        typeof value === "object") ||
                      typeof value === "function";

                    if (!isMutable) {
                      path.skip();
                      return;
                    }
                  } else if (
                    _core().types.isIdentifier(expressionResult.deopt)
                  ) {
                    return;
                  }
                }

                stop();
              }
            }
          };
          return {
            visitor: {
              JSXElement: function JSXElement(path) {
                if (HOISTED.has(path.node)) return;
                HOISTED.add(path.node);
                var state = {
                  isImmutable: true
                };

                if (allowMutablePropsOnTags != null) {
                  var namePath = path.get("openingElement.name");

                  while (namePath.isJSXMemberExpression()) {
                    namePath = namePath.get("property");
                  }

                  var elementName = namePath.node.name;
                  state.mutablePropsAllowed =
                    allowMutablePropsOnTags.indexOf(elementName) > -1;
                }

                path.traverse(immutabilityVisitor, state);

                if (state.isImmutable) {
                  var hoisted = path.hoist();

                  if (hoisted) {
                    (0, _helperAnnotateAsPure().default)(hoisted);
                  }
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 957 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperBuilderReactJsx() {
          var data = _interopRequireDefault(__webpack_require__(98));

          _helperBuilderReactJsx = function _helperBuilderReactJsx() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);

          function hasRefOrSpread(attrs) {
            for (var i = 0; i < attrs.length; i++) {
              var attr = attrs[i];
              if (_core().types.isJSXSpreadAttribute(attr)) return true;
              if (isJSXAttributeOfName(attr, "ref")) return true;
            }

            return false;
          }

          function isJSXAttributeOfName(attr, name) {
            return (
              _core().types.isJSXAttribute(attr) &&
              _core().types.isJSXIdentifier(attr.name, {
                name: name
              })
            );
          }

          var visitor = (0, _helperBuilderReactJsx().default)({
            filter: function filter(node) {
              return (
                node.openingElement &&
                !hasRefOrSpread(node.openingElement.attributes)
              );
            },
            pre: function pre(state) {
              var tagName = state.tagName;
              var args = state.args;

              if (_core().types.react.isCompatTag(tagName)) {
                args.push(_core().types.stringLiteral(tagName));
              } else {
                args.push(state.tagExpr);
              }
            },
            post: function post(state, pass) {
              state.callee = pass.addHelper("jsx");
              var props = state.args[1];
              var hasKey = false;

              if (_core().types.isObjectExpression(props)) {
                var keyIndex = props.properties.findIndex(function(prop) {
                  return _core().types.isIdentifier(prop.key, {
                    name: "key"
                  });
                });

                if (keyIndex > -1) {
                  state.args.splice(2, 0, props.properties[keyIndex].value);
                  props.properties.splice(keyIndex, 1);
                  hasKey = true;
                }
              } else if (_core().types.isNullLiteral(props)) {
                state.args.splice(1, 1, _core().types.objectExpression([]));
              }

              if (!hasKey && state.args.length > 2) {
                state.args.splice(
                  2,
                  0,
                  _core().types.unaryExpression(
                    "void",
                    _core().types.numericLiteral(0)
                  )
                );
              }
            }
          });
          return {
            visitor: visitor
          };
        });

        exports.default = _default;

        /***/
      },
      /* 958 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperBuilderReactJsx() {
          var data = _interopRequireDefault(__webpack_require__(98));

          _helperBuilderReactJsx = function _helperBuilderReactJsx() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("jsx");
            },
            visitor: (0, _helperBuilderReactJsx().default)({
              pre: function pre(state) {
                state.callee = state.tagExpr;
              },
              post: function post(state) {
                if (_core().types.react.isCompatTag(state.tagName)) {
                  state.call = _core().types.callExpression(
                    _core().types.memberExpression(
                      _core().types.memberExpression(
                        _core().types.identifier("React"),
                        _core().types.identifier("DOM")
                      ),
                      state.tagExpr,
                      _core().types.isLiteral(state.tagExpr)
                    ),
                    state.args
                  );
                }
              },
              compat: true
            })
          };
        });

        exports.default = _default;

        /***/
      },
      /* 959 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.__esModule = true;

        exports.default = function(context) {
          var plugin = {
            visitor: __webpack_require__(960).getVisitor(context)
          };
          var version = context && context.version;

          if (version && parseInt(version, 10) >= 7) {
            plugin.name = "regenerator-transform";
          }

          return plugin;
        };

        /***/
      },
      /* 960 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var _assert = __webpack_require__(13);

        var _assert2 = _interopRequireDefault(_assert);

        var _hoist = __webpack_require__(961);

        var _emit = __webpack_require__(242);

        var _replaceShorthandObjectMethod = __webpack_require__(964);

        var _replaceShorthandObjectMethod2 = _interopRequireDefault(
          _replaceShorthandObjectMethod
        );

        var _util = __webpack_require__(29);

        var util = _interopRequireWildcard(_util);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key))
                  newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        exports.getVisitor = function(_ref) {
          var t = _ref.types;
          return {
            Function: {
              exit: util.wrapWithTypes(t, function(path, state) {
                var node = path.node;

                if (node.generator) {
                  if (node.async) {
                    if (state.opts.asyncGenerators === false) return;
                  } else {
                    if (state.opts.generators === false) return;
                  }
                } else if (node.async) {
                  if (state.opts.async === false) return;
                } else {
                  return;
                }

                path = (0, _replaceShorthandObjectMethod2.default)(path);
                node = path.node;
                var contextId = path.scope.generateUidIdentifier("context");
                var argsId = path.scope.generateUidIdentifier("args");
                path.ensureBlock();
                var bodyBlockPath = path.get("body");

                if (node.async) {
                  bodyBlockPath.traverse(awaitVisitor);
                }

                bodyBlockPath.traverse(functionSentVisitor, {
                  context: contextId
                });
                var outerBody = [];
                var innerBody = [];
                bodyBlockPath.get("body").forEach(function(childPath) {
                  var node = childPath.node;

                  if (
                    t.isExpressionStatement(node) &&
                    t.isStringLiteral(node.expression)
                  ) {
                    outerBody.push(node);
                  } else if (node && node._blockHoist != null) {
                    outerBody.push(node);
                  } else {
                    innerBody.push(node);
                  }
                });

                if (outerBody.length > 0) {
                  bodyBlockPath.node.body = innerBody;
                }

                var outerFnExpr = getOuterFnExpr(path);
                t.assertIdentifier(node.id);
                var innerFnId = t.identifier(node.id.name + "$");
                var vars = (0, _hoist.hoist)(path);
                var didRenameArguments = renameArguments(path, argsId);

                if (didRenameArguments) {
                  vars = vars || t.variableDeclaration("var", []);
                  var argumentIdentifier = t.identifier("arguments");
                  argumentIdentifier._shadowedFunctionLiteral = path;
                  vars.declarations.push(
                    t.variableDeclarator(argsId, argumentIdentifier)
                  );
                }

                var emitter = new _emit.Emitter(contextId);
                emitter.explode(path.get("body"));

                if (vars && vars.declarations.length > 0) {
                  outerBody.push(vars);
                }

                var wrapArgs = [
                  emitter.getContextFunction(innerFnId),
                  node.generator ? outerFnExpr : t.nullLiteral(),
                  t.thisExpression()
                ];
                var tryLocsList = emitter.getTryLocsList();

                if (tryLocsList) {
                  wrapArgs.push(tryLocsList);
                }

                var wrapCall = t.callExpression(
                  util.runtimeProperty(node.async ? "async" : "wrap"),
                  wrapArgs
                );
                outerBody.push(t.returnStatement(wrapCall));
                node.body = t.blockStatement(outerBody);
                var oldDirectives = bodyBlockPath.node.directives;

                if (oldDirectives) {
                  node.body.directives = oldDirectives;
                }

                var wasGeneratorFunction = node.generator;

                if (wasGeneratorFunction) {
                  node.generator = false;
                }

                if (node.async) {
                  node.async = false;
                }

                if (wasGeneratorFunction && t.isExpression(node)) {
                  util.replaceWithOrRemove(
                    path,
                    t.callExpression(util.runtimeProperty("mark"), [node])
                  );
                  path.addComment("leading", "#__PURE__");
                }

                path.requeue();
              })
            }
          };
        };

        function getOuterFnExpr(funPath) {
          var t = util.getTypes();
          var node = funPath.node;
          t.assertFunction(node);

          if (!node.id) {
            node.id = funPath.scope.parent.generateUidIdentifier("callee");
          }

          if (node.generator && t.isFunctionDeclaration(node)) {
            return getMarkedFunctionId(funPath);
          }

          return node.id;
        }

        var getMarkInfo = __webpack_require__(243).makeAccessor();

        function getMarkedFunctionId(funPath) {
          var t = util.getTypes();
          var node = funPath.node;
          t.assertIdentifier(node.id);
          var blockPath = funPath.findParent(function(path) {
            return path.isProgram() || path.isBlockStatement();
          });

          if (!blockPath) {
            return node.id;
          }

          var block = blockPath.node;

          _assert2.default.ok(Array.isArray(block.body));

          var info = getMarkInfo(block);

          if (!info.decl) {
            info.decl = t.variableDeclaration("var", []);
            blockPath.unshiftContainer("body", info.decl);
            info.declPath = blockPath.get("body.0");
          }

          _assert2.default.strictEqual(info.declPath.node, info.decl);

          var markedId = blockPath.scope.generateUidIdentifier("marked");
          var markCallExp = t.callExpression(util.runtimeProperty("mark"), [
            node.id
          ]);
          var index =
            info.decl.declarations.push(
              t.variableDeclarator(markedId, markCallExp)
            ) - 1;
          var markCallExpPath = info.declPath.get(
            "declarations." + index + ".init"
          );

          _assert2.default.strictEqual(markCallExpPath.node, markCallExp);

          markCallExpPath.addComment("leading", "#__PURE__");
          return markedId;
        }

        function renameArguments(funcPath, argsId) {
          var state = {
            didRenameArguments: false,
            argsId: argsId
          };
          funcPath.traverse(argumentsVisitor, state);
          return state.didRenameArguments;
        }

        var argumentsVisitor = {
          "FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(
            path
          ) {
            path.skip();
          },
          Identifier: function Identifier(path, state) {
            if (path.node.name === "arguments" && util.isReference(path)) {
              util.replaceWithOrRemove(path, state.argsId);
              state.didRenameArguments = true;
            }
          }
        };
        var functionSentVisitor = {
          MetaProperty: function MetaProperty(path) {
            var node = path.node;

            if (
              node.meta.name === "function" &&
              node.property.name === "sent"
            ) {
              var t = util.getTypes();
              util.replaceWithOrRemove(
                path,
                t.memberExpression(this.context, t.identifier("_sent"))
              );
            }
          }
        };
        var awaitVisitor = {
          Function: function Function(path) {
            path.skip();
          },
          AwaitExpression: function AwaitExpression(path) {
            var t = util.getTypes();
            var argument = path.node.argument;
            util.replaceWithOrRemove(
              path,
              t.yieldExpression(
                t.callExpression(util.runtimeProperty("awrap"), [argument]),
                false
              )
            );
          }
        };

        /***/
      },
      /* 961 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var _util = __webpack_require__(29);

        var util = _interopRequireWildcard(_util);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key))
                  newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        var hasOwn = Object.prototype.hasOwnProperty;

        exports.hoist = function(funPath) {
          var t = util.getTypes();
          t.assertFunction(funPath.node);
          var vars = {};

          function varDeclToExpr(vdec, includeIdentifiers) {
            t.assertVariableDeclaration(vdec);
            var exprs = [];
            vdec.declarations.forEach(function(dec) {
              vars[dec.id.name] = t.identifier(dec.id.name);

              if (dec.init) {
                exprs.push(t.assignmentExpression("=", dec.id, dec.init));
              } else if (includeIdentifiers) {
                exprs.push(dec.id);
              }
            });
            if (exprs.length === 0) return null;
            if (exprs.length === 1) return exprs[0];
            return t.sequenceExpression(exprs);
          }

          funPath.get("body").traverse({
            VariableDeclaration: {
              exit: function exit(path) {
                var expr = varDeclToExpr(path.node, false);

                if (expr === null) {
                  path.remove();
                } else {
                  util.replaceWithOrRemove(path, t.expressionStatement(expr));
                }

                path.skip();
              }
            },
            ForStatement: function ForStatement(path) {
              var init = path.node.init;

              if (t.isVariableDeclaration(init)) {
                util.replaceWithOrRemove(
                  path.get("init"),
                  varDeclToExpr(init, false)
                );
              }
            },
            ForXStatement: function ForXStatement(path) {
              var left = path.get("left");

              if (left.isVariableDeclaration()) {
                util.replaceWithOrRemove(left, varDeclToExpr(left.node, true));
              }
            },
            FunctionDeclaration: function FunctionDeclaration(path) {
              var node = path.node;
              vars[node.id.name] = node.id;
              var assignment = t.expressionStatement(
                t.assignmentExpression(
                  "=",
                  node.id,
                  t.functionExpression(
                    path.scope.generateUidIdentifierBasedOnNode(node),
                    node.params,
                    node.body,
                    node.generator,
                    node.expression
                  )
                )
              );

              if (path.parentPath.isBlockStatement()) {
                path.parentPath.unshiftContainer("body", assignment);
                path.remove();
              } else {
                util.replaceWithOrRemove(path, assignment);
              }

              path.skip();
            },
            FunctionExpression: function FunctionExpression(path) {
              path.skip();
            },
            ArrowFunctionExpression: function ArrowFunctionExpression(path) {
              path.skip();
            }
          });
          var paramNames = {};
          funPath.get("params").forEach(function(paramPath) {
            var param = paramPath.node;

            if (t.isIdentifier(param)) {
              paramNames[param.name] = param;
            } else {
            }
          });
          var declarations = [];
          Object.keys(vars).forEach(function(name) {
            if (!hasOwn.call(paramNames, name)) {
              declarations.push(t.variableDeclarator(vars[name], null));
            }
          });

          if (declarations.length === 0) {
            return null;
          }

          return t.variableDeclaration("var", declarations);
        };

        /***/
      },
      /* 962 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var _assert = __webpack_require__(13);

        var _assert2 = _interopRequireDefault(_assert);

        var _util = __webpack_require__(194);

        var _util2 = __webpack_require__(29);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        function Entry() {
          _assert2.default.ok(this instanceof Entry);
        }

        function FunctionEntry(returnLoc) {
          Entry.call(this);
          (0, _util2.getTypes)().assertLiteral(returnLoc);
          this.returnLoc = returnLoc;
        }

        (0, _util.inherits)(FunctionEntry, Entry);
        exports.FunctionEntry = FunctionEntry;

        function LoopEntry(breakLoc, continueLoc, label) {
          Entry.call(this);
          var t = (0, _util2.getTypes)();
          t.assertLiteral(breakLoc);
          t.assertLiteral(continueLoc);

          if (label) {
            t.assertIdentifier(label);
          } else {
            label = null;
          }

          this.breakLoc = breakLoc;
          this.continueLoc = continueLoc;
          this.label = label;
        }

        (0, _util.inherits)(LoopEntry, Entry);
        exports.LoopEntry = LoopEntry;

        function SwitchEntry(breakLoc) {
          Entry.call(this);
          (0, _util2.getTypes)().assertLiteral(breakLoc);
          this.breakLoc = breakLoc;
        }

        (0, _util.inherits)(SwitchEntry, Entry);
        exports.SwitchEntry = SwitchEntry;

        function TryEntry(firstLoc, catchEntry, finallyEntry) {
          Entry.call(this);
          var t = (0, _util2.getTypes)();
          t.assertLiteral(firstLoc);

          if (catchEntry) {
            _assert2.default.ok(catchEntry instanceof CatchEntry);
          } else {
            catchEntry = null;
          }

          if (finallyEntry) {
            _assert2.default.ok(finallyEntry instanceof FinallyEntry);
          } else {
            finallyEntry = null;
          }

          _assert2.default.ok(catchEntry || finallyEntry);

          this.firstLoc = firstLoc;
          this.catchEntry = catchEntry;
          this.finallyEntry = finallyEntry;
        }

        (0, _util.inherits)(TryEntry, Entry);
        exports.TryEntry = TryEntry;

        function CatchEntry(firstLoc, paramId) {
          Entry.call(this);
          var t = (0, _util2.getTypes)();
          t.assertLiteral(firstLoc);
          t.assertIdentifier(paramId);
          this.firstLoc = firstLoc;
          this.paramId = paramId;
        }

        (0, _util.inherits)(CatchEntry, Entry);
        exports.CatchEntry = CatchEntry;

        function FinallyEntry(firstLoc, afterLoc) {
          Entry.call(this);
          var t = (0, _util2.getTypes)();
          t.assertLiteral(firstLoc);
          t.assertLiteral(afterLoc);
          this.firstLoc = firstLoc;
          this.afterLoc = afterLoc;
        }

        (0, _util.inherits)(FinallyEntry, Entry);
        exports.FinallyEntry = FinallyEntry;

        function LabeledEntry(breakLoc, label) {
          Entry.call(this);
          var t = (0, _util2.getTypes)();
          t.assertLiteral(breakLoc);
          t.assertIdentifier(label);
          this.breakLoc = breakLoc;
          this.label = label;
        }

        (0, _util.inherits)(LabeledEntry, Entry);
        exports.LabeledEntry = LabeledEntry;

        function LeapManager(emitter) {
          _assert2.default.ok(this instanceof LeapManager);

          var Emitter = __webpack_require__(242).Emitter;

          _assert2.default.ok(emitter instanceof Emitter);

          this.emitter = emitter;
          this.entryStack = [new FunctionEntry(emitter.finalLoc)];
        }

        var LMp = LeapManager.prototype;
        exports.LeapManager = LeapManager;

        LMp.withEntry = function(entry, callback) {
          _assert2.default.ok(entry instanceof Entry);

          this.entryStack.push(entry);

          try {
            callback.call(this.emitter);
          } finally {
            var popped = this.entryStack.pop();

            _assert2.default.strictEqual(popped, entry);
          }
        };

        LMp._findLeapLocation = function(property, label) {
          for (var i = this.entryStack.length - 1; i >= 0; --i) {
            var entry = this.entryStack[i];
            var loc = entry[property];

            if (loc) {
              if (label) {
                if (entry.label && entry.label.name === label.name) {
                  return loc;
                }
              } else if (entry instanceof LabeledEntry) {
              } else {
                return loc;
              }
            }
          }

          return null;
        };

        LMp.getBreakLoc = function(label) {
          return this._findLeapLocation("breakLoc", label);
        };

        LMp.getContinueLoc = function(label) {
          return this._findLeapLocation("continueLoc", label);
        };

        /***/
      },
      /* 963 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        var _assert = __webpack_require__(13);

        var _assert2 = _interopRequireDefault(_assert);

        var _util = __webpack_require__(29);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var m = __webpack_require__(243).makeAccessor();

        var hasOwn = Object.prototype.hasOwnProperty;

        function makePredicate(propertyName, knownTypes) {
          function onlyChildren(node) {
            var t = (0, _util.getTypes)();
            t.assertNode(node);
            var result = false;

            function check(child) {
              if (result) {
              } else if (Array.isArray(child)) {
                child.some(check);
              } else if (t.isNode(child)) {
                _assert2.default.strictEqual(result, false);

                result = predicate(child);
              }

              return result;
            }

            var keys = t.VISITOR_KEYS[node.type];

            if (keys) {
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var child = node[key];
                check(child);
              }
            }

            return result;
          }

          function predicate(node) {
            (0, _util.getTypes)().assertNode(node);
            var meta = m(node);
            if (hasOwn.call(meta, propertyName)) return meta[propertyName];
            if (hasOwn.call(opaqueTypes, node.type))
              return (meta[propertyName] = false);
            if (hasOwn.call(knownTypes, node.type))
              return (meta[propertyName] = true);
            return (meta[propertyName] = onlyChildren(node));
          }

          predicate.onlyChildren = onlyChildren;
          return predicate;
        }

        var opaqueTypes = {
          FunctionExpression: true,
          ArrowFunctionExpression: true
        };
        var sideEffectTypes = {
          CallExpression: true,
          ForInStatement: true,
          UnaryExpression: true,
          BinaryExpression: true,
          AssignmentExpression: true,
          UpdateExpression: true,
          NewExpression: true
        };
        var leapTypes = {
          YieldExpression: true,
          BreakStatement: true,
          ContinueStatement: true,
          ReturnStatement: true,
          ThrowStatement: true
        };

        for (var type in leapTypes) {
          if (hasOwn.call(leapTypes, type)) {
            sideEffectTypes[type] = leapTypes[type];
          }
        }

        exports.hasSideEffects = makePredicate(
          "hasSideEffects",
          sideEffectTypes
        );
        exports.containsLeap = makePredicate("containsLeap", leapTypes);

        /***/
      },
      /* 964 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        exports.__esModule = true;
        exports.default = replaceShorthandObjectMethod;

        var _util = __webpack_require__(29);

        var util = _interopRequireWildcard(_util);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key))
                  newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function replaceShorthandObjectMethod(path) {
          var t = util.getTypes();

          if (!path.node || !t.isFunction(path.node)) {
            throw new Error(
              "replaceShorthandObjectMethod can only be called on Function AST node paths."
            );
          }

          if (!t.isObjectMethod(path.node)) {
            return path;
          }

          if (!path.node.generator) {
            return path;
          }

          var parameters = path.node.params.map(function(param) {
            return t.cloneDeep(param);
          });
          var functionExpression = t.functionExpression(
            null,
            parameters,
            t.cloneDeep(path.node.body),
            path.node.generator,
            path.node.async
          );
          util.replaceWithOrRemove(
            path,
            t.objectProperty(
              t.cloneDeep(path.node.key),
              functionExpression,
              path.node.computed,
              false
            )
          );
          return path.get("value");
        }

        /***/
      },
      /* 965 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "definitions", {
          enumerable: true,
          get: function get() {
            return _definitions.default;
          }
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _helperModuleImports() {
          var data = __webpack_require__(94);

          _helperModuleImports = function _helperModuleImports() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _definitions = _interopRequireDefault(__webpack_require__(966));

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var helpers = options.helpers,
            _options$moduleName = options.moduleName,
            moduleName =
              _options$moduleName === void 0
                ? "@babel/runtime"
                : _options$moduleName,
            polyfill = options.polyfill,
            regenerator = options.regenerator,
            useBuiltIns = options.useBuiltIns,
            useESModules = options.useESModules;
          var regeneratorEnabled = regenerator !== false;
          var notPolyfillOrDoesUseBuiltIns = polyfill === false || useBuiltIns;
          var isPolyfillAndUseBuiltIns = polyfill && useBuiltIns;
          var baseHelpersDir = useBuiltIns ? "helpers/builtin" : "helpers";
          var helpersDir = useESModules
            ? baseHelpersDir + "/es6"
            : baseHelpersDir;

          function has(obj, key) {
            return Object.prototype.hasOwnProperty.call(obj, key);
          }

          var HEADER_HELPERS = [
            "interopRequireWildcard",
            "interopRequireDefault"
          ];
          return {
            pre: function pre(file) {
              var _this = this;

              if (helpers !== false) {
                file.set("helperGenerator", function(name) {
                  var isInteropHelper = HEADER_HELPERS.indexOf(name) !== -1;
                  var blockHoist =
                    isInteropHelper &&
                    !(0, _helperModuleImports().isModule)(file.path)
                      ? 4
                      : undefined;
                  return _this.addDefaultImport(
                    moduleName + "/" + helpersDir + "/" + name,
                    name,
                    blockHoist
                  );
                });
              }

              if (isPolyfillAndUseBuiltIns) {
                throw new Error(
                  "The polyfill option conflicts with useBuiltIns; use one or the other"
                );
              }

              this.moduleName = moduleName;
              var cache = new Map();

              this.addDefaultImport = function(source, nameHint, blockHoist) {
                var cacheKey = (0, _helperModuleImports().isModule)(file.path);
                var key = source + ":" + nameHint + ":" + (cacheKey || "");
                var cached = cache.get(key);

                if (cached) {
                  cached = _core().types.cloneNode(cached);
                } else {
                  cached = (0, _helperModuleImports().addDefault)(
                    file.path,
                    source,
                    {
                      importedInterop: "uncompiled",
                      nameHint: nameHint,
                      blockHoist: blockHoist
                    }
                  );
                  cache.set(key, cached);
                }

                return cached;
              };
            },
            visitor: {
              ReferencedIdentifier: function ReferencedIdentifier(path) {
                var node = path.node,
                  parent = path.parent,
                  scope = path.scope;

                if (node.name === "regeneratorRuntime" && regeneratorEnabled) {
                  path.replaceWith(
                    this.addDefaultImport(
                      this.moduleName + "/regenerator",
                      "regeneratorRuntime"
                    )
                  );
                  return;
                }

                if (notPolyfillOrDoesUseBuiltIns) return;
                if (_core().types.isMemberExpression(parent)) return;
                if (!has(_definitions.default.builtins, node.name)) return;
                if (scope.getBindingIdentifier(node.name)) return;
                path.replaceWith(
                  this.addDefaultImport(
                    moduleName +
                      "/core-js/" +
                      _definitions.default.builtins[node.name],
                    node.name
                  )
                );
              },
              CallExpression: function CallExpression(path) {
                if (notPolyfillOrDoesUseBuiltIns) return;
                if (path.node.arguments.length) return;
                var callee = path.node.callee;
                if (!_core().types.isMemberExpression(callee)) return;
                if (!callee.computed) return;

                if (
                  !path.get("callee.property").matchesPattern("Symbol.iterator")
                ) {
                  return;
                }

                path.replaceWith(
                  _core().types.callExpression(
                    this.addDefaultImport(
                      moduleName + "/core-js/get-iterator",
                      "getIterator"
                    ),
                    [callee.object]
                  )
                );
              },
              BinaryExpression: function BinaryExpression(path) {
                if (notPolyfillOrDoesUseBuiltIns) return;
                if (path.node.operator !== "in") return;
                if (!path.get("left").matchesPattern("Symbol.iterator")) return;
                path.replaceWith(
                  _core().types.callExpression(
                    this.addDefaultImport(
                      moduleName + "/core-js/is-iterable",
                      "isIterable"
                    ),
                    [path.node.right]
                  )
                );
              },
              MemberExpression: {
                enter: function enter(path) {
                  if (notPolyfillOrDoesUseBuiltIns) return;
                  if (!path.isReferenced()) return;
                  var node = path.node;
                  var obj = node.object;
                  var prop = node.property;
                  if (!_core().types.isReferenced(obj, node)) return;
                  if (node.computed) return;
                  if (!has(_definitions.default.methods, obj.name)) return;
                  var methods = _definitions.default.methods[obj.name];
                  if (!has(methods, prop.name)) return;
                  if (path.scope.getBindingIdentifier(obj.name)) return;

                  if (
                    obj.name === "Object" &&
                    prop.name === "defineProperty" &&
                    path.parentPath.isCallExpression()
                  ) {
                    var call = path.parentPath.node;

                    if (
                      call.arguments.length === 3 &&
                      _core().types.isLiteral(call.arguments[1])
                    ) {
                      return;
                    }
                  }

                  path.replaceWith(
                    this.addDefaultImport(
                      moduleName + "/core-js/" + methods[prop.name],
                      obj.name + "$" + prop.name
                    )
                  );
                },
                exit: function exit(path) {
                  if (notPolyfillOrDoesUseBuiltIns) return;
                  if (!path.isReferenced()) return;
                  var node = path.node;
                  var obj = node.object;
                  if (!has(_definitions.default.builtins, obj.name)) return;
                  if (path.scope.getBindingIdentifier(obj.name)) return;
                  path.replaceWith(
                    _core().types.memberExpression(
                      this.addDefaultImport(
                        moduleName +
                          "/core-js/" +
                          _definitions.default.builtins[obj.name],
                        obj.name
                      ),
                      node.property,
                      node.computed
                    )
                  );
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 966 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;
        var _default = {
          builtins: {
            Symbol: "symbol",
            Promise: "promise",
            Map: "map",
            WeakMap: "weak-map",
            Set: "set",
            WeakSet: "weak-set",
            Observable: "observable",
            setImmediate: "set-immediate",
            clearImmediate: "clear-immediate",
            asap: "asap"
          },
          methods: {
            Array: {
              copyWithin: "array/copy-within",
              entries: "array/entries",
              every: "array/every",
              fill: "array/fill",
              filter: "array/filter",
              findIndex: "array/find-index",
              find: "array/find",
              forEach: "array/for-each",
              from: "array/from",
              includes: "array/includes",
              indexOf: "array/index-of",
              join: "array/join",
              keys: "array/keys",
              lastIndexOf: "array/last-index-of",
              map: "array/map",
              of: "array/of",
              reduceRight: "array/reduce-right",
              reduce: "array/reduce",
              some: "array/some",
              sort: "array/sort",
              splice: "array/splice",
              values: "array/values"
            },
            JSON: {
              stringify: "json/stringify"
            },
            Object: {
              assign: "object/assign",
              create: "object/create",
              defineProperties: "object/define-properties",
              defineProperty: "object/define-property",
              entries: "object/entries",
              freeze: "object/freeze",
              getOwnPropertyDescriptor: "object/get-own-property-descriptor",
              getOwnPropertyDescriptors: "object/get-own-property-descriptors",
              getOwnPropertyNames: "object/get-own-property-names",
              getOwnPropertySymbols: "object/get-own-property-symbols",
              getPrototypeOf: "object/get-prototype-of",
              isExtensible: "object/is-extensible",
              isFrozen: "object/is-frozen",
              isSealed: "object/is-sealed",
              is: "object/is",
              keys: "object/keys",
              preventExtensions: "object/prevent-extensions",
              seal: "object/seal",
              setPrototypeOf: "object/set-prototype-of",
              values: "object/values"
            },
            Math: {
              acosh: "math/acosh",
              asinh: "math/asinh",
              atanh: "math/atanh",
              cbrt: "math/cbrt",
              clz32: "math/clz32",
              cosh: "math/cosh",
              expm1: "math/expm1",
              fround: "math/fround",
              hypot: "math/hypot",
              imul: "math/imul",
              log10: "math/log10",
              log1p: "math/log1p",
              log2: "math/log2",
              sign: "math/sign",
              sinh: "math/sinh",
              tanh: "math/tanh",
              trunc: "math/trunc",
              iaddh: "math/iaddh",
              isubh: "math/isubh",
              imulh: "math/imulh",
              umulh: "math/umulh"
            },
            Symbol: {
              for: "symbol/for",
              hasInstance: "symbol/has-instance",
              isConcatSpreadable: "symbol/is-concat-spreadable",
              iterator: "symbol/iterator",
              keyFor: "symbol/key-for",
              match: "symbol/match",
              replace: "symbol/replace",
              search: "symbol/search",
              species: "symbol/species",
              split: "symbol/split",
              toPrimitive: "symbol/to-primitive",
              toStringTag: "symbol/to-string-tag",
              unscopables: "symbol/unscopables"
            },
            String: {
              at: "string/at",
              codePointAt: "string/code-point-at",
              endsWith: "string/ends-with",
              fromCodePoint: "string/from-code-point",
              includes: "string/includes",
              matchAll: "string/match-all",
              padStart: "string/pad-start",
              padEnd: "string/pad-end",
              raw: "string/raw",
              repeat: "string/repeat",
              startsWith: "string/starts-with",
              trim: "string/trim",
              trimLeft: "string/trim-left",
              trimRight: "string/trim-right",
              trimStart: "string/trim-start",
              trimEnd: "string/trim-end"
            },
            Number: {
              EPSILON: "number/epsilon",
              isFinite: "number/is-finite",
              isInteger: "number/is-integer",
              isNaN: "number/is-nan",
              isSafeInteger: "number/is-safe-integer",
              MAX_SAFE_INTEGER: "number/max-safe-integer",
              MIN_SAFE_INTEGER: "number/min-safe-integer",
              parseFloat: "number/parse-float",
              parseInt: "number/parse-int"
            },
            Reflect: {
              apply: "reflect/apply",
              construct: "reflect/construct",
              defineProperty: "reflect/define-property",
              deleteProperty: "reflect/delete-property",
              getOwnPropertyDescriptor: "reflect/get-own-property-descriptor",
              getPrototypeOf: "reflect/get-prototype-of",
              get: "reflect/get",
              has: "reflect/has",
              isExtensible: "reflect/is-extensible",
              ownKeys: "reflect/own-keys",
              preventExtensions: "reflect/prevent-extensions",
              setPrototypeOf: "reflect/set-prototype-of",
              set: "reflect/set",
              defineMetadata: "reflect/define-metadata",
              deleteMetadata: "reflect/delete-metadata",
              getMetadata: "reflect/get-metadata",
              getMetadataKeys: "reflect/get-metadata-keys",
              getOwnMetadata: "reflect/get-own-metadata",
              getOwnMetadataKeys: "reflect/get-own-metadata-keys",
              hasMetadata: "reflect/has-metadata",
              hasOwnMetadata: "reflect/has-own-metadata",
              metadata: "reflect/metadata"
            },
            System: {
              global: "system/global"
            },
            Date: {},
            Function: {}
          }
        };
        exports.default = _default;

        /***/
      },
      /* 967 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            visitor: {
              Program: function Program(path) {
                var node = path.node;
                var _arr = node.directives;

                for (var _i = 0; _i < _arr.length; _i++) {
                  var directive = _arr[_i];
                  if (directive.value.value === "use strict") return;
                }

                path.unshiftContainer(
                  "directives",
                  _core().types.directive(
                    _core().types.directiveLiteral("use strict")
                  )
                );
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 968 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginTransformExponentiationOperator() {
          var data = _interopRequireDefault(__webpack_require__(232));

          _pluginTransformExponentiationOperator = function _pluginTransformExponentiationOperator() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            plugins: [_pluginTransformExponentiationOperator().default]
          };
        });

        exports.default = _default;

        /***/
      },
      /* 969 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginTransformAsyncToGenerator() {
          var data = _interopRequireDefault(__webpack_require__(191));

          _pluginTransformAsyncToGenerator = function _pluginTransformAsyncToGenerator() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            plugins: [_pluginTransformAsyncToGenerator().default]
          };
        });

        exports.default = _default;

        /***/
      },
      /* 970 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginTransformReactJsx() {
          var data = _interopRequireDefault(__webpack_require__(238));

          _pluginTransformReactJsx = function _pluginTransformReactJsx() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxJsx() {
          var data = _interopRequireDefault(__webpack_require__(93));

          _pluginSyntaxJsx = function _pluginSyntaxJsx() {
            return data;
          };

          return data;
        }

        function _pluginTransformReactDisplayName() {
          var data = _interopRequireDefault(__webpack_require__(237));

          _pluginTransformReactDisplayName = function _pluginTransformReactDisplayName() {
            return data;
          };

          return data;
        }

        function _pluginTransformReactJsxSource() {
          var data = _interopRequireDefault(__webpack_require__(240));

          _pluginTransformReactJsxSource = function _pluginTransformReactJsxSource() {
            return data;
          };

          return data;
        }

        function _pluginTransformReactJsxSelf() {
          var data = _interopRequireDefault(__webpack_require__(239));

          _pluginTransformReactJsxSelf = function _pluginTransformReactJsxSelf() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api, opts) {
          api.assertVersion(7);
          var pragma = opts.pragma || "React.createElement";
          var pragmaFrag = opts.pragmaFrag || "React.Fragment";
          var throwIfNamespace =
            opts.throwIfNamespace === undefined
              ? true
              : !!opts.throwIfNamespace;
          var development = !!opts.development;
          var useBuiltIns = !!opts.useBuiltIns;

          if (typeof development !== "boolean") {
            throw new Error(
              "@babel/preset-react 'development' option must be a boolean."
            );
          }

          return {
            plugins: [
              [
                _pluginTransformReactJsx().default,
                {
                  pragma: pragma,
                  pragmaFrag: pragmaFrag,
                  throwIfNamespace: throwIfNamespace,
                  useBuiltIns: useBuiltIns
                }
              ],
              _pluginSyntaxJsx().default,
              _pluginTransformReactDisplayName().default,
              development && _pluginTransformReactJsxSource().default,
              development && _pluginTransformReactJsxSelf().default
            ].filter(Boolean)
          };
        });

        exports.default = _default;

        /***/
      },
      /* 971 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _presetStage() {
          var data = _interopRequireDefault(__webpack_require__(245));

          _presetStage = function _presetStage() {
            return data;
          };

          return data;
        }

        function _pluginProposalFunctionBind() {
          var data = _interopRequireDefault(__webpack_require__(234));

          _pluginProposalFunctionBind = function _pluginProposalFunctionBind() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api, opts) {
          if (opts === void 0) {
            opts = {};
          }

          api.assertVersion(7);
          var _opts = opts,
            _opts$loose = _opts.loose,
            loose = _opts$loose === void 0 ? false : _opts$loose,
            _opts$useBuiltIns = _opts.useBuiltIns,
            useBuiltIns =
              _opts$useBuiltIns === void 0 ? false : _opts$useBuiltIns,
            _opts$decoratorsLegac = _opts.decoratorsLegacy,
            decoratorsLegacy =
              _opts$decoratorsLegac === void 0 ? false : _opts$decoratorsLegac;

          if (typeof loose !== "boolean") {
            throw new Error(
              "@babel/preset-stage-0 'loose' option must be a boolean."
            );
          }

          if (typeof useBuiltIns !== "boolean") {
            throw new Error(
              "@babel/preset-stage-0 'useBuiltIns' option must be a boolean."
            );
          }

          if (typeof decoratorsLegacy !== "boolean") {
            throw new Error(
              "@babel/preset-stage-0 'decoratorsLegacy' option must be a boolean."
            );
          }

          if (decoratorsLegacy !== true) {
            throw new Error(
              "The new decorators proposal is not supported yet." +
                ' You must pass the `"decoratorsLegacy": true` option to' +
                " @babel/preset-stage-0"
            );
          }

          return {
            presets: [
              [
                _presetStage().default,
                {
                  loose: loose,
                  useBuiltIns: useBuiltIns,
                  decoratorsLegacy: decoratorsLegacy
                }
              ]
            ],
            plugins: [_pluginProposalFunctionBind().default]
          };
        });

        exports.default = _default;

        /***/
      },
      /* 972 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxFunctionSent() {
          var data = _interopRequireDefault(__webpack_require__(185));

          _pluginSyntaxFunctionSent = function _pluginSyntaxFunctionSent() {
            return data;
          };

          return data;
        }

        function _helperWrapFunction() {
          var data = _interopRequireDefault(__webpack_require__(193));

          _helperWrapFunction = function _helperWrapFunction() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);

          var isFunctionSent = function isFunctionSent(node) {
            return (
              _core().types.isIdentifier(node.meta, {
                name: "function"
              }) &&
              _core().types.isIdentifier(node.property, {
                name: "sent"
              })
            );
          };

          var hasBeenReplaced = function hasBeenReplaced(node, sentId) {
            return (
              _core().types.isAssignmentExpression(node) &&
              _core().types.isIdentifier(node.left, {
                name: sentId
              })
            );
          };

          var yieldVisitor = {
            Function: function Function(path) {
              path.skip();
            },
            YieldExpression: function YieldExpression(path) {
              if (!hasBeenReplaced(path.parent, this.sentId)) {
                path.replaceWith(
                  _core().types.assignmentExpression(
                    "=",
                    _core().types.identifier(this.sentId),
                    path.node
                  )
                );
              }
            },
            MetaProperty: function MetaProperty(path) {
              if (isFunctionSent(path.node)) {
                path.replaceWith(_core().types.identifier(this.sentId));
              }
            }
          };
          return {
            inherits: _pluginSyntaxFunctionSent().default,
            visitor: {
              MetaProperty: function MetaProperty(path, state) {
                if (!isFunctionSent(path.node)) return;
                var fnPath = path.getFunctionParent();

                if (!fnPath.node.generator) {
                  throw new Error("Parent generator function not found");
                }

                var sentId = path.scope.generateUid("function.sent");
                fnPath.traverse(yieldVisitor, {
                  sentId: sentId
                });
                fnPath.node.body.body.unshift(
                  _core().types.variableDeclaration("let", [
                    _core().types.variableDeclarator(
                      _core().types.identifier(sentId),
                      _core().types.yieldExpression()
                    )
                  ])
                );
                (0, _helperWrapFunction().default)(
                  fnPath,
                  state.addHelper("skipFirstGeneratorNext")
                );
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 973 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxNumericSeparator() {
          var data = _interopRequireDefault(__webpack_require__(974));

          _pluginSyntaxNumericSeparator = function _pluginSyntaxNumericSeparator() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);

          function replaceNumberArg(_ref) {
            var node = _ref.node;

            if (node.callee.name !== "Number") {
              return;
            }

            var arg = node.arguments[0];

            if (!_core().types.isStringLiteral(arg)) {
              return;
            }

            arg.value = arg.value.replace(/_/g, "");
          }

          return {
            inherits: _pluginSyntaxNumericSeparator().default,
            visitor: {
              CallExpression: replaceNumberArg,
              NewExpression: replaceNumberArg,
              NumericLiteral: function NumericLiteral(_ref2) {
                var node = _ref2.node;
                var extra = node.extra;

                if (extra && /_/.test(extra.raw)) {
                  extra.raw = extra.raw.replace(/_/g, "");
                }
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 974 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("numericSeparator");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 975 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxThrowExpressions() {
          var data = _interopRequireDefault(__webpack_require__(976));

          _pluginSyntaxThrowExpressions = function _pluginSyntaxThrowExpressions() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            inherits: _pluginSyntaxThrowExpressions().default,
            visitor: {
              UnaryExpression: function UnaryExpression(path) {
                var _path$node = path.node,
                  operator = _path$node.operator,
                  argument = _path$node.argument;
                if (operator !== "throw") return;

                var arrow = _core().types.functionExpression(
                  null,
                  [_core().types.identifier("e")],
                  _core().types.blockStatement([
                    _core().types.throwStatement(_core().types.identifier("e"))
                  ])
                );

                path.replaceWith(
                  _core().types.callExpression(arrow, [argument])
                );
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 976 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("throwExpressions");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 977 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxLogicalAssignmentOperators() {
          var data = _interopRequireDefault(__webpack_require__(978));

          _pluginSyntaxLogicalAssignmentOperators = function _pluginSyntaxLogicalAssignmentOperators() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            inherits: _pluginSyntaxLogicalAssignmentOperators().default,
            visitor: {
              AssignmentExpression: function AssignmentExpression(path) {
                var node = path.node,
                  scope = path.scope;
                var operator = node.operator,
                  left = node.left,
                  right = node.right;

                if (
                  operator !== "||=" &&
                  operator !== "&&=" &&
                  operator !== "??="
                ) {
                  return;
                }

                var lhs = _core().types.cloneNode(left);

                if (_core().types.isMemberExpression(left)) {
                  var object = left.object,
                    property = left.property,
                    computed = left.computed;
                  var memo = scope.maybeGenerateMemoised(object);

                  if (memo) {
                    left.object = memo;
                    lhs.object = _core().types.assignmentExpression(
                      "=",
                      _core().types.cloneNode(memo),
                      object
                    );
                  }

                  if (computed) {
                    var _memo = scope.maybeGenerateMemoised(property);

                    if (_memo) {
                      left.property = _memo;
                      lhs.property = _core().types.assignmentExpression(
                        "=",
                        _core().types.cloneNode(_memo),
                        property
                      );
                    }
                  }
                }

                path.replaceWith(
                  _core().types.logicalExpression(
                    operator.slice(0, -1),
                    lhs,
                    _core().types.assignmentExpression("=", left, right)
                  )
                );
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 978 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("logicalAssignment");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 979 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxOptionalChaining() {
          var data = _interopRequireDefault(__webpack_require__(980));

          _pluginSyntaxOptionalChaining = function _pluginSyntaxOptionalChaining() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(
          api,
          options
        ) {
          api.assertVersion(7);
          var _options$loose = options.loose,
            loose = _options$loose === void 0 ? false : _options$loose;

          function optional(path, replacementPath) {
            var scope = path.scope;
            var optionals = [];
            var objectPath = path;

            while (
              objectPath.isOptionalMemberExpression() ||
              objectPath.isOptionalCallExpression()
            ) {
              var _objectPath = objectPath,
                node = _objectPath.node;

              if (node.optional) {
                optionals.push(node);
              }

              if (objectPath.isOptionalMemberExpression()) {
                objectPath.node.type = "MemberExpression";
                objectPath = objectPath.get("object");
              } else {
                objectPath.node.type = "CallExpression";
                objectPath = objectPath.get("callee");
              }
            }

            for (var i = optionals.length - 1; i >= 0; i--) {
              var node = optionals[i];
              node.optional = false;

              var isCall = _core().types.isCallExpression(node);

              var replaceKey = isCall ? "callee" : "object";
              var chain = node[replaceKey];
              var ref = void 0;
              var check = void 0;

              if (loose && isCall) {
                check = ref = chain;
              } else {
                ref = scope.maybeGenerateMemoised(chain);

                if (ref) {
                  check = _core().types.assignmentExpression(
                    "=",
                    _core().types.cloneNode(ref),
                    chain
                  );
                  node[replaceKey] = ref;
                } else {
                  check = ref = chain;
                }
              }

              if (isCall && _core().types.isMemberExpression(chain)) {
                if (loose) {
                  node.callee = chain;
                } else {
                  var object = chain.object;
                  var context = scope.maybeGenerateMemoised(object);

                  if (context) {
                    chain.object = _core().types.assignmentExpression(
                      "=",
                      context,
                      object
                    );
                  } else {
                    context = object;
                  }

                  node.arguments.unshift(_core().types.cloneNode(context));
                  node.callee = _core().types.memberExpression(
                    node.callee,
                    _core().types.identifier("call")
                  );
                }
              }

              replacementPath.replaceWith(
                _core().types.conditionalExpression(
                  loose
                    ? _core().types.binaryExpression(
                        "==",
                        _core().types.cloneNode(check),
                        _core().types.nullLiteral()
                      )
                    : _core().types.logicalExpression(
                        "||",
                        _core().types.binaryExpression(
                          "===",
                          _core().types.cloneNode(check),
                          _core().types.nullLiteral()
                        ),
                        _core().types.binaryExpression(
                          "===",
                          _core().types.cloneNode(ref),
                          scope.buildUndefinedNode()
                        )
                      ),
                  scope.buildUndefinedNode(),
                  replacementPath.node
                )
              );
              replacementPath = replacementPath.get("alternate");
            }
          }

          function findReplacementPath(path) {
            return path.find(function(path) {
              var parentPath = path.parentPath;

              if (
                path.key == "object" &&
                parentPath.isOptionalMemberExpression()
              ) {
                return false;
              }

              if (
                path.key == "callee" &&
                parentPath.isOptionalCallExpression()
              ) {
                return false;
              }

              if (
                path.key == "argument" &&
                parentPath.isUnaryExpression({
                  operator: "delete"
                })
              ) {
                return false;
              }

              return true;
            });
          }

          return {
            inherits: _pluginSyntaxOptionalChaining().default,
            visitor: {
              "OptionalCallExpression|OptionalMemberExpression": function OptionalCallExpressionOptionalMemberExpression(
                path
              ) {
                if (!path.node.optional) {
                  return;
                }

                optional(path, findReplacementPath(path));
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 980 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("optionalChaining");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 981 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginSyntaxNullishCoalescingOperator() {
          var data = _interopRequireDefault(__webpack_require__(982));

          _pluginSyntaxNullishCoalescingOperator = function _pluginSyntaxNullishCoalescingOperator() {
            return data;
          };

          return data;
        }

        function _core() {
          var data = __webpack_require__(2);

          _core = function _core() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api, _ref) {
          var _ref$loose = _ref.loose,
            loose = _ref$loose === void 0 ? false : _ref$loose;
          api.assertVersion(7);
          return {
            inherits: _pluginSyntaxNullishCoalescingOperator().default,
            visitor: {
              LogicalExpression: function LogicalExpression(path) {
                var node = path.node,
                  scope = path.scope;

                if (node.operator !== "??") {
                  return;
                }

                var ref = scope.generateUidIdentifierBasedOnNode(node.left);
                scope.push({
                  id: ref
                });

                var assignment = _core().types.assignmentExpression(
                  "=",
                  _core().types.cloneNode(ref),
                  node.left
                );

                path.replaceWith(
                  _core().types.conditionalExpression(
                    loose
                      ? _core().types.binaryExpression(
                          "!=",
                          assignment,
                          _core().types.nullLiteral()
                        )
                      : _core().types.logicalExpression(
                          "&&",
                          _core().types.binaryExpression(
                            "!==",
                            assignment,
                            _core().types.nullLiteral()
                          ),
                          _core().types.binaryExpression(
                            "!==",
                            _core().types.cloneNode(ref),
                            scope.buildUndefinedNode()
                          )
                        ),
                    _core().types.cloneNode(ref),
                    node.right
                  )
                );
              }
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 982 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            manipulateOptions: function manipulateOptions(opts, parserOpts) {
              parserOpts.plugins.push("nullishCoalescingOperator");
            }
          };
        });

        exports.default = _default;

        /***/
      },
      /* 983 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginTransformTypescript() {
          var data = _interopRequireDefault(__webpack_require__(230));

          _pluginTransformTypescript = function _pluginTransformTypescript() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            plugins: [_pluginTransformTypescript().default]
          };
        });

        exports.default = _default;

        /***/
      },
      /* 984 */
      /***/ function(module, exports, __webpack_require__) {
        "use strict";

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.default = void 0;

        function _helperPluginUtils() {
          var data = __webpack_require__(1);

          _helperPluginUtils = function _helperPluginUtils() {
            return data;
          };

          return data;
        }

        function _pluginTransformFlowStripTypes() {
          var data = _interopRequireDefault(__webpack_require__(233));

          _pluginTransformFlowStripTypes = function _pluginTransformFlowStripTypes() {
            return data;
          };

          return data;
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule
            ? obj
            : {
                default: obj
              };
        }

        var _default = (0, _helperPluginUtils().declare)(function(api) {
          api.assertVersion(7);
          return {
            plugins: [_pluginTransformFlowStripTypes().default]
          };
        });

        exports.default = _default;

        /***/
      }
      /******/
    ]
  );
});
